
Tourobo2024_Uator-encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003208  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080033d0  080033d0  000043d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e0  080033e0  0000503c  2**0
                  CONTENTS
  4 .ARM          00000008  080033e0  080033e0  000043e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033e8  080033e8  0000503c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e8  080033e8  000043e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033ec  080033ec  000043ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  080033f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000003c  0800342c  0000503c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800342c  00005144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba3c  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0c  00000000  00000000  00010aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  000127b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000907  00000000  00000000  00013370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021db7  00000000  00000000  00013c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6e4  00000000  00000000  00035a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1087  00000000  00000000  00043112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003204  00000000  00000000  001141dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001173e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080033b8 	.word	0x080033b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000040 	.word	0x20000040
 8000204:	080033b8 	.word	0x080033b8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b96a 	b.w	8000d30 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	460c      	mov	r4, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d14e      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a80:	4694      	mov	ip, r2
 8000a82:	458c      	cmp	ip, r1
 8000a84:	4686      	mov	lr, r0
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	d962      	bls.n	8000b52 <__udivmoddi4+0xde>
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	4091      	lsls	r1, r2
 8000a94:	fa20 f303 	lsr.w	r3, r0, r3
 8000a98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa6:	fa1f f68c 	uxth.w	r6, ip
 8000aaa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ab2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb04 f106 	mul.w	r1, r4, r6
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aca:	f080 8112 	bcs.w	8000cf2 <__udivmoddi4+0x27e>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 810f 	bls.w	8000cf2 <__udivmoddi4+0x27e>
 8000ad4:	3c02      	subs	r4, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a59      	subs	r1, r3, r1
 8000ada:	fa1f f38e 	uxth.w	r3, lr
 8000ade:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ae6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aea:	fb00 f606 	mul.w	r6, r0, r6
 8000aee:	429e      	cmp	r6, r3
 8000af0:	d90a      	bls.n	8000b08 <__udivmoddi4+0x94>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afa:	f080 80fc 	bcs.w	8000cf6 <__udivmoddi4+0x282>
 8000afe:	429e      	cmp	r6, r3
 8000b00:	f240 80f9 	bls.w	8000cf6 <__udivmoddi4+0x282>
 8000b04:	4463      	add	r3, ip
 8000b06:	3802      	subs	r0, #2
 8000b08:	1b9b      	subs	r3, r3, r6
 8000b0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b0e:	2100      	movs	r1, #0
 8000b10:	b11d      	cbz	r5, 8000b1a <__udivmoddi4+0xa6>
 8000b12:	40d3      	lsrs	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d905      	bls.n	8000b2e <__udivmoddi4+0xba>
 8000b22:	b10d      	cbz	r5, 8000b28 <__udivmoddi4+0xb4>
 8000b24:	e9c5 0100 	strd	r0, r1, [r5]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e7f5      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b2e:	fab3 f183 	clz	r1, r3
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d146      	bne.n	8000bc4 <__udivmoddi4+0x150>
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xcc>
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	f0c0 80f0 	bcc.w	8000d20 <__udivmoddi4+0x2ac>
 8000b40:	1a86      	subs	r6, r0, r2
 8000b42:	eb64 0303 	sbc.w	r3, r4, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d0e6      	beq.n	8000b1a <__udivmoddi4+0xa6>
 8000b4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b50:	e7e3      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	f040 8090 	bne.w	8000c78 <__udivmoddi4+0x204>
 8000b58:	eba1 040c 	sub.w	r4, r1, ip
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	fa1f f78c 	uxth.w	r7, ip
 8000b64:	2101      	movs	r1, #1
 8000b66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b76:	fb07 f006 	mul.w	r0, r7, r6
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0x11c>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x11a>
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	f200 80cd 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b8e:	4626      	mov	r6, r4
 8000b90:	1a1c      	subs	r4, r3, r0
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba2:	fb00 f707 	mul.w	r7, r0, r7
 8000ba6:	429f      	cmp	r7, r3
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x148>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x146>
 8000bb4:	429f      	cmp	r7, r3
 8000bb6:	f200 80b0 	bhi.w	8000d1a <__udivmoddi4+0x2a6>
 8000bba:	4620      	mov	r0, r4
 8000bbc:	1bdb      	subs	r3, r3, r7
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	e7a5      	b.n	8000b10 <__udivmoddi4+0x9c>
 8000bc4:	f1c1 0620 	rsb	r6, r1, #32
 8000bc8:	408b      	lsls	r3, r1
 8000bca:	fa22 f706 	lsr.w	r7, r2, r6
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bd8:	ea43 030c 	orr.w	r3, r3, ip
 8000bdc:	40f4      	lsrs	r4, r6
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	0c38      	lsrs	r0, r7, #16
 8000be4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000be8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bfc:	45a1      	cmp	r9, r4
 8000bfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x1a6>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c0a:	f080 8084 	bcs.w	8000d16 <__udivmoddi4+0x2a2>
 8000c0e:	45a1      	cmp	r9, r4
 8000c10:	f240 8081 	bls.w	8000d16 <__udivmoddi4+0x2a2>
 8000c14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c18:	443c      	add	r4, r7
 8000c1a:	eba4 0409 	sub.w	r4, r4, r9
 8000c1e:	fa1f f983 	uxth.w	r9, r3
 8000c22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c26:	fb00 4413 	mls	r4, r0, r3, r4
 8000c2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x1d2>
 8000c36:	193c      	adds	r4, r7, r4
 8000c38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c3c:	d267      	bcs.n	8000d0e <__udivmoddi4+0x29a>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0x29a>
 8000c42:	3b02      	subs	r3, #2
 8000c44:	443c      	add	r4, r7
 8000c46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	429c      	cmp	r4, r3
 8000c54:	46ce      	mov	lr, r9
 8000c56:	469c      	mov	ip, r3
 8000c58:	d351      	bcc.n	8000cfe <__udivmoddi4+0x28a>
 8000c5a:	d04e      	beq.n	8000cfa <__udivmoddi4+0x286>
 8000c5c:	b155      	cbz	r5, 8000c74 <__udivmoddi4+0x200>
 8000c5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c62:	eb64 040c 	sbc.w	r4, r4, ip
 8000c66:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6a:	40cb      	lsrs	r3, r1
 8000c6c:	431e      	orrs	r6, r3
 8000c6e:	40cc      	lsrs	r4, r1
 8000c70:	e9c5 6400 	strd	r6, r4, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	e750      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000c78:	f1c2 0320 	rsb	r3, r2, #32
 8000c7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c84:	fa24 f303 	lsr.w	r3, r4, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	430c      	orrs	r4, r1
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca0:	0c23      	lsrs	r3, r4, #16
 8000ca2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca6:	fb00 f107 	mul.w	r1, r0, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x24c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cb6:	d22c      	bcs.n	8000d12 <__udivmoddi4+0x29e>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d92a      	bls.n	8000d12 <__udivmoddi4+0x29e>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb01 f307 	mul.w	r3, r1, r7
 8000cd4:	42a3      	cmp	r3, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x276>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ce0:	d213      	bcs.n	8000d0a <__udivmoddi4+0x296>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d911      	bls.n	8000d0a <__udivmoddi4+0x296>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4464      	add	r4, ip
 8000cea:	1ae4      	subs	r4, r4, r3
 8000cec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf0:	e739      	b.n	8000b66 <__udivmoddi4+0xf2>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	e6f0      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e706      	b.n	8000b08 <__udivmoddi4+0x94>
 8000cfa:	45c8      	cmp	r8, r9
 8000cfc:	d2ae      	bcs.n	8000c5c <__udivmoddi4+0x1e8>
 8000cfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d06:	3801      	subs	r0, #1
 8000d08:	e7a8      	b.n	8000c5c <__udivmoddi4+0x1e8>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7ed      	b.n	8000cea <__udivmoddi4+0x276>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	e799      	b.n	8000c46 <__udivmoddi4+0x1d2>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e7d4      	b.n	8000cc0 <__udivmoddi4+0x24c>
 8000d16:	46d6      	mov	lr, sl
 8000d18:	e77f      	b.n	8000c1a <__udivmoddi4+0x1a6>
 8000d1a:	4463      	add	r3, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	e74d      	b.n	8000bbc <__udivmoddi4+0x148>
 8000d20:	4606      	mov	r6, r0
 8000d22:	4623      	mov	r3, r4
 8000d24:	4608      	mov	r0, r1
 8000d26:	e70f      	b.n	8000b48 <__udivmoddi4+0xd4>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	e730      	b.n	8000b90 <__udivmoddi4+0x11c>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <HAL_GPIO_EXTI_Callback>:
static void MX_GPIO_Init(void);
static void MX_CAN2_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < 4; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e089      	b.n	8000e58 <HAL_GPIO_EXTI_Callback+0x124>
    {
    	for(uint8_t j = 0; j < 2; j++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	73bb      	strb	r3, [r7, #14]
 8000d48:	e07f      	b.n	8000e4a <HAL_GPIO_EXTI_Callback+0x116>
    	{
    		if (GPIO_Pin == encoder_pins[i][j])
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	7bbb      	ldrb	r3, [r7, #14]
 8000d4e:	4946      	ldr	r1, [pc, #280]	@ (8000e68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000d50:	0052      	lsls	r2, r2, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d58:	88fa      	ldrh	r2, [r7, #6]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d172      	bne.n	8000e44 <HAL_GPIO_EXTI_Callback+0x110>
    		{
					int change = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]

					state_curr[i] = (HAL_GPIO_ReadPin(encoder_ports[i][0], encoder_pins[i][0]) << 1) |
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	4a41      	ldr	r2, [pc, #260]	@ (8000e6c <HAL_GPIO_EXTI_Callback+0x138>)
 8000d66:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	493e      	ldr	r1, [pc, #248]	@ (8000e68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000d6e:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8000d72:	4619      	mov	r1, r3
 8000d74:	4610      	mov	r0, r2
 8000d76:	f001 f991 	bl	800209c <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	005c      	lsls	r4, r3, #1
									 HAL_GPIO_ReadPin(encoder_ports[i][1], encoder_pins[i][1]);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4a3a      	ldr	r2, [pc, #232]	@ (8000e6c <HAL_GPIO_EXTI_Callback+0x138>)
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4413      	add	r3, r2
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	4937      	ldr	r1, [pc, #220]	@ (8000e68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	440b      	add	r3, r1
 8000d90:	885b      	ldrh	r3, [r3, #2]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4610      	mov	r0, r2
 8000d96:	f001 f981 	bl	800209c <HAL_GPIO_ReadPin>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
					state_curr[i] = (HAL_GPIO_ReadPin(encoder_ports[i][0], encoder_pins[i][0]) << 1) |
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	4322      	orrs	r2, r4
 8000da2:	4933      	ldr	r1, [pc, #204]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (((state_curr[i] ^ state_prev[i]) != INVALID) && (state_curr[i] != state_prev[i]))
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	4a31      	ldr	r2, [pc, #196]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000dac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	4930      	ldr	r1, [pc, #192]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0x140>)
 8000db4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db8:	4053      	eors	r3, r2
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d027      	beq.n	8000e0e <HAL_GPIO_EXTI_Callback+0xda>
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000dc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	492a      	ldr	r1, [pc, #168]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0x140>)
 8000dca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d01d      	beq.n	8000e0e <HAL_GPIO_EXTI_Callback+0xda>
					{
						change = (state_prev[i] & PREV_MASK) ^ ((state_curr[i] & CURR_MASK) >> 1);
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	4a27      	ldr	r2, [pc, #156]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0x140>)
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	4a24      	ldr	r2, [pc, #144]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	085b      	lsrs	r3, r3, #1
 8000de6:	404b      	eors	r3, r1
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
						if (change == 0)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <HAL_GPIO_EXTI_Callback+0xc6>
						{
							change = -1;
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	60bb      	str	r3, [r7, #8]
						}
						pulse_count[i] -= change;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <HAL_GPIO_EXTI_Callback+0x144>)
 8000dfe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	1a8a      	subs	r2, r1, r2
 8000e08:	491b      	ldr	r1, [pc, #108]	@ (8000e78 <HAL_GPIO_EXTI_Callback+0x144>)
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}
					angle[i] = (360 / PULSE_PER_REV)*pulse_count[i];
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <HAL_GPIO_EXTI_Callback+0x144>)
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	ee07 3a90 	vmov	s15, r3
 8000e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000e7c <HAL_GPIO_EXTI_Callback+0x148>
 8000e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e28:	4a15      	ldr	r2, [pc, #84]	@ (8000e80 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	edc3 7a00 	vstr	s15, [r3]
					state_prev[i] = state_curr[i];
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	490e      	ldr	r1, [pc, #56]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000e38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e3c:	490d      	ldr	r1, [pc, #52]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0x140>)
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					return;
 8000e42:	e00d      	b.n	8000e60 <HAL_GPIO_EXTI_Callback+0x12c>
    	for(uint8_t j = 0; j < 2; j++)
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	3301      	adds	r3, #1
 8000e48:	73bb      	strb	r3, [r7, #14]
 8000e4a:	7bbb      	ldrb	r3, [r7, #14]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	f67f af7c 	bls.w	8000d4a <HAL_GPIO_EXTI_Callback+0x16>
    for (uint8_t i = 0; i < 4; i++)
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	f67f af72 	bls.w	8000d44 <HAL_GPIO_EXTI_Callback+0x10>
    		}
    	}
    }
}
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000020 	.word	0x20000020
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	200000d8 	.word	0x200000d8
 8000e74:	200000c8 	.word	0x200000c8
 8000e78:	200000e8 	.word	0x200000e8
 8000e7c:	3d340000 	.word	0x3d340000
 8000e80:	20000108 	.word	0x20000108
 8000e84:	00000000 	.word	0x00000000

08000e88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b090      	sub	sp, #64	@ 0x40
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

	if(htim == &htim7)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4f      	ldr	r2, [pc, #316]	@ (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	f040 8091 	bne.w	8000fbc <HAL_TIM_PeriodElapsedCallback+0x134>
	{
		for(int i=0; i<4; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e9e:	e052      	b.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0xbe>
		{
			deg_per_second[i] = (angle[i] - prev_angle[i])/DELTA_T;
 8000ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	ed93 7a00 	vldr	s14, [r3]
 8000eac:	4a4a      	ldr	r2, [pc, #296]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ebc:	ee17 0a90 	vmov	r0, s15
 8000ec0:	f7ff fb06 	bl	80004d0 <__aeabi_f2d>
 8000ec4:	a340      	add	r3, pc, #256	@ (adr r3, 8000fc8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fc83 	bl	80007d4 <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fd65 	bl	80009a4 <__aeabi_d2f>
 8000eda:	4602      	mov	r2, r0
 8000edc:	493f      	ldr	r1, [pc, #252]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	601a      	str	r2, [r3, #0]
			prev_angle[i] = angle[i];
 8000ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4939      	ldr	r1, [pc, #228]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	601a      	str	r2, [r3, #0]

			// deg/s to rpm
			rpm_float[i] = deg_per_second[i] * 60 / 360;
 8000efa:	4a38      	ldr	r2, [pc, #224]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000fe0 <HAL_TIM_PeriodElapsedCallback+0x158>
 8000f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f0e:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8000fe4 <HAL_TIM_PeriodElapsedCallback+0x15c>
 8000f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f16:	4a34      	ldr	r2, [pc, #208]	@ (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	edc3 7a00 	vstr	s15, [r3]
			rpm[i] = (int16_t)rpm_float[i];
 8000f22:	4a31      	ldr	r2, [pc, #196]	@ (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	edd3 7a00 	vldr	s15, [r3]
 8000f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f32:	ee17 3a90 	vmov	r3, s15
 8000f36:	b219      	sxth	r1, r3
 8000f38:	4a2c      	ldr	r2, [pc, #176]	@ (8000fec <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0; i<4; i++)
 8000f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f42:	3301      	adds	r3, #1
 8000f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	dda9      	ble.n	8000ea0 <HAL_TIM_PeriodElapsedCallback+0x18>
//			angle_integral[i] += (rpm_buf[i][0] + rpm_buf[i][1]) * 360 / 60 * dt / 2;
		}

		// CAN Transmit
		CAN_TxHeaderTypeDef TxHeader;
		TxHeader.IDE = CAN_ID_STD;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxHeader.RTR = CAN_RTR_DATA;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
		TxHeader.TransmitGlobalTime = DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		TxHeader.StdId = 0x080;
 8000f5a:	2380      	movs	r3, #128	@ 0x80
 8000f5c:	623b      	str	r3, [r7, #32]
		TxHeader.DLC = 8;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	633b      	str	r3, [r7, #48]	@ 0x30

		uint8_t TxData[8];
		for(int i = 0; i < 4; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f66:	e016      	b.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x10e>
				rpm[i] *= 100;
 8000f68:	4a20      	ldr	r2, [pc, #128]	@ (8000fec <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	0091      	lsls	r1, r2, #2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b219      	sxth	r1, r3
 8000f88:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 4; i++) {
 8000f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f92:	3301      	adds	r3, #1
 8000f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	dde5      	ble.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0xe0>
		}
		memcpy(TxData, rpm, 8);
 8000f9c:	4a13      	ldr	r2, [pc, #76]	@ (8000fec <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa6:	e883 0003 	stmia.w	r3, {r0, r1}
		CAN_TxMailBox_TypeDef TxMailBox;
		HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailBox);
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	f107 0218 	add.w	r2, r7, #24
 8000fb2:	f107 0120 	add.w	r1, r7, #32
 8000fb6:	480e      	ldr	r0, [pc, #56]	@ (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000fb8:	f000 fcf9 	bl	80019ae <HAL_CAN_AddTxMessage>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	3740      	adds	r7, #64	@ 0x40
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	47ae147b 	.word	0x47ae147b
 8000fcc:	3f847ae1 	.word	0x3f847ae1
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000108 	.word	0x20000108
 8000fd8:	200000f8 	.word	0x200000f8
 8000fdc:	20000118 	.word	0x20000118
 8000fe0:	42700000 	.word	0x42700000
 8000fe4:	43b40000 	.word	0x43b40000
 8000fe8:	20000128 	.word	0x20000128
 8000fec:	20000138 	.word	0x20000138
 8000ff0:	20000058 	.word	0x20000058

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f000 fb28 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f812 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 f8ee 	bl	80011e0 <MX_GPIO_Init>
  MX_CAN2_Init();
 8001004:	f000 f880 	bl	8001108 <MX_CAN2_Init>
  MX_TIM7_Init();
 8001008:	f000 f8b4 	bl	8001174 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <main+0x28>)
 800100e:	f001 fee3 	bl	8002dd8 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan2);
 8001012:	4803      	ldr	r0, [pc, #12]	@ (8001020 <main+0x2c>)
 8001014:	f000 fc87 	bl	8001926 <HAL_CAN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <main+0x24>
 800101c:	20000080 	.word	0x20000080
 8001020:	20000058 	.word	0x20000058

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	@ 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2234      	movs	r2, #52	@ 0x34
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f002 f994 	bl	8003360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <SystemClock_Config+0xdc>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	4a2b      	ldr	r2, [pc, #172]	@ (8001100 <SystemClock_Config+0xdc>)
 8001052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001056:	6413      	str	r3, [r2, #64]	@ 0x40
 8001058:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <SystemClock_Config+0xdc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <SystemClock_Config+0xe0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <SystemClock_Config+0xe0>)
 800106e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <SystemClock_Config+0xe0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001080:	2301      	movs	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001084:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001088:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001092:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001094:	2304      	movs	r3, #4
 8001096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001098:	23b4      	movs	r3, #180	@ 0xb4
 800109a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800109c:	2302      	movs	r3, #2
 800109e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fba5 	bl	80027fc <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010b8:	f000 f976 	bl	80013a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010bc:	f001 f838 	bl	8002130 <HAL_PWREx_EnableOverDrive>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010c6:	f000 f96f 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2302      	movs	r3, #2
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2105      	movs	r1, #5
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 f871 	bl	80021d0 <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010f4:	f000 f958 	bl	80013a8 <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	@ 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_CAN2_Init+0x64>)
 800110e:	4a18      	ldr	r2, [pc, #96]	@ (8001170 <MX_CAN2_Init+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_CAN2_Init+0x64>)
 8001114:	2203      	movs	r2, #3
 8001116:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_CAN2_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_CAN2_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_CAN2_Init+0x64>)
 8001126:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800112a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_CAN2_Init+0x64>)
 800112e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001132:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <MX_CAN2_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_CAN2_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <MX_CAN2_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_CAN2_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <MX_CAN2_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_CAN2_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_CAN2_Init+0x64>)
 800115a:	f000 fae9 	bl	8001730 <HAL_CAN_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001164:	f000 f920 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000058 	.word	0x20000058
 8001170:	40006800 	.word	0x40006800

08001174 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <MX_TIM7_Init+0x64>)
 8001184:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <MX_TIM7_Init+0x68>)
 8001186:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 900 - 1;
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <MX_TIM7_Init+0x64>)
 800118a:	f240 3283 	movw	r2, #899	@ 0x383
 800118e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_TIM7_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000 - 1;
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_TIM7_Init+0x64>)
 8001198:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800119c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_TIM7_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011a4:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <MX_TIM7_Init+0x64>)
 80011a6:	f001 fdc7 	bl	8002d38 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80011b0:	f000 f8fa 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_TIM7_Init+0x64>)
 80011c2:	f002 f83d 	bl	8003240 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80011cc:	f000 f8ec 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000080 	.word	0x20000080
 80011dc:	40001400 	.word	0x40001400

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b67      	ldr	r3, [pc, #412]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a66      	ldr	r2, [pc, #408]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b64      	ldr	r3, [pc, #400]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b60      	ldr	r3, [pc, #384]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a5f      	ldr	r2, [pc, #380]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b5d      	ldr	r3, [pc, #372]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b59      	ldr	r3, [pc, #356]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a58      	ldr	r2, [pc, #352]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b56      	ldr	r3, [pc, #344]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b52      	ldr	r3, [pc, #328]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a51      	ldr	r2, [pc, #324]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b4f      	ldr	r3, [pc, #316]	@ (8001398 <MX_GPIO_Init+0x1b8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOLV6_Pin|SOLV5_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800126c:	484b      	ldr	r0, [pc, #300]	@ (800139c <MX_GPIO_Init+0x1bc>)
 800126e:	f000 ff2d 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SOLV4_Pin|SOLV3_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	21c0      	movs	r1, #192	@ 0xc0
 8001276:	484a      	ldr	r0, [pc, #296]	@ (80013a0 <MX_GPIO_Init+0x1c0>)
 8001278:	f000 ff28 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SOLV2_Pin|SOLV1_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001282:	4848      	ldr	r0, [pc, #288]	@ (80013a4 <MX_GPIO_Init+0x1c4>)
 8001284:	f000 ff22 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC2A_Pin ENC2B_Pin ENC3A_Pin ENC3B_Pin */
  GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin|ENC3A_Pin|ENC3B_Pin;
 8001288:	230f      	movs	r3, #15
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800128c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4840      	ldr	r0, [pc, #256]	@ (80013a0 <MX_GPIO_Init+0x1c0>)
 800129e:	f000 fd69 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC4A_Pin ENC4B_Pin */
  GPIO_InitStruct.Pin = ENC4A_Pin|ENC4B_Pin;
 80012a2:	23c0      	movs	r3, #192	@ 0xc0
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012a6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	483b      	ldr	r0, [pc, #236]	@ (80013a4 <MX_GPIO_Init+0x1c4>)
 80012b8:	f000 fd5c 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLV6_Pin SOLV5_Pin */
  GPIO_InitStruct.Pin = SOLV6_Pin|SOLV5_Pin;
 80012bc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4831      	ldr	r0, [pc, #196]	@ (800139c <MX_GPIO_Init+0x1bc>)
 80012d6:	f000 fd4d 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLV4_Pin SOLV3_Pin */
  GPIO_InitStruct.Pin = SOLV4_Pin|SOLV3_Pin;
 80012da:	23c0      	movs	r3, #192	@ 0xc0
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	482b      	ldr	r0, [pc, #172]	@ (80013a0 <MX_GPIO_Init+0x1c0>)
 80012f2:	f000 fd3f 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLV2_Pin SOLV1_Pin */
  GPIO_InitStruct.Pin = SOLV2_Pin|SOLV1_Pin;
 80012f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4825      	ldr	r0, [pc, #148]	@ (80013a4 <MX_GPIO_Init+0x1c4>)
 8001310:	f000 fd30 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1A_Pin ENC1B_Pin */
  GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8001314:	2330      	movs	r3, #48	@ 0x30
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001318:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	481c      	ldr	r0, [pc, #112]	@ (800139c <MX_GPIO_Init+0x1bc>)
 800132a:	f000 fd23 	bl	8001d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2101      	movs	r1, #1
 8001332:	2006      	movs	r0, #6
 8001334:	f000 fce7 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001338:	2006      	movs	r0, #6
 800133a:	f000 fd00 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2101      	movs	r1, #1
 8001342:	2007      	movs	r0, #7
 8001344:	f000 fcdf 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001348:	2007      	movs	r0, #7
 800134a:	f000 fcf8 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2101      	movs	r1, #1
 8001352:	2008      	movs	r0, #8
 8001354:	f000 fcd7 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001358:	2008      	movs	r0, #8
 800135a:	f000 fcf0 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2101      	movs	r1, #1
 8001362:	2009      	movs	r0, #9
 8001364:	f000 fccf 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001368:	2009      	movs	r0, #9
 800136a:	f000 fce8 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	200a      	movs	r0, #10
 8001374:	f000 fcc7 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001378:	200a      	movs	r0, #10
 800137a:	f000 fce0 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2101      	movs	r1, #1
 8001382:	2017      	movs	r0, #23
 8001384:	f000 fcbf 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001388:	2017      	movs	r0, #23
 800138a:	f000 fcd8 	bl	8001d3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	@ 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020000 	.word	0x40020000

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <Error_Handler+0x8>

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <HAL_MspInit+0x4c>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <HAL_MspInit+0x4c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <HAL_MspInit+0x4c>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a20      	ldr	r2, [pc, #128]	@ (80014a4 <HAL_CAN_MspInit+0xa0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d13a      	bne.n	800149c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <HAL_CAN_MspInit+0xa4>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	4a1e      	ldr	r2, [pc, #120]	@ (80014a8 <HAL_CAN_MspInit+0xa4>)
 8001430:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001434:	6413      	str	r3, [r2, #64]	@ 0x40
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <HAL_CAN_MspInit+0xa4>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_CAN_MspInit+0xa4>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <HAL_CAN_MspInit+0xa4>)
 800144c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_CAN_MspInit+0xa4>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_CAN_MspInit+0xa4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <HAL_CAN_MspInit+0xa4>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_CAN_MspInit+0xa4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800147a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800148c:	2309      	movs	r3, #9
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <HAL_CAN_MspInit+0xa8>)
 8001498:	f000 fc6c 	bl	8001d74 <HAL_GPIO_Init>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40006800 	.word	0x40006800
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020400 	.word	0x40020400

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	@ (80014f8 <HAL_TIM_Base_MspInit+0x48>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d115      	bne.n	80014ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <HAL_TIM_Base_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <HAL_TIM_Base_MspInit+0x4c>)
 80014cc:	f043 0320 	orr.w	r3, r3, #32
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_TIM_Base_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2037      	movs	r0, #55	@ 0x37
 80014e4:	f000 fc0f 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80014e8:	2037      	movs	r0, #55	@ 0x37
 80014ea:	f000 fc28 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40001400 	.word	0x40001400
 80014fc:	40023800 	.word	0x40023800

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <NMI_Handler+0x4>

08001508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <MemManage_Handler+0x4>

08001518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <UsageFault_Handler+0x4>

08001528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001556:	f000 f8cb 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}

0800155e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2A_Pin);
 8001562:	2001      	movs	r0, #1
 8001564:	f000 fdcc 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2B_Pin);
 8001570:	2002      	movs	r0, #2
 8001572:	f000 fdc5 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}

0800157a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3A_Pin);
 800157e:	2004      	movs	r0, #4
 8001580:	f000 fdbe 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3B_Pin);
 800158c:	2008      	movs	r0, #8
 800158e:	f000 fdb7 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}

08001596 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1A_Pin);
 800159a:	2010      	movs	r0, #16
 800159c:	f000 fdb0 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1B_Pin);
 80015a8:	2020      	movs	r0, #32
 80015aa:	f000 fda9 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC4A_Pin);
 80015ae:	2040      	movs	r0, #64	@ 0x40
 80015b0:	f000 fda6 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC4B_Pin);
 80015b4:	2080      	movs	r0, #128	@ 0x80
 80015b6:	f000 fda3 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <TIM7_IRQHandler+0x10>)
 80015c6:	f001 fc77 	bl	8002eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000080 	.word	0x20000080

080015d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001630 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015fc:	f7ff ffea 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	@ (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	@ (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001626:	f001 fea3 	bl	8003370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff fce3 	bl	8000ff4 <main>
  bx  lr    
 800162e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 800163c:	080033f0 	.word	0x080033f0
  ldr r2, =_sbss
 8001640:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001644:	20000144 	.word	0x20000144

08001648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001650:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <HAL_Init+0x40>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800165a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <HAL_Init+0x40>)
 8001662:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a07      	ldr	r2, [pc, #28]	@ (800168c <HAL_Init+0x40>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001674:	2003      	movs	r0, #3
 8001676:	f000 fb3b 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167a:	200f      	movs	r0, #15
 800167c:	f000 f808 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001680:	f7ff fe98 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023c00 	.word	0x40023c00

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <HAL_InitTick+0x54>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_InitTick+0x58>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fb53 	bl	8001d5a <HAL_SYSTICK_Config>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00e      	b.n	80016dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d80a      	bhi.n	80016da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 fb1b 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4a06      	ldr	r2, [pc, #24]	@ (80016ec <HAL_InitTick+0x5c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000030 	.word	0x20000030
 80016e8:	20000038 	.word	0x20000038
 80016ec:	20000034 	.word	0x20000034

080016f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <HAL_IncTick+0x20>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_IncTick+0x24>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a04      	ldr	r2, [pc, #16]	@ (8001714 <HAL_IncTick+0x24>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000038 	.word	0x20000038
 8001714:	20000140 	.word	0x20000140

08001718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <HAL_GetTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000140 	.word	0x20000140

08001730 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0ed      	b.n	800191e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fe58 	bl	8001404 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001764:	f7ff ffd8 	bl	8001718 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800176a:	e012      	b.n	8001792 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800176c:	f7ff ffd4 	bl	8001718 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d90b      	bls.n	8001792 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2205      	movs	r2, #5
 800178a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0c5      	b.n	800191e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0e5      	beq.n	800176c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0202 	bic.w	r2, r2, #2
 80017ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b0:	f7ff ffb2 	bl	8001718 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017b6:	e012      	b.n	80017de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017b8:	f7ff ffae 	bl	8001718 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b0a      	cmp	r3, #10
 80017c4:	d90b      	bls.n	80017de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2205      	movs	r2, #5
 80017d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e09f      	b.n	800191e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1e5      	bne.n	80017b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7e1b      	ldrb	r3, [r3, #24]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d108      	bne.n	8001806 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	e007      	b.n	8001816 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7e5b      	ldrb	r3, [r3, #25]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d108      	bne.n	8001830 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e007      	b.n	8001840 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800183e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7e9b      	ldrb	r3, [r3, #26]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d108      	bne.n	800185a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0220 	orr.w	r2, r2, #32
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e007      	b.n	800186a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0220 	bic.w	r2, r2, #32
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7edb      	ldrb	r3, [r3, #27]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0210 	bic.w	r2, r2, #16
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e007      	b.n	8001894 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0210 	orr.w	r2, r2, #16
 8001892:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7f1b      	ldrb	r3, [r3, #28]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d108      	bne.n	80018ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0208 	orr.w	r2, r2, #8
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e007      	b.n	80018be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0208 	bic.w	r2, r2, #8
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7f5b      	ldrb	r3, [r3, #29]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d108      	bne.n	80018d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0204 	orr.w	r2, r2, #4
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e007      	b.n	80018e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0204 	bic.w	r2, r2, #4
 80018e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	ea42 0103 	orr.w	r1, r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	1e5a      	subs	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d12e      	bne.n	8001998 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001952:	f7ff fee1 	bl	8001718 <HAL_GetTick>
 8001956:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001958:	e012      	b.n	8001980 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800195a:	f7ff fedd 	bl	8001718 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b0a      	cmp	r3, #10
 8001966:	d90b      	bls.n	8001980 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2205      	movs	r2, #5
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e012      	b.n	80019a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1e5      	bne.n	800195a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e006      	b.n	80019a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
  }
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b089      	sub	sp, #36	@ 0x24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019cc:	7ffb      	ldrb	r3, [r7, #31]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d003      	beq.n	80019da <HAL_CAN_AddTxMessage+0x2c>
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f040 80ad 	bne.w	8001b34 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10a      	bne.n	80019fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8095 	beq.w	8001b24 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	0e1b      	lsrs	r3, r3, #24
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a04:	2201      	movs	r2, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	6809      	ldr	r1, [r1, #0]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3318      	adds	r3, #24
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	440b      	add	r3, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e00f      	b.n	8001a52 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3318      	adds	r3, #24
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	440b      	add	r3, r1
 8001a50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3318      	adds	r3, #24
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	440b      	add	r3, r1
 8001a62:	3304      	adds	r3, #4
 8001a64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	7d1b      	ldrb	r3, [r3, #20]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d111      	bne.n	8001a92 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3318      	adds	r3, #24
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	6811      	ldr	r1, [r2, #0]
 8001a82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3318      	adds	r3, #24
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3304      	adds	r3, #4
 8001a90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3307      	adds	r3, #7
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061a      	lsls	r2, r3, #24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3306      	adds	r3, #6
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3305      	adds	r3, #5
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4313      	orrs	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	3204      	adds	r2, #4
 8001ab2:	7812      	ldrb	r2, [r2, #0]
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6811      	ldr	r1, [r2, #0]
 8001aba:	ea43 0200 	orr.w	r2, r3, r0
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001ac8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3303      	adds	r3, #3
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	061a      	lsls	r2, r3, #24
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	4610      	mov	r0, r2
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	6811      	ldr	r1, [r2, #0]
 8001af0:	ea43 0200 	orr.w	r2, r3, r0
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001afe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3318      	adds	r3, #24
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3318      	adds	r3, #24
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	440b      	add	r3, r1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e00e      	b.n	8001b42 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e006      	b.n	8001b42 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	@ (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	@ (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff29 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff3e 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff8e 	bl	8001c44 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff31 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	@ 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e165      	b.n	800205c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8154 	bne.w	8002056 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d005      	beq.n	8001dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d130      	bne.n	8001e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 0201 	and.w	r2, r3, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d017      	beq.n	8001e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d123      	bne.n	8001eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80ae 	beq.w	8002056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b5d      	ldr	r3, [pc, #372]	@ (8002074 <HAL_GPIO_Init+0x300>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	4a5c      	ldr	r2, [pc, #368]	@ (8002074 <HAL_GPIO_Init+0x300>)
 8001f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002074 <HAL_GPIO_Init+0x300>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f16:	4a58      	ldr	r2, [pc, #352]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800207c <HAL_GPIO_Init+0x308>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d025      	beq.n	8001f8e <HAL_GPIO_Init+0x21a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4e      	ldr	r2, [pc, #312]	@ (8002080 <HAL_GPIO_Init+0x30c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01f      	beq.n	8001f8a <HAL_GPIO_Init+0x216>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8002084 <HAL_GPIO_Init+0x310>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d019      	beq.n	8001f86 <HAL_GPIO_Init+0x212>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	@ (8002088 <HAL_GPIO_Init+0x314>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_GPIO_Init+0x20e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800208c <HAL_GPIO_Init+0x318>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00d      	beq.n	8001f7e <HAL_GPIO_Init+0x20a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4a      	ldr	r2, [pc, #296]	@ (8002090 <HAL_GPIO_Init+0x31c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <HAL_GPIO_Init+0x206>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a49      	ldr	r2, [pc, #292]	@ (8002094 <HAL_GPIO_Init+0x320>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_GPIO_Init+0x202>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e00c      	b.n	8001f90 <HAL_GPIO_Init+0x21c>
 8001f76:	2307      	movs	r3, #7
 8001f78:	e00a      	b.n	8001f90 <HAL_GPIO_Init+0x21c>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e008      	b.n	8001f90 <HAL_GPIO_Init+0x21c>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x21c>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x21c>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x21c>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x21c>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	f002 0203 	and.w	r2, r2, #3
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa0:	4935      	ldr	r1, [pc, #212]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fae:	4b3a      	ldr	r3, [pc, #232]	@ (8002098 <HAL_GPIO_Init+0x324>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd2:	4a31      	ldr	r2, [pc, #196]	@ (8002098 <HAL_GPIO_Init+0x324>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002098 <HAL_GPIO_Init+0x324>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ffc:	4a26      	ldr	r2, [pc, #152]	@ (8002098 <HAL_GPIO_Init+0x324>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002002:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <HAL_GPIO_Init+0x324>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002026:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <HAL_GPIO_Init+0x324>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202c:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <HAL_GPIO_Init+0x324>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002050:	4a11      	ldr	r2, [pc, #68]	@ (8002098 <HAL_GPIO_Init+0x324>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3301      	adds	r3, #1
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	f67f ae96 	bls.w	8001d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40013800 	.word	0x40013800
 800207c:	40020000 	.word	0x40020000
 8002080:	40020400 	.word	0x40020400
 8002084:	40020800 	.word	0x40020800
 8002088:	40020c00 	.word	0x40020c00
 800208c:	40021000 	.word	0x40021000
 8002090:	40021400 	.word	0x40021400
 8002094:	40021800 	.word	0x40021800
 8002098:	40013c00 	.word	0x40013c00

0800209c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	887b      	ldrh	r3, [r7, #2]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e8:	e003      	b.n	80020f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	619a      	str	r2, [r3, #24]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800210a:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fe08 	bl	8000d34 <HAL_GPIO_EXTI_Callback>
  }
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40013c00 	.word	0x40013c00

08002130 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	4a1f      	ldr	r2, [pc, #124]	@ (80021c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	@ 0x40
 800214a:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002156:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800215c:	f7ff fadc 	bl	8001718 <HAL_GetTick>
 8002160:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002162:	e009      	b.n	8002178 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002164:	f7ff fad8 	bl	8001718 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002172:	d901      	bls.n	8002178 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e01f      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002184:	d1ee      	bne.n	8002164 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800218c:	f7ff fac4 	bl	8001718 <HAL_GetTick>
 8002190:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002192:	e009      	b.n	80021a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002194:	f7ff fac0 	bl	8001718 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021a2:	d901      	bls.n	80021a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e007      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021b4:	d1ee      	bne.n	8002194 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	420e0040 	.word	0x420e0040
 80021c8:	40007000 	.word	0x40007000
 80021cc:	420e0044 	.word	0x420e0044

080021d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0cc      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e4:	4b68      	ldr	r3, [pc, #416]	@ (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d90c      	bls.n	800220c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b65      	ldr	r3, [pc, #404]	@ (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b63      	ldr	r3, [pc, #396]	@ (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b8      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002224:	4b59      	ldr	r3, [pc, #356]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a58      	ldr	r2, [pc, #352]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800222e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800223c:	4b53      	ldr	r3, [pc, #332]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a52      	ldr	r2, [pc, #328]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b50      	ldr	r3, [pc, #320]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	494d      	ldr	r1, [pc, #308]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d044      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b47      	ldr	r3, [pc, #284]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d119      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e07f      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d003      	beq.n	800228e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228a:	2b03      	cmp	r3, #3
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	4b3f      	ldr	r3, [pc, #252]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06f      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	4b3b      	ldr	r3, [pc, #236]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e067      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b37      	ldr	r3, [pc, #220]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4934      	ldr	r1, [pc, #208]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c0:	f7ff fa2a 	bl	8001718 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	e00a      	b.n	80022de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7ff fa26 	bl	8001718 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e04f      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 020c 	and.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1eb      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d20c      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b22      	ldr	r3, [pc, #136]	@ (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e032      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4916      	ldr	r1, [pc, #88]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002342:	4b12      	ldr	r3, [pc, #72]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	490e      	ldr	r1, [pc, #56]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002356:	f000 f821 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800235a:	4602      	mov	r2, r0
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	490a      	ldr	r1, [pc, #40]	@ (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a09      	ldr	r2, [pc, #36]	@ (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f98a 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023c00 	.word	0x40023c00
 800238c:	40023800 	.word	0x40023800
 8002390:	080033d0 	.word	0x080033d0
 8002394:	20000030 	.word	0x20000030
 8002398:	20000034 	.word	0x20000034

0800239c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a0:	b0ae      	sub	sp, #184	@ 0xb8
 80023a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c2:	4bcb      	ldr	r3, [pc, #812]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	f200 8206 	bhi.w	80027dc <HAL_RCC_GetSysClockFreq+0x440>
 80023d0:	a201      	add	r2, pc, #4	@ (adr r2, 80023d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	0800240d 	.word	0x0800240d
 80023dc:	080027dd 	.word	0x080027dd
 80023e0:	080027dd 	.word	0x080027dd
 80023e4:	080027dd 	.word	0x080027dd
 80023e8:	08002415 	.word	0x08002415
 80023ec:	080027dd 	.word	0x080027dd
 80023f0:	080027dd 	.word	0x080027dd
 80023f4:	080027dd 	.word	0x080027dd
 80023f8:	0800241d 	.word	0x0800241d
 80023fc:	080027dd 	.word	0x080027dd
 8002400:	080027dd 	.word	0x080027dd
 8002404:	080027dd 	.word	0x080027dd
 8002408:	0800260d 	.word	0x0800260d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4bb9      	ldr	r3, [pc, #740]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800240e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002412:	e1e7      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002414:	4bb8      	ldr	r3, [pc, #736]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002416:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800241a:	e1e3      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241c:	4bb4      	ldr	r3, [pc, #720]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002428:	4bb1      	ldr	r3, [pc, #708]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d071      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002434:	4bae      	ldr	r3, [pc, #696]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	2200      	movs	r2, #0
 800243c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002440:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800245a:	4622      	mov	r2, r4
 800245c:	462b      	mov	r3, r5
 800245e:	f04f 0000 	mov.w	r0, #0
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	0159      	lsls	r1, r3, #5
 8002468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800246c:	0150      	lsls	r0, r2, #5
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4621      	mov	r1, r4
 8002474:	1a51      	subs	r1, r2, r1
 8002476:	6439      	str	r1, [r7, #64]	@ 0x40
 8002478:	4629      	mov	r1, r5
 800247a:	eb63 0301 	sbc.w	r3, r3, r1
 800247e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800248c:	4649      	mov	r1, r9
 800248e:	018b      	lsls	r3, r1, #6
 8002490:	4641      	mov	r1, r8
 8002492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002496:	4641      	mov	r1, r8
 8002498:	018a      	lsls	r2, r1, #6
 800249a:	4641      	mov	r1, r8
 800249c:	1a51      	subs	r1, r2, r1
 800249e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024a0:	4649      	mov	r1, r9
 80024a2:	eb63 0301 	sbc.w	r3, r3, r1
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024b4:	4649      	mov	r1, r9
 80024b6:	00cb      	lsls	r3, r1, #3
 80024b8:	4641      	mov	r1, r8
 80024ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024be:	4641      	mov	r1, r8
 80024c0:	00ca      	lsls	r2, r1, #3
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	4622      	mov	r2, r4
 80024ca:	189b      	adds	r3, r3, r2
 80024cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ce:	462b      	mov	r3, r5
 80024d0:	460a      	mov	r2, r1
 80024d2:	eb42 0303 	adc.w	r3, r2, r3
 80024d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024e4:	4629      	mov	r1, r5
 80024e6:	024b      	lsls	r3, r1, #9
 80024e8:	4621      	mov	r1, r4
 80024ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024ee:	4621      	mov	r1, r4
 80024f0:	024a      	lsls	r2, r1, #9
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002500:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002504:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002508:	f7fe fa9c 	bl	8000a44 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002516:	e067      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002518:	4b75      	ldr	r3, [pc, #468]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	2200      	movs	r2, #0
 8002520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002524:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002528:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002532:	2300      	movs	r3, #0
 8002534:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002536:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800253a:	4622      	mov	r2, r4
 800253c:	462b      	mov	r3, r5
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254c:	0150      	lsls	r0, r2, #5
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4621      	mov	r1, r4
 8002554:	1a51      	subs	r1, r2, r1
 8002556:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002558:	4629      	mov	r1, r5
 800255a:	eb63 0301 	sbc.w	r3, r3, r1
 800255e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800256c:	4649      	mov	r1, r9
 800256e:	018b      	lsls	r3, r1, #6
 8002570:	4641      	mov	r1, r8
 8002572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002576:	4641      	mov	r1, r8
 8002578:	018a      	lsls	r2, r1, #6
 800257a:	4641      	mov	r1, r8
 800257c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002580:	4649      	mov	r1, r9
 8002582:	eb63 0b01 	sbc.w	fp, r3, r1
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002592:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800259a:	4692      	mov	sl, r2
 800259c:	469b      	mov	fp, r3
 800259e:	4623      	mov	r3, r4
 80025a0:	eb1a 0303 	adds.w	r3, sl, r3
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	462b      	mov	r3, r5
 80025a8:	eb4b 0303 	adc.w	r3, fp, r3
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025ba:	4629      	mov	r1, r5
 80025bc:	028b      	lsls	r3, r1, #10
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c4:	4621      	mov	r1, r4
 80025c6:	028a      	lsls	r2, r1, #10
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025d0:	2200      	movs	r2, #0
 80025d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80025d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80025d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025da:	f7fe fa33 	bl	8000a44 <__aeabi_uldivmod>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4613      	mov	r3, r2
 80025e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025e8:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80025fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800260a:	e0eb      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800260c:	4b38      	ldr	r3, [pc, #224]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002614:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002618:	4b35      	ldr	r3, [pc, #212]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d06b      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002624:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	2200      	movs	r2, #0
 800262c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800262e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002630:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002636:	663b      	str	r3, [r7, #96]	@ 0x60
 8002638:	2300      	movs	r3, #0
 800263a:	667b      	str	r3, [r7, #100]	@ 0x64
 800263c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002640:	4622      	mov	r2, r4
 8002642:	462b      	mov	r3, r5
 8002644:	f04f 0000 	mov.w	r0, #0
 8002648:	f04f 0100 	mov.w	r1, #0
 800264c:	0159      	lsls	r1, r3, #5
 800264e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002652:	0150      	lsls	r0, r2, #5
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4621      	mov	r1, r4
 800265a:	1a51      	subs	r1, r2, r1
 800265c:	61b9      	str	r1, [r7, #24]
 800265e:	4629      	mov	r1, r5
 8002660:	eb63 0301 	sbc.w	r3, r3, r1
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002672:	4659      	mov	r1, fp
 8002674:	018b      	lsls	r3, r1, #6
 8002676:	4651      	mov	r1, sl
 8002678:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267c:	4651      	mov	r1, sl
 800267e:	018a      	lsls	r2, r1, #6
 8002680:	4651      	mov	r1, sl
 8002682:	ebb2 0801 	subs.w	r8, r2, r1
 8002686:	4659      	mov	r1, fp
 8002688:	eb63 0901 	sbc.w	r9, r3, r1
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002698:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800269c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026a0:	4690      	mov	r8, r2
 80026a2:	4699      	mov	r9, r3
 80026a4:	4623      	mov	r3, r4
 80026a6:	eb18 0303 	adds.w	r3, r8, r3
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	462b      	mov	r3, r5
 80026ae:	eb49 0303 	adc.w	r3, r9, r3
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026c0:	4629      	mov	r1, r5
 80026c2:	024b      	lsls	r3, r1, #9
 80026c4:	4621      	mov	r1, r4
 80026c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026ca:	4621      	mov	r1, r4
 80026cc:	024a      	lsls	r2, r1, #9
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026d6:	2200      	movs	r2, #0
 80026d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026e0:	f7fe f9b0 	bl	8000a44 <__aeabi_uldivmod>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4613      	mov	r3, r2
 80026ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026ee:	e065      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x420>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fc:	4b3d      	ldr	r3, [pc, #244]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	2200      	movs	r2, #0
 8002704:	4618      	mov	r0, r3
 8002706:	4611      	mov	r1, r2
 8002708:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800270c:	653b      	str	r3, [r7, #80]	@ 0x50
 800270e:	2300      	movs	r3, #0
 8002710:	657b      	str	r3, [r7, #84]	@ 0x54
 8002712:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002716:	4642      	mov	r2, r8
 8002718:	464b      	mov	r3, r9
 800271a:	f04f 0000 	mov.w	r0, #0
 800271e:	f04f 0100 	mov.w	r1, #0
 8002722:	0159      	lsls	r1, r3, #5
 8002724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002728:	0150      	lsls	r0, r2, #5
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4641      	mov	r1, r8
 8002730:	1a51      	subs	r1, r2, r1
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	4649      	mov	r1, r9
 8002736:	eb63 0301 	sbc.w	r3, r3, r1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002748:	4659      	mov	r1, fp
 800274a:	018b      	lsls	r3, r1, #6
 800274c:	4651      	mov	r1, sl
 800274e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002752:	4651      	mov	r1, sl
 8002754:	018a      	lsls	r2, r1, #6
 8002756:	4651      	mov	r1, sl
 8002758:	1a54      	subs	r4, r2, r1
 800275a:	4659      	mov	r1, fp
 800275c:	eb63 0501 	sbc.w	r5, r3, r1
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	00eb      	lsls	r3, r5, #3
 800276a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800276e:	00e2      	lsls	r2, r4, #3
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4643      	mov	r3, r8
 8002776:	18e3      	adds	r3, r4, r3
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	464b      	mov	r3, r9
 800277c:	eb45 0303 	adc.w	r3, r5, r3
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800278e:	4629      	mov	r1, r5
 8002790:	028b      	lsls	r3, r1, #10
 8002792:	4621      	mov	r1, r4
 8002794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002798:	4621      	mov	r1, r4
 800279a:	028a      	lsls	r2, r1, #10
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027a4:	2200      	movs	r2, #0
 80027a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027ae:	f7fe f949 	bl	8000a44 <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4613      	mov	r3, r2
 80027b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027bc:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	0f1b      	lsrs	r3, r3, #28
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80027ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027da:	e003      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	37b8      	adds	r7, #184	@ 0xb8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	00f42400 	.word	0x00f42400

080027fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e28d      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8083 	beq.w	8002922 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800281c:	4b94      	ldr	r3, [pc, #592]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b04      	cmp	r3, #4
 8002826:	d019      	beq.n	800285c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002828:	4b91      	ldr	r3, [pc, #580]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002830:	2b08      	cmp	r3, #8
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002834:	4b8e      	ldr	r3, [pc, #568]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002840:	d00c      	beq.n	800285c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002842:	4b8b      	ldr	r3, [pc, #556]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d112      	bne.n	8002874 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284e:	4b88      	ldr	r3, [pc, #544]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002856:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800285a:	d10b      	bne.n	8002874 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	4b84      	ldr	r3, [pc, #528]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d05b      	beq.n	8002920 <HAL_RCC_OscConfig+0x124>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d157      	bne.n	8002920 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e25a      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287c:	d106      	bne.n	800288c <HAL_RCC_OscConfig+0x90>
 800287e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a7b      	ldr	r2, [pc, #492]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e01d      	b.n	80028c8 <HAL_RCC_OscConfig+0xcc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0xb4>
 8002896:	4b76      	ldr	r3, [pc, #472]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a75      	ldr	r2, [pc, #468]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 800289c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b73      	ldr	r3, [pc, #460]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a72      	ldr	r2, [pc, #456]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0xcc>
 80028b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80028b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80028c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d013      	beq.n	80028f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe ff22 	bl	8001718 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d8:	f7fe ff1e 	bl	8001718 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	@ 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e21f      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	4b61      	ldr	r3, [pc, #388]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0xdc>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe ff0e 	bl	8001718 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002900:	f7fe ff0a 	bl	8001718 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	@ 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e20b      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	4b57      	ldr	r3, [pc, #348]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x104>
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d06f      	beq.n	8002a0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800292e:	4b50      	ldr	r3, [pc, #320]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b00      	cmp	r3, #0
 8002938:	d017      	beq.n	800296a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800293a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002942:	2b08      	cmp	r3, #8
 8002944:	d105      	bne.n	8002952 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002946:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002952:	4b47      	ldr	r3, [pc, #284]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d11c      	bne.n	8002998 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b44      	ldr	r3, [pc, #272]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d116      	bne.n	8002998 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x186>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e1d3      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002982:	4b3b      	ldr	r3, [pc, #236]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4937      	ldr	r1, [pc, #220]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	e03a      	b.n	8002a0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a0:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <HAL_RCC_OscConfig+0x278>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe feb7 	bl	8001718 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ae:	f7fe feb3 	bl	8001718 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e1b4      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4b28      	ldr	r3, [pc, #160]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4925      	ldr	r1, [pc, #148]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]
 80029e0:	e015      	b.n	8002a0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e2:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_RCC_OscConfig+0x278>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fe96 	bl	8001718 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f0:	f7fe fe92 	bl	8001718 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e193      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d036      	beq.n	8002a88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <HAL_RCC_OscConfig+0x27c>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fe76 	bl	8001718 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a30:	f7fe fe72 	bl	8001718 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e173      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x234>
 8002a4e:	e01b      	b.n	8002a88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a50:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <HAL_RCC_OscConfig+0x27c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe fe5f 	bl	8001718 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5c:	e00e      	b.n	8002a7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fe5b 	bl	8001718 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d907      	bls.n	8002a7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e15c      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	42470000 	.word	0x42470000
 8002a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	4b8a      	ldr	r3, [pc, #552]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ea      	bne.n	8002a5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8097 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4b83      	ldr	r3, [pc, #524]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	4a7e      	ldr	r2, [pc, #504]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b79      	ldr	r3, [pc, #484]	@ (8002cac <HAL_RCC_OscConfig+0x4b0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b76      	ldr	r3, [pc, #472]	@ (8002cac <HAL_RCC_OscConfig+0x4b0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a75      	ldr	r2, [pc, #468]	@ (8002cac <HAL_RCC_OscConfig+0x4b0>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fe1b 	bl	8001718 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7fe fe17 	bl	8001718 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e118      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	4b6c      	ldr	r3, [pc, #432]	@ (8002cac <HAL_RCC_OscConfig+0x4b0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x31e>
 8002b0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b10:	4a65      	ldr	r2, [pc, #404]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b18:	e01c      	b.n	8002b54 <HAL_RCC_OscConfig+0x358>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x340>
 8002b22:	4b61      	ldr	r3, [pc, #388]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	4a60      	ldr	r2, [pc, #384]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0x358>
 8002b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b40:	4a59      	ldr	r2, [pc, #356]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b48:	4b57      	ldr	r3, [pc, #348]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4c:	4a56      	ldr	r2, [pc, #344]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d015      	beq.n	8002b88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fddc 	bl	8001718 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe fdd8 	bl	8001718 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0d7      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0ee      	beq.n	8002b64 <HAL_RCC_OscConfig+0x368>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe fdc6 	bl	8001718 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe fdc2 	bl	8001718 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0c1      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	4b40      	ldr	r3, [pc, #256]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ee      	bne.n	8002b90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80ad 	beq.w	8002d28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bce:	4b36      	ldr	r3, [pc, #216]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d060      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d145      	bne.n	8002c6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	4b33      	ldr	r3, [pc, #204]	@ (8002cb0 <HAL_RCC_OscConfig+0x4b4>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fd96 	bl	8001718 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe fd92 	bl	8001718 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e093      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	491b      	ldr	r1, [pc, #108]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <HAL_RCC_OscConfig+0x4b4>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fe fd67 	bl	8001718 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7fe fd63 	bl	8001718 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e064      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x452>
 8002c6c:	e05c      	b.n	8002d28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <HAL_RCC_OscConfig+0x4b4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fd50 	bl	8001718 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe fd4c 	bl	8001718 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e04d      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x480>
 8002c9a:	e045      	b.n	8002d28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e040      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d34 <HAL_RCC_OscConfig+0x538>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d030      	beq.n	8002d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d129      	bne.n	8002d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d122      	bne.n	8002d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d119      	bne.n	8002d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d10f      	bne.n	8002d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e041      	b.n	8002dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe fba6 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f000 f9b6 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d001      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e04e      	b.n	8002e8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a23      	ldr	r2, [pc, #140]	@ (8002e9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d022      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1a:	d01d      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d018      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00e      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002eac <HAL_TIM_Base_Start_IT+0xd4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d009      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a19      	ldr	r2, [pc, #100]	@ (8002eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a18      	ldr	r2, [pc, #96]	@ (8002eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d111      	bne.n	8002e7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d010      	beq.n	8002e8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7a:	e007      	b.n	8002e8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	40010400 	.word	0x40010400
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40001800 	.word	0x40001800

08002eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d020      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01b      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0202 	mvn.w	r2, #2
 8002eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8d2 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8c4 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f8d5 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d020      	beq.n	8002f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01b      	beq.n	8002f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0204 	mvn.w	r2, #4
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f8ac 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f89e 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f8af 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d020      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0208 	mvn.w	r2, #8
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2204      	movs	r2, #4
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f886 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f878 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f889 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d020      	beq.n	8003000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01b      	beq.n	8003000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0210 	mvn.w	r2, #16
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f860 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f852 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f863 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0201 	mvn.w	r2, #1
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd ff32 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f982 	bl	800334c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f834 	bl	80030d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0220 	mvn.w	r2, #32
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f954 	bl	8003338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a46      	ldr	r2, [pc, #280]	@ (8003214 <TIM_Base_SetConfig+0x12c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003106:	d00f      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a43      	ldr	r2, [pc, #268]	@ (8003218 <TIM_Base_SetConfig+0x130>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a42      	ldr	r2, [pc, #264]	@ (800321c <TIM_Base_SetConfig+0x134>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a41      	ldr	r2, [pc, #260]	@ (8003220 <TIM_Base_SetConfig+0x138>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a40      	ldr	r2, [pc, #256]	@ (8003224 <TIM_Base_SetConfig+0x13c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d108      	bne.n	800313a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a35      	ldr	r2, [pc, #212]	@ (8003214 <TIM_Base_SetConfig+0x12c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d02b      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003148:	d027      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a32      	ldr	r2, [pc, #200]	@ (8003218 <TIM_Base_SetConfig+0x130>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d023      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a31      	ldr	r2, [pc, #196]	@ (800321c <TIM_Base_SetConfig+0x134>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01f      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a30      	ldr	r2, [pc, #192]	@ (8003220 <TIM_Base_SetConfig+0x138>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01b      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a2f      	ldr	r2, [pc, #188]	@ (8003224 <TIM_Base_SetConfig+0x13c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d017      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a2e      	ldr	r2, [pc, #184]	@ (8003228 <TIM_Base_SetConfig+0x140>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a2d      	ldr	r2, [pc, #180]	@ (800322c <TIM_Base_SetConfig+0x144>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00f      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a2c      	ldr	r2, [pc, #176]	@ (8003230 <TIM_Base_SetConfig+0x148>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a2b      	ldr	r2, [pc, #172]	@ (8003234 <TIM_Base_SetConfig+0x14c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2a      	ldr	r2, [pc, #168]	@ (8003238 <TIM_Base_SetConfig+0x150>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a29      	ldr	r2, [pc, #164]	@ (800323c <TIM_Base_SetConfig+0x154>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a10      	ldr	r2, [pc, #64]	@ (8003214 <TIM_Base_SetConfig+0x12c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <TIM_Base_SetConfig+0x13c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f023 0201 	bic.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	611a      	str	r2, [r3, #16]
  }
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40010000 	.word	0x40010000
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800
 8003220:	40000c00 	.word	0x40000c00
 8003224:	40010400 	.word	0x40010400
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400
 8003230:	40014800 	.word	0x40014800
 8003234:	40001800 	.word	0x40001800
 8003238:	40001c00 	.word	0x40001c00
 800323c:	40002000 	.word	0x40002000

08003240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003254:	2302      	movs	r3, #2
 8003256:	e05a      	b.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	@ (800331c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a4:	d01d      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003320 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d018      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a18      	ldr	r2, [pc, #96]	@ (800332c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a17      	ldr	r2, [pc, #92]	@ (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a15      	ldr	r2, [pc, #84]	@ (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10c      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40010400 	.word	0x40010400
 8003330:	40014000 	.word	0x40014000
 8003334:	40001800 	.word	0x40001800

08003338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <memset>:
 8003360:	4402      	add	r2, r0
 8003362:	4603      	mov	r3, r0
 8003364:	4293      	cmp	r3, r2
 8003366:	d100      	bne.n	800336a <memset+0xa>
 8003368:	4770      	bx	lr
 800336a:	f803 1b01 	strb.w	r1, [r3], #1
 800336e:	e7f9      	b.n	8003364 <memset+0x4>

08003370 <__libc_init_array>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	4d0d      	ldr	r5, [pc, #52]	@ (80033a8 <__libc_init_array+0x38>)
 8003374:	4c0d      	ldr	r4, [pc, #52]	@ (80033ac <__libc_init_array+0x3c>)
 8003376:	1b64      	subs	r4, r4, r5
 8003378:	10a4      	asrs	r4, r4, #2
 800337a:	2600      	movs	r6, #0
 800337c:	42a6      	cmp	r6, r4
 800337e:	d109      	bne.n	8003394 <__libc_init_array+0x24>
 8003380:	4d0b      	ldr	r5, [pc, #44]	@ (80033b0 <__libc_init_array+0x40>)
 8003382:	4c0c      	ldr	r4, [pc, #48]	@ (80033b4 <__libc_init_array+0x44>)
 8003384:	f000 f818 	bl	80033b8 <_init>
 8003388:	1b64      	subs	r4, r4, r5
 800338a:	10a4      	asrs	r4, r4, #2
 800338c:	2600      	movs	r6, #0
 800338e:	42a6      	cmp	r6, r4
 8003390:	d105      	bne.n	800339e <__libc_init_array+0x2e>
 8003392:	bd70      	pop	{r4, r5, r6, pc}
 8003394:	f855 3b04 	ldr.w	r3, [r5], #4
 8003398:	4798      	blx	r3
 800339a:	3601      	adds	r6, #1
 800339c:	e7ee      	b.n	800337c <__libc_init_array+0xc>
 800339e:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a2:	4798      	blx	r3
 80033a4:	3601      	adds	r6, #1
 80033a6:	e7f2      	b.n	800338e <__libc_init_array+0x1e>
 80033a8:	080033e8 	.word	0x080033e8
 80033ac:	080033e8 	.word	0x080033e8
 80033b0:	080033e8 	.word	0x080033e8
 80033b4:	080033ec 	.word	0x080033ec

080033b8 <_init>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr

080033c4 <_fini>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr
