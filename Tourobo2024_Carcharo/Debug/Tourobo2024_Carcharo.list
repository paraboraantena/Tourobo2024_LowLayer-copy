
Tourobo2024_Carcharo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f60  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023f4  08011160  08011160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013554  08013554  000151c4  2**0
                  CONTENTS
  4 .ARM          00000008  08013554  08013554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801355c  0801355c  000151c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801355c  0801355c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013560  08013560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08013564  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000084  080135e8  00015084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000124  08013688  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d0a4  200001c4  08013728  000151c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000d268  08013728  00015268  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000151c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029516  00000000  00000000  000151f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007248  00000000  00000000  0003e708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002108  00000000  00000000  00045950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001958  00000000  00000000  00047a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037907  00000000  00000000  000493b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000349c9  00000000  00000000  00080cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011dbc8  00000000  00000000  000b5680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d3248  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008efc  00000000  00000000  001d328c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000079  00000000  00000000  001dc188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c4 	.word	0x200001c4
 800021c:	00000000 	.word	0x00000000
 8000220:	08011148 	.word	0x08011148

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001c8 	.word	0x200001c8
 800023c:	08011148 	.word	0x08011148

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80005e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80005f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8000600:	eeb1 7a67 	vneg.f32	s14, s15
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	edd3 7a08 	vldr	s15, [r3, #32]
 800060a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800060e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6a1a      	ldr	r2, [r3, #32]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d006      	beq.n	8000634 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	330c      	adds	r3, #12
 800062a:	220c      	movs	r2, #12
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00f fee5 	bl	80103fe <memset>
  }

}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4a07      	ldr	r2, [pc, #28]	@ (8000668 <vApplicationGetIdleTaskMemory+0x2c>)
 800064c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	4a06      	ldr	r2, [pc, #24]	@ (800066c <vApplicationGetIdleTaskMemory+0x30>)
 8000652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800065a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	200001e0 	.word	0x200001e0
 800066c:	20000234 	.word	0x20000234

08000670 <HAL_CAN_RxFifo0MsgPendingCallback>:

// ロボ�?�ス用構�??体宣�?
RobomasterTypedef Robomaster[4];

// CAN受信コールバック関数
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b09c      	sub	sp, #112	@ 0x70
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan2) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4aa1      	ldr	r2, [pc, #644]	@ (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800067c:	4293      	cmp	r3, r2
 800067e:	f040 81f1 	bne.w	8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>
		CAN_RxHeaderTypeDef RxHeader;
		uint8_t RxData[8];
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000682:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000686:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800068a:	2100      	movs	r1, #0
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f001 fe2c 	bl	80022ea <HAL_CAN_GetRxMessage>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	f040 81e5 	bne.w	8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>
			switch(RxHeader.StdId & 0x7F0) {
 800069a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800069c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80006a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006a4:	f000 816b 	beq.w	800097e <HAL_CAN_RxFifo0MsgPendingCallback+0x30e>
 80006a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006ac:	f200 81d7 	bhi.w	8000a5e <HAL_CAN_RxFifo0MsgPendingCallback+0x3ee>
 80006b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006b4:	f000 8191 	beq.w	80009da <HAL_CAN_RxFifo0MsgPendingCallback+0x36a>
 80006b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006bc:	f040 81cf 	bne.w	8000a5e <HAL_CAN_RxFifo0MsgPendingCallback+0x3ee>
			case 0x200:
				id = RxHeader.StdId - 0x200;
 80006c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006c2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80006c6:	4a8f      	ldr	r2, [pc, #572]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80006c8:	6013      	str	r3, [r2, #0]
				dlc = RxHeader.DLC;
 80006ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006cc:	4a8e      	ldr	r2, [pc, #568]	@ (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80006ce:	6013      	str	r3, [r2, #0]
				for (size_t i = 0; i < 8; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80006d4:	e00c      	b.n	80006f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
					data[i] = RxData[i];
 80006d6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80006da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4a8a      	ldr	r2, [pc, #552]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80006e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (size_t i = 0; i < 8; i++) {
 80006ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006ec:	3301      	adds	r3, #1
 80006ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80006f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d9ef      	bls.n	80006d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
				}

				Robomaster_RxCAN(&Robomaster[id - 1], &RxData[0]);
 80006f6:	4b83      	ldr	r3, [pc, #524]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	1e5a      	subs	r2, r3, #1
 80006fc:	4613      	mov	r3, r2
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	4413      	add	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4a82      	ldr	r2, [pc, #520]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000706:	4413      	add	r3, r2
 8000708:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f00f fcd8 	bl	80100c4 <Robomaster_RxCAN>

				//calc moving average
				mean[id-1].data[mean[id-1].pointer] = (data[2] << 8 | data[3]);
 8000714:	4b7d      	ldr	r3, [pc, #500]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	b29b      	uxth	r3, r3
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b7b      	ldr	r3, [pc, #492]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	b29b      	uxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b29d      	uxth	r5, r3
 8000728:	4b76      	ldr	r3, [pc, #472]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1e5a      	subs	r2, r3, #1
 800072e:	4b75      	ldr	r3, [pc, #468]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	1e59      	subs	r1, r3, #1
 8000734:	4877      	ldr	r0, [pc, #476]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000736:	460b      	mov	r3, r1
 8000738:	015b      	lsls	r3, r3, #5
 800073a:	440b      	add	r3, r1
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4403      	add	r3, r0
 8000740:	3340      	adds	r3, #64	@ 0x40
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461c      	mov	r4, r3
 8000746:	b228      	sxth	r0, r5
 8000748:	4972      	ldr	r1, [pc, #456]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800074a:	4613      	mov	r3, r2
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	4413      	add	r3, r2
 8000750:	4423      	add	r3, r4
 8000752:	4602      	mov	r2, r0
 8000754:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				mean[id-1].pointer = (mean[id-1].pointer==mean[id-1].size-1) ? 0u : mean[id-1].pointer+1;
 8000758:	4b6a      	ldr	r3, [pc, #424]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	496d      	ldr	r1, [pc, #436]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000760:	4613      	mov	r3, r2
 8000762:	015b      	lsls	r3, r3, #5
 8000764:	4413      	add	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	440b      	add	r3, r1
 800076a:	3340      	adds	r3, #64	@ 0x40
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	4b64      	ldr	r3, [pc, #400]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	4967      	ldr	r1, [pc, #412]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000778:	4613      	mov	r3, r2
 800077a:	015b      	lsls	r3, r3, #5
 800077c:	4413      	add	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	440b      	add	r3, r1
 8000782:	3341      	adds	r3, #65	@ 0x41
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4298      	cmp	r0, r3
 800078a:	d00d      	beq.n	80007a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 800078c:	4b5d      	ldr	r3, [pc, #372]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	4960      	ldr	r1, [pc, #384]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000794:	4613      	mov	r3, r2
 8000796:	015b      	lsls	r3, r3, #5
 8000798:	4413      	add	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	440b      	add	r3, r1
 800079e:	3340      	adds	r3, #64	@ 0x40
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	b2d9      	uxtb	r1, r3
 80007a6:	e000      	b.n	80007aa <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 80007a8:	2100      	movs	r1, #0
 80007aa:	4b56      	ldr	r3, [pc, #344]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	1e5a      	subs	r2, r3, #1
 80007b0:	4858      	ldr	r0, [pc, #352]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80007b2:	4613      	mov	r3, r2
 80007b4:	015b      	lsls	r3, r3, #5
 80007b6:	4413      	add	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4403      	add	r3, r0
 80007bc:	3340      	adds	r3, #64	@ 0x40
 80007be:	460a      	mov	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
				Robomaster[id-1].AngularVelocity = 0;
 80007c2:	4b50      	ldr	r3, [pc, #320]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	4951      	ldr	r1, [pc, #324]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	3304      	adds	r3, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	801a      	strh	r2, [r3, #0]
				for(uint8_t i=0u; i<mean[id-1].size; i++){
 80007da:	2300      	movs	r3, #0
 80007dc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80007e0:	e03b      	b.n	800085a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
					Robomaster[id - 1].AngularVelocity += mean[id-1].data[i] / mean[id-1].size;
 80007e2:	4b48      	ldr	r3, [pc, #288]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	1e5a      	subs	r2, r3, #1
 80007e8:	4949      	ldr	r1, [pc, #292]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80007ea:	4613      	mov	r3, r2
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	4413      	add	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	440b      	add	r3, r1
 80007f4:	3304      	adds	r3, #4
 80007f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fa:	b299      	uxth	r1, r3
 80007fc:	4b41      	ldr	r3, [pc, #260]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	f897 006b 	ldrb.w	r0, [r7, #107]	@ 0x6b
 8000806:	4c43      	ldr	r4, [pc, #268]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000808:	4613      	mov	r3, r2
 800080a:	015b      	lsls	r3, r3, #5
 800080c:	4413      	add	r3, r2
 800080e:	4403      	add	r3, r0
 8000810:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8000814:	461c      	mov	r4, r3
 8000816:	4b3b      	ldr	r3, [pc, #236]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1e5a      	subs	r2, r3, #1
 800081c:	483d      	ldr	r0, [pc, #244]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800081e:	4613      	mov	r3, r2
 8000820:	015b      	lsls	r3, r3, #5
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4403      	add	r3, r0
 8000828:	3341      	adds	r3, #65	@ 0x41
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	fb94 f3f3 	sdiv	r3, r4, r3
 8000830:	b29b      	uxth	r3, r3
 8000832:	440b      	add	r3, r1
 8000834:	b299      	uxth	r1, r3
 8000836:	4b33      	ldr	r3, [pc, #204]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	b208      	sxth	r0, r1
 800083e:	4934      	ldr	r1, [pc, #208]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000840:	4613      	mov	r3, r2
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	4413      	add	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	3304      	adds	r3, #4
 800084c:	4602      	mov	r2, r0
 800084e:	801a      	strh	r2, [r3, #0]
				for(uint8_t i=0u; i<mean[id-1].size; i++){
 8000850:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000854:	3301      	adds	r3, #1
 8000856:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800085a:	4b2a      	ldr	r3, [pc, #168]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	492c      	ldr	r1, [pc, #176]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000862:	4613      	mov	r3, r2
 8000864:	015b      	lsls	r3, r3, #5
 8000866:	4413      	add	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	440b      	add	r3, r1
 800086c:	3341      	adds	r3, #65	@ 0x41
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000874:	429a      	cmp	r2, r3
 8000876:	d3b4      	bcc.n	80007e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
				}
				Robomaster[id - 1].AngularVelocity += mean[id-1].size/2;
 8000878:	4b22      	ldr	r3, [pc, #136]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	1e5a      	subs	r2, r3, #1
 800087e:	4924      	ldr	r1, [pc, #144]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000880:	4613      	mov	r3, r2
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	4413      	add	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	440b      	add	r3, r1
 800088a:	3304      	adds	r3, #4
 800088c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000890:	b299      	uxth	r1, r3
 8000892:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	481e      	ldr	r0, [pc, #120]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800089a:	4613      	mov	r3, r2
 800089c:	015b      	lsls	r3, r3, #5
 800089e:	4413      	add	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4403      	add	r3, r0
 80008a4:	3341      	adds	r3, #65	@ 0x41
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	440b      	add	r3, r1
 80008ae:	b299      	uxth	r1, r3
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	b208      	sxth	r0, r1
 80008b8:	4915      	ldr	r1, [pc, #84]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80008ba:	4613      	mov	r3, r2
 80008bc:	011b      	lsls	r3, r3, #4
 80008be:	4413      	add	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	440b      	add	r3, r1
 80008c4:	3304      	adds	r3, #4
 80008c6:	4602      	mov	r2, r0
 80008c8:	801a      	strh	r2, [r3, #0]

				// 送信
				if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2)) {
 80008ca:	480d      	ldr	r0, [pc, #52]	@ (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008cc:	f001 fcd8 	bl	8002280 <HAL_CAN_GetTxMailboxesFreeLevel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 80c5 	beq.w	8000a62 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f2>
					// 送信用構�??体�?????��?��??��?��???��?��??��?��定義
					CAN_TxHeaderTypeDef TxHeader;
					// IDの設????��?��??��?��???��?��??��?��?
					TxHeader.StdId = 0x200;
 80008d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008dc:	61fb      	str	r3, [r7, #28]
					// 標準IDを使用
					TxHeader.IDE = CAN_ID_STD;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
					// ????��?��??��?��???��?��??��?��?ータフレー????��?��??��?��???��?��??��?��? or リモートフレー????��?��??��?��???��?��??��?��?
					TxHeader.RTR = CAN_RTR_DATA;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
					// ????��?��??��?��???��?��??��?��?ータ長????��?��??��?��???��?��??��?��? [byte]
					TxHeader.DLC = 8;
 80008e6:	2308      	movs	r3, #8
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					// タイ????��?��??��?��???��?��??��?��?スタン????��?��??��?��???��?��??��?��?
					TxHeader.TransmitGlobalTime = DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
					// 8byteの送信????��?��??��?��???��?��??��?��?ータ
					uint8_t TxData[8] = { 0 };
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
					for (int i = 0; i < 4; i++) {
 80008f8:	2300      	movs	r3, #0
 80008fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80008fc:	e032      	b.n	8000964 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>
 80008fe:	bf00      	nop
 8000900:	20001234 	.word	0x20001234
 8000904:	20001288 	.word	0x20001288
 8000908:	2000128c 	.word	0x2000128c
 800090c:	20001290 	.word	0x20001290
 8000910:	200013c4 	.word	0x200013c4
 8000914:	200012b0 	.word	0x200012b0
						TxData[2 * i] = Robomaster[i].TargetTorque >> 8;
 8000918:	4959      	ldr	r1, [pc, #356]	@ (8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 800091a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800091c:	4613      	mov	r3, r2
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	4413      	add	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092a:	121b      	asrs	r3, r3, #8
 800092c:	b21a      	sxth	r2, r3
 800092e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	3370      	adds	r3, #112	@ 0x70
 8000936:	443b      	add	r3, r7
 8000938:	f803 2c5c 	strb.w	r2, [r3, #-92]
						TxData[2 * i + 1] = Robomaster[i].TargetTorque & 0x00FF;
 800093c:	4950      	ldr	r1, [pc, #320]	@ (8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 800093e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000940:	4613      	mov	r3, r2
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	440b      	add	r3, r1
 800094a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800094e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	3301      	adds	r3, #1
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	3370      	adds	r3, #112	@ 0x70
 8000958:	443b      	add	r3, r7
 800095a:	f803 2c5c 	strb.w	r2, [r3, #-92]
					for (int i = 0; i < 4; i++) {
 800095e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000960:	3301      	adds	r3, #1
 8000962:	667b      	str	r3, [r7, #100]	@ 0x64
 8000964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000966:	2b03      	cmp	r3, #3
 8000968:	ddd6      	ble.n	8000918 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>
					}
					// 送信に使ったTxMailboxが�?????��?��??��?��???��?��??��?��納される
					uint32_t TxMailbox;
					// メ????��?��??��?��???��?��??��?��?セージ送信
					HAL_CAN_AddTxMessage(&hcan2, &TxHeader, &TxData, &TxMailbox);
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	f107 0214 	add.w	r2, r7, #20
 8000972:	f107 011c 	add.w	r1, r7, #28
 8000976:	4843      	ldr	r0, [pc, #268]	@ (8000a84 <HAL_CAN_RxFifo0MsgPendingCallback+0x414>)
 8000978:	f001 fbb2 	bl	80020e0 <HAL_CAN_AddTxMessage>
				}
				break;
 800097c:	e071      	b.n	8000a62 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f2>
			case 0x400:
				id = RxHeader.StdId - 0x400;
 800097e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000980:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8000984:	4a40      	ldr	r2, [pc, #256]	@ (8000a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x418>)
 8000986:	6013      	str	r3, [r2, #0]
				dlc = RxHeader.DLC;
 8000988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800098a:	4a40      	ldr	r2, [pc, #256]	@ (8000a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x41c>)
 800098c:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 4; i++) {
 800098e:	2300      	movs	r3, #0
 8000990:	663b      	str	r3, [r7, #96]	@ 0x60
 8000992:	e01e      	b.n	80009d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x362>
					int16_t temp;
					memcpy(&temp, &RxData[2 * i], sizeof(int16_t));
 8000994:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800099c:	4413      	add	r3, r2
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	81fb      	strh	r3, [r7, #14]
					Robomaster[i].EncoderAngularVelocity = (float32_t)temp / 100.0;
 80009a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009a8:	ee07 3a90 	vmov	s15, r3
 80009ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009b0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8000a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x420>
 80009b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009b8:	4931      	ldr	r1, [pc, #196]	@ (8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 80009ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80009bc:	4613      	mov	r3, r2
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	4413      	add	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	440b      	add	r3, r1
 80009c6:	3310      	adds	r3, #16
 80009c8:	edc3 7a00 	vstr	s15, [r3]
				for(int i = 0; i < 4; i++) {
 80009cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80009ce:	3301      	adds	r3, #1
 80009d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80009d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	dddd      	ble.n	8000994 <HAL_CAN_RxFifo0MsgPendingCallback+0x324>
				}
				break;
 80009d8:	e044      	b.n	8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>
			case 0x100:
				id = RxHeader.StdId - 0x400;
 80009da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009dc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80009e0:	4a29      	ldr	r2, [pc, #164]	@ (8000a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x418>)
 80009e2:	6013      	str	r3, [r2, #0]
				dlc = RxHeader.DLC;
 80009e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009e6:	4a29      	ldr	r2, [pc, #164]	@ (8000a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x41c>)
 80009e8:	6013      	str	r3, [r2, #0]
				uint16_t adcVal[3];
				memcpy(adcVal, RxData, 3 * sizeof(int16_t));
 80009ea:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80009ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009f2:	2206      	movs	r2, #6
 80009f4:	4618      	mov	r0, r3
 80009f6:	f00f fd78 	bl	80104ea <memcpy>
				// P Gain
				adcGain[0] = 10.0 * adcVal[0] / 4096;
 80009fa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80009fc:	ee07 3a90 	vmov	s15, r3
 8000a00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a04:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000a08:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a0c:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>
 8000a10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a18:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <HAL_CAN_RxFifo0MsgPendingCallback+0x424>)
 8000a1a:	edc3 7a00 	vstr	s15, [r3]
				// I Gain
				adcGain[1] = 1.0 * adcVal[1] / 4096;
 8000a1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a20:	ee07 3a90 	vmov	s15, r3
 8000a24:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a28:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>
 8000a2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_CAN_RxFifo0MsgPendingCallback+0x424>)
 8000a36:	edc3 7a01 	vstr	s15, [r3, #4]
				// D Gain
				adcGain[2] = 0.01 * adcVal[2] / 4096;
 8000a3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a44:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0x408>
 8000a48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a4c:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>
 8000a50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_CAN_RxFifo0MsgPendingCallback+0x424>)
 8000a5a:	edc3 7a02 	vstr	s15, [r3, #8]
			default:
				break;
 8000a5e:	bf00      	nop
 8000a60:	e000      	b.n	8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>
				break;
 8000a62:	bf00      	nop
			}
		}
	}
}
 8000a64:	bf00      	nop
 8000a66:	3770      	adds	r7, #112	@ 0x70
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6c:	f3af 8000 	nop.w
 8000a70:	00000000 	.word	0x00000000
 8000a74:	40b00000 	.word	0x40b00000
 8000a78:	47ae147b 	.word	0x47ae147b
 8000a7c:	3f847ae1 	.word	0x3f847ae1
 8000a80:	200013c4 	.word	0x200013c4
 8000a84:	20001234 	.word	0x20001234
 8000a88:	20001288 	.word	0x20001288
 8000a8c:	2000128c 	.word	0x2000128c
 8000a90:	42c80000 	.word	0x42c80000
 8000a94:	200013b8 	.word	0x200013b8

08000a98 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
//		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
//		}


		}
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f001 f88c 	bl	8001bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f81f 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f000 f8f7 	bl	8000cac <MX_GPIO_Init>
  MX_CAN2_Init();
 8000abe:	f000 f889 	bl	8000bd4 <MX_CAN2_Init>
  MX_CAN3_Init();
 8000ac2:	f000 f8bd 	bl	8000c40 <MX_CAN3_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <main+0x44>)
 8000ac8:	1d3c      	adds	r4, r7, #4
 8000aca:	461d      	mov	r5, r3
 8000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f005 fb70 	bl	80061c2 <osThreadCreate>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4a03      	ldr	r2, [pc, #12]	@ (8000af4 <main+0x48>)
 8000ae6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ae8:	f005 fb54 	bl	8006194 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <main+0x40>
 8000af0:	0801116c 	.word	0x0801116c
 8000af4:	20001284 	.word	0x20001284

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2234      	movs	r2, #52	@ 0x34
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00f fc79 	bl	80103fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bcc <SystemClock_Config+0xd4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	4a2a      	ldr	r2, [pc, #168]	@ (8000bcc <SystemClock_Config+0xd4>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b28:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <SystemClock_Config+0xd4>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b34:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <SystemClock_Config+0xd8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a25      	ldr	r2, [pc, #148]	@ (8000bd0 <SystemClock_Config+0xd8>)
 8000b3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <SystemClock_Config+0xd8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b50:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b64:	23d8      	movs	r3, #216	@ 0xd8
 8000b66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b6c:	2309      	movs	r3, #9
 8000b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fc83 	bl	8004484 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b84:	f000 fc88 	bl	8001498 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b88:	f003 fc2c 	bl	80043e4 <HAL_PWREx_EnableOverDrive>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b92:	f000 fc81 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	230f      	movs	r3, #15
 8000b98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ba6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	2107      	movs	r1, #7
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 ff13 	bl	80049e0 <HAL_RCC_ClockConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000bc0:	f000 fc6a 	bl	8001498 <Error_Handler>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3750      	adds	r7, #80	@ 0x50
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000bda:	4a18      	ldr	r2, [pc, #96]	@ (8000c3c <MX_CAN2_Init+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000be0:	2203      	movs	r2, #3
 8000be2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000bf2:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000bf6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000bfa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000bfe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_CAN2_Init+0x64>)
 8000c26:	f001 f82f 	bl	8001c88 <HAL_CAN_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000c30:	f000 fc32 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20001234 	.word	0x20001234
 8000c3c:	40006800 	.word	0x40006800

08000c40 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c46:	4a18      	ldr	r2, [pc, #96]	@ (8000ca8 <MX_CAN3_Init+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 3;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c5e:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000c62:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c66:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c6a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_CAN3_Init+0x64>)
 8000c92:	f000 fff9 	bl	8001c88 <HAL_CAN_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000c9c:	f000 fbfc 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000125c 	.word	0x2000125c
 8000ca8:	40003400 	.word	0x40003400

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	@ 0x30
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a4e      	ldr	r2, [pc, #312]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b4c      	ldr	r3, [pc, #304]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	61bb      	str	r3, [r7, #24]
 8000cd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cda:	4b49      	ldr	r3, [pc, #292]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a48      	ldr	r2, [pc, #288]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000ce0:	f043 0320 	orr.w	r3, r3, #32
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b46      	ldr	r3, [pc, #280]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0320 	and.w	r3, r3, #32
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	4b43      	ldr	r3, [pc, #268]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a42      	ldr	r2, [pc, #264]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b40      	ldr	r3, [pc, #256]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b3a      	ldr	r3, [pc, #232]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	4b37      	ldr	r3, [pc, #220]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a36      	ldr	r2, [pc, #216]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b34      	ldr	r3, [pc, #208]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a30      	ldr	r2, [pc, #192]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <MX_GPIO_Init+0x154>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000d58:	482a      	ldr	r0, [pc, #168]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000d5a:	f003 fb29 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d5e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d64:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4824      	ldr	r0, [pc, #144]	@ (8000e08 <MX_GPIO_Init+0x15c>)
 8000d76:	f003 f96f 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 PF3 PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000d7a:	231e      	movs	r3, #30
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	481f      	ldr	r0, [pc, #124]	@ (8000e0c <MX_GPIO_Init+0x160>)
 8000d90:	f003 f962 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8000d94:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000da6:	230e      	movs	r3, #14
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4814      	ldr	r0, [pc, #80]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000db2:	f003 f951 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000dd4:	f003 f940 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000dd8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000df2:	f003 f931 	bl	8004058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df6:	bf00      	nop
 8000df8:	3730      	adds	r7, #48	@ 0x30
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40021800 	.word	0x40021800
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40021400 	.word	0x40021400

08000e10 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0c8      	sub	sp, #288	@ 0x120
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e1e:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e20:	f004 faf6 	bl	8005410 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  // 移動平均フィルタ初期化
	for(uint8_t i=0u;i<4;i++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000e2a:	e01a      	b.n	8000e62 <StartDefaultTask+0x52>
		mean[i].size = 8;
 8000e2c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8000e30:	4956      	ldr	r1, [pc, #344]	@ (8000f8c <StartDefaultTask+0x17c>)
 8000e32:	4613      	mov	r3, r2
 8000e34:	015b      	lsls	r3, r3, #5
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	440b      	add	r3, r1
 8000e3c:	3341      	adds	r3, #65	@ 0x41
 8000e3e:	2208      	movs	r2, #8
 8000e40:	701a      	strb	r2, [r3, #0]
		mean[i].pointer = 0u;
 8000e42:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8000e46:	4951      	ldr	r1, [pc, #324]	@ (8000f8c <StartDefaultTask+0x17c>)
 8000e48:	4613      	mov	r3, r2
 8000e4a:	015b      	lsls	r3, r3, #5
 8000e4c:	4413      	add	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	440b      	add	r3, r1
 8000e52:	3340      	adds	r3, #64	@ 0x40
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0u;i<4;i++){
 8000e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d9e0      	bls.n	8000e2c <StartDefaultTask+0x1c>
	uint32_t fid;
	uint32_t fmask;

	/* CAN2 FIFO0 (For Robomaster) */
	// ID and Mask Register
	fid = 0x200;
 8000e6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	fmask = 0x7F0;
 8000e72:	f44f 63fe 	mov.w	r3, #2032	@ 0x7f0
 8000e76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
//	fid = 0x000;
//	fmask = 0x000;
	// CAN2のFilter Bankは14から
	filter.SlaveStartFilterBank = 14;
 8000e7a:	230e      	movs	r3, #14
 8000e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	// Filter Bank 14に設定開�?
	filter.FilterBank = 14;
 8000e80:	230e      	movs	r3, #14
 8000e82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	// For FIFO0
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	// ID and Mask
	filter.FilterIdHigh = fid << 5;
 8000e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000ea2:	015b      	lsls	r3, r3, #5
 8000ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	filter.FilterIdLow = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	filter.FilterMaskIdHigh = fmask << 5;
 8000eae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000eb2:	015b      	lsls	r3, r3, #5
 8000eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	filter.FilterMaskIdLow = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	// Filter適用
	HAL_CAN_ConfigFilter(&hcan2, &filter);
 8000ebe:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4832      	ldr	r0, [pc, #200]	@ (8000f90 <StartDefaultTask+0x180>)
 8000ec6:	f000 ffdb 	bl	8001e80 <HAL_CAN_ConfigFilter>

	/* CAN2 FIFO0 (For Encoder) */
	// ID and Mask Register
	fid = 0x400;
 8000eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ece:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	fmask = 0x7F0;
 8000ed2:	f44f 63fe 	mov.w	r3, #2032	@ 0x7f0
 8000ed6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	// CAN2のFilter Bankは14から
	filter.SlaveStartFilterBank = 14;
 8000eda:	230e      	movs	r3, #14
 8000edc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	// Filter Bank 15に設定開�?
	filter.FilterBank = 15;
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	// For FIFO0
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	// ID and Mask Bit Configure
	filter.FilterIdHigh = fid << 5;
 8000efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f02:	015b      	lsls	r3, r3, #5
 8000f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	filter.FilterIdLow = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	filter.FilterMaskIdHigh = fmask << 5;
 8000f0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000f12:	015b      	lsls	r3, r3, #5
 8000f14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	filter.FilterMaskIdLow = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	// Filter適用
	HAL_CAN_ConfigFilter(&hcan2, &filter);
 8000f1e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000f22:	4619      	mov	r1, r3
 8000f24:	481a      	ldr	r0, [pc, #104]	@ (8000f90 <StartDefaultTask+0x180>)
 8000f26:	f000 ffab 	bl	8001e80 <HAL_CAN_ConfigFilter>

	// CAN2 Start
	HAL_CAN_Start(&hcan2);
 8000f2a:	4819      	ldr	r0, [pc, #100]	@ (8000f90 <StartDefaultTask+0x180>)
 8000f2c:	f001 f894 	bl	8002058 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan3);
 8000f30:	4818      	ldr	r0, [pc, #96]	@ (8000f94 <StartDefaultTask+0x184>)
 8000f32:	f001 f891 	bl	8002058 <HAL_CAN_Start>
	// CAN2 FIFO0 and FIFO1 Enable Interrupt
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f36:	2102      	movs	r1, #2
 8000f38:	4815      	ldr	r0, [pc, #84]	@ (8000f90 <StartDefaultTask+0x180>)
 8000f3a:	f001 faf8 	bl	800252e <HAL_CAN_ActivateNotification>

	// ゲイン設�?
	float32_t Kp = 1.2;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <StartDefaultTask+0x188>)
 8000f40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	float32_t Ki = 0.07;
 8000f44:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <StartDefaultTask+0x18c>)
 8000f46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	float32_t Kd = 0.0002;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <StartDefaultTask+0x190>)
 8000f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	adcGain[0] = Kp;
 8000f50:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <StartDefaultTask+0x194>)
 8000f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000f56:	6013      	str	r3, [r2, #0]
	adcGain[1] = Ki / 4096;
 8000f58:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8000f5c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000fa8 <StartDefaultTask+0x198>
 8000f60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <StartDefaultTask+0x194>)
 8000f66:	edc3 7a01 	vstr	s15, [r3, #4]
	adcGain[2] = Kd;
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <StartDefaultTask+0x194>)
 8000f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f70:	6093      	str	r3, [r2, #8]
	float32_t f_i = 0.0f;	//for feedforwared
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	float32_t f_j = 0.00f;	//for feedforwared
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	for (int i = 0; i < 4; i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000f88:	e053      	b.n	8001032 <StartDefaultTask+0x222>
 8000f8a:	bf00      	nop
 8000f8c:	200012b0 	.word	0x200012b0
 8000f90:	20001234 	.word	0x20001234
 8000f94:	2000125c 	.word	0x2000125c
 8000f98:	3f99999a 	.word	0x3f99999a
 8000f9c:	3d8f5c29 	.word	0x3d8f5c29
 8000fa0:	3951b717 	.word	0x3951b717
 8000fa4:	200013b8 	.word	0x200013b8
 8000fa8:	45800000 	.word	0x45800000
		// Robomaster Initialize
		memset(&Robomaster[i], 0, sizeof(RobomasterTypedef));
 8000fac:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4ab8      	ldr	r2, [pc, #736]	@ (800129c <StartDefaultTask+0x48c>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	2244      	movs	r2, #68	@ 0x44
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00f fa1c 	bl	80103fe <memset>
		// PID Initialize
		Robomaster[i].PID.Kp = Kp;
 8000fc6:	49b5      	ldr	r1, [pc, #724]	@ (800129c <StartDefaultTask+0x48c>)
 8000fc8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000fcc:	4613      	mov	r3, r2
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3338      	adds	r3, #56	@ 0x38
 8000fd8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8000fdc:	601a      	str	r2, [r3, #0]
		Robomaster[i].PID.Ki = Ki;
 8000fde:	49af      	ldr	r1, [pc, #700]	@ (800129c <StartDefaultTask+0x48c>)
 8000fe0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	333c      	adds	r3, #60	@ 0x3c
 8000ff0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8000ff4:	601a      	str	r2, [r3, #0]
		Robomaster[i].PID.Kd = Kd;
 8000ff6:	49a9      	ldr	r1, [pc, #676]	@ (800129c <StartDefaultTask+0x48c>)
 8000ff8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	3340      	adds	r3, #64	@ 0x40
 8001008:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800100c:	601a      	str	r2, [r3, #0]
		arm_pid_init_f32(&Robomaster[i].PID, 1);
 800100e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001012:	4613      	mov	r3, r2
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	3320      	adds	r3, #32
 800101c:	4a9f      	ldr	r2, [pc, #636]	@ (800129c <StartDefaultTask+0x48c>)
 800101e:	4413      	add	r3, r2
 8001020:	2101      	movs	r1, #1
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fad4 	bl	80005d0 <arm_pid_init_f32>
	for (int i = 0; i < 4; i++) {
 8001028:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800102c:	3301      	adds	r3, #1
 800102e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001032:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001036:	2b03      	cmp	r3, #3
 8001038:	ddb8      	ble.n	8000fac <StartDefaultTask+0x19c>
	}

	/* Configure UDP */
	// Data Buffer For UDP
	int16_t rxbuf[16] = { 0 };
 800103a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800103e:	2220      	movs	r2, #32
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f00f f9db 	bl	80103fe <memset>
	int16_t txbuf[16] = { 0 };
 8001048:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800104c:	2220      	movs	r2, #32
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00f f9d4 	bl	80103fe <memset>
	uint8_t data_to_shoki[1] = { 0 };
 8001056:	2300      	movs	r3, #0
 8001058:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
	uint8_t data_to_uator[1] = { 0 };
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
	//アドレスを宣??��?��?
	struct sockaddr_in rxAddr, txAddr;
	//ソケ??��?��?トを作�??
	int socket = lwip_socket(AF_INET, SOCK_DGRAM, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2102      	movs	r1, #2
 8001066:	2002      	movs	r0, #2
 8001068:	f009 fa9e 	bl	800a5a8 <lwip_socket>
 800106c:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
	//アドレスのメモリを確??��?��?
	memset((char*) &txAddr, 0, sizeof(txAddr));
 8001070:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001074:	2210      	movs	r2, #16
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00f f9c0 	bl	80103fe <memset>
	memset((char*) &rxAddr, 0, sizeof(rxAddr));
 800107e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001082:	2210      	movs	r2, #16
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f00f f9b9 	bl	80103fe <memset>
	//アドレスの構�??体�???��?��??��?��?ータを定義
	rxAddr.sin_family = AF_INET; //プロトコルファミリの設??��?��?(IPv4に設??��?��?)
 800108c:	2302      	movs	r3, #2
 800108e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	rxAddr.sin_len = sizeof(rxAddr); //アドレスの??��?��?ータサイズ
 8001092:	2310      	movs	r3, #16
 8001094:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
	rxAddr.sin_addr.s_addr = INADDR_ANY; //アドレスの設??��?��?(今回はすべてのアドレスを受け�???��?��れるためINADDR_ANY)
 8001098:	2300      	movs	r3, #0
 800109a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	rxAddr.sin_port = lwip_htons(PC_PORT); //ポ�???��?��ト�???��?��??��?��???��?��?
 800109c:	f640 70a1 	movw	r0, #4001	@ 0xfa1
 80010a0:	f009 fde6 	bl	800ac70 <lwip_htons>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	txAddr.sin_family = AF_INET; //プロトコルファミリの??��?��???��?��?(IPv4に設??��?��?)
 80010aa:	2302      	movs	r3, #2
 80010ac:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	txAddr.sin_len = sizeof(txAddr); //アドレスの??��?��?ータのサイズ
 80010b0:	2310      	movs	r3, #16
 80010b2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	txAddr.sin_addr.s_addr = inet_addr(PC_ADDR); //アドレスの設??��?��?
 80010b6:	487a      	ldr	r0, [pc, #488]	@ (80012a0 <StartDefaultTask+0x490>)
 80010b8:	f00d fdff 	bl	800ecba <ipaddr_addr>
 80010bc:	4603      	mov	r3, r0
 80010be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	txAddr.sin_port = lwip_htons(PC_PORT); //ポ�???��?��ト�???��?��??��?��???��?��?
 80010c0:	f640 70a1 	movw	r0, #4001	@ 0xfa1
 80010c4:	f009 fdd4 	bl	800ac70 <lwip_htons>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	// whileでbindを�?ってみると?��?まく行く可能性?��?
//	(void) lwip_bind(socket, (struct sockaddr*) &rxAddr, sizeof(rxAddr)); //IPアドレスとソケ??��?��?トを紐付けて受信をできる状態に
	while(lwip_bind(socket, (struct sockaddr*) &rxAddr, sizeof(rxAddr)) < 0) {
 80010ce:	bf00      	nop
 80010d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010d4:	2210      	movs	r2, #16
 80010d6:	4619      	mov	r1, r3
 80010d8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80010dc:	f008 ff86 	bl	8009fec <lwip_bind>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dbf4      	blt.n	80010d0 <StartDefaultTask+0x2c0>

	}
	socklen_t n; //受信した??��?��?ータのサイズ
	socklen_t len = sizeof(rxAddr); //rxAddrのサイズ
 80010e6:	2310      	movs	r3, #16
 80010e8:	647b      	str	r3, [r7, #68]	@ 0x44

	/* Infinite loop */
	for (;;) {
		lwip_sendto(socket, (uint8_t*) txbuf, sizeof(txbuf), 0, (struct sockaddr*) &txAddr, sizeof(txAddr)); //受信したら�???��?��信する
 80010ea:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80010ee:	2310      	movs	r3, #16
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	2220      	movs	r2, #32
 80010fc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8001100:	f009 f99a 	bl	800a438 <lwip_sendto>
		n = lwip_recvfrom(socket, (uint8_t*) rxbuf, sizeof(rxbuf), (int) NULL, (struct sockaddr*) &rxAddr, &len); //受信処??��?��?(blocking)
 8001104:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001108:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	2220      	movs	r2, #32
 8001118:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800111c:	f009 f916 	bl	800a34c <lwip_recvfrom>
 8001120:	4603      	mov	r3, r0
 8001122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

		data_to_shoki[0] = rxbuf[6] << 1;
 8001126:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	@ 0x9c
 800112a:	b2db      	uxtb	r3, r3
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c


		data_to_uator[0] = rxbuf[7] << 4 | rxbuf[4] << 2 | rxbuf[5];
 8001134:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b25a      	sxtb	r2, r3
 800113c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	@ 0x98
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	b25b      	sxtb	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b25a      	sxtb	r2, r3
 8001148:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	@ 0x9a
 800114c:	b25b      	sxtb	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b25b      	sxtb	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

		// send to shoki
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan3)) {
 8001158:	4852      	ldr	r0, [pc, #328]	@ (80012a4 <StartDefaultTask+0x494>)
 800115a:	f001 f891 	bl	8002280 <HAL_CAN_GetTxMailboxesFreeLevel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d014      	beq.n	800118e <StartDefaultTask+0x37e>
			// 送信用構�??体�?????��?��??��?��???��?��??��?��定義
			CAN_TxHeaderTypeDef TxHeader;
			// IDの設????��?��??��?��???��?��??��?��?
			TxHeader.StdId = 0x201;
 8001164:	f240 2301 	movw	r3, #513	@ 0x201
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
			// 標準IDを使用
			TxHeader.IDE = CAN_ID_STD;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34
			// ????��?��??��?��???��?��??��?��?ータフレー????��?��??��?��???��?��??��?��? or リモートフレー????��?��??��?��???��?��??��?��?
			TxHeader.RTR = CAN_RTR_DATA;
 800116e:	2300      	movs	r3, #0
 8001170:	63bb      	str	r3, [r7, #56]	@ 0x38
			// ????��?��??��?��???��?��??��?��?ータ長????��?��??��?��???��?��??��?��? [byte]
			TxHeader.DLC = 8;
 8001172:	2308      	movs	r3, #8
 8001174:	63fb      	str	r3, [r7, #60]	@ 0x3c
			// タイ????��?��??��?��???��?��??��?��?スタン????��?��??��?��???��?��??��?��?
			TxHeader.TransmitGlobalTime = DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

			// 送信に使ったTxMailboxが�?????��?��??��?��???��?��??��?��納される
			uint32_t TxMailbox;
			// メ????��?��??��?��???��?��??��?��?セージ送信
			HAL_CAN_AddTxMessage(&hcan3, &TxHeader, data_to_shoki, &TxMailbox);
 800117c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001180:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001184:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001188:	4846      	ldr	r0, [pc, #280]	@ (80012a4 <StartDefaultTask+0x494>)
 800118a:	f000 ffa9 	bl	80020e0 <HAL_CAN_AddTxMessage>
		}

		// send to uator
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan3)) {
 800118e:	4845      	ldr	r0, [pc, #276]	@ (80012a4 <StartDefaultTask+0x494>)
 8001190:	f001 f876 	bl	8002280 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d027      	beq.n	80011ea <StartDefaultTask+0x3da>
			// 送信用構�??体�?????��?��??��?��???��?��??��?��定義
			CAN_TxHeaderTypeDef TxHeader;
			// IDの設????��?��??��?��???��?��??��?��?
			TxHeader.StdId = 0x401;
 800119a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800119e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011a2:	f240 4201 	movw	r2, #1025	@ 0x401
 80011a6:	601a      	str	r2, [r3, #0]
			// 標準IDを使用
			TxHeader.IDE = CAN_ID_STD;
 80011a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
			// ????��?��??��?��???��?��??��?��?ータフレー????��?��??��?��???��?��??��?��? or リモートフレー????��?��??��?��???��?��??��?��?
			TxHeader.RTR = CAN_RTR_DATA;
 80011b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
			// ????��?��??��?��???��?��??��?��?ータ長????��?��??��?��???��?��??��?��? [byte]
			TxHeader.DLC = 8;
 80011c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011c8:	2208      	movs	r2, #8
 80011ca:	611a      	str	r2, [r3, #16]
			// タイ????��?��??��?��???��?��??��?��?スタン????��?��??��?��???��?��??��?��?
			TxHeader.TransmitGlobalTime = DISABLE;
 80011cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011d4:	2200      	movs	r2, #0
 80011d6:	751a      	strb	r2, [r3, #20]

			// 送信に使ったTxMailboxが�?????��?��??��?��???��?��??��?��納される
			uint32_t TxMailbox;
			// メ????��?��??��?��???��?��??��?��?セージ送信
			HAL_CAN_AddTxMessage(&hcan3, &TxHeader, data_to_uator, &TxMailbox);
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80011e0:	f107 0110 	add.w	r1, r7, #16
 80011e4:	482f      	ldr	r0, [pc, #188]	@ (80012a4 <StartDefaultTask+0x494>)
 80011e6:	f000 ff7b 	bl	80020e0 <HAL_CAN_AddTxMessage>
		}

		// UDPから受け取った足回りデータ
		for(int i = 0; i < 4; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80011f0:	e03f      	b.n	8001272 <StartDefaultTask+0x462>
			// 減速比1:19を考慮
			Robomaster[i].TargetAngularVelocity = (float32_t)rxbuf[i] * 19 / (-100);
 80011f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80011fc:	443b      	add	r3, r7
 80011fe:	f933 3c88 	ldrsh.w	r3, [r3, #-136]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120a:	eeb3 7a03 	vmov.f32	s14, #51	@ 0x41980000  19.0
 800120e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001212:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80012a8 <StartDefaultTask+0x498>
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	4920      	ldr	r1, [pc, #128]	@ (800129c <StartDefaultTask+0x48c>)
 800121c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001220:	4613      	mov	r3, r2
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3314      	adds	r3, #20
 800122c:	edc3 7a00 	vstr	s15, [r3]
//			txbuf[i] = Robomaster[i].AngularVelocity * (-100);
			txbuf[i] = (int16_t)(Robomaster[i].EncoderAngularVelocity * 100);
 8001230:	491a      	ldr	r1, [pc, #104]	@ (800129c <StartDefaultTask+0x48c>)
 8001232:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001236:	4613      	mov	r3, r2
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3310      	adds	r3, #16
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80012ac <StartDefaultTask+0x49c>
 800124a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001252:	ee17 3a90 	vmov	r3, s15
 8001256:	b21a      	sxth	r2, r3
 8001258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001262:	443b      	add	r3, r7
 8001264:	f823 2ca8 	strh.w	r2, [r3, #-168]
		for(int i = 0; i < 4; i++) {
 8001268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800126c:	3301      	adds	r3, #1
 800126e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001276:	2b03      	cmp	r3, #3
 8001278:	ddbb      	ble.n	80011f2 <StartDefaultTask+0x3e2>
		}

		// モーターの速度制御
		Kp = adcGain[0];
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <StartDefaultTask+0x4a0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		Ki = adcGain[1];
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <StartDefaultTask+0x4a0>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
		Kd = adcGain[2];
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <StartDefaultTask+0x4a0>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		for (int i = 0; i < 4; i++) {
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001298:	e0e4      	b.n	8001464 <StartDefaultTask+0x654>
 800129a:	bf00      	nop
 800129c:	200013c4 	.word	0x200013c4
 80012a0:	08011188 	.word	0x08011188
 80012a4:	2000125c 	.word	0x2000125c
 80012a8:	c2c80000 	.word	0xc2c80000
 80012ac:	42c80000 	.word	0x42c80000
 80012b0:	200013b8 	.word	0x200013b8
			if (Robomaster[i].Event == 1) {
 80012b4:	496e      	ldr	r1, [pc, #440]	@ (8001470 <StartDefaultTask+0x660>)
 80012b6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80012ba:	4613      	mov	r3, r2
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	330c      	adds	r3, #12
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 80c6 	bne.w	800145a <StartDefaultTask+0x64a>
				// 誤差e[n]の計�?
				Robomaster[i].AngularVelocityError = Robomaster[i].TargetAngularVelocity - (float32_t)Robomaster[i].EncoderAngularVelocity;
 80012ce:	4968      	ldr	r1, [pc, #416]	@ (8001470 <StartDefaultTask+0x660>)
 80012d0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80012d4:	4613      	mov	r3, r2
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3314      	adds	r3, #20
 80012e0:	ed93 7a00 	vldr	s14, [r3]
 80012e4:	4962      	ldr	r1, [pc, #392]	@ (8001470 <StartDefaultTask+0x660>)
 80012e6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80012ea:	4613      	mov	r3, r2
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	3310      	adds	r3, #16
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012fe:	495c      	ldr	r1, [pc, #368]	@ (8001470 <StartDefaultTask+0x660>)
 8001300:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001304:	4613      	mov	r3, r2
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	331c      	adds	r3, #28
 8001310:	edc3 7a00 	vstr	s15, [r3]
				// PID Controller
//				Robomaster[i].PID.state[2] = 0.0f;
				Robomaster[i].TargetTorque = (int16_t)arm_pid_f32(&Robomaster[i].PID, Robomaster[i].AngularVelocityError) + (f_i+f_j)*Robomaster[i].TargetAngularVelocity - f_i*Robomaster[i].PreTargetAngularVelocity;
 8001314:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001318:	4613      	mov	r3, r2
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	3320      	adds	r3, #32
 8001322:	4a53      	ldr	r2, [pc, #332]	@ (8001470 <StartDefaultTask+0x660>)
 8001324:	1899      	adds	r1, r3, r2
 8001326:	4852      	ldr	r0, [pc, #328]	@ (8001470 <StartDefaultTask+0x660>)
 8001328:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800132c:	4613      	mov	r3, r2
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4403      	add	r3, r0
 8001336:	331c      	adds	r3, #28
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 800133e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001346:	ed93 7a00 	vldr	s14, [r3]
 800134a:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 800134e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001356:	edd3 6a01 	vldr	s13, [r3, #4]
 800135a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800135e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001366:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800136a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800136e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001376:	edd3 7a04 	vldr	s15, [r3, #16]
 800137a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001386:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800138a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138e:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8

    /* Update state */
    S->state[1] = S->state[0];
 8001392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800139c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800139e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80013a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80013a6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80013a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80013ac:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80013b0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80013b2:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80013b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ba:	ee17 3a90 	vmov	r3, s15
 80013be:	b21b      	sxth	r3, r3
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c8:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 80013cc:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80013d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80013d4:	4926      	ldr	r1, [pc, #152]	@ (8001470 <StartDefaultTask+0x660>)
 80013d6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80013da:	4613      	mov	r3, r2
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	3314      	adds	r3, #20
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f2:	491f      	ldr	r1, [pc, #124]	@ (8001470 <StartDefaultTask+0x660>)
 80013f4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80013f8:	4613      	mov	r3, r2
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3318      	adds	r3, #24
 8001404:	edd3 6a00 	vldr	s13, [r3]
 8001408:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 800140c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001418:	ee17 3a90 	vmov	r3, s15
 800141c:	b218      	sxth	r0, r3
 800141e:	4914      	ldr	r1, [pc, #80]	@ (8001470 <StartDefaultTask+0x660>)
 8001420:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001424:	4613      	mov	r3, r2
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	4602      	mov	r2, r0
 8001430:	801a      	strh	r2, [r3, #0]
//				Robomaster[i].TargetTorque = (int16_t)(Robomaster[i].AngularVelocityError * Robomaster[i].PID.Kp);
				Robomaster[i].PreTargetAngularVelocity = Robomaster[i].TargetAngularVelocity;
 8001432:	490f      	ldr	r1, [pc, #60]	@ (8001470 <StartDefaultTask+0x660>)
 8001434:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001438:	4613      	mov	r3, r2
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	3314      	adds	r3, #20
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	480a      	ldr	r0, [pc, #40]	@ (8001470 <StartDefaultTask+0x660>)
 8001448:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800144c:	4613      	mov	r3, r2
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4403      	add	r3, r0
 8001456:	3318      	adds	r3, #24
 8001458:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < 4; i++) {
 800145a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800145e:	3301      	adds	r3, #1
 8001460:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001464:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001468:	2b03      	cmp	r3, #3
 800146a:	f77f af23 	ble.w	80012b4 <StartDefaultTask+0x4a4>
		lwip_sendto(socket, (uint8_t*) txbuf, sizeof(txbuf), 0, (struct sockaddr*) &txAddr, sizeof(txAddr)); //受信したら�???��?��信する
 800146e:	e63c      	b.n	80010ea <StartDefaultTask+0x2da>
 8001470:	200013c4 	.word	0x200013c4

08001474 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001486:	f000 fbaf 	bl	8001be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40002000 	.word	0x40002000

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <Error_Handler+0x8>

080014a4 <HAL_MspInit>:
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	210f      	movs	r1, #15
 80014de:	f06f 0001 	mvn.w	r0, #1
 80014e2:	f001 fb27 	bl	8002b34 <HAL_NVIC_SetPriority>
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_CAN_MspInit>:
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	@ 0x30
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a40      	ldr	r2, [pc, #256]	@ (8001614 <HAL_CAN_MspInit+0x120>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d144      	bne.n	80015a0 <HAL_CAN_MspInit+0xac>
 8001516:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a3f      	ldr	r2, [pc, #252]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 800151c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	4b3a      	ldr	r3, [pc, #232]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a39      	ldr	r2, [pc, #228]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 8001534:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	4b34      	ldr	r3, [pc, #208]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a33      	ldr	r2, [pc, #204]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b31      	ldr	r3, [pc, #196]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	2360      	movs	r3, #96	@ 0x60
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	2302      	movs	r3, #2
 8001564:	623b      	str	r3, [r7, #32]
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
 800156a:	2303      	movs	r3, #3
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800156e:	2309      	movs	r3, #9
 8001570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4828      	ldr	r0, [pc, #160]	@ (800161c <HAL_CAN_MspInit+0x128>)
 800157a:	f002 fd6d 	bl	8004058 <HAL_GPIO_Init>
 800157e:	2200      	movs	r2, #0
 8001580:	2105      	movs	r1, #5
 8001582:	2040      	movs	r0, #64	@ 0x40
 8001584:	f001 fad6 	bl	8002b34 <HAL_NVIC_SetPriority>
 8001588:	2040      	movs	r0, #64	@ 0x40
 800158a:	f001 faef 	bl	8002b6c <HAL_NVIC_EnableIRQ>
 800158e:	2200      	movs	r2, #0
 8001590:	2105      	movs	r1, #5
 8001592:	2041      	movs	r0, #65	@ 0x41
 8001594:	f001 face 	bl	8002b34 <HAL_NVIC_SetPriority>
 8001598:	2041      	movs	r0, #65	@ 0x41
 800159a:	f001 fae7 	bl	8002b6c <HAL_NVIC_EnableIRQ>
 800159e:	e035      	b.n	800160c <HAL_CAN_MspInit+0x118>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <HAL_CAN_MspInit+0x12c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d130      	bne.n	800160c <HAL_CAN_MspInit+0x118>
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 80015b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_CAN_MspInit+0x124>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	2302      	movs	r3, #2
 80015e2:	623b      	str	r3, [r7, #32]
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e8:	2303      	movs	r3, #3
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015ec:	230b      	movs	r3, #11
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	480b      	ldr	r0, [pc, #44]	@ (8001624 <HAL_CAN_MspInit+0x130>)
 80015f8:	f002 fd2e 	bl	8004058 <HAL_GPIO_Init>
 80015fc:	2200      	movs	r2, #0
 80015fe:	2105      	movs	r1, #5
 8001600:	206a      	movs	r0, #106	@ 0x6a
 8001602:	f001 fa97 	bl	8002b34 <HAL_NVIC_SetPriority>
 8001606:	206a      	movs	r0, #106	@ 0x6a
 8001608:	f001 fab0 	bl	8002b6c <HAL_NVIC_EnableIRQ>
 800160c:	bf00      	nop
 800160e:	3730      	adds	r7, #48	@ 0x30
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40006800 	.word	0x40006800
 8001618:	40023800 	.word	0x40023800
 800161c:	40020400 	.word	0x40020400
 8001620:	40003400 	.word	0x40003400
 8001624:	40020000 	.word	0x40020000

08001628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	@ 0x38
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <HAL_InitTick+0xe0>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a32      	ldr	r2, [pc, #200]	@ (8001708 <HAL_InitTick+0xe0>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b30      	ldr	r3, [pc, #192]	@ (8001708 <HAL_InitTick+0xe0>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001650:	f107 0210 	add.w	r2, r7, #16
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fbd2 	bl	8004e04 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800166a:	f003 fbb7 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 800166e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001670:	e004      	b.n	800167c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001672:	f003 fbb3 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 8001676:	4603      	mov	r3, r0
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800167c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800167e:	4a23      	ldr	r2, [pc, #140]	@ (800170c <HAL_InitTick+0xe4>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	0c9b      	lsrs	r3, r3, #18
 8001686:	3b01      	subs	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <HAL_InitTick+0xe8>)
 800168c:	4a21      	ldr	r2, [pc, #132]	@ (8001714 <HAL_InitTick+0xec>)
 800168e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001690:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <HAL_InitTick+0xe8>)
 8001692:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001696:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001698:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <HAL_InitTick+0xe8>)
 800169a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <HAL_InitTick+0xe8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <HAL_InitTick+0xe8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <HAL_InitTick+0xe8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80016b0:	4817      	ldr	r0, [pc, #92]	@ (8001710 <HAL_InitTick+0xe8>)
 80016b2:	f003 fbd9 	bl	8004e68 <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11b      	bne.n	80016fc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80016c4:	4812      	ldr	r0, [pc, #72]	@ (8001710 <HAL_InitTick+0xe8>)
 80016c6:	f003 fc31 	bl	8004f2c <HAL_TIM_Base_Start_IT>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d111      	bne.n	80016fc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80016d8:	202d      	movs	r0, #45	@ 0x2d
 80016da:	f001 fa47 	bl	8002b6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d808      	bhi.n	80016f6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	202d      	movs	r0, #45	@ 0x2d
 80016ea:	f001 fa23 	bl	8002b34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_InitTick+0xf0>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e002      	b.n	80016fc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001700:	4618      	mov	r0, r3
 8001702:	3738      	adds	r7, #56	@ 0x38
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	431bde83 	.word	0x431bde83
 8001710:	200014d4 	.word	0x200014d4
 8001714:	40002000 	.word	0x40002000
 8001718:	20000004 	.word	0x20000004

0800171c <NMI_Handler>:
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <NMI_Handler+0x4>

08001724 <HardFault_Handler>:
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <MemManage_Handler+0x4>

08001734 <BusFault_Handler>:
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <UsageFault_Handler+0x4>

08001744 <DebugMon_Handler>:
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <TIM8_TRG_COM_TIM14_IRQHandler>:
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800175a:	f003 fc5f 	bl	800501c <HAL_TIM_IRQHandler>
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200014d4 	.word	0x200014d4

08001768 <ETH_IRQHandler>:
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <ETH_IRQHandler+0x10>)
 800176e:	f001 fd99 	bl	80032a4 <HAL_ETH_IRQHandler>
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20005f08 	.word	0x20005f08

0800177c <CAN2_RX0_IRQHandler>:
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <CAN2_RX0_IRQHandler+0x10>)
 8001782:	f000 fefa 	bl	800257a <HAL_CAN_IRQHandler>
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20001234 	.word	0x20001234

08001790 <CAN2_RX1_IRQHandler>:
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <CAN2_RX1_IRQHandler+0x10>)
 8001796:	f000 fef0 	bl	800257a <HAL_CAN_IRQHandler>
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20001234 	.word	0x20001234

080017a4 <CAN3_RX1_IRQHandler>:
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <CAN3_RX1_IRQHandler+0x10>)
 80017aa:	f000 fee6 	bl	800257a <HAL_CAN_IRQHandler>
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000125c 	.word	0x2000125c

080017b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return 1;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_kill>:

int _kill(int pid, int sig)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017d2:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <_kill+0x20>)
 80017d4:	2216      	movs	r2, #22
 80017d6:	601a      	str	r2, [r3, #0]
  return -1;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	2000d118 	.word	0x2000d118

080017ec <_exit>:

void _exit (int status)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffe5 	bl	80017c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017fe:	bf00      	nop
 8001800:	e7fd      	b.n	80017fe <_exit+0x12>

08001802 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e00a      	b.n	800182a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001814:	f3af 8000 	nop.w
 8001818:	4601      	mov	r1, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	60ba      	str	r2, [r7, #8]
 8001820:	b2ca      	uxtb	r2, r1
 8001822:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	dbf0      	blt.n	8001814 <_read+0x12>
  }

  return len;
 8001832:	687b      	ldr	r3, [r7, #4]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e009      	b.n	8001862 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	60ba      	str	r2, [r7, #8]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	dbf1      	blt.n	800184e <_write+0x12>
  }
  return len;
 800186a:	687b      	ldr	r3, [r7, #4]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_close>:

int _close(int file)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800189c:	605a      	str	r2, [r3, #4]
  return 0;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_isatty>:

int _isatty(int file)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e4:	4a14      	ldr	r2, [pc, #80]	@ (8001938 <_sbrk+0x5c>)
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <_sbrk+0x60>)
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f0:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <_sbrk+0x64>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	@ (8001944 <_sbrk+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	429a      	cmp	r2, r3
 800190a:	d205      	bcs.n	8001918 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800190c:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <_sbrk+0x6c>)
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a06      	ldr	r2, [pc, #24]	@ (8001940 <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20080000 	.word	0x20080000
 800193c:	00000400 	.word	0x00000400
 8001940:	20001520 	.word	0x20001520
 8001944:	2000d268 	.word	0x2000d268
 8001948:	2000d118 	.word	0x2000d118

0800194c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001974:	480d      	ldr	r0, [pc, #52]	@ (80019ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001976:	490e      	ldr	r1, [pc, #56]	@ (80019b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001978:	4a0e      	ldr	r2, [pc, #56]	@ (80019b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0b      	ldr	r2, [pc, #44]	@ (80019b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800198c:	4c0b      	ldr	r4, [pc, #44]	@ (80019bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800199a:	f7ff ffd7 	bl	800194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f00e fd7d 	bl	801049c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7ff f883 	bl	8000aac <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80019b4:	08013564 	.word	0x08013564
  ldr r2, =_sbss
 80019b8:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80019bc:	2000d268 	.word	0x2000d268

080019c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC_IRQHandler>

080019c2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <LAN8742_RegisterBusIO+0x28>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <LAN8742_RegisterBusIO+0x28>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <LAN8742_RegisterBusIO+0x28>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e014      	b.n	8001a1a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d139      	bne.n	8001ab6 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e01c      	b.n	8001a96 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	2112      	movs	r1, #18
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	4798      	blx	r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	da03      	bge.n	8001a78 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001a70:	f06f 0304 	mvn.w	r3, #4
 8001a74:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001a76:	e00b      	b.n	8001a90 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d105      	bne.n	8001a90 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
         break;
 8001a8e:	e005      	b.n	8001a9c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b1f      	cmp	r3, #31
 8001a9a:	d9df      	bls.n	8001a5c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b1f      	cmp	r3, #31
 8001aa2:	d902      	bls.n	8001aaa <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001aa4:	f06f 0302 	mvn.w	r3, #2
 8001aa8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 }
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6810      	ldr	r0, [r2, #0]
 8001ad4:	f107 020c 	add.w	r2, r7, #12
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4798      	blx	r3
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da02      	bge.n	8001ae8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ae2:	f06f 0304 	mvn.w	r3, #4
 8001ae6:	e06e      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6810      	ldr	r0, [r2, #0]
 8001af0:	f107 020c 	add.w	r2, r7, #12
 8001af4:	2101      	movs	r1, #1
 8001af6:	4798      	blx	r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	da02      	bge.n	8001b04 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001afe:	f06f 0304 	mvn.w	r3, #4
 8001b02:	e060      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e059      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6810      	ldr	r0, [r2, #0]
 8001b1a:	f107 020c 	add.w	r2, r7, #12
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4798      	blx	r3
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da02      	bge.n	8001b2e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b28:	f06f 0304 	mvn.w	r3, #4
 8001b2c:	e04b      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d11b      	bne.n	8001b70 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d006      	beq.n	8001b50 <LAN8742_GetLinkState+0x90>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e03a      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e033      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	e02c      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	e02a      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6810      	ldr	r0, [r2, #0]
 8001b78:	f107 020c 	add.w	r2, r7, #12
 8001b7c:	211f      	movs	r1, #31
 8001b7e:	4798      	blx	r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da02      	bge.n	8001b8c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001b86:	f06f 0304 	mvn.w	r3, #4
 8001b8a:	e01c      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001b96:	2306      	movs	r3, #6
 8001b98:	e015      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f003 031c 	and.w	r3, r3, #28
 8001ba0:	2b18      	cmp	r3, #24
 8001ba2:	d101      	bne.n	8001ba8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e00e      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 031c 	and.w	r3, r3, #28
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d101      	bne.n	8001bb6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e007      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 031c 	and.w	r3, r3, #28
 8001bbc:	2b14      	cmp	r3, #20
 8001bbe:	d101      	bne.n	8001bc4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	e000      	b.n	8001bc6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bc4:	2305      	movs	r3, #5
    }
  }
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f000 ffa3 	bl	8002b1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd8:	200f      	movs	r0, #15
 8001bda:	f7ff fd25 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bde:	f7ff fc61 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20001524 	.word	0x20001524

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20001524 	.word	0x20001524

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008

08001c70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_GetREVID+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0c1b      	lsrs	r3, r3, #16
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e0042000 	.word	0xe0042000

08001c88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0ed      	b.n	8001e76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fc24 	bl	80014f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cbc:	f7ff ffa8 	bl	8001c10 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cc2:	e012      	b.n	8001cea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc4:	f7ff ffa4 	bl	8001c10 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b0a      	cmp	r3, #10
 8001cd0:	d90b      	bls.n	8001cea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e0c5      	b.n	8001e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0e5      	beq.n	8001cc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0202 	bic.w	r2, r2, #2
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d08:	f7ff ff82 	bl	8001c10 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d0e:	e012      	b.n	8001d36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d10:	f7ff ff7e 	bl	8001c10 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b0a      	cmp	r3, #10
 8001d1c:	d90b      	bls.n	8001d36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e09f      	b.n	8001e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e5      	bne.n	8001d10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7e1b      	ldrb	r3, [r3, #24]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d108      	bne.n	8001d5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e007      	b.n	8001d6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7e5b      	ldrb	r3, [r3, #25]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e007      	b.n	8001d98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7e9b      	ldrb	r3, [r3, #26]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d108      	bne.n	8001db2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0220 	orr.w	r2, r2, #32
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e007      	b.n	8001dc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0220 	bic.w	r2, r2, #32
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7edb      	ldrb	r3, [r3, #27]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d108      	bne.n	8001ddc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0210 	bic.w	r2, r2, #16
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e007      	b.n	8001dec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0210 	orr.w	r2, r2, #16
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7f1b      	ldrb	r3, [r3, #28]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d108      	bne.n	8001e06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0208 	orr.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e007      	b.n	8001e16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7f5b      	ldrb	r3, [r3, #29]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0204 	orr.w	r2, r2, #4
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e007      	b.n	8001e40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0204 	bic.w	r2, r2, #4
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	ea42 0103 	orr.w	r1, r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e96:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d003      	beq.n	8001ea6 <HAL_CAN_ConfigFilter+0x26>
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	f040 80c7 	bne.w	8002034 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a69      	ldr	r2, [pc, #420]	@ (8002050 <HAL_CAN_ConfigFilter+0x1d0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d001      	beq.n	8001eb4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001eb0:	4b68      	ldr	r3, [pc, #416]	@ (8002054 <HAL_CAN_ConfigFilter+0x1d4>)
 8001eb2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	4a63      	ldr	r2, [pc, #396]	@ (8002054 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d111      	bne.n	8001ef0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ed2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	2201      	movs	r2, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d123      	bne.n	8001f62 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	401a      	ands	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f3c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3248      	adds	r2, #72	@ 0x48
 8001f42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f58:	6979      	ldr	r1, [r7, #20]
 8001f5a:	3348      	adds	r3, #72	@ 0x48
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d122      	bne.n	8001fb0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f8a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	3248      	adds	r2, #72	@ 0x48
 8001f90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fa4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fa6:	6979      	ldr	r1, [r7, #20]
 8001fa8:	3348      	adds	r3, #72	@ 0x48
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001fca:	e007      	b.n	8001fdc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001ff6:	e007      	b.n	8002008 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d107      	bne.n	8002020 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002026:	f023 0201 	bic.w	r2, r3, #1
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	e006      	b.n	8002042 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40003400 	.word	0x40003400
 8002054:	40006400 	.word	0x40006400

08002058 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d12e      	bne.n	80020ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002084:	f7ff fdc4 	bl	8001c10 <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800208a:	e012      	b.n	80020b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800208c:	f7ff fdc0 	bl	8001c10 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b0a      	cmp	r3, #10
 8002098:	d90b      	bls.n	80020b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2205      	movs	r2, #5
 80020aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e012      	b.n	80020d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e5      	bne.n	800208c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e006      	b.n	80020d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020fe:	7ffb      	ldrb	r3, [r7, #31]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d003      	beq.n	800210c <HAL_CAN_AddTxMessage+0x2c>
 8002104:	7ffb      	ldrb	r3, [r7, #31]
 8002106:	2b02      	cmp	r3, #2
 8002108:	f040 80ad 	bne.w	8002266 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8095 	beq.w	8002256 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	0e1b      	lsrs	r3, r3, #24
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002136:	2201      	movs	r2, #1
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	6809      	ldr	r1, [r1, #0]
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3318      	adds	r3, #24
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	440b      	add	r3, r1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e00f      	b.n	8002184 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800216e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002178:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3318      	adds	r3, #24
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	440b      	add	r3, r1
 8002182:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6819      	ldr	r1, [r3, #0]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3318      	adds	r3, #24
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	440b      	add	r3, r1
 8002194:	3304      	adds	r3, #4
 8002196:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	7d1b      	ldrb	r3, [r3, #20]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d111      	bne.n	80021c4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3318      	adds	r3, #24
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	6811      	ldr	r1, [r2, #0]
 80021b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3318      	adds	r3, #24
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	440b      	add	r3, r1
 80021c0:	3304      	adds	r3, #4
 80021c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3307      	adds	r3, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	061a      	lsls	r2, r3, #24
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3306      	adds	r3, #6
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3305      	adds	r3, #5
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	4313      	orrs	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	3204      	adds	r2, #4
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	4610      	mov	r0, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	6811      	ldr	r1, [r2, #0]
 80021ec:	ea43 0200 	orr.w	r2, r3, r0
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	440b      	add	r3, r1
 80021f6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80021fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3303      	adds	r3, #3
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	061a      	lsls	r2, r3, #24
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3302      	adds	r3, #2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3301      	adds	r3, #1
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	4313      	orrs	r3, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	4610      	mov	r0, r2
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	6811      	ldr	r1, [r2, #0]
 8002222:	ea43 0200 	orr.w	r2, r3, r0
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	440b      	add	r3, r1
 800222c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002230:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3318      	adds	r3, #24
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	4413      	add	r3, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3318      	adds	r3, #24
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	440b      	add	r3, r1
 8002250:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e00e      	b.n	8002274 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e006      	b.n	8002274 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
  }
}
 8002274:	4618      	mov	r0, r3
 8002276:	3724      	adds	r7, #36	@ 0x24
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002292:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d002      	beq.n	80022a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d11d      	bne.n	80022dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3301      	adds	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80022dc:	68fb      	ldr	r3, [r7, #12]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022ea:	b480      	push	{r7}
 80022ec:	b087      	sub	sp, #28
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d003      	beq.n	800230e <HAL_CAN_GetRxMessage+0x24>
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	2b02      	cmp	r3, #2
 800230a:	f040 8103 	bne.w	8002514 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10e      	bne.n	8002332 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0f7      	b.n	8002522 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0e8      	b.n	8002522 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	331b      	adds	r3, #27
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0204 	and.w	r2, r3, #4
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	331b      	adds	r3, #27
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	4413      	add	r3, r2
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0d5b      	lsrs	r3, r3, #21
 800237e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	331b      	adds	r3, #27
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	08db      	lsrs	r3, r3, #3
 8002398:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	331b      	adds	r3, #27
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0202 	and.w	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	331b      	adds	r3, #27
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	4413      	add	r3, r2
 80023c2:	3304      	adds	r3, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2208      	movs	r2, #8
 80023d2:	611a      	str	r2, [r3, #16]
 80023d4:	e00b      	b.n	80023ee <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	331b      	adds	r3, #27
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	4413      	add	r3, r2
 80023e2:	3304      	adds	r3, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 020f 	and.w	r2, r3, #15
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	331b      	adds	r3, #27
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4413      	add	r3, r2
 80023fa:	3304      	adds	r3, #4
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	b2da      	uxtb	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	331b      	adds	r3, #27
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	3304      	adds	r3, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	b29a      	uxth	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	4413      	add	r3, r2
 8002428:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0a1a      	lsrs	r2, r3, #8
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	4413      	add	r3, r2
 8002458:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0c1a      	lsrs	r2, r3, #16
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	3302      	adds	r3, #2
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e1a      	lsrs	r2, r3, #24
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3303      	adds	r3, #3
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4413      	add	r3, r2
 800248c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	3304      	adds	r3, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0a1a      	lsrs	r2, r3, #8
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3305      	adds	r3, #5
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	4413      	add	r3, r2
 80024be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0c1a      	lsrs	r2, r3, #16
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	3306      	adds	r3, #6
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0e1a      	lsrs	r2, r3, #24
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	3307      	adds	r3, #7
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d108      	bne.n	8002500 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0220 	orr.w	r2, r2, #32
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	e007      	b.n	8002510 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0220 	orr.w	r2, r2, #32
 800250e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e006      	b.n	8002522 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
  }
}
 8002522:	4618      	mov	r0, r3
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800252e:	b480      	push	{r7}
 8002530:	b085      	sub	sp, #20
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d002      	beq.n	800254c <HAL_CAN_ActivateNotification+0x1e>
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d109      	bne.n	8002560 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6959      	ldr	r1, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	e006      	b.n	800256e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
  }
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b08a      	sub	sp, #40	@ 0x28
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d07c      	beq.n	80026ba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d023      	beq.n	8002612 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f983 	bl	80028e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80025e2:	e016      	b.n	8002612 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f6:	e00c      	b.n	8002612 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
 800260a:	e002      	b.n	8002612 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f989 	bl	8002924 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d024      	beq.n	8002666 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002624:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f963 	bl	80028fc <HAL_CAN_TxMailbox1CompleteCallback>
 8002636:	e016      	b.n	8002666 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
 800264a:	e00c      	b.n	8002666 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
 800265e:	e002      	b.n	8002666 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f969 	bl	8002938 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d024      	beq.n	80026ba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002678:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f943 	bl	8002910 <HAL_CAN_TxMailbox2CompleteCallback>
 800268a:	e016      	b.n	80026ba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
 800269e:	e00c      	b.n	80026ba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d004      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b2:	e002      	b.n	80026ba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f949 	bl	800294c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00c      	beq.n	80026de <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2210      	movs	r2, #16
 80026dc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2208      	movs	r2, #8
 80026f8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f930 	bl	8002960 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7fd ffa9 	bl	8000670 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00c      	beq.n	8002742 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2210      	movs	r2, #16
 8002740:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2208      	movs	r2, #8
 800275c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f908 	bl	8002974 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7fe f98b 	bl	8000a98 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2210      	movs	r2, #16
 800279c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f8f2 	bl	8002988 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2208      	movs	r2, #8
 80027be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f8eb 	bl	800299c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d07b      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d072      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002834:	2b00      	cmp	r3, #0
 8002836:	d043      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	d03e      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002848:	2b60      	cmp	r3, #96	@ 0x60
 800284a:	d02b      	beq.n	80028a4 <HAL_CAN_IRQHandler+0x32a>
 800284c:	2b60      	cmp	r3, #96	@ 0x60
 800284e:	d82e      	bhi.n	80028ae <HAL_CAN_IRQHandler+0x334>
 8002850:	2b50      	cmp	r3, #80	@ 0x50
 8002852:	d022      	beq.n	800289a <HAL_CAN_IRQHandler+0x320>
 8002854:	2b50      	cmp	r3, #80	@ 0x50
 8002856:	d82a      	bhi.n	80028ae <HAL_CAN_IRQHandler+0x334>
 8002858:	2b40      	cmp	r3, #64	@ 0x40
 800285a:	d019      	beq.n	8002890 <HAL_CAN_IRQHandler+0x316>
 800285c:	2b40      	cmp	r3, #64	@ 0x40
 800285e:	d826      	bhi.n	80028ae <HAL_CAN_IRQHandler+0x334>
 8002860:	2b30      	cmp	r3, #48	@ 0x30
 8002862:	d010      	beq.n	8002886 <HAL_CAN_IRQHandler+0x30c>
 8002864:	2b30      	cmp	r3, #48	@ 0x30
 8002866:	d822      	bhi.n	80028ae <HAL_CAN_IRQHandler+0x334>
 8002868:	2b10      	cmp	r3, #16
 800286a:	d002      	beq.n	8002872 <HAL_CAN_IRQHandler+0x2f8>
 800286c:	2b20      	cmp	r3, #32
 800286e:	d005      	beq.n	800287c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002870:	e01d      	b.n	80028ae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800287a:	e019      	b.n	80028b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	f043 0310 	orr.w	r3, r3, #16
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002884:	e014      	b.n	80028b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	f043 0320 	orr.w	r3, r3, #32
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800288e:	e00f      	b.n	80028b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002898:	e00a      	b.n	80028b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028a2:	e005      	b.n	80028b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028ac:	e000      	b.n	80028b0 <HAL_CAN_IRQHandler+0x336>
            break;
 80028ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80028be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2204      	movs	r2, #4
 80028c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f868 	bl	80029b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028e0:	bf00      	nop
 80028e2:	3728      	adds	r7, #40	@ 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x40>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029e0:	4013      	ands	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029ec:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x40>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00
 8002a08:	05fa0000 	.word	0x05fa0000

08002a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <__NVIC_GetPriorityGrouping+0x18>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 0307 	and.w	r3, r3, #7
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db0b      	blt.n	8002a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	4907      	ldr	r1, [pc, #28]	@ (8002a60 <__NVIC_EnableIRQ+0x38>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000e100 	.word	0xe000e100

08002a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	db0a      	blt.n	8002a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	490c      	ldr	r1, [pc, #48]	@ (8002ab0 <__NVIC_SetPriority+0x4c>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	0112      	lsls	r2, r2, #4
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	440b      	add	r3, r1
 8002a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a8c:	e00a      	b.n	8002aa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4908      	ldr	r1, [pc, #32]	@ (8002ab4 <__NVIC_SetPriority+0x50>)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	3b04      	subs	r3, #4
 8002a9c:	0112      	lsls	r2, r2, #4
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	761a      	strb	r2, [r3, #24]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000e100 	.word	0xe000e100
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	@ 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f1c3 0307 	rsb	r3, r3, #7
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	bf28      	it	cs
 8002ad6:	2304      	movcs	r3, #4
 8002ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d902      	bls.n	8002ae8 <NVIC_EncodePriority+0x30>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3b03      	subs	r3, #3
 8002ae6:	e000      	b.n	8002aea <NVIC_EncodePriority+0x32>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b00:	f04f 31ff 	mov.w	r1, #4294967295
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43d9      	mvns	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	4313      	orrs	r3, r2
         );
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3724      	adds	r7, #36	@ 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ff4c 	bl	80029c4 <__NVIC_SetPriorityGrouping>
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b46:	f7ff ff61 	bl	8002a0c <__NVIC_GetPriorityGrouping>
 8002b4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	6978      	ldr	r0, [r7, #20]
 8002b52:	f7ff ffb1 	bl	8002ab8 <NVIC_EncodePriority>
 8002b56:	4602      	mov	r2, r0
 8002b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff80 	bl	8002a64 <__NVIC_SetPriority>
}
 8002b64:	bf00      	nop
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ff54 	bl	8002a28 <__NVIC_EnableIRQ>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e086      	b.n	8002ca8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2223      	movs	r2, #35	@ 0x23
 8002ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f003 f875 	bl	8005c9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <HAL_ETH_Init+0x128>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8002cb0 <HAL_ETH_Init+0x128>)
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8002cb0 <HAL_ETH_Init+0x128>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002bca:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb4 <HAL_ETH_Init+0x12c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a39      	ldr	r2, [pc, #228]	@ (8002cb4 <HAL_ETH_Init+0x12c>)
 8002bd0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bd6:	4b37      	ldr	r3, [pc, #220]	@ (8002cb4 <HAL_ETH_Init+0x12c>)
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4935      	ldr	r1, [pc, #212]	@ (8002cb4 <HAL_ETH_Init+0x12c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002be4:	4b33      	ldr	r3, [pc, #204]	@ (8002cb4 <HAL_ETH_Init+0x12c>)
 8002be6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c00:	f7ff f806 	bl	8001c10 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c06:	e011      	b.n	8002c2c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c08:	f7ff f802 	bl	8001c10 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c16:	d909      	bls.n	8002c2c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	22e0      	movs	r2, #224	@ 0xe0
 8002c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e03d      	b.n	8002ca8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e4      	bne.n	8002c08 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 ff4e 	bl	8003ae0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fff9 	bl	8003c3c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f001 f84f 	bl	8003cee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	461a      	mov	r2, r3
 8002c56:	2100      	movs	r1, #0
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 ffb7 	bl	8003bcc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb8 <HAL_ETH_Init+0x130>)
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002c92:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	00020060 	.word	0x00020060

08002cbc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d15f      	bne.n	8002d8e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2223      	movs	r2, #35	@ 0x23
 8002cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9f6 	bl	80030d4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f7fe ff99 	bl	8001c28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d14:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d2c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fd73 	bl	800381a <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0208 	orr.w	r2, r2, #8
 8002d42:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f7fe ff6b 	bl	8001c28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0204 	orr.w	r2, r2, #4
 8002d68:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d72:	69d9      	ldr	r1, [r3, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b07      	ldr	r3, [pc, #28]	@ (8002d98 <HAL_ETH_Start_IT+0xdc>)
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d80:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2223      	movs	r2, #35	@ 0x23
 8002d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
  }
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	0001a0c1 	.word	0x0001a0c1

08002d9c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002daa:	2b23      	cmp	r3, #35	@ 0x23
 8002dac:	d16e      	bne.n	8002e8c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2223      	movs	r2, #35	@ 0x23
 8002db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dbe:	69d9      	ldr	r1, [r3, #28]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <HAL_ETH_Stop_IT+0xfc>)
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dcc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002de0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002de4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	f023 0302 	bic.w	r3, r3, #2
 8002df8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dfc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0204 	bic.w	r2, r2, #4
 8002e0c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7fe ff06 	bl	8001c28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fcf8 	bl	800381a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0208 	bic.w	r2, r2, #8
 8002e38:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e42:	2001      	movs	r0, #1
 8002e44:	f7fe fef0 	bl	8001c28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e00e      	b.n	8002e74 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	3212      	adds	r2, #18
 8002e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e60:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3301      	adds	r3, #1
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d9ed      	bls.n	8002e56 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2210      	movs	r2, #16
 8002e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	fffe5f3e 	.word	0xfffe5f3e

08002e9c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e045      	b.n	8002f4c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec6:	2b23      	cmp	r3, #35	@ 0x23
 8002ec8:	d13f      	bne.n	8002f4a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 ff78 	bl	8003dcc <ETH_Prepare_Tx_Descriptors>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	f043 0202 	orr.w	r2, r3, #2
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e02a      	b.n	8002f4c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ef6:	f3bf 8f4f 	dsb	sy
}
 8002efa:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d904      	bls.n	8002f18 <HAL_ETH_Transmit_IT+0x7c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	1f1a      	subs	r2, r3, #4
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f32:	461a      	mov	r2, r3
 8002f34:	2304      	movs	r3, #4
 8002f36:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f40:	461a      	mov	r2, r3
 8002f42:	2300      	movs	r3, #0
 8002f44:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
  }
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f72:	f043 0201 	orr.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0a4      	b.n	80030ca <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f86:	2b23      	cmp	r3, #35	@ 0x23
 8002f88:	d001      	beq.n	8002f8e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e09d      	b.n	80030ca <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f92:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	3212      	adds	r2, #18
 8002f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fa4:	f1c3 0304 	rsb	r3, r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002faa:	e066      	b.n	800307a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <HAL_ETH_ReadData+0x88>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d03c      	beq.n	8003056 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002ffe:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003014:	2301      	movs	r3, #1
 8003016:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003030:	461a      	mov	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f003 f801 	bl	800603c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	441a      	add	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2200      	movs	r2, #0
 8003054:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3301      	adds	r3, #1
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d902      	bls.n	8003068 <HAL_ETH_ReadData+0x114>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3b04      	subs	r3, #4
 8003066:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	3212      	adds	r2, #18
 800306e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003072:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3301      	adds	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800307e:	2b00      	cmp	r3, #0
 8003080:	db06      	blt.n	8003090 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	429a      	cmp	r2, r3
 8003088:	d202      	bcs.n	8003090 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d08d      	beq.n	8002fac <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	441a      	add	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f815 	bl	80030d4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d108      	bne.n	80030c8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80030e0:	2301      	movs	r3, #1
 80030e2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030e8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	3212      	adds	r2, #18
 80030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030fa:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80030fc:	e042      	b.n	8003184 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d112      	bne.n	800312c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	4618      	mov	r0, r3
 800310c:	f002 ff66 	bl	8005fdc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	74fb      	strb	r3, [r7, #19]
 800311a:	e007      	b.n	800312c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	461a      	mov	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	461a      	mov	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d028      	beq.n	8003184 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	4b26      	ldr	r3, [pc, #152]	@ (80031d8 <ETH_UpdateDescriptor+0x104>)
 8003140:	4313      	orrs	r3, r2
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	6053      	str	r3, [r2, #4]
 8003146:	e005      	b.n	8003154 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d902      	bls.n	8003172 <ETH_UpdateDescriptor+0x9e>
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3b04      	subs	r3, #4
 8003170:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	3212      	adds	r2, #18
 8003178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317c:	617b      	str	r3, [r7, #20]
      desccount--;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	3b01      	subs	r3, #1
 8003182:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <ETH_UpdateDescriptor+0xbc>
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1b6      	bne.n	80030fe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	429a      	cmp	r2, r3
 8003198:	d01a      	beq.n	80031d0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80031a4:	f3bf 8f5f 	dmb	sy
}
 80031a8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6919      	ldr	r1, [r3, #16]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	18ca      	adds	r2, r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031c2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80031d0:	bf00      	nop
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	80004000 	.word	0x80004000

080031dc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3318      	adds	r3, #24
 80031e8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80031fa:	e047      	b.n	800328c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	3b01      	subs	r3, #1
 8003204:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3304      	adds	r3, #4
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	3301      	adds	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d902      	bls.n	8003228 <HAL_ETH_ReleaseTxPacket+0x4c>
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	3b04      	subs	r3, #4
 8003226:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d02c      	beq.n	800328c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68d9      	ldr	r1, [r3, #12]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	db1f      	blt.n	8003288 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	3304      	adds	r3, #4
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4618      	mov	r0, r3
 8003256:	f002 ff33 	bl	80060c0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	3304      	adds	r3, #4
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	2200      	movs	r2, #0
 8003266:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3301      	adds	r3, #1
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d902      	bls.n	800327a <HAL_ETH_ReleaseTxPacket+0x9e>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3b04      	subs	r3, #4
 8003278:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003286:	e001      	b.n	800328c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_ETH_ReleaseTxPacket+0xbc>
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1b1      	bne.n	80031fc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80032cc:	4b4b      	ldr	r3, [pc, #300]	@ (80033fc <HAL_ETH_IRQHandler+0x158>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <HAL_ETH_IRQHandler+0x56>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b43      	ldr	r3, [pc, #268]	@ (8003400 <HAL_ETH_IRQHandler+0x15c>)
 80032f2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f002 f9f9 	bl	80056ec <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00f      	beq.n	8003324 <HAL_ETH_IRQHandler+0x80>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003316:	461a      	mov	r2, r3
 8003318:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800331c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f002 f9f4 	bl	800570c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d042      	beq.n	80033b4 <HAL_ETH_IRQHandler+0x110>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d03d      	beq.n	80033b4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333e:	f043 0208 	orr.w	r2, r3, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01a      	beq.n	8003388 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	4b29      	ldr	r3, [pc, #164]	@ (8003404 <HAL_ETH_IRQHandler+0x160>)
 800335e:	4013      	ands	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003378:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800337c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	22e0      	movs	r2, #224	@ 0xe0
 8003382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003386:	e012      	b.n	80033ae <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003396:	4013      	ands	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a6:	461a      	mov	r2, r3
 80033a8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80033ac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f002 f9bc 	bl	800572c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00e      	beq.n	80033dc <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f81a 	bl	8003408 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80033e6:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_ETH_IRQHandler+0x158>)
 80033e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80033ec:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f814 	bl	800341c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80033f4:	bf00      	nop
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40013c00 	.word	0x40013c00
 8003400:	00010040 	.word	0x00010040
 8003404:	007e2000 	.word	0x007e2000

08003408 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 031c 	and.w	r3, r3, #28
 800344c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	02db      	lsls	r3, r3, #11
 8003452:	b29b      	uxth	r3, r3
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0302 	bic.w	r3, r3, #2
 800346e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003480:	f7fe fbc6 	bl	8001c10 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003486:	e00d      	b.n	80034a4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003488:	f7fe fbc2 	bl	8001c10 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003496:	d301      	bcc.n	800349c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e010      	b.n	80034be <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1ec      	bne.n	8003488 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 031c 	and.w	r3, r3, #28
 80034e2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	02db      	lsls	r3, r3, #11
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	019b      	lsls	r3, r3, #6
 80034f4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003520:	f7fe fb76 	bl	8001c10 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003526:	e00d      	b.n	8003544 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003528:	f7fe fb72 	bl	8001c10 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003536:	d301      	bcc.n	800353c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e009      	b.n	8003550 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ec      	bne.n	8003528 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0e6      	b.n	800373a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf14      	ite	ne
 800357a:	2301      	movne	r3, #1
 800357c:	2300      	moveq	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf0c      	ite	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	2300      	movne	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf14      	ite	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	2300      	moveq	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	bf14      	ite	ne
 800370e:	2301      	movne	r3, #1
 8003710:	2300      	moveq	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf14      	ite	ne
 800372a:	2301      	movne	r3, #1
 800372c:	2300      	moveq	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e00b      	b.n	8003772 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003760:	2b10      	cmp	r3, #16
 8003762:	d105      	bne.n	8003770 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003764:	6839      	ldr	r1, [r7, #0]
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f87c 	bl	8003864 <ETH_SetMACConfig>

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 031c 	bic.w	r3, r3, #28
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003794:	f001 fb16 	bl	8004dc4 <HAL_RCC_GetHCLKFreq>
 8003798:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4a14      	ldr	r2, [pc, #80]	@ (80037f0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d804      	bhi.n	80037ac <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e019      	b.n	80037e0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a11      	ldr	r2, [pc, #68]	@ (80037f4 <HAL_ETH_SetMDIOClockRange+0x78>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d204      	bcs.n	80037be <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f043 030c 	orr.w	r3, r3, #12
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e010      	b.n	80037e0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4a0d      	ldr	r2, [pc, #52]	@ (80037f8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d90c      	bls.n	80037e0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4a0c      	ldr	r2, [pc, #48]	@ (80037fc <HAL_ETH_SetMDIOClockRange+0x80>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d804      	bhi.n	80037d8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e003      	b.n	80037e0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f043 0310 	orr.w	r3, r3, #16
 80037de:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	611a      	str	r2, [r3, #16]
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	02160ebf 	.word	0x02160ebf
 80037f4:	03938700 	.word	0x03938700
 80037f8:	05f5e0ff 	.word	0x05f5e0ff
 80037fc:	08f0d17f 	.word	0x08f0d17f

08003800 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003838:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800383c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800384a:	2001      	movs	r0, #1
 800384c:	f7fe f9ec 	bl	8001c28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800385a:	6193      	str	r3, [r2, #24]
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4b53      	ldr	r3, [pc, #332]	@ (80039c8 <ETH_SetMACConfig+0x164>)
 800387a:	4013      	ands	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	7b9b      	ldrb	r3, [r3, #14]
 8003882:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	7c12      	ldrb	r2, [r2, #16]
 8003888:	2a00      	cmp	r2, #0
 800388a:	d102      	bne.n	8003892 <ETH_SetMACConfig+0x2e>
 800388c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003890:	e000      	b.n	8003894 <ETH_SetMACConfig+0x30>
 8003892:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003894:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	7c52      	ldrb	r2, [r2, #17]
 800389a:	2a00      	cmp	r2, #0
 800389c:	d102      	bne.n	80038a4 <ETH_SetMACConfig+0x40>
 800389e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80038a2:	e000      	b.n	80038a6 <ETH_SetMACConfig+0x42>
 80038a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	7fdb      	ldrb	r3, [r3, #31]
 80038b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80038b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	7f92      	ldrb	r2, [r2, #30]
 80038c0:	2a00      	cmp	r2, #0
 80038c2:	d102      	bne.n	80038ca <ETH_SetMACConfig+0x66>
 80038c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038c8:	e000      	b.n	80038cc <ETH_SetMACConfig+0x68>
 80038ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80038cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	7f1b      	ldrb	r3, [r3, #28]
 80038d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	791b      	ldrb	r3, [r3, #4]
 80038e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80038e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	d102      	bne.n	80038f4 <ETH_SetMACConfig+0x90>
 80038ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038f2:	e000      	b.n	80038f6 <ETH_SetMACConfig+0x92>
 80038f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80038f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	7bdb      	ldrb	r3, [r3, #15]
 80038fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80038fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003904:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800390c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800390e:	4313      	orrs	r3, r2
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003926:	2001      	movs	r0, #1
 8003928:	f7fe f97e 	bl	8001c28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003942:	4013      	ands	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003952:	2a00      	cmp	r2, #0
 8003954:	d101      	bne.n	800395a <ETH_SetMACConfig+0xf6>
 8003956:	2280      	movs	r2, #128	@ 0x80
 8003958:	e000      	b.n	800395c <ETH_SetMACConfig+0xf8>
 800395a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800395c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003962:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800396a:	2a01      	cmp	r2, #1
 800396c:	d101      	bne.n	8003972 <ETH_SetMACConfig+0x10e>
 800396e:	2208      	movs	r2, #8
 8003970:	e000      	b.n	8003974 <ETH_SetMACConfig+0x110>
 8003972:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003974:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800397c:	2a01      	cmp	r2, #1
 800397e:	d101      	bne.n	8003984 <ETH_SetMACConfig+0x120>
 8003980:	2204      	movs	r2, #4
 8003982:	e000      	b.n	8003986 <ETH_SetMACConfig+0x122>
 8003984:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003986:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800398e:	2a01      	cmp	r2, #1
 8003990:	d101      	bne.n	8003996 <ETH_SetMACConfig+0x132>
 8003992:	2202      	movs	r2, #2
 8003994:	e000      	b.n	8003998 <ETH_SetMACConfig+0x134>
 8003996:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003998:	4313      	orrs	r3, r2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f7fe f939 	bl	8001c28 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	619a      	str	r2, [r3, #24]
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	fd20810f 	.word	0xfd20810f

080039cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4b3d      	ldr	r3, [pc, #244]	@ (8003adc <ETH_SetDMAConfig+0x110>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	7b1b      	ldrb	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <ETH_SetDMAConfig+0x2c>
 80039f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80039f6:	e000      	b.n	80039fa <ETH_SetDMAConfig+0x2e>
 80039f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	7b5b      	ldrb	r3, [r3, #13]
 80039fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a00:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	7f52      	ldrb	r2, [r2, #29]
 8003a06:	2a00      	cmp	r2, #0
 8003a08:	d102      	bne.n	8003a10 <ETH_SetDMAConfig+0x44>
 8003a0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a0e:	e000      	b.n	8003a12 <ETH_SetDMAConfig+0x46>
 8003a10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	7b9b      	ldrb	r3, [r3, #14]
 8003a18:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a1a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	7f1b      	ldrb	r3, [r3, #28]
 8003a26:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003a28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	7f9b      	ldrb	r3, [r3, #30]
 8003a2e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a30:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a3e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a40:	4313      	orrs	r3, r2
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a50:	461a      	mov	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a62:	2001      	movs	r0, #1
 8003a64:	f7fe f8e0 	bl	8001c28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a70:	461a      	mov	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	791b      	ldrb	r3, [r3, #4]
 8003a7a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a80:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003a86:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a8c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a94:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003a96:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a9e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003aa4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ab2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	f7fe f8b1 	bl	8001c28 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6013      	str	r3, [r2, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	f8de3f23 	.word	0xf8de3f23

08003ae0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b0a6      	sub	sp, #152	@ 0x98
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003af4:	2300      	movs	r3, #0
 8003af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b22:	2300      	movs	r3, #0
 8003b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003b48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fe7f 	bl	8003864 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003b74:	2301      	movs	r3, #1
 8003b76:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003b92:	2301      	movs	r3, #1
 8003b94:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b9a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b9c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ba0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ba6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003bb6:	f107 0308 	add.w	r3, r7, #8
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff05 	bl	80039cc <ETH_SetDMAConfig>
}
 8003bc2:	bf00      	nop
 8003bc4:	3798      	adds	r7, #152	@ 0x98
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3305      	adds	r3, #5
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	3204      	adds	r2, #4
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4b11      	ldr	r3, [pc, #68]	@ (8003c34 <ETH_MACAddressConfig+0x68>)
 8003bee:	4413      	add	r3, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3303      	adds	r3, #3
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	061a      	lsls	r2, r3, #24
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3302      	adds	r3, #2
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	041b      	lsls	r3, r3, #16
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	4313      	orrs	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <ETH_MACAddressConfig+0x6c>)
 8003c1e:	4413      	add	r3, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	6013      	str	r3, [r2, #0]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40028040 	.word	0x40028040
 8003c38:	40028044 	.word	0x40028044

08003c3c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e03e      	b.n	8003cc8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68d9      	ldr	r1, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	440b      	add	r3, r1
 8003c5a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2200      	movs	r2, #0
 8003c66:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2200      	movs	r2, #0
 8003c72:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	3206      	adds	r2, #6
 8003c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d80c      	bhi.n	8003cac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68d9      	ldr	r1, [r3, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	440b      	add	r3, r1
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	e004      	b.n	8003cb6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d9bd      	bls.n	8003c4a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ce0:	611a      	str	r2, [r3, #16]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e048      	b.n	8003d8e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6919      	ldr	r1, [r3, #16]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003d38:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	3212      	adds	r2, #18
 8003d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d80c      	bhi.n	8003d7e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6919      	ldr	r1, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	440b      	add	r3, r1
 8003d76:	461a      	mov	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	e004      	b.n	8003d88 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	461a      	mov	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d9b3      	bls.n	8003cfc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dbe:	60da      	str	r2, [r3, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b091      	sub	sp, #68	@ 0x44
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3318      	adds	r3, #24
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e0e:	d007      	beq.n	8003e20 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e14:	3304      	adds	r3, #4
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003e20:	2302      	movs	r3, #2
 8003e22:	e111      	b.n	8004048 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e26:	3301      	adds	r3, #1
 8003e28:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	4b86      	ldr	r3, [pc, #536]	@ (8004054 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e3e:	6852      	ldr	r2, [r2, #4]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e80:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003ea6:	e082      	b.n	8003fae <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e005      	b.n	8003ed4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d902      	bls.n	8003ee6 <ETH_Prepare_Tx_Descriptors+0x11a>
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee2:	3b04      	subs	r3, #4
 8003ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eee:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003efc:	d007      	beq.n	8003f0e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f02:	3304      	adds	r3, #4
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d029      	beq.n	8003f62 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f20:	e019      	b.n	8003f56 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003f22:	f3bf 8f5f 	dmb	sy
}
 8003f26:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f32:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f36:	3301      	adds	r3, #1
 8003f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d902      	bls.n	8003f46 <ETH_Prepare_Tx_Descriptors+0x17a>
 8003f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f42:	3b04      	subs	r3, #4
 8003f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f52:	3301      	adds	r3, #1
 8003f54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3e1      	bcc.n	8003f22 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e072      	b.n	8004048 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f70:	3301      	adds	r3, #1
 8003f72:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f82:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	4b32      	ldr	r3, [pc, #200]	@ (8004054 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f8e:	6852      	ldr	r2, [r2, #4]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f98:	3301      	adds	r3, #1
 8003f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003f9c:	f3bf 8f5f 	dmb	sy
}
 8003fa0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fac:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f47f af78 	bne.w	8003ea8 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e005      	b.n	8003fd8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fec:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003fee:	f3bf 8f5f 	dmb	sy
}
 8003ff2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004008:	3304      	adds	r3, #4
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004014:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004016:	f3ef 8310 	mrs	r3, PRIMASK
 800401a:	613b      	str	r3, [r7, #16]
  return(result);
 800401c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	2301      	movs	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f383 8810 	msr	PRIMASK, r3
}
 800402a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004032:	4413      	add	r3, r2
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	629a      	str	r2, [r3, #40]	@ 0x28
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f383 8810 	msr	PRIMASK, r3
}
 8004044:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3744      	adds	r7, #68	@ 0x44
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	ffffe000 	.word	0xffffe000

08004058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	@ 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	e175      	b.n	8004364 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004078:	2201      	movs	r2, #1
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	429a      	cmp	r2, r3
 8004092:	f040 8164 	bne.w	800435e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d005      	beq.n	80040ae <HAL_GPIO_Init+0x56>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d130      	bne.n	8004110 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	2203      	movs	r2, #3
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040e4:	2201      	movs	r2, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f003 0201 	and.w	r2, r3, #1
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b03      	cmp	r3, #3
 800411a:	d017      	beq.n	800414c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	2203      	movs	r2, #3
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d123      	bne.n	80041a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	08da      	lsrs	r2, r3, #3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3208      	adds	r2, #8
 8004160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	220f      	movs	r2, #15
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4013      	ands	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4313      	orrs	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	08da      	lsrs	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3208      	adds	r2, #8
 800419a:	69b9      	ldr	r1, [r7, #24]
 800419c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	2203      	movs	r2, #3
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0203 	and.w	r2, r3, #3
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80be 	beq.w	800435e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e2:	4b66      	ldr	r3, [pc, #408]	@ (800437c <HAL_GPIO_Init+0x324>)
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	4a65      	ldr	r2, [pc, #404]	@ (800437c <HAL_GPIO_Init+0x324>)
 80041e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ee:	4b63      	ldr	r3, [pc, #396]	@ (800437c <HAL_GPIO_Init+0x324>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041fa:	4a61      	ldr	r2, [pc, #388]	@ (8004380 <HAL_GPIO_Init+0x328>)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	3302      	adds	r3, #2
 8004202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	220f      	movs	r2, #15
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a58      	ldr	r2, [pc, #352]	@ (8004384 <HAL_GPIO_Init+0x32c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d037      	beq.n	8004296 <HAL_GPIO_Init+0x23e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a57      	ldr	r2, [pc, #348]	@ (8004388 <HAL_GPIO_Init+0x330>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d031      	beq.n	8004292 <HAL_GPIO_Init+0x23a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a56      	ldr	r2, [pc, #344]	@ (800438c <HAL_GPIO_Init+0x334>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d02b      	beq.n	800428e <HAL_GPIO_Init+0x236>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a55      	ldr	r2, [pc, #340]	@ (8004390 <HAL_GPIO_Init+0x338>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d025      	beq.n	800428a <HAL_GPIO_Init+0x232>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a54      	ldr	r2, [pc, #336]	@ (8004394 <HAL_GPIO_Init+0x33c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01f      	beq.n	8004286 <HAL_GPIO_Init+0x22e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a53      	ldr	r2, [pc, #332]	@ (8004398 <HAL_GPIO_Init+0x340>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d019      	beq.n	8004282 <HAL_GPIO_Init+0x22a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a52      	ldr	r2, [pc, #328]	@ (800439c <HAL_GPIO_Init+0x344>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_GPIO_Init+0x226>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a51      	ldr	r2, [pc, #324]	@ (80043a0 <HAL_GPIO_Init+0x348>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00d      	beq.n	800427a <HAL_GPIO_Init+0x222>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a50      	ldr	r2, [pc, #320]	@ (80043a4 <HAL_GPIO_Init+0x34c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <HAL_GPIO_Init+0x21e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4f      	ldr	r2, [pc, #316]	@ (80043a8 <HAL_GPIO_Init+0x350>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d101      	bne.n	8004272 <HAL_GPIO_Init+0x21a>
 800426e:	2309      	movs	r3, #9
 8004270:	e012      	b.n	8004298 <HAL_GPIO_Init+0x240>
 8004272:	230a      	movs	r3, #10
 8004274:	e010      	b.n	8004298 <HAL_GPIO_Init+0x240>
 8004276:	2308      	movs	r3, #8
 8004278:	e00e      	b.n	8004298 <HAL_GPIO_Init+0x240>
 800427a:	2307      	movs	r3, #7
 800427c:	e00c      	b.n	8004298 <HAL_GPIO_Init+0x240>
 800427e:	2306      	movs	r3, #6
 8004280:	e00a      	b.n	8004298 <HAL_GPIO_Init+0x240>
 8004282:	2305      	movs	r3, #5
 8004284:	e008      	b.n	8004298 <HAL_GPIO_Init+0x240>
 8004286:	2304      	movs	r3, #4
 8004288:	e006      	b.n	8004298 <HAL_GPIO_Init+0x240>
 800428a:	2303      	movs	r3, #3
 800428c:	e004      	b.n	8004298 <HAL_GPIO_Init+0x240>
 800428e:	2302      	movs	r3, #2
 8004290:	e002      	b.n	8004298 <HAL_GPIO_Init+0x240>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_GPIO_Init+0x240>
 8004296:	2300      	movs	r3, #0
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	f002 0203 	and.w	r2, r2, #3
 800429e:	0092      	lsls	r2, r2, #2
 80042a0:	4093      	lsls	r3, r2
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80042a8:	4935      	ldr	r1, [pc, #212]	@ (8004380 <HAL_GPIO_Init+0x328>)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	3302      	adds	r3, #2
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042b6:	4b3d      	ldr	r3, [pc, #244]	@ (80043ac <HAL_GPIO_Init+0x354>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042da:	4a34      	ldr	r2, [pc, #208]	@ (80043ac <HAL_GPIO_Init+0x354>)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e0:	4b32      	ldr	r3, [pc, #200]	@ (80043ac <HAL_GPIO_Init+0x354>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004304:	4a29      	ldr	r2, [pc, #164]	@ (80043ac <HAL_GPIO_Init+0x354>)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800430a:	4b28      	ldr	r3, [pc, #160]	@ (80043ac <HAL_GPIO_Init+0x354>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800432e:	4a1f      	ldr	r2, [pc, #124]	@ (80043ac <HAL_GPIO_Init+0x354>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004334:	4b1d      	ldr	r3, [pc, #116]	@ (80043ac <HAL_GPIO_Init+0x354>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004358:	4a14      	ldr	r2, [pc, #80]	@ (80043ac <HAL_GPIO_Init+0x354>)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3301      	adds	r3, #1
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b0f      	cmp	r3, #15
 8004368:	f67f ae86 	bls.w	8004078 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3724      	adds	r7, #36	@ 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	40013800 	.word	0x40013800
 8004384:	40020000 	.word	0x40020000
 8004388:	40020400 	.word	0x40020400
 800438c:	40020800 	.word	0x40020800
 8004390:	40020c00 	.word	0x40020c00
 8004394:	40021000 	.word	0x40021000
 8004398:	40021400 	.word	0x40021400
 800439c:	40021800 	.word	0x40021800
 80043a0:	40021c00 	.word	0x40021c00
 80043a4:	40022000 	.word	0x40022000
 80043a8:	40022400 	.word	0x40022400
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043c0:	787b      	ldrb	r3, [r7, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043cc:	e003      	b.n	80043d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043ce:	887b      	ldrh	r3, [r7, #2]
 80043d0:	041a      	lsls	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	619a      	str	r2, [r3, #24]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	4b23      	ldr	r3, [pc, #140]	@ (800447c <HAL_PWREx_EnableOverDrive+0x98>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	4a22      	ldr	r2, [pc, #136]	@ (800447c <HAL_PWREx_EnableOverDrive+0x98>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043fa:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_PWREx_EnableOverDrive+0x98>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004406:	4b1e      	ldr	r3, [pc, #120]	@ (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1d      	ldr	r2, [pc, #116]	@ (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004410:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004412:	f7fd fbfd 	bl	8001c10 <HAL_GetTick>
 8004416:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004418:	e009      	b.n	800442e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800441a:	f7fd fbf9 	bl	8001c10 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004428:	d901      	bls.n	800442e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e022      	b.n	8004474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800442e:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800443a:	d1ee      	bne.n	800441a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800443c:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a0f      	ldr	r2, [pc, #60]	@ (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004446:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004448:	f7fd fbe2 	bl	8001c10 <HAL_GetTick>
 800444c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800444e:	e009      	b.n	8004464 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004450:	f7fd fbde 	bl	8001c10 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800445e:	d901      	bls.n	8004464 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e007      	b.n	8004474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004464:	4b06      	ldr	r3, [pc, #24]	@ (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004470:	d1ee      	bne.n	8004450 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	40007000 	.word	0x40007000

08004484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800448c:	2300      	movs	r3, #0
 800448e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e29b      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8087 	beq.w	80045b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044a8:	4b96      	ldr	r3, [pc, #600]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d00c      	beq.n	80044ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b4:	4b93      	ldr	r3, [pc, #588]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d112      	bne.n	80044e6 <HAL_RCC_OscConfig+0x62>
 80044c0:	4b90      	ldr	r3, [pc, #576]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044cc:	d10b      	bne.n	80044e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d06c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x130>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d168      	bne.n	80045b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e275      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ee:	d106      	bne.n	80044fe <HAL_RCC_OscConfig+0x7a>
 80044f0:	4b84      	ldr	r3, [pc, #528]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a83      	ldr	r2, [pc, #524]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80044f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	e02e      	b.n	800455c <HAL_RCC_OscConfig+0xd8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0x9c>
 8004506:	4b7f      	ldr	r3, [pc, #508]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7e      	ldr	r2, [pc, #504]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 800450c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b7c      	ldr	r3, [pc, #496]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7b      	ldr	r2, [pc, #492]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004518:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e01d      	b.n	800455c <HAL_RCC_OscConfig+0xd8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0xc0>
 800452a:	4b76      	ldr	r3, [pc, #472]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a75      	ldr	r2, [pc, #468]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b73      	ldr	r3, [pc, #460]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a72      	ldr	r2, [pc, #456]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0xd8>
 8004544:	4b6f      	ldr	r3, [pc, #444]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a6e      	ldr	r2, [pc, #440]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 800454a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b6c      	ldr	r3, [pc, #432]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a6b      	ldr	r2, [pc, #428]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800455a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d013      	beq.n	800458c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fd fb54 	bl	8001c10 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800456c:	f7fd fb50 	bl	8001c10 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	@ 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e229      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b61      	ldr	r3, [pc, #388]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0xe8>
 800458a:	e014      	b.n	80045b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd fb40 	bl	8001c10 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fd fb3c 	bl	8001c10 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	@ 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e215      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	4b57      	ldr	r3, [pc, #348]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x110>
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d069      	beq.n	8004696 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c2:	4b50      	ldr	r3, [pc, #320]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d11c      	bne.n	8004614 <HAL_RCC_OscConfig+0x190>
 80045da:	4b4a      	ldr	r3, [pc, #296]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d116      	bne.n	8004614 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e6:	4b47      	ldr	r3, [pc, #284]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_RCC_OscConfig+0x17a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d001      	beq.n	80045fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e1e9      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b41      	ldr	r3, [pc, #260]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	493d      	ldr	r1, [pc, #244]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	e040      	b.n	8004696 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d023      	beq.n	8004664 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800461c:	4b39      	ldr	r3, [pc, #228]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a38      	ldr	r2, [pc, #224]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd faf2 	bl	8001c10 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004630:	f7fd faee 	bl	8001c10 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1c7      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004642:	4b30      	ldr	r3, [pc, #192]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464e:	4b2d      	ldr	r3, [pc, #180]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4929      	ldr	r1, [pc, #164]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]
 8004662:	e018      	b.n	8004696 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004664:	4b27      	ldr	r3, [pc, #156]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a26      	ldr	r2, [pc, #152]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd face 	bl	8001c10 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7fd faca 	bl	8001c10 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1a3      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468a:	4b1e      	ldr	r3, [pc, #120]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d038      	beq.n	8004714 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d019      	beq.n	80046de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046aa:	4b16      	ldr	r3, [pc, #88]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80046ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ae:	4a15      	ldr	r2, [pc, #84]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fd faab 	bl	8001c10 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fd faa7 	bl	8001c10 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e180      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80046d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x23a>
 80046dc:	e01a      	b.n	8004714 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046de:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80046e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e2:	4a08      	ldr	r2, [pc, #32]	@ (8004704 <HAL_RCC_OscConfig+0x280>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fd fa91 	bl	8001c10 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	e00a      	b.n	8004708 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fd fa8d 	bl	8001c10 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d903      	bls.n	8004708 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e166      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
 8004704:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004708:	4b92      	ldr	r3, [pc, #584]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800470a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1ee      	bne.n	80046f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80a4 	beq.w	800486a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004722:	4b8c      	ldr	r3, [pc, #560]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	4b89      	ldr	r3, [pc, #548]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	4a88      	ldr	r2, [pc, #544]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004738:	6413      	str	r3, [r2, #64]	@ 0x40
 800473a:	4b86      	ldr	r3, [pc, #536]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474a:	4b83      	ldr	r3, [pc, #524]	@ (8004958 <HAL_RCC_OscConfig+0x4d4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d118      	bne.n	8004788 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004756:	4b80      	ldr	r3, [pc, #512]	@ (8004958 <HAL_RCC_OscConfig+0x4d4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a7f      	ldr	r2, [pc, #508]	@ (8004958 <HAL_RCC_OscConfig+0x4d4>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004762:	f7fd fa55 	bl	8001c10 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476a:	f7fd fa51 	bl	8001c10 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b64      	cmp	r3, #100	@ 0x64
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e12a      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477c:	4b76      	ldr	r3, [pc, #472]	@ (8004958 <HAL_RCC_OscConfig+0x4d4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x31a>
 8004790:	4b70      	ldr	r3, [pc, #448]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	4a6f      	ldr	r2, [pc, #444]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	@ 0x70
 800479c:	e02d      	b.n	80047fa <HAL_RCC_OscConfig+0x376>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x33c>
 80047a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b2:	4b68      	ldr	r3, [pc, #416]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	4a67      	ldr	r2, [pc, #412]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047b8:	f023 0304 	bic.w	r3, r3, #4
 80047bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047be:	e01c      	b.n	80047fa <HAL_RCC_OscConfig+0x376>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCC_OscConfig+0x35e>
 80047c8:	4b62      	ldr	r3, [pc, #392]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047cc:	4a61      	ldr	r2, [pc, #388]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e0:	e00b      	b.n	80047fa <HAL_RCC_OscConfig+0x376>
 80047e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ee:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	4a58      	ldr	r2, [pc, #352]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d015      	beq.n	800482e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004802:	f7fd fa05 	bl	8001c10 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fd fa01 	bl	8001c10 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0d8      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	4b4c      	ldr	r3, [pc, #304]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ee      	beq.n	800480a <HAL_RCC_OscConfig+0x386>
 800482c:	e014      	b.n	8004858 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fd f9ef 	bl	8001c10 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fd f9eb 	bl	8001c10 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e0c2      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484c:	4b41      	ldr	r3, [pc, #260]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ee      	bne.n	8004836 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4b3d      	ldr	r3, [pc, #244]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	4a3c      	ldr	r2, [pc, #240]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80ae 	beq.w	80049d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004874:	4b37      	ldr	r3, [pc, #220]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d06d      	beq.n	800495c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d14b      	bne.n	8004920 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b32      	ldr	r3, [pc, #200]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a31      	ldr	r2, [pc, #196]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800488e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd f9bc 	bl	8001c10 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489c:	f7fd f9b8 	bl	8001c10 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e091      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	4b29      	ldr	r3, [pc, #164]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	3b01      	subs	r3, #1
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	491b      	ldr	r1, [pc, #108]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a18      	ldr	r2, [pc, #96]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80048f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fd f98a 	bl	8001c10 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004900:	f7fd f986 	bl	8001c10 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e05f      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b10      	ldr	r3, [pc, #64]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x47c>
 800491e:	e057      	b.n	80049d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a0b      	ldr	r2, [pc, #44]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800492a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fd f970 	bl	8001c10 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fd f96c 	bl	8001c10 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e045      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	4b03      	ldr	r3, [pc, #12]	@ (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x4b0>
 8004952:	e03d      	b.n	80049d0 <HAL_RCC_OscConfig+0x54c>
 8004954:	40023800 	.word	0x40023800
 8004958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800495c:	4b1f      	ldr	r3, [pc, #124]	@ (80049dc <HAL_RCC_OscConfig+0x558>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d030      	beq.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d129      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d122      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004992:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004994:	4293      	cmp	r3, r2
 8004996:	d119      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	3b01      	subs	r3, #1
 80049a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d10f      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d107      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800

080049e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0d0      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049f8:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d910      	bls.n	8004a28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a06:	4b67      	ldr	r3, [pc, #412]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 020f 	bic.w	r2, r3, #15
 8004a0e:	4965      	ldr	r1, [pc, #404]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b63      	ldr	r3, [pc, #396]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0b8      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d020      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a40:	4b59      	ldr	r3, [pc, #356]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4a58      	ldr	r2, [pc, #352]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a58:	4b53      	ldr	r3, [pc, #332]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a52      	ldr	r2, [pc, #328]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a64:	4b50      	ldr	r3, [pc, #320]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	494d      	ldr	r1, [pc, #308]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d040      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d115      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e07f      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa2:	4b41      	ldr	r3, [pc, #260]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e073      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06b      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ac2:	4b39      	ldr	r3, [pc, #228]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f023 0203 	bic.w	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4936      	ldr	r1, [pc, #216]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fd f89c 	bl	8001c10 <HAL_GetTick>
 8004ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004adc:	f7fd f898 	bl	8001c10 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e053      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 020c 	and.w	r2, r3, #12
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d1eb      	bne.n	8004adc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b04:	4b27      	ldr	r3, [pc, #156]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d210      	bcs.n	8004b34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b12:	4b24      	ldr	r3, [pc, #144]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 020f 	bic.w	r2, r3, #15
 8004b1a:	4922      	ldr	r1, [pc, #136]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b20      	ldr	r3, [pc, #128]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e032      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b40:	4b19      	ldr	r3, [pc, #100]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4916      	ldr	r1, [pc, #88]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b5e:	4b12      	ldr	r3, [pc, #72]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	490e      	ldr	r1, [pc, #56]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b72:	f000 f821 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8004b76:	4602      	mov	r2, r0
 8004b78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	490a      	ldr	r1, [pc, #40]	@ (8004bac <HAL_RCC_ClockConfig+0x1cc>)
 8004b84:	5ccb      	ldrb	r3, [r1, r3]
 8004b86:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8a:	4a09      	ldr	r2, [pc, #36]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8004b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b8e:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1d4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc fd48 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023c00 	.word	0x40023c00
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	08013240 	.word	0x08013240
 8004bb0:	20000000 	.word	0x20000000
 8004bb4:	20000004 	.word	0x20000004

08004bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bbc:	b094      	sub	sp, #80	@ 0x50
 8004bbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bc8:	2300      	movs	r3, #0
 8004bca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd0:	4b79      	ldr	r3, [pc, #484]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 030c 	and.w	r3, r3, #12
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d00d      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	f200 80e1 	bhi.w	8004da4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x34>
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d003      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bea:	e0db      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bec:	4b73      	ldr	r3, [pc, #460]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8004bee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bf0:	e0db      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bf2:	4b73      	ldr	r3, [pc, #460]	@ (8004dc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bf6:	e0d8      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c02:	4b6d      	ldr	r3, [pc, #436]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d063      	beq.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	099b      	lsrs	r3, r3, #6
 8004c14:	2200      	movs	r2, #0
 8004c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c22:	2300      	movs	r3, #0
 8004c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	f04f 0000 	mov.w	r0, #0
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	0159      	lsls	r1, r3, #5
 8004c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c3c:	0150      	lsls	r0, r2, #5
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4621      	mov	r1, r4
 8004c44:	1a51      	subs	r1, r2, r1
 8004c46:	6139      	str	r1, [r7, #16]
 8004c48:	4629      	mov	r1, r5
 8004c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	018b      	lsls	r3, r1, #6
 8004c60:	4651      	mov	r1, sl
 8004c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c66:	4651      	mov	r1, sl
 8004c68:	018a      	lsls	r2, r1, #6
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c70:	4659      	mov	r1, fp
 8004c72:	eb63 0901 	sbc.w	r9, r3, r1
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c8a:	4690      	mov	r8, r2
 8004c8c:	4699      	mov	r9, r3
 8004c8e:	4623      	mov	r3, r4
 8004c90:	eb18 0303 	adds.w	r3, r8, r3
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	462b      	mov	r3, r5
 8004c98:	eb49 0303 	adc.w	r3, r9, r3
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004caa:	4629      	mov	r1, r5
 8004cac:	024b      	lsls	r3, r1, #9
 8004cae:	4621      	mov	r1, r4
 8004cb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	024a      	lsls	r2, r1, #9
 8004cb8:	4610      	mov	r0, r2
 8004cba:	4619      	mov	r1, r3
 8004cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cc8:	f7fb fb0a 	bl	80002e0 <__aeabi_uldivmod>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd4:	e058      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd6:	4b38      	ldr	r3, [pc, #224]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	f04f 0000 	mov.w	r0, #0
 8004cf8:	f04f 0100 	mov.w	r1, #0
 8004cfc:	0159      	lsls	r1, r3, #5
 8004cfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d02:	0150      	lsls	r0, r2, #5
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4641      	mov	r1, r8
 8004d0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d0e:	4649      	mov	r1, r9
 8004d10:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d28:	ebb2 040a 	subs.w	r4, r2, sl
 8004d2c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	00eb      	lsls	r3, r5, #3
 8004d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d3e:	00e2      	lsls	r2, r4, #3
 8004d40:	4614      	mov	r4, r2
 8004d42:	461d      	mov	r5, r3
 8004d44:	4643      	mov	r3, r8
 8004d46:	18e3      	adds	r3, r4, r3
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	eb45 0303 	adc.w	r3, r5, r3
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d5e:	4629      	mov	r1, r5
 8004d60:	028b      	lsls	r3, r1, #10
 8004d62:	4621      	mov	r1, r4
 8004d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d68:	4621      	mov	r1, r4
 8004d6a:	028a      	lsls	r2, r1, #10
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d72:	2200      	movs	r2, #0
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	61fa      	str	r2, [r7, #28]
 8004d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7c:	f7fb fab0 	bl	80002e0 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d88:	4b0b      	ldr	r3, [pc, #44]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	3301      	adds	r3, #1
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004da2:	e002      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004da4:	4b05      	ldr	r3, [pc, #20]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8004da6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3750      	adds	r7, #80	@ 0x50
 8004db0:	46bd      	mov	sp, r7
 8004db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	00f42400 	.word	0x00f42400
 8004dc0:	007a1200 	.word	0x007a1200

08004dc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc8:	4b03      	ldr	r3, [pc, #12]	@ (8004dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dca:	681b      	ldr	r3, [r3, #0]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000000 	.word	0x20000000

08004ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004de0:	f7ff fff0 	bl	8004dc4 <HAL_RCC_GetHCLKFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	0a9b      	lsrs	r3, r3, #10
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4903      	ldr	r1, [pc, #12]	@ (8004e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	08013250 	.word	0x08013250

08004e04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	220f      	movs	r2, #15
 8004e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e14:	4b12      	ldr	r3, [pc, #72]	@ (8004e60 <HAL_RCC_GetClockConfig+0x5c>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0203 	and.w	r2, r3, #3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e20:	4b0f      	ldr	r3, [pc, #60]	@ (8004e60 <HAL_RCC_GetClockConfig+0x5c>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e60 <HAL_RCC_GetClockConfig+0x5c>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e38:	4b09      	ldr	r3, [pc, #36]	@ (8004e60 <HAL_RCC_GetClockConfig+0x5c>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	08db      	lsrs	r3, r3, #3
 8004e3e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e46:	4b07      	ldr	r3, [pc, #28]	@ (8004e64 <HAL_RCC_GetClockConfig+0x60>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	601a      	str	r2, [r3, #0]
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40023c00 	.word	0x40023c00

08004e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e049      	b.n	8004f0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f841 	bl	8004f16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f000 f9e8 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d001      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e054      	b.n	8004fee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a26      	ldr	r2, [pc, #152]	@ (8004ffc <HAL_TIM_Base_Start_IT+0xd0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d022      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x80>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6e:	d01d      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x80>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a22      	ldr	r2, [pc, #136]	@ (8005000 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d018      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x80>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a21      	ldr	r2, [pc, #132]	@ (8005004 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x80>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1f      	ldr	r2, [pc, #124]	@ (8005008 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00e      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x80>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1e      	ldr	r2, [pc, #120]	@ (800500c <HAL_TIM_Base_Start_IT+0xe0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d009      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x80>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x80>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d115      	bne.n	8004fd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	4b19      	ldr	r3, [pc, #100]	@ (8005018 <HAL_TIM_Base_Start_IT+0xec>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b06      	cmp	r3, #6
 8004fbc:	d015      	beq.n	8004fea <HAL_TIM_Base_Start_IT+0xbe>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc4:	d011      	beq.n	8004fea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd6:	e008      	b.n	8004fea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e000      	b.n	8004fec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40010400 	.word	0x40010400
 8005010:	40014000 	.word	0x40014000
 8005014:	40001800 	.word	0x40001800
 8005018:	00010007 	.word	0x00010007

0800501c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d020      	beq.n	8005080 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0202 	mvn.w	r2, #2
 8005050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8e9 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8db 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f8ec 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d020      	beq.n	80050cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0204 	mvn.w	r2, #4
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f8c3 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8b5 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f8c6 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d020      	beq.n	8005118 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0208 	mvn.w	r2, #8
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2204      	movs	r2, #4
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f89d 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f88f 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f8a0 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0210 	mvn.w	r2, #16
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2208      	movs	r2, #8
 800513a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f877 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f869 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f87a 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0201 	mvn.w	r2, #1
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc f976 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00c      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f919 	bl	80053e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00c      	beq.n	80051da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f911 	bl	80053fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00c      	beq.n	80051fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f834 	bl	8005266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00c      	beq.n	8005222 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0220 	mvn.w	r2, #32
 800521a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8d9 	bl	80053d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a46      	ldr	r2, [pc, #280]	@ (80053a8 <TIM_Base_SetConfig+0x12c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800529a:	d00f      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a43      	ldr	r2, [pc, #268]	@ (80053ac <TIM_Base_SetConfig+0x130>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00b      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a42      	ldr	r2, [pc, #264]	@ (80053b0 <TIM_Base_SetConfig+0x134>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a41      	ldr	r2, [pc, #260]	@ (80053b4 <TIM_Base_SetConfig+0x138>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a40      	ldr	r2, [pc, #256]	@ (80053b8 <TIM_Base_SetConfig+0x13c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a35      	ldr	r2, [pc, #212]	@ (80053a8 <TIM_Base_SetConfig+0x12c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052dc:	d027      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a32      	ldr	r2, [pc, #200]	@ (80053ac <TIM_Base_SetConfig+0x130>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d023      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a31      	ldr	r2, [pc, #196]	@ (80053b0 <TIM_Base_SetConfig+0x134>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a30      	ldr	r2, [pc, #192]	@ (80053b4 <TIM_Base_SetConfig+0x138>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2f      	ldr	r2, [pc, #188]	@ (80053b8 <TIM_Base_SetConfig+0x13c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d017      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2e      	ldr	r2, [pc, #184]	@ (80053bc <TIM_Base_SetConfig+0x140>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2d      	ldr	r2, [pc, #180]	@ (80053c0 <TIM_Base_SetConfig+0x144>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2c      	ldr	r2, [pc, #176]	@ (80053c4 <TIM_Base_SetConfig+0x148>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2b      	ldr	r2, [pc, #172]	@ (80053c8 <TIM_Base_SetConfig+0x14c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2a      	ldr	r2, [pc, #168]	@ (80053cc <TIM_Base_SetConfig+0x150>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a29      	ldr	r2, [pc, #164]	@ (80053d0 <TIM_Base_SetConfig+0x154>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a10      	ldr	r2, [pc, #64]	@ (80053a8 <TIM_Base_SetConfig+0x12c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0xf8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a12      	ldr	r2, [pc, #72]	@ (80053b8 <TIM_Base_SetConfig+0x13c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d103      	bne.n	800537c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b01      	cmp	r3, #1
 800538c:	d105      	bne.n	800539a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]
  }
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40000c00 	.word	0x40000c00
 80053b8:	40010400 	.word	0x40010400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800
 80053c8:	40001800 	.word	0x40001800
 80053cc:	40001c00 	.word	0x40001c00
 80053d0:	40002000 	.word	0x40002000

080053d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005410:	b5b0      	push	{r4, r5, r7, lr}
 8005412:	b08c      	sub	sp, #48	@ 0x30
 8005414:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005416:	4b8f      	ldr	r3, [pc, #572]	@ (8005654 <MX_LWIP_Init+0x244>)
 8005418:	22c0      	movs	r2, #192	@ 0xc0
 800541a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800541c:	4b8d      	ldr	r3, [pc, #564]	@ (8005654 <MX_LWIP_Init+0x244>)
 800541e:	22a8      	movs	r2, #168	@ 0xa8
 8005420:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 21;
 8005422:	4b8c      	ldr	r3, [pc, #560]	@ (8005654 <MX_LWIP_Init+0x244>)
 8005424:	2215      	movs	r2, #21
 8005426:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8005428:	4b8a      	ldr	r3, [pc, #552]	@ (8005654 <MX_LWIP_Init+0x244>)
 800542a:	226f      	movs	r2, #111	@ 0x6f
 800542c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800542e:	4b8a      	ldr	r3, [pc, #552]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005430:	22ff      	movs	r2, #255	@ 0xff
 8005432:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005434:	4b88      	ldr	r3, [pc, #544]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005436:	22ff      	movs	r2, #255	@ 0xff
 8005438:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800543a:	4b87      	ldr	r3, [pc, #540]	@ (8005658 <MX_LWIP_Init+0x248>)
 800543c:	22ff      	movs	r2, #255	@ 0xff
 800543e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005440:	4b85      	ldr	r3, [pc, #532]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005442:	2200      	movs	r2, #0
 8005444:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005446:	4b85      	ldr	r3, [pc, #532]	@ (800565c <MX_LWIP_Init+0x24c>)
 8005448:	22c0      	movs	r2, #192	@ 0xc0
 800544a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800544c:	4b83      	ldr	r3, [pc, #524]	@ (800565c <MX_LWIP_Init+0x24c>)
 800544e:	22a8      	movs	r2, #168	@ 0xa8
 8005450:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 21;
 8005452:	4b82      	ldr	r3, [pc, #520]	@ (800565c <MX_LWIP_Init+0x24c>)
 8005454:	2215      	movs	r2, #21
 8005456:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005458:	4b80      	ldr	r3, [pc, #512]	@ (800565c <MX_LWIP_Init+0x24c>)
 800545a:	2201      	movs	r2, #1
 800545c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800545e:	2100      	movs	r1, #0
 8005460:	2000      	movs	r0, #0
 8005462:	f005 fbbb 	bl	800abdc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005466:	4b7b      	ldr	r3, [pc, #492]	@ (8005654 <MX_LWIP_Init+0x244>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	061a      	lsls	r2, r3, #24
 800546c:	4b79      	ldr	r3, [pc, #484]	@ (8005654 <MX_LWIP_Init+0x244>)
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	431a      	orrs	r2, r3
 8005474:	4b77      	ldr	r3, [pc, #476]	@ (8005654 <MX_LWIP_Init+0x244>)
 8005476:	789b      	ldrb	r3, [r3, #2]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	4313      	orrs	r3, r2
 800547c:	4a75      	ldr	r2, [pc, #468]	@ (8005654 <MX_LWIP_Init+0x244>)
 800547e:	78d2      	ldrb	r2, [r2, #3]
 8005480:	4313      	orrs	r3, r2
 8005482:	061a      	lsls	r2, r3, #24
 8005484:	4b73      	ldr	r3, [pc, #460]	@ (8005654 <MX_LWIP_Init+0x244>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	0619      	lsls	r1, r3, #24
 800548a:	4b72      	ldr	r3, [pc, #456]	@ (8005654 <MX_LWIP_Init+0x244>)
 800548c:	785b      	ldrb	r3, [r3, #1]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	4319      	orrs	r1, r3
 8005492:	4b70      	ldr	r3, [pc, #448]	@ (8005654 <MX_LWIP_Init+0x244>)
 8005494:	789b      	ldrb	r3, [r3, #2]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	430b      	orrs	r3, r1
 800549a:	496e      	ldr	r1, [pc, #440]	@ (8005654 <MX_LWIP_Init+0x244>)
 800549c:	78c9      	ldrb	r1, [r1, #3]
 800549e:	430b      	orrs	r3, r1
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80054a6:	431a      	orrs	r2, r3
 80054a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005654 <MX_LWIP_Init+0x244>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	0619      	lsls	r1, r3, #24
 80054ae:	4b69      	ldr	r3, [pc, #420]	@ (8005654 <MX_LWIP_Init+0x244>)
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	4319      	orrs	r1, r3
 80054b6:	4b67      	ldr	r3, [pc, #412]	@ (8005654 <MX_LWIP_Init+0x244>)
 80054b8:	789b      	ldrb	r3, [r3, #2]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	430b      	orrs	r3, r1
 80054be:	4965      	ldr	r1, [pc, #404]	@ (8005654 <MX_LWIP_Init+0x244>)
 80054c0:	78c9      	ldrb	r1, [r1, #3]
 80054c2:	430b      	orrs	r3, r1
 80054c4:	0a1b      	lsrs	r3, r3, #8
 80054c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80054ca:	431a      	orrs	r2, r3
 80054cc:	4b61      	ldr	r3, [pc, #388]	@ (8005654 <MX_LWIP_Init+0x244>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	0619      	lsls	r1, r3, #24
 80054d2:	4b60      	ldr	r3, [pc, #384]	@ (8005654 <MX_LWIP_Init+0x244>)
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	4319      	orrs	r1, r3
 80054da:	4b5e      	ldr	r3, [pc, #376]	@ (8005654 <MX_LWIP_Init+0x244>)
 80054dc:	789b      	ldrb	r3, [r3, #2]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	430b      	orrs	r3, r1
 80054e2:	495c      	ldr	r1, [pc, #368]	@ (8005654 <MX_LWIP_Init+0x244>)
 80054e4:	78c9      	ldrb	r1, [r1, #3]
 80054e6:	430b      	orrs	r3, r1
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	4313      	orrs	r3, r2
 80054ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005660 <MX_LWIP_Init+0x250>)
 80054ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80054f0:	4b59      	ldr	r3, [pc, #356]	@ (8005658 <MX_LWIP_Init+0x248>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	061a      	lsls	r2, r3, #24
 80054f6:	4b58      	ldr	r3, [pc, #352]	@ (8005658 <MX_LWIP_Init+0x248>)
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	431a      	orrs	r2, r3
 80054fe:	4b56      	ldr	r3, [pc, #344]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005500:	789b      	ldrb	r3, [r3, #2]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	4313      	orrs	r3, r2
 8005506:	4a54      	ldr	r2, [pc, #336]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005508:	78d2      	ldrb	r2, [r2, #3]
 800550a:	4313      	orrs	r3, r2
 800550c:	061a      	lsls	r2, r3, #24
 800550e:	4b52      	ldr	r3, [pc, #328]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	0619      	lsls	r1, r3, #24
 8005514:	4b50      	ldr	r3, [pc, #320]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	041b      	lsls	r3, r3, #16
 800551a:	4319      	orrs	r1, r3
 800551c:	4b4e      	ldr	r3, [pc, #312]	@ (8005658 <MX_LWIP_Init+0x248>)
 800551e:	789b      	ldrb	r3, [r3, #2]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	430b      	orrs	r3, r1
 8005524:	494c      	ldr	r1, [pc, #304]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005526:	78c9      	ldrb	r1, [r1, #3]
 8005528:	430b      	orrs	r3, r1
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005530:	431a      	orrs	r2, r3
 8005532:	4b49      	ldr	r3, [pc, #292]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	0619      	lsls	r1, r3, #24
 8005538:	4b47      	ldr	r3, [pc, #284]	@ (8005658 <MX_LWIP_Init+0x248>)
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	4319      	orrs	r1, r3
 8005540:	4b45      	ldr	r3, [pc, #276]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005542:	789b      	ldrb	r3, [r3, #2]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	430b      	orrs	r3, r1
 8005548:	4943      	ldr	r1, [pc, #268]	@ (8005658 <MX_LWIP_Init+0x248>)
 800554a:	78c9      	ldrb	r1, [r1, #3]
 800554c:	430b      	orrs	r3, r1
 800554e:	0a1b      	lsrs	r3, r3, #8
 8005550:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005554:	431a      	orrs	r2, r3
 8005556:	4b40      	ldr	r3, [pc, #256]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	0619      	lsls	r1, r3, #24
 800555c:	4b3e      	ldr	r3, [pc, #248]	@ (8005658 <MX_LWIP_Init+0x248>)
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	4319      	orrs	r1, r3
 8005564:	4b3c      	ldr	r3, [pc, #240]	@ (8005658 <MX_LWIP_Init+0x248>)
 8005566:	789b      	ldrb	r3, [r3, #2]
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	430b      	orrs	r3, r1
 800556c:	493a      	ldr	r1, [pc, #232]	@ (8005658 <MX_LWIP_Init+0x248>)
 800556e:	78c9      	ldrb	r1, [r1, #3]
 8005570:	430b      	orrs	r3, r1
 8005572:	0e1b      	lsrs	r3, r3, #24
 8005574:	4313      	orrs	r3, r2
 8005576:	4a3b      	ldr	r2, [pc, #236]	@ (8005664 <MX_LWIP_Init+0x254>)
 8005578:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800557a:	4b38      	ldr	r3, [pc, #224]	@ (800565c <MX_LWIP_Init+0x24c>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	061a      	lsls	r2, r3, #24
 8005580:	4b36      	ldr	r3, [pc, #216]	@ (800565c <MX_LWIP_Init+0x24c>)
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	431a      	orrs	r2, r3
 8005588:	4b34      	ldr	r3, [pc, #208]	@ (800565c <MX_LWIP_Init+0x24c>)
 800558a:	789b      	ldrb	r3, [r3, #2]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	4313      	orrs	r3, r2
 8005590:	4a32      	ldr	r2, [pc, #200]	@ (800565c <MX_LWIP_Init+0x24c>)
 8005592:	78d2      	ldrb	r2, [r2, #3]
 8005594:	4313      	orrs	r3, r2
 8005596:	061a      	lsls	r2, r3, #24
 8005598:	4b30      	ldr	r3, [pc, #192]	@ (800565c <MX_LWIP_Init+0x24c>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	0619      	lsls	r1, r3, #24
 800559e:	4b2f      	ldr	r3, [pc, #188]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	041b      	lsls	r3, r3, #16
 80055a4:	4319      	orrs	r1, r3
 80055a6:	4b2d      	ldr	r3, [pc, #180]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055a8:	789b      	ldrb	r3, [r3, #2]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	430b      	orrs	r3, r1
 80055ae:	492b      	ldr	r1, [pc, #172]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055b0:	78c9      	ldrb	r1, [r1, #3]
 80055b2:	430b      	orrs	r3, r1
 80055b4:	021b      	lsls	r3, r3, #8
 80055b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80055ba:	431a      	orrs	r2, r3
 80055bc:	4b27      	ldr	r3, [pc, #156]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	0619      	lsls	r1, r3, #24
 80055c2:	4b26      	ldr	r3, [pc, #152]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	041b      	lsls	r3, r3, #16
 80055c8:	4319      	orrs	r1, r3
 80055ca:	4b24      	ldr	r3, [pc, #144]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055cc:	789b      	ldrb	r3, [r3, #2]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	430b      	orrs	r3, r1
 80055d2:	4922      	ldr	r1, [pc, #136]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055d4:	78c9      	ldrb	r1, [r1, #3]
 80055d6:	430b      	orrs	r3, r1
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80055de:	431a      	orrs	r2, r3
 80055e0:	4b1e      	ldr	r3, [pc, #120]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	0619      	lsls	r1, r3, #24
 80055e6:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	041b      	lsls	r3, r3, #16
 80055ec:	4319      	orrs	r1, r3
 80055ee:	4b1b      	ldr	r3, [pc, #108]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055f0:	789b      	ldrb	r3, [r3, #2]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	430b      	orrs	r3, r1
 80055f6:	4919      	ldr	r1, [pc, #100]	@ (800565c <MX_LWIP_Init+0x24c>)
 80055f8:	78c9      	ldrb	r1, [r1, #3]
 80055fa:	430b      	orrs	r3, r1
 80055fc:	0e1b      	lsrs	r3, r3, #24
 80055fe:	4313      	orrs	r3, r2
 8005600:	4a19      	ldr	r2, [pc, #100]	@ (8005668 <MX_LWIP_Init+0x258>)
 8005602:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005604:	4b19      	ldr	r3, [pc, #100]	@ (800566c <MX_LWIP_Init+0x25c>)
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	4b19      	ldr	r3, [pc, #100]	@ (8005670 <MX_LWIP_Init+0x260>)
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	2300      	movs	r3, #0
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	4b15      	ldr	r3, [pc, #84]	@ (8005668 <MX_LWIP_Init+0x258>)
 8005612:	4a14      	ldr	r2, [pc, #80]	@ (8005664 <MX_LWIP_Init+0x254>)
 8005614:	4912      	ldr	r1, [pc, #72]	@ (8005660 <MX_LWIP_Init+0x250>)
 8005616:	4817      	ldr	r0, [pc, #92]	@ (8005674 <MX_LWIP_Init+0x264>)
 8005618:	f006 f8a8 	bl	800b76c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800561c:	4815      	ldr	r0, [pc, #84]	@ (8005674 <MX_LWIP_Init+0x264>)
 800561e:	f006 fa53 	bl	800bac8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005622:	4814      	ldr	r0, [pc, #80]	@ (8005674 <MX_LWIP_Init+0x264>)
 8005624:	f006 fa60 	bl	800bae8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005628:	4913      	ldr	r1, [pc, #76]	@ (8005678 <MX_LWIP_Init+0x268>)
 800562a:	4812      	ldr	r0, [pc, #72]	@ (8005674 <MX_LWIP_Init+0x264>)
 800562c:	f006 fb5e 	bl	800bcec <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005630:	4b12      	ldr	r3, [pc, #72]	@ (800567c <MX_LWIP_Init+0x26c>)
 8005632:	1d3c      	adds	r4, r7, #4
 8005634:	461d      	mov	r5, r3
 8005636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800563a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800563e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	490b      	ldr	r1, [pc, #44]	@ (8005674 <MX_LWIP_Init+0x264>)
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fdbb 	bl	80061c2 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800564c:	bf00      	nop
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bdb0      	pop	{r4, r5, r7, pc}
 8005654:	20001568 	.word	0x20001568
 8005658:	2000156c 	.word	0x2000156c
 800565c:	20001570 	.word	0x20001570
 8005660:	2000155c 	.word	0x2000155c
 8005664:	20001560 	.word	0x20001560
 8005668:	20001564 	.word	0x20001564
 800566c:	0800ab6d 	.word	0x0800ab6d
 8005670:	08005bf1 	.word	0x08005bf1
 8005674:	20001528 	.word	0x20001528
 8005678:	08005681 	.word	0x08005681
 800567c:	080111a0 	.word	0x080111a0

08005680 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <SCB_InvalidateDCache_by_Addr>:
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	2320      	movs	r3, #32
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	bf00      	nop
 80056b0:	e00b      	b.n	80056ca <SCB_InvalidateDCache_by_Addr+0x36>
 80056b2:	4a0d      	ldr	r2, [pc, #52]	@ (80056e8 <SCB_InvalidateDCache_by_Addr+0x54>)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dcf0      	bgt.n	80056b2 <SCB_InvalidateDCache_by_Addr+0x1e>
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	bf00      	nop
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	bf00      	nop
 80056dc:	bf00      	nop
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	e000ed00 	.word	0xe000ed00

080056ec <HAL_ETH_RxCpltCallback>:
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	4b04      	ldr	r3, [pc, #16]	@ (8005708 <HAL_ETH_RxCpltCallback+0x1c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 feeb 	bl	80064d4 <osSemaphoreRelease>
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20005f00 	.word	0x20005f00

0800570c <HAL_ETH_TxCpltCallback>:
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	4b04      	ldr	r3, [pc, #16]	@ (8005728 <HAL_ETH_TxCpltCallback+0x1c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fedb 	bl	80064d4 <osSemaphoreRelease>
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20005f04 	.word	0x20005f04

0800572c <HAL_ETH_ErrorCallback>:
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fe f863 	bl	8003800 <HAL_ETH_GetDMAError>
 800573a:	4603      	mov	r3, r0
 800573c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005740:	2b80      	cmp	r3, #128	@ 0x80
 8005742:	d104      	bne.n	800574e <HAL_ETH_ErrorCallback+0x22>
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <HAL_ETH_ErrorCallback+0x2c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fec3 	bl	80064d4 <osSemaphoreRelease>
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20005f00 	.word	0x20005f00

0800575c <low_level_init>:
 800575c:	b5b0      	push	{r4, r5, r7, lr}
 800575e:	b0b4      	sub	sp, #208	@ 0xd0
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	2300      	movs	r3, #0
 8005766:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 800576a:	2300      	movs	r3, #0
 800576c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005776:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800577a:	2264      	movs	r2, #100	@ 0x64
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f00a fe3d 	bl	80103fe <memset>
 8005784:	4b9f      	ldr	r3, [pc, #636]	@ (8005a04 <low_level_init+0x2a8>)
 8005786:	4aa0      	ldr	r2, [pc, #640]	@ (8005a08 <low_level_init+0x2ac>)
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	2300      	movs	r3, #0
 800578c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8005790:	2380      	movs	r3, #128	@ 0x80
 8005792:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8005796:	23e1      	movs	r3, #225	@ 0xe1
 8005798:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80057a2:	2300      	movs	r3, #0
 80057a4:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
 80057a8:	2300      	movs	r3, #0
 80057aa:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80057ae:	4a95      	ldr	r2, [pc, #596]	@ (8005a04 <low_level_init+0x2a8>)
 80057b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80057b4:	6053      	str	r3, [r2, #4]
 80057b6:	4b93      	ldr	r3, [pc, #588]	@ (8005a04 <low_level_init+0x2a8>)
 80057b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80057bc:	609a      	str	r2, [r3, #8]
 80057be:	4b91      	ldr	r3, [pc, #580]	@ (8005a04 <low_level_init+0x2a8>)
 80057c0:	4a92      	ldr	r2, [pc, #584]	@ (8005a0c <low_level_init+0x2b0>)
 80057c2:	60da      	str	r2, [r3, #12]
 80057c4:	4b8f      	ldr	r3, [pc, #572]	@ (8005a04 <low_level_init+0x2a8>)
 80057c6:	4a92      	ldr	r2, [pc, #584]	@ (8005a10 <low_level_init+0x2b4>)
 80057c8:	611a      	str	r2, [r3, #16]
 80057ca:	4b8e      	ldr	r3, [pc, #568]	@ (8005a04 <low_level_init+0x2a8>)
 80057cc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80057d0:	615a      	str	r2, [r3, #20]
 80057d2:	488c      	ldr	r0, [pc, #560]	@ (8005a04 <low_level_init+0x2a8>)
 80057d4:	f7fd f9d8 	bl	8002b88 <HAL_ETH_Init>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 80057de:	2238      	movs	r2, #56	@ 0x38
 80057e0:	2100      	movs	r1, #0
 80057e2:	488c      	ldr	r0, [pc, #560]	@ (8005a14 <low_level_init+0x2b8>)
 80057e4:	f00a fe0b 	bl	80103fe <memset>
 80057e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005a14 <low_level_init+0x2b8>)
 80057ea:	2221      	movs	r2, #33	@ 0x21
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	4b89      	ldr	r3, [pc, #548]	@ (8005a14 <low_level_init+0x2b8>)
 80057f0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80057f4:	615a      	str	r2, [r3, #20]
 80057f6:	4b87      	ldr	r3, [pc, #540]	@ (8005a14 <low_level_init+0x2b8>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	611a      	str	r2, [r3, #16]
 80057fc:	4886      	ldr	r0, [pc, #536]	@ (8005a18 <low_level_init+0x2bc>)
 80057fe:	f005 fe6f 	bl	800b4e0 <memp_init_pool>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2206      	movs	r2, #6
 8005806:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800580a:	4b7e      	ldr	r3, [pc, #504]	@ (8005a04 <low_level_init+0x2a8>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8005816:	4b7b      	ldr	r3, [pc, #492]	@ (8005a04 <low_level_init+0x2a8>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	785a      	ldrb	r2, [r3, #1]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8005822:	4b78      	ldr	r3, [pc, #480]	@ (8005a04 <low_level_init+0x2a8>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	789a      	ldrb	r2, [r3, #2]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800582e:	4b75      	ldr	r3, [pc, #468]	@ (8005a04 <low_level_init+0x2a8>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	78da      	ldrb	r2, [r3, #3]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800583a:	4b72      	ldr	r3, [pc, #456]	@ (8005a04 <low_level_init+0x2a8>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	791a      	ldrb	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8005846:	4b6f      	ldr	r3, [pc, #444]	@ (8005a04 <low_level_init+0x2a8>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	795a      	ldrb	r2, [r3, #5]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005858:	849a      	strh	r2, [r3, #36]	@ 0x24
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005860:	f043 030a 	orr.w	r3, r3, #10
 8005864:	b2da      	uxtb	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 800586c:	2300      	movs	r3, #0
 800586e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005870:	2300      	movs	r3, #0
 8005872:	653b      	str	r3, [r7, #80]	@ 0x50
 8005874:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005878:	2101      	movs	r1, #1
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fdaa 	bl	80063d4 <osSemaphoreCreate>
 8005880:	4603      	mov	r3, r0
 8005882:	4a66      	ldr	r2, [pc, #408]	@ (8005a1c <low_level_init+0x2c0>)
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	2300      	movs	r3, #0
 8005888:	647b      	str	r3, [r7, #68]	@ 0x44
 800588a:	2300      	movs	r3, #0
 800588c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800588e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005892:	2101      	movs	r1, #1
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fd9d 	bl	80063d4 <osSemaphoreCreate>
 800589a:	4603      	mov	r3, r0
 800589c:	4a60      	ldr	r2, [pc, #384]	@ (8005a20 <low_level_init+0x2c4>)
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	4b5e      	ldr	r3, [pc, #376]	@ (8005a1c <low_level_init+0x2c0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fdc6 	bl	8006438 <osSemaphoreWait>
 80058ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005a20 <low_level_init+0x2c4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fdc0 	bl	8006438 <osSemaphoreWait>
 80058b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005a24 <low_level_init+0x2c8>)
 80058ba:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80058be:	461d      	mov	r5, r3
 80058c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fc75 	bl	80061c2 <osThreadCreate>
 80058d8:	4953      	ldr	r1, [pc, #332]	@ (8005a28 <low_level_init+0x2cc>)
 80058da:	4854      	ldr	r0, [pc, #336]	@ (8005a2c <low_level_init+0x2d0>)
 80058dc:	f7fc f871 	bl	80019c2 <LAN8742_RegisterBusIO>
 80058e0:	4852      	ldr	r0, [pc, #328]	@ (8005a2c <low_level_init+0x2d0>)
 80058e2:	f7fc f8a0 	bl	8001a26 <LAN8742_Init>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d006      	beq.n	80058fa <low_level_init+0x19e>
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f006 f9cd 	bl	800bc8c <netif_set_link_down>
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f006 f964 	bl	800bbc0 <netif_set_down>
 80058f8:	e081      	b.n	80059fe <low_level_init+0x2a2>
 80058fa:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d165      	bne.n	80059ce <low_level_init+0x272>
 8005902:	484a      	ldr	r0, [pc, #296]	@ (8005a2c <low_level_init+0x2d0>)
 8005904:	f7fc f8dc 	bl	8001ac0 <LAN8742_GetLinkState>
 8005908:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800590c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005910:	2b01      	cmp	r3, #1
 8005912:	dc06      	bgt.n	8005922 <low_level_init+0x1c6>
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f006 f9b9 	bl	800bc8c <netif_set_link_down>
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f006 f950 	bl	800bbc0 <netif_set_down>
 8005920:	e057      	b.n	80059d2 <low_level_init+0x276>
 8005922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005926:	3b02      	subs	r3, #2
 8005928:	2b03      	cmp	r3, #3
 800592a:	d82b      	bhi.n	8005984 <low_level_init+0x228>
 800592c:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <low_level_init+0x1d8>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005945 	.word	0x08005945
 8005938:	08005957 	.word	0x08005957
 800593c:	08005967 	.word	0x08005967
 8005940:	08005977 	.word	0x08005977
 8005944:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005948:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800594c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005950:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005954:	e01f      	b.n	8005996 <low_level_init+0x23a>
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800595c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005960:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005964:	e017      	b.n	8005996 <low_level_init+0x23a>
 8005966:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800596a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800596e:	2300      	movs	r3, #0
 8005970:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005974:	e00f      	b.n	8005996 <low_level_init+0x23a>
 8005976:	2300      	movs	r3, #0
 8005978:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005982:	e008      	b.n	8005996 <low_level_init+0x23a>
 8005984:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005988:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800598c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005994:	bf00      	nop
 8005996:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800599a:	4619      	mov	r1, r3
 800599c:	4819      	ldr	r0, [pc, #100]	@ (8005a04 <low_level_init+0x2a8>)
 800599e:	f7fd fddb 	bl	8003558 <HAL_ETH_GetMACConfig>
 80059a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80059a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80059ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80059b2:	4619      	mov	r1, r3
 80059b4:	4813      	ldr	r0, [pc, #76]	@ (8005a04 <low_level_init+0x2a8>)
 80059b6:	f7fd fec6 	bl	8003746 <HAL_ETH_SetMACConfig>
 80059ba:	4812      	ldr	r0, [pc, #72]	@ (8005a04 <low_level_init+0x2a8>)
 80059bc:	f7fd f97e 	bl	8002cbc <HAL_ETH_Start_IT>
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f006 f891 	bl	800bae8 <netif_set_up>
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f006 f92c 	bl	800bc24 <netif_set_link_up>
 80059cc:	e001      	b.n	80059d2 <low_level_init+0x276>
 80059ce:	f7fb fd63 	bl	8001498 <Error_Handler>
 80059d2:	f7fc f94d 	bl	8001c70 <HAL_GetREVID>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059dc:	d10f      	bne.n	80059fe <low_level_init+0x2a2>
 80059de:	4b14      	ldr	r3, [pc, #80]	@ (8005a30 <low_level_init+0x2d4>)
 80059e0:	f107 040c 	add.w	r4, r7, #12
 80059e4:	461d      	mov	r5, r3
 80059e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80059ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fbe2 	bl	80061c2 <osThreadCreate>
 80059fe:	37d0      	adds	r7, #208	@ 0xd0
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bdb0      	pop	{r4, r5, r7, pc}
 8005a04:	20005f08 	.word	0x20005f08
 8005a08:	40028000 	.word	0x40028000
 8005a0c:	20000124 	.word	0x20000124
 8005a10:	20000084 	.word	0x20000084
 8005a14:	20005fb8 	.word	0x20005fb8
 8005a18:	08013258 	.word	0x08013258
 8005a1c:	20005f00 	.word	0x20005f00
 8005a20:	20005f04 	.word	0x20005f04
 8005a24:	080111c4 	.word	0x080111c4
 8005a28:	2000000c 	.word	0x2000000c
 8005a2c:	20005ff0 	.word	0x20005ff0
 8005a30:	080111f0 	.word	0x080111f0

08005a34 <low_level_output>:
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b092      	sub	sp, #72	@ 0x48
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a42:	2300      	movs	r3, #0
 8005a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a46:	2300      	movs	r3, #0
 8005a48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005a4c:	f107 030c 	add.w	r3, r7, #12
 8005a50:	2230      	movs	r2, #48	@ 0x30
 8005a52:	2100      	movs	r1, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f00a fcd2 	bl	80103fe <memset>
 8005a5a:	f107 030c 	add.w	r3, r7, #12
 8005a5e:	2230      	movs	r2, #48	@ 0x30
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f00a fccb 	bl	80103fe <memset>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a6c:	e045      	b.n	8005afa <low_level_output+0xc6>
 8005a6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d902      	bls.n	8005a7a <low_level_output+0x46>
 8005a74:	f06f 030b 	mvn.w	r3, #11
 8005a78:	e06c      	b.n	8005b54 <low_level_output+0x120>
 8005a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a7c:	6859      	ldr	r1, [r3, #4]
 8005a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a80:	4613      	mov	r3, r2
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	3348      	adds	r3, #72	@ 0x48
 8005a8a:	443b      	add	r3, r7
 8005a8c:	3b3c      	subs	r3, #60	@ 0x3c
 8005a8e:	6019      	str	r1, [r3, #0]
 8005a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a92:	895b      	ldrh	r3, [r3, #10]
 8005a94:	4619      	mov	r1, r3
 8005a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a98:	4613      	mov	r3, r2
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	3348      	adds	r3, #72	@ 0x48
 8005aa2:	443b      	add	r3, r7
 8005aa4:	3b38      	subs	r3, #56	@ 0x38
 8005aa6:	6019      	str	r1, [r3, #0]
 8005aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d011      	beq.n	8005ad2 <low_level_output+0x9e>
 8005aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab0:	1e5a      	subs	r2, r3, #1
 8005ab2:	f107 000c 	add.w	r0, r7, #12
 8005ab6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ab8:	460b      	mov	r3, r1
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	440b      	add	r3, r1
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	18c1      	adds	r1, r0, r3
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	3348      	adds	r3, #72	@ 0x48
 8005acc:	443b      	add	r3, r7
 8005ace:	3b34      	subs	r3, #52	@ 0x34
 8005ad0:	6019      	str	r1, [r3, #0]
 8005ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <low_level_output+0xba>
 8005ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005adc:	4613      	mov	r3, r2
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	3348      	adds	r3, #72	@ 0x48
 8005ae6:	443b      	add	r3, r7
 8005ae8:	3b34      	subs	r3, #52	@ 0x34
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af0:	3301      	adds	r3, #1
 8005af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1b6      	bne.n	8005a6e <low_level_output+0x3a>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	891b      	ldrh	r3, [r3, #8]
 8005b04:	461a      	mov	r2, r3
 8005b06:	4b15      	ldr	r3, [pc, #84]	@ (8005b5c <low_level_output+0x128>)
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	4a14      	ldr	r2, [pc, #80]	@ (8005b5c <low_level_output+0x128>)
 8005b0c:	f107 030c 	add.w	r3, r7, #12
 8005b10:	6093      	str	r3, [r2, #8]
 8005b12:	4a12      	ldr	r2, [pc, #72]	@ (8005b5c <low_level_output+0x128>)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	6353      	str	r3, [r2, #52]	@ 0x34
 8005b18:	6838      	ldr	r0, [r7, #0]
 8005b1a:	f006 fcdf 	bl	800c4dc <pbuf_ref>
 8005b1e:	490f      	ldr	r1, [pc, #60]	@ (8005b5c <low_level_output+0x128>)
 8005b20:	480f      	ldr	r0, [pc, #60]	@ (8005b60 <low_level_output+0x12c>)
 8005b22:	f7fd f9bb 	bl	8002e9c <HAL_ETH_Transmit_IT>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10e      	bne.n	8005b4a <low_level_output+0x116>
 8005b2c:	bf00      	nop
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b64 <low_level_output+0x130>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f04f 31ff 	mov.w	r1, #4294967295
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fc7e 	bl	8006438 <osSemaphoreWait>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f5      	bne.n	8005b2e <low_level_output+0xfa>
 8005b42:	4807      	ldr	r0, [pc, #28]	@ (8005b60 <low_level_output+0x12c>)
 8005b44:	f7fd fb4a 	bl	80031dc <HAL_ETH_ReleaseTxPacket>
 8005b48:	e002      	b.n	8005b50 <low_level_output+0x11c>
 8005b4a:	6838      	ldr	r0, [r7, #0]
 8005b4c:	f006 fc20 	bl	800c390 <pbuf_free>
 8005b50:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005b54:	4618      	mov	r0, r3
 8005b56:	3748      	adds	r7, #72	@ 0x48
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20005fb8 	.word	0x20005fb8
 8005b60:	20005f08 	.word	0x20005f08
 8005b64:	20005f04 	.word	0x20005f04

08005b68 <low_level_input>:
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	4b07      	ldr	r3, [pc, #28]	@ (8005b94 <low_level_input+0x2c>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <low_level_input+0x20>
 8005b7c:	f107 030c 	add.w	r3, r7, #12
 8005b80:	4619      	mov	r1, r3
 8005b82:	4805      	ldr	r0, [pc, #20]	@ (8005b98 <low_level_input+0x30>)
 8005b84:	f7fd f9e6 	bl	8002f54 <HAL_ETH_ReadData>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20005efc 	.word	0x20005efc
 8005b98:	20005f08 	.word	0x20005f08

08005b9c <ethernetif_input>:
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60bb      	str	r3, [r7, #8]
 8005bac:	4b0f      	ldr	r3, [pc, #60]	@ (8005bec <ethernetif_input+0x50>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fc3f 	bl	8006438 <osSemaphoreWait>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f5      	bne.n	8005bac <ethernetif_input+0x10>
 8005bc0:	68b8      	ldr	r0, [r7, #8]
 8005bc2:	f7ff ffd1 	bl	8005b68 <low_level_input>
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <ethernetif_input+0x48>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	4798      	blx	r3
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <ethernetif_input+0x48>
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f006 fbd6 	bl	800c390 <pbuf_free>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1ea      	bne.n	8005bc0 <ethernetif_input+0x24>
 8005bea:	e7df      	b.n	8005bac <ethernetif_input+0x10>
 8005bec:	20005f00 	.word	0x20005f00

08005bf0 <ethernetif_init>:
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <ethernetif_init+0x1c>
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8005c38 <ethernetif_init+0x48>)
 8005c00:	f240 2207 	movw	r2, #519	@ 0x207
 8005c04:	490d      	ldr	r1, [pc, #52]	@ (8005c3c <ethernetif_init+0x4c>)
 8005c06:	480e      	ldr	r0, [pc, #56]	@ (8005c40 <ethernetif_init+0x50>)
 8005c08:	f00a fb94 	bl	8010334 <iprintf>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2273      	movs	r2, #115	@ 0x73
 8005c10:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2274      	movs	r2, #116	@ 0x74
 8005c18:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a09      	ldr	r2, [pc, #36]	@ (8005c44 <ethernetif_init+0x54>)
 8005c20:	615a      	str	r2, [r3, #20]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a08      	ldr	r2, [pc, #32]	@ (8005c48 <ethernetif_init+0x58>)
 8005c26:	619a      	str	r2, [r3, #24]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fd97 	bl	800575c <low_level_init>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	0801120c 	.word	0x0801120c
 8005c3c:	08011228 	.word	0x08011228
 8005c40:	08011238 	.word	0x08011238
 8005c44:	0800de05 	.word	0x0800de05
 8005c48:	08005a35 	.word	0x08005a35

08005c4c <pbuf_free_custom>:
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	4809      	ldr	r0, [pc, #36]	@ (8005c80 <pbuf_free_custom+0x34>)
 8005c5c:	f005 fd30 	bl	800b6c0 <memp_free_pool>
 8005c60:	4b08      	ldr	r3, [pc, #32]	@ (8005c84 <pbuf_free_custom+0x38>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <pbuf_free_custom+0x2c>
 8005c68:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <pbuf_free_custom+0x38>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <pbuf_free_custom+0x3c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fc2e 	bl	80064d4 <osSemaphoreRelease>
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	08013258 	.word	0x08013258
 8005c84:	20005efc 	.word	0x20005efc
 8005c88:	20005f00 	.word	0x20005f00

08005c8c <sys_now>:
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	f7fb ffbe 	bl	8001c10 <HAL_GetTick>
 8005c94:	4603      	mov	r3, r0
 8005c96:	4618      	mov	r0, r3
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <HAL_ETH_MspInit>:
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08e      	sub	sp, #56	@ 0x38
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	605a      	str	r2, [r3, #4]
 8005cae:	609a      	str	r2, [r3, #8]
 8005cb0:	60da      	str	r2, [r3, #12]
 8005cb2:	611a      	str	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a52      	ldr	r2, [pc, #328]	@ (8005e04 <HAL_ETH_MspInit+0x168>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	f040 809e 	bne.w	8005dfc <HAL_ETH_MspInit+0x160>
 8005cc0:	4b51      	ldr	r3, [pc, #324]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc4:	4a50      	ldr	r2, [pc, #320]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd4:	623b      	str	r3, [r7, #32]
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cdc:	4a4a      	ldr	r2, [pc, #296]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005cde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ce4:	4b48      	ldr	r3, [pc, #288]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4b45      	ldr	r3, [pc, #276]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf4:	4a44      	ldr	r2, [pc, #272]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005cf6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cfc:	4b42      	ldr	r3, [pc, #264]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	4b3f      	ldr	r3, [pc, #252]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d0e:	f043 0304 	orr.w	r3, r3, #4
 8005d12:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d14:	4b3c      	ldr	r3, [pc, #240]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4b39      	ldr	r3, [pc, #228]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d24:	4a38      	ldr	r2, [pc, #224]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d2c:	4b36      	ldr	r3, [pc, #216]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4b33      	ldr	r3, [pc, #204]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	4a32      	ldr	r2, [pc, #200]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d44:	4b30      	ldr	r3, [pc, #192]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4b2d      	ldr	r3, [pc, #180]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d54:	4a2c      	ldr	r2, [pc, #176]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e08 <HAL_ETH_MspInit+0x16c>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2332      	movs	r3, #50	@ 0x32
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d70:	2300      	movs	r3, #0
 8005d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d74:	2303      	movs	r3, #3
 8005d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d78:	230b      	movs	r3, #11
 8005d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d80:	4619      	mov	r1, r3
 8005d82:	4822      	ldr	r0, [pc, #136]	@ (8005e0c <HAL_ETH_MspInit+0x170>)
 8005d84:	f7fe f968 	bl	8004058 <HAL_GPIO_Init>
 8005d88:	2386      	movs	r3, #134	@ 0x86
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d90:	2300      	movs	r3, #0
 8005d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d94:	2303      	movs	r3, #3
 8005d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d98:	230b      	movs	r3, #11
 8005d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005da0:	4619      	mov	r1, r3
 8005da2:	481b      	ldr	r0, [pc, #108]	@ (8005e10 <HAL_ETH_MspInit+0x174>)
 8005da4:	f7fe f958 	bl	8004058 <HAL_GPIO_Init>
 8005da8:	f243 0301 	movw	r3, #12289	@ 0x3001
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dae:	2302      	movs	r3, #2
 8005db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005db2:	2300      	movs	r3, #0
 8005db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005db6:	2303      	movs	r3, #3
 8005db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dba:	230b      	movs	r3, #11
 8005dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4813      	ldr	r0, [pc, #76]	@ (8005e14 <HAL_ETH_MspInit+0x178>)
 8005dc6:	f7fe f947 	bl	8004058 <HAL_GPIO_Init>
 8005dca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dd8:	2303      	movs	r3, #3
 8005dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ddc:	230b      	movs	r3, #11
 8005dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005de4:	4619      	mov	r1, r3
 8005de6:	480c      	ldr	r0, [pc, #48]	@ (8005e18 <HAL_ETH_MspInit+0x17c>)
 8005de8:	f7fe f936 	bl	8004058 <HAL_GPIO_Init>
 8005dec:	2200      	movs	r2, #0
 8005dee:	2105      	movs	r1, #5
 8005df0:	203d      	movs	r0, #61	@ 0x3d
 8005df2:	f7fc fe9f 	bl	8002b34 <HAL_NVIC_SetPriority>
 8005df6:	203d      	movs	r0, #61	@ 0x3d
 8005df8:	f7fc feb8 	bl	8002b6c <HAL_NVIC_EnableIRQ>
 8005dfc:	bf00      	nop
 8005dfe:	3738      	adds	r7, #56	@ 0x38
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40028000 	.word	0x40028000
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	40020800 	.word	0x40020800
 8005e10:	40020000 	.word	0x40020000
 8005e14:	40020400 	.word	0x40020400
 8005e18:	40021800 	.word	0x40021800

08005e1c <ETH_PHY_IO_Init>:
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	4802      	ldr	r0, [pc, #8]	@ (8005e2c <ETH_PHY_IO_Init+0x10>)
 8005e22:	f7fd fcab 	bl	800377c <HAL_ETH_SetMDIOClockRange>
 8005e26:	2300      	movs	r3, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20005f08 	.word	0x20005f08

08005e30 <ETH_PHY_IO_DeInit>:
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	2300      	movs	r3, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <ETH_PHY_IO_ReadReg>:
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	68f9      	ldr	r1, [r7, #12]
 8005e52:	4807      	ldr	r0, [pc, #28]	@ (8005e70 <ETH_PHY_IO_ReadReg+0x30>)
 8005e54:	f7fd faec 	bl	8003430 <HAL_ETH_ReadPHYRegister>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <ETH_PHY_IO_ReadReg+0x24>
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e62:	e000      	b.n	8005e66 <ETH_PHY_IO_ReadReg+0x26>
 8005e64:	2300      	movs	r3, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20005f08 	.word	0x20005f08

08005e74 <ETH_PHY_IO_WriteReg>:
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	4807      	ldr	r0, [pc, #28]	@ (8005ea4 <ETH_PHY_IO_WriteReg+0x30>)
 8005e88:	f7fd fb1d 	bl	80034c6 <HAL_ETH_WritePHYRegister>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <ETH_PHY_IO_WriteReg+0x24>
 8005e92:	f04f 33ff 	mov.w	r3, #4294967295
 8005e96:	e000      	b.n	8005e9a <ETH_PHY_IO_WriteReg+0x26>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20005f08 	.word	0x20005f08

08005ea8 <ETH_PHY_IO_GetTick>:
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8005eb0:	f7fb feba 	bl	8001c28 <HAL_Delay>
 8005eb4:	f7fb feac 	bl	8001c10 <HAL_GetTick>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <ethernet_link_thread>:
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b0a0      	sub	sp, #128	@ 0x80
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	f107 0308 	add.w	r3, r7, #8
 8005ecc:	2264      	movs	r2, #100	@ 0x64
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f00a fa94 	bl	80103fe <memset>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005eda:	2300      	movs	r3, #0
 8005edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ede:	2300      	movs	r3, #0
 8005ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005eea:	483a      	ldr	r0, [pc, #232]	@ (8005fd4 <ethernet_link_thread+0x114>)
 8005eec:	f7fb fde8 	bl	8001ac0 <LAN8742_GetLinkState>
 8005ef0:	6738      	str	r0, [r7, #112]	@ 0x70
 8005ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ef4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ef8:	089b      	lsrs	r3, r3, #2
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00c      	beq.n	8005f1e <ethernet_link_thread+0x5e>
 8005f04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	dc09      	bgt.n	8005f1e <ethernet_link_thread+0x5e>
 8005f0a:	4833      	ldr	r0, [pc, #204]	@ (8005fd8 <ethernet_link_thread+0x118>)
 8005f0c:	f7fc ff46 	bl	8002d9c <HAL_ETH_Stop_IT>
 8005f10:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f12:	f005 fe55 	bl	800bbc0 <netif_set_down>
 8005f16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f18:	f005 feb8 	bl	800bc8c <netif_set_link_down>
 8005f1c:	e055      	b.n	8005fca <ethernet_link_thread+0x10a>
 8005f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d14e      	bne.n	8005fca <ethernet_link_thread+0x10a>
 8005f2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	dd4b      	ble.n	8005fca <ethernet_link_thread+0x10a>
 8005f32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f34:	3b02      	subs	r3, #2
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d82a      	bhi.n	8005f90 <ethernet_link_thread+0xd0>
 8005f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <ethernet_link_thread+0x80>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f51 	.word	0x08005f51
 8005f44:	08005f63 	.word	0x08005f63
 8005f48:	08005f73 	.word	0x08005f73
 8005f4c:	08005f83 	.word	0x08005f83
 8005f50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f54:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f60:	e017      	b.n	8005f92 <ethernet_link_thread+0xd2>
 8005f62:	2300      	movs	r3, #0
 8005f64:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f70:	e00f      	b.n	8005f92 <ethernet_link_thread+0xd2>
 8005f72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f76:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f78:	2300      	movs	r3, #0
 8005f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f80:	e007      	b.n	8005f92 <ethernet_link_thread+0xd2>
 8005f82:	2300      	movs	r3, #0
 8005f84:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f86:	2300      	movs	r3, #0
 8005f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f8e:	e000      	b.n	8005f92 <ethernet_link_thread+0xd2>
 8005f90:	bf00      	nop
 8005f92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d018      	beq.n	8005fca <ethernet_link_thread+0x10a>
 8005f98:	f107 0308 	add.w	r3, r7, #8
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	480e      	ldr	r0, [pc, #56]	@ (8005fd8 <ethernet_link_thread+0x118>)
 8005fa0:	f7fd fada 	bl	8003558 <HAL_ETH_GetMACConfig>
 8005fa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fa6:	623b      	str	r3, [r7, #32]
 8005fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	f107 0308 	add.w	r3, r7, #8
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4809      	ldr	r0, [pc, #36]	@ (8005fd8 <ethernet_link_thread+0x118>)
 8005fb4:	f7fd fbc7 	bl	8003746 <HAL_ETH_SetMACConfig>
 8005fb8:	4807      	ldr	r0, [pc, #28]	@ (8005fd8 <ethernet_link_thread+0x118>)
 8005fba:	f7fc fe7f 	bl	8002cbc <HAL_ETH_Start_IT>
 8005fbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fc0:	f005 fd92 	bl	800bae8 <netif_set_up>
 8005fc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fc6:	f005 fe2d 	bl	800bc24 <netif_set_link_up>
 8005fca:	2064      	movs	r0, #100	@ 0x64
 8005fcc:	f000 f951 	bl	8006272 <osDelay>
 8005fd0:	e78b      	b.n	8005eea <ethernet_link_thread+0x2a>
 8005fd2:	bf00      	nop
 8005fd4:	20005ff0 	.word	0x20005ff0
 8005fd8:	20005f08 	.word	0x20005f08

08005fdc <HAL_ETH_RxAllocateCallback>:
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	4812      	ldr	r0, [pc, #72]	@ (8006030 <HAL_ETH_RxAllocateCallback+0x54>)
 8005fe6:	f005 faf7 	bl	800b5d8 <memp_malloc_pool>
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d014      	beq.n	800601c <HAL_ETH_RxAllocateCallback+0x40>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f103 0220 	add.w	r2, r3, #32
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8006034 <HAL_ETH_RxAllocateCallback+0x58>)
 8006000:	611a      	str	r2, [r3, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800600a:	9201      	str	r2, [sp, #4]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2241      	movs	r2, #65	@ 0x41
 8006012:	2100      	movs	r1, #0
 8006014:	2000      	movs	r0, #0
 8006016:	f006 f801 	bl	800c01c <pbuf_alloced_custom>
 800601a:	e005      	b.n	8006028 <HAL_ETH_RxAllocateCallback+0x4c>
 800601c:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <HAL_ETH_RxAllocateCallback+0x5c>)
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	08013258 	.word	0x08013258
 8006034:	08005c4d 	.word	0x08005c4d
 8006038:	20005efc 	.word	0x20005efc

0800603c <HAL_ETH_RxLinkCallback>:
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	807b      	strh	r3, [r7, #2]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3b20      	subs	r3, #32
 800605a:	61fb      	str	r3, [r7, #28]
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2200      	movs	r2, #0
 8006066:	811a      	strh	r2, [r3, #8]
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	887a      	ldrh	r2, [r7, #2]
 800606c:	815a      	strh	r2, [r3, #10]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d103      	bne.n	800607e <HAL_ETH_RxLinkCallback+0x42>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	e003      	b.n	8006086 <HAL_ETH_RxLinkCallback+0x4a>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	e009      	b.n	80060a8 <HAL_ETH_RxLinkCallback+0x6c>
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	891a      	ldrh	r2, [r3, #8]
 8006098:	887b      	ldrh	r3, [r7, #2]
 800609a:	4413      	add	r3, r2
 800609c:	b29a      	uxth	r2, r3
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	811a      	strh	r2, [r3, #8]
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f2      	bne.n	8006094 <HAL_ETH_RxLinkCallback+0x58>
 80060ae:	887b      	ldrh	r3, [r7, #2]
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff faee 	bl	8005694 <SCB_InvalidateDCache_by_Addr>
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_ETH_TxFreeCallback>:
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f006 f961 	bl	800c390 <pbuf_free>
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <RMII_Thread>:
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <RMII_Thread+0x60>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <RMII_Thread+0x1c>
 80060ec:	2000      	movs	r0, #0
 80060ee:	f000 f8b4 	bl	800625a <osThreadTerminate>
 80060f2:	e7f5      	b.n	80060e0 <RMII_Thread+0x8>
 80060f4:	4b10      	ldr	r3, [pc, #64]	@ (8006138 <RMII_Thread+0x60>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80060fc:	2b0a      	cmp	r3, #10
 80060fe:	d916      	bls.n	800612e <RMII_Thread+0x56>
 8006100:	4b0e      	ldr	r3, [pc, #56]	@ (800613c <RMII_Thread+0x64>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a0d      	ldr	r2, [pc, #52]	@ (800613c <RMII_Thread+0x64>)
 8006106:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800610a:	6053      	str	r3, [r2, #4]
 800610c:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <RMII_Thread+0x64>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	4a0a      	ldr	r2, [pc, #40]	@ (800613c <RMII_Thread+0x64>)
 8006112:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006116:	6053      	str	r3, [r2, #4]
 8006118:	4b07      	ldr	r3, [pc, #28]	@ (8006138 <RMII_Thread+0x60>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8006120:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <RMII_Thread+0x60>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800612c:	e7d8      	b.n	80060e0 <RMII_Thread+0x8>
 800612e:	20c8      	movs	r0, #200	@ 0xc8
 8006130:	f000 f89f 	bl	8006272 <osDelay>
 8006134:	e7d4      	b.n	80060e0 <RMII_Thread+0x8>
 8006136:	bf00      	nop
 8006138:	20005f08 	.word	0x20005f08
 800613c:	40013800 	.word	0x40013800

08006140 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800614e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006152:	2b84      	cmp	r3, #132	@ 0x84
 8006154:	d005      	beq.n	8006162 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006156:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	3303      	adds	r3, #3
 8006160:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006162:	68fb      	ldr	r3, [r7, #12]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006176:	f3ef 8305 	mrs	r3, IPSR
 800617a:	607b      	str	r3, [r7, #4]
  return(result);
 800617c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800617e:	2b00      	cmp	r3, #0
 8006180:	bf14      	ite	ne
 8006182:	2301      	movne	r3, #1
 8006184:	2300      	moveq	r3, #0
 8006186:	b2db      	uxtb	r3, r3
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006198:	f001 fe34 	bl	8007e04 <vTaskStartScheduler>
  
  return osOK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80061a6:	f7ff ffe3 	bl	8006170 <inHandlerMode>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80061b0:	f001 ff4c 	bl	800804c <xTaskGetTickCountFromISR>
 80061b4:	4603      	mov	r3, r0
 80061b6:	e002      	b.n	80061be <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80061b8:	f001 ff38 	bl	800802c <xTaskGetTickCount>
 80061bc:	4603      	mov	r3, r0
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80061c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c4:	b089      	sub	sp, #36	@ 0x24
 80061c6:	af04      	add	r7, sp, #16
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d020      	beq.n	8006216 <osThreadCreate+0x54>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01c      	beq.n	8006216 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685c      	ldr	r4, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691e      	ldr	r6, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff ffa6 	bl	8006140 <makeFreeRtosPriority>
 80061f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061fe:	9202      	str	r2, [sp, #8]
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	9100      	str	r1, [sp, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	4632      	mov	r2, r6
 8006208:	4629      	mov	r1, r5
 800620a:	4620      	mov	r0, r4
 800620c:	f001 fb90 	bl	8007930 <xTaskCreateStatic>
 8006210:	4603      	mov	r3, r0
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e01c      	b.n	8006250 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685c      	ldr	r4, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006222:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff ff88 	bl	8006140 <makeFreeRtosPriority>
 8006230:	4602      	mov	r2, r0
 8006232:	f107 030c 	add.w	r3, r7, #12
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	9200      	str	r2, [sp, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	4632      	mov	r2, r6
 800623e:	4629      	mov	r1, r5
 8006240:	4620      	mov	r0, r4
 8006242:	f001 fbdb 	bl	80079fc <xTaskCreate>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d001      	beq.n	8006250 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800624c:	2300      	movs	r3, #0
 800624e:	e000      	b.n	8006252 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006250:	68fb      	ldr	r3, [r7, #12]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800625a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 fd04 	bl	8007c70 <vTaskDelete>
  return osOK;
 8006268:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <osDelay+0x16>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	e000      	b.n	800628a <osDelay+0x18>
 8006288:	2301      	movs	r3, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fd82 	bl	8007d94 <vTaskDelay>
  
  return osOK;
 8006290:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	4619      	mov	r1, r3
 80062b0:	2001      	movs	r0, #1
 80062b2:	f000 fc9a 	bl	8006bea <xQueueCreateMutexStatic>
 80062b6:	4603      	mov	r3, r0
 80062b8:	e003      	b.n	80062c2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80062ba:	2001      	movs	r0, #1
 80062bc:	f000 fc7d 	bl	8006bba <xQueueCreateMutex>
 80062c0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <osMutexWait+0x18>
    return osErrorParameter;
 80062e0:	2380      	movs	r3, #128	@ 0x80
 80062e2:	e03a      	b.n	800635a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	d103      	bne.n	80062f8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80062f0:	f04f 33ff 	mov.w	r3, #4294967295
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	e009      	b.n	800630c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d006      	beq.n	800630c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <osMutexWait+0x40>
      ticks = 1;
 8006308:	2301      	movs	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800630c:	f7ff ff30 	bl	8006170 <inHandlerMode>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d017      	beq.n	8006346 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006316:	f107 0308 	add.w	r3, r7, #8
 800631a:	461a      	mov	r2, r3
 800631c:	2100      	movs	r1, #0
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 f8c4 	bl	80074ac <xQueueReceiveFromISR>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d001      	beq.n	800632e <osMutexWait+0x62>
      return osErrorOS;
 800632a:	23ff      	movs	r3, #255	@ 0xff
 800632c:	e015      	b.n	800635a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d011      	beq.n	8006358 <osMutexWait+0x8c>
 8006334:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <osMutexWait+0x98>)
 8006336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	e008      	b.n	8006358 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 ff97 	bl	800727c <xQueueSemaphoreTake>
 800634e:	4603      	mov	r3, r0
 8006350:	2b01      	cmp	r3, #1
 8006352:	d001      	beq.n	8006358 <osMutexWait+0x8c>
    return osErrorOS;
 8006354:	23ff      	movs	r3, #255	@ 0xff
 8006356:	e000      	b.n	800635a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006378:	f7ff fefa 	bl	8006170 <inHandlerMode>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006382:	f107 0308 	add.w	r3, r7, #8
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fdf6 	bl	8006f7a <xQueueGiveFromISR>
 800638e:	4603      	mov	r3, r0
 8006390:	2b01      	cmp	r3, #1
 8006392:	d001      	beq.n	8006398 <osMutexRelease+0x30>
      return osErrorOS;
 8006394:	23ff      	movs	r3, #255	@ 0xff
 8006396:	e017      	b.n	80063c8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d013      	beq.n	80063c6 <osMutexRelease+0x5e>
 800639e:	4b0c      	ldr	r3, [pc, #48]	@ (80063d0 <osMutexRelease+0x68>)
 80063a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	e00a      	b.n	80063c6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80063b0:	2300      	movs	r3, #0
 80063b2:	2200      	movs	r2, #0
 80063b4:	2100      	movs	r1, #0
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fc32 	bl	8006c20 <xQueueGenericSend>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d001      	beq.n	80063c6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80063c2:	23ff      	movs	r3, #255	@ 0xff
 80063c4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	e000ed04 	.word	0xe000ed04

080063d4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af02      	add	r7, sp, #8
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00f      	beq.n	8006406 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d10a      	bne.n	8006402 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2203      	movs	r2, #3
 80063f2:	9200      	str	r2, [sp, #0]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2100      	movs	r1, #0
 80063f8:	2001      	movs	r0, #1
 80063fa:	f000 fadb 	bl	80069b4 <xQueueGenericCreateStatic>
 80063fe:	4603      	mov	r3, r0
 8006400:	e016      	b.n	8006430 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	e014      	b.n	8006430 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d110      	bne.n	800642e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800640c:	2203      	movs	r2, #3
 800640e:	2100      	movs	r1, #0
 8006410:	2001      	movs	r0, #1
 8006412:	f000 fb56 	bl	8006ac2 <xQueueGenericCreate>
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <osSemaphoreCreate+0x56>
 800641e:	2300      	movs	r3, #0
 8006420:	2200      	movs	r2, #0
 8006422:	2100      	movs	r1, #0
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fbfb 	bl	8006c20 <xQueueGenericSend>
      return sema;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	e000      	b.n	8006430 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800642e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800644c:	2380      	movs	r3, #128	@ 0x80
 800644e:	e03a      	b.n	80064c6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d103      	bne.n	8006464 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800645c:	f04f 33ff 	mov.w	r3, #4294967295
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	e009      	b.n	8006478 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d006      	beq.n	8006478 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <osSemaphoreWait+0x40>
      ticks = 1;
 8006474:	2301      	movs	r3, #1
 8006476:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006478:	f7ff fe7a 	bl	8006170 <inHandlerMode>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d017      	beq.n	80064b2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	461a      	mov	r2, r3
 8006488:	2100      	movs	r1, #0
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 f80e 	bl	80074ac <xQueueReceiveFromISR>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d001      	beq.n	800649a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006496:	23ff      	movs	r3, #255	@ 0xff
 8006498:	e015      	b.n	80064c6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d011      	beq.n	80064c4 <osSemaphoreWait+0x8c>
 80064a0:	4b0b      	ldr	r3, [pc, #44]	@ (80064d0 <osSemaphoreWait+0x98>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	e008      	b.n	80064c4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fee1 	bl	800727c <xQueueSemaphoreTake>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d001      	beq.n	80064c4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80064c0:	23ff      	movs	r3, #255	@ 0xff
 80064c2:	e000      	b.n	80064c6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80064e4:	f7ff fe44 	bl	8006170 <inHandlerMode>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d016      	beq.n	800651c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80064ee:	f107 0308 	add.w	r3, r7, #8
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fd40 	bl	8006f7a <xQueueGiveFromISR>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d001      	beq.n	8006504 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006500:	23ff      	movs	r3, #255	@ 0xff
 8006502:	e017      	b.n	8006534 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d013      	beq.n	8006532 <osSemaphoreRelease+0x5e>
 800650a:	4b0c      	ldr	r3, [pc, #48]	@ (800653c <osSemaphoreRelease+0x68>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	e00a      	b.n	8006532 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800651c:	2300      	movs	r3, #0
 800651e:	2200      	movs	r2, #0
 8006520:	2100      	movs	r1, #0
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fb7c 	bl	8006c20 <xQueueGenericSend>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d001      	beq.n	8006532 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800652e:	23ff      	movs	r3, #255	@ 0xff
 8006530:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006532:	68fb      	ldr	r3, [r7, #12]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	e000ed04 	.word	0xe000ed04

08006540 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006548:	f7ff fe12 	bl	8006170 <inHandlerMode>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006552:	2382      	movs	r3, #130	@ 0x82
 8006554:	e003      	b.n	800655e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f872 	bl	8007640 <vQueueDelete>

  return osOK; 
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006566:	b590      	push	{r4, r7, lr}
 8006568:	b085      	sub	sp, #20
 800656a:	af02      	add	r7, sp, #8
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d011      	beq.n	800659c <osMessageCreate+0x36>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00d      	beq.n	800659c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6859      	ldr	r1, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2400      	movs	r4, #0
 8006592:	9400      	str	r4, [sp, #0]
 8006594:	f000 fa0e 	bl	80069b4 <xQueueGenericCreateStatic>
 8006598:	4603      	mov	r3, r0
 800659a:	e008      	b.n	80065ae <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	4619      	mov	r1, r3
 80065a8:	f000 fa8b 	bl	8006ac2 <xQueueGenericCreate>
 80065ac:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}
	...

080065b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <osMessagePut+0x1e>
    ticks = 1;
 80065d2:	2301      	movs	r3, #1
 80065d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80065d6:	f7ff fdcb 	bl	8006170 <inHandlerMode>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d018      	beq.n	8006612 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80065e0:	f107 0210 	add.w	r2, r7, #16
 80065e4:	f107 0108 	add.w	r1, r7, #8
 80065e8:	2300      	movs	r3, #0
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fc22 	bl	8006e34 <xQueueGenericSendFromISR>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d001      	beq.n	80065fa <osMessagePut+0x42>
      return osErrorOS;
 80065f6:	23ff      	movs	r3, #255	@ 0xff
 80065f8:	e018      	b.n	800662c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d014      	beq.n	800662a <osMessagePut+0x72>
 8006600:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <osMessagePut+0x7c>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	e00b      	b.n	800662a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006612:	f107 0108 	add.w	r1, r7, #8
 8006616:	2300      	movs	r3, #0
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fb00 	bl	8006c20 <xQueueGenericSend>
 8006620:	4603      	mov	r3, r0
 8006622:	2b01      	cmp	r3, #1
 8006624:	d001      	beq.n	800662a <osMessagePut+0x72>
      return osErrorOS;
 8006626:	23ff      	movs	r3, #255	@ 0xff
 8006628:	e000      	b.n	800662c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	e000ed04 	.word	0xe000ed04

08006638 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b08b      	sub	sp, #44	@ 0x2c
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006652:	2380      	movs	r3, #128	@ 0x80
 8006654:	617b      	str	r3, [r7, #20]
    return event;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	461c      	mov	r4, r3
 800665a:	f107 0314 	add.w	r3, r7, #20
 800665e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006666:	e054      	b.n	8006712 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d103      	bne.n	8006680 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006678:	f04f 33ff 	mov.w	r3, #4294967295
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24
 800667e:	e009      	b.n	8006694 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d006      	beq.n	8006694 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <osMessageGet+0x5c>
      ticks = 1;
 8006690:	2301      	movs	r3, #1
 8006692:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006694:	f7ff fd6c 	bl	8006170 <inHandlerMode>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01c      	beq.n	80066d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800669e:	f107 0220 	add.w	r2, r7, #32
 80066a2:	f107 0314 	add.w	r3, r7, #20
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	68b8      	ldr	r0, [r7, #8]
 80066ac:	f000 fefe 	bl	80074ac <xQueueReceiveFromISR>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d102      	bne.n	80066bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80066b6:	2310      	movs	r3, #16
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e001      	b.n	80066c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01d      	beq.n	8006702 <osMessageGet+0xca>
 80066c6:	4b15      	ldr	r3, [pc, #84]	@ (800671c <osMessageGet+0xe4>)
 80066c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	e014      	b.n	8006702 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80066d8:	f107 0314 	add.w	r3, r7, #20
 80066dc:	3304      	adds	r3, #4
 80066de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e0:	4619      	mov	r1, r3
 80066e2:	68b8      	ldr	r0, [r7, #8]
 80066e4:	f000 fce2 	bl	80070ac <xQueueReceive>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d102      	bne.n	80066f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80066ee:	2310      	movs	r3, #16
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	e006      	b.n	8006702 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <osMessageGet+0xc6>
 80066fa:	2300      	movs	r3, #0
 80066fc:	e000      	b.n	8006700 <osMessageGet+0xc8>
 80066fe:	2340      	movs	r3, #64	@ 0x40
 8006700:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	461c      	mov	r4, r3
 8006706:	f107 0314 	add.w	r3, r7, #20
 800670a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800670e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	372c      	adds	r7, #44	@ 0x2c
 8006716:	46bd      	mov	sp, r7
 8006718:	bd90      	pop	{r4, r7, pc}
 800671a:	bf00      	nop
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006728:	f7ff fd22 	bl	8006170 <inHandlerMode>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 ff63 	bl	80075fe <uxQueueMessagesWaitingFromISR>
 8006738:	4603      	mov	r3, r0
 800673a:	e003      	b.n	8006744 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 ff3d 	bl	80075bc <uxQueueMessagesWaiting>
 8006742:	4603      	mov	r3, r0
  }
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006754:	f7ff fd0c 	bl	8006170 <inHandlerMode>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <osMessageDelete+0x16>
    return osErrorISR;
 800675e:	2382      	movs	r3, #130	@ 0x82
 8006760:	e003      	b.n	800676a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 ff6c 	bl	8007640 <vQueueDelete>

  return osOK; 
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f103 0208 	add.w	r2, r3, #8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f04f 32ff 	mov.w	r2, #4294967295
 800678a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f103 0208 	add.w	r2, r3, #8
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f103 0208 	add.w	r2, r3, #8
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682a:	d103      	bne.n	8006834 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e00c      	b.n	800684e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3308      	adds	r3, #8
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e002      	b.n	8006842 <vListInsert+0x2e>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	d2f6      	bcs.n	800683c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]
}
 800687a:	bf00      	nop
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6892      	ldr	r2, [r2, #8]
 800689c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6852      	ldr	r2, [r2, #4]
 80068a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d103      	bne.n	80068ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	1e5a      	subs	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10d      	bne.n	800690c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f4:	b672      	cpsid	i
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	b662      	cpsie	i
 8006904:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800690c:	f002 fa0e 	bl	8008d2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006918:	68f9      	ldr	r1, [r7, #12]
 800691a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	441a      	add	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	3b01      	subs	r3, #1
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	441a      	add	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	22ff      	movs	r2, #255	@ 0xff
 8006950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	22ff      	movs	r2, #255	@ 0xff
 8006958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d114      	bne.n	800698c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01a      	beq.n	80069a0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3310      	adds	r3, #16
 800696e:	4618      	mov	r0, r3
 8006970:	f001 fcc0 	bl	80082f4 <xTaskRemoveFromEventList>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d012      	beq.n	80069a0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800697a:	4b0d      	ldr	r3, [pc, #52]	@ (80069b0 <xQueueGenericReset+0xd4>)
 800697c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	e009      	b.n	80069a0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3310      	adds	r3, #16
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff feee 	bl	8006772 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3324      	adds	r3, #36	@ 0x24
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fee9 	bl	8006772 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069a0:	f002 f9fa 	bl	8008d98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069a4:	2301      	movs	r3, #1
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08e      	sub	sp, #56	@ 0x38
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10d      	bne.n	80069e4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069cc:	b672      	cpsid	i
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	b662      	cpsie	i
 80069dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ee:	b672      	cpsid	i
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	b662      	cpsie	i
 80069fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <xQueueGenericCreateStatic+0x5e>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <xQueueGenericCreateStatic+0x62>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <xQueueGenericCreateStatic+0x64>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10d      	bne.n	8006a38 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	b672      	cpsid	i
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	b662      	cpsie	i
 8006a30:	623b      	str	r3, [r7, #32]
}
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	e7fd      	b.n	8006a34 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d102      	bne.n	8006a44 <xQueueGenericCreateStatic+0x90>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <xQueueGenericCreateStatic+0x94>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <xQueueGenericCreateStatic+0x96>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10d      	bne.n	8006a6a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	b672      	cpsid	i
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	b662      	cpsie	i
 8006a62:	61fb      	str	r3, [r7, #28]
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a6a:	2348      	movs	r3, #72	@ 0x48
 8006a6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b48      	cmp	r3, #72	@ 0x48
 8006a72:	d00d      	beq.n	8006a90 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a78:	b672      	cpsid	i
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	b662      	cpsie	i
 8006a88:	61bb      	str	r3, [r7, #24]
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00d      	beq.n	8006ab8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006aa4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f848 	bl	8006b48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3730      	adds	r7, #48	@ 0x30
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b08a      	sub	sp, #40	@ 0x28
 8006ac6:	af02      	add	r7, sp, #8
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	4613      	mov	r3, r2
 8006ace:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10d      	bne.n	8006af2 <xQueueGenericCreate+0x30>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	b672      	cpsid	i
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	b662      	cpsie	i
 8006aea:	613b      	str	r3, [r7, #16]
}
 8006aec:	bf00      	nop
 8006aee:	bf00      	nop
 8006af0:	e7fd      	b.n	8006aee <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61fb      	str	r3, [r7, #28]
 8006afc:	e004      	b.n	8006b08 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	fb02 f303 	mul.w	r3, r2, r3
 8006b06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3348      	adds	r3, #72	@ 0x48
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f002 fa3b 	bl	8008f88 <pvPortMalloc>
 8006b12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d011      	beq.n	8006b3e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	3348      	adds	r3, #72	@ 0x48
 8006b22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b2c:	79fa      	ldrb	r2, [r7, #7]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	4613      	mov	r3, r2
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f805 	bl	8006b48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
	}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3720      	adds	r7, #32
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d103      	bne.n	8006b64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e002      	b.n	8006b6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b76:	2101      	movs	r1, #1
 8006b78:	69b8      	ldr	r0, [r7, #24]
 8006b7a:	f7ff feaf 	bl	80068dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2100      	movs	r1, #0
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f837 	bl	8006c20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6939      	ldr	r1, [r7, #16]
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f7ff ff75 	bl	8006ac2 <xQueueGenericCreate>
 8006bd8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff ffd3 	bl	8006b86 <prvInitialiseMutex>

		return xNewQueue;
 8006be0:	68fb      	ldr	r3, [r7, #12]
	}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b088      	sub	sp, #32
 8006bee:	af02      	add	r7, sp, #8
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	6039      	str	r1, [r7, #0]
 8006bf4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2200      	movs	r2, #0
 8006c06:	6939      	ldr	r1, [r7, #16]
 8006c08:	6978      	ldr	r0, [r7, #20]
 8006c0a:	f7ff fed3 	bl	80069b4 <xQueueGenericCreateStatic>
 8006c0e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff ffb8 	bl	8006b86 <prvInitialiseMutex>

		return xNewQueue;
 8006c16:	68fb      	ldr	r3, [r7, #12]
	}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08e      	sub	sp, #56	@ 0x38
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10d      	bne.n	8006c58 <xQueueGenericSend+0x38>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	b672      	cpsid	i
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	b662      	cpsie	i
 8006c50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d103      	bne.n	8006c66 <xQueueGenericSend+0x46>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <xQueueGenericSend+0x4a>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <xQueueGenericSend+0x4c>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10d      	bne.n	8006c8c <xQueueGenericSend+0x6c>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	b672      	cpsid	i
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	b662      	cpsie	i
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	e7fd      	b.n	8006c88 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d103      	bne.n	8006c9a <xQueueGenericSend+0x7a>
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <xQueueGenericSend+0x7e>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <xQueueGenericSend+0x80>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10d      	bne.n	8006cc0 <xQueueGenericSend+0xa0>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca8:	b672      	cpsid	i
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	b662      	cpsie	i
 8006cb8:	623b      	str	r3, [r7, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	e7fd      	b.n	8006cbc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cc0:	f001 fce0 	bl	8008684 <xTaskGetSchedulerState>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <xQueueGenericSend+0xb0>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <xQueueGenericSend+0xb4>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e000      	b.n	8006cd6 <xQueueGenericSend+0xb6>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10d      	bne.n	8006cf6 <xQueueGenericSend+0xd6>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cde:	b672      	cpsid	i
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	b662      	cpsie	i
 8006cee:	61fb      	str	r3, [r7, #28]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cf6:	f002 f819 	bl	8008d2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d302      	bcc.n	8006d0c <xQueueGenericSend+0xec>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d129      	bne.n	8006d60 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d12:	f000 fcd3 	bl	80076bc <prvCopyDataToQueue>
 8006d16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d010      	beq.n	8006d42 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	3324      	adds	r3, #36	@ 0x24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f001 fae5 	bl	80082f4 <xTaskRemoveFromEventList>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d013      	beq.n	8006d58 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d30:	4b3f      	ldr	r3, [pc, #252]	@ (8006e30 <xQueueGenericSend+0x210>)
 8006d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	e00a      	b.n	8006d58 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d48:	4b39      	ldr	r3, [pc, #228]	@ (8006e30 <xQueueGenericSend+0x210>)
 8006d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d58:	f002 f81e 	bl	8008d98 <vPortExitCritical>
				return pdPASS;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e063      	b.n	8006e28 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d103      	bne.n	8006d6e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d66:	f002 f817 	bl	8008d98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e05c      	b.n	8006e28 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d106      	bne.n	8006d82 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d74:	f107 0314 	add.w	r3, r7, #20
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 fb21 	bl	80083c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d82:	f002 f809 	bl	8008d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d86:	f001 f8a3 	bl	8007ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d8a:	f001 ffcf 	bl	8008d2c <vPortEnterCritical>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d94:	b25b      	sxtb	r3, r3
 8006d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9a:	d103      	bne.n	8006da4 <xQueueGenericSend+0x184>
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006daa:	b25b      	sxtb	r3, r3
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db0:	d103      	bne.n	8006dba <xQueueGenericSend+0x19a>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dba:	f001 ffed 	bl	8008d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dbe:	1d3a      	adds	r2, r7, #4
 8006dc0:	f107 0314 	add.w	r3, r7, #20
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fb10 	bl	80083ec <xTaskCheckForTimeOut>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d124      	bne.n	8006e1c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006dd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dd4:	f000 fd6a 	bl	80078ac <prvIsQueueFull>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d018      	beq.n	8006e10 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	3310      	adds	r3, #16
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4611      	mov	r1, r2
 8006de6:	4618      	mov	r0, r3
 8006de8:	f001 fa5c 	bl	80082a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dee:	f000 fcf5 	bl	80077dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006df2:	f001 f87b 	bl	8007eec <xTaskResumeAll>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f47f af7c 	bne.w	8006cf6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006e30 <xQueueGenericSend+0x210>)
 8006e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	e772      	b.n	8006cf6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e12:	f000 fce3 	bl	80077dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e16:	f001 f869 	bl	8007eec <xTaskResumeAll>
 8006e1a:	e76c      	b.n	8006cf6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e1e:	f000 fcdd 	bl	80077dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e22:	f001 f863 	bl	8007eec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3738      	adds	r7, #56	@ 0x38
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08e      	sub	sp, #56	@ 0x38
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10d      	bne.n	8006e68 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e50:	b672      	cpsid	i
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	b662      	cpsie	i
 8006e60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
 8006e66:	e7fd      	b.n	8006e64 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d103      	bne.n	8006e76 <xQueueGenericSendFromISR+0x42>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <xQueueGenericSendFromISR+0x46>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <xQueueGenericSendFromISR+0x48>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10d      	bne.n	8006e9c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e84:	b672      	cpsid	i
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	b662      	cpsie	i
 8006e94:	623b      	str	r3, [r7, #32]
}
 8006e96:	bf00      	nop
 8006e98:	bf00      	nop
 8006e9a:	e7fd      	b.n	8006e98 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d103      	bne.n	8006eaa <xQueueGenericSendFromISR+0x76>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <xQueueGenericSendFromISR+0x7a>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <xQueueGenericSendFromISR+0x7c>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10d      	bne.n	8006ed0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	b672      	cpsid	i
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	b662      	cpsie	i
 8006ec8:	61fb      	str	r3, [r7, #28]
}
 8006eca:	bf00      	nop
 8006ecc:	bf00      	nop
 8006ece:	e7fd      	b.n	8006ecc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ed0:	f002 f814 	bl	8008efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ed4:	f3ef 8211 	mrs	r2, BASEPRI
 8006ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006edc:	b672      	cpsid	i
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	b662      	cpsie	i
 8006eec:	61ba      	str	r2, [r7, #24]
 8006eee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d302      	bcc.n	8006f06 <xQueueGenericSendFromISR+0xd2>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d12c      	bne.n	8006f60 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f16:	f000 fbd1 	bl	80076bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f1a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d112      	bne.n	8006f4a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d016      	beq.n	8006f5a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	3324      	adds	r3, #36	@ 0x24
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 f9df 	bl	80082f4 <xTaskRemoveFromEventList>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00e      	beq.n	8006f5a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	e007      	b.n	8006f5a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f4e:	3301      	adds	r3, #1
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	b25a      	sxtb	r2, r3
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006f5e:	e001      	b.n	8006f64 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f66:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3738      	adds	r7, #56	@ 0x38
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b08e      	sub	sp, #56	@ 0x38
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10d      	bne.n	8006faa <xQueueGiveFromISR+0x30>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	b672      	cpsid	i
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	b662      	cpsie	i
 8006fa2:	623b      	str	r3, [r7, #32]
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	e7fd      	b.n	8006fa6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00d      	beq.n	8006fce <xQueueGiveFromISR+0x54>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	b672      	cpsid	i
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	b662      	cpsie	i
 8006fc6:	61fb      	str	r3, [r7, #28]
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	e7fd      	b.n	8006fca <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d103      	bne.n	8006fde <xQueueGiveFromISR+0x64>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <xQueueGiveFromISR+0x68>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <xQueueGiveFromISR+0x6a>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10d      	bne.n	8007004 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fec:	b672      	cpsid	i
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	b662      	cpsie	i
 8006ffc:	61bb      	str	r3, [r7, #24]
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	e7fd      	b.n	8007000 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007004:	f001 ff7a 	bl	8008efc <vPortValidateInterruptPriority>
	__asm volatile
 8007008:	f3ef 8211 	mrs	r2, BASEPRI
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	b672      	cpsid	i
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	b662      	cpsie	i
 8007020:	617a      	str	r2, [r7, #20]
 8007022:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007024:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007026:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007034:	429a      	cmp	r2, r3
 8007036:	d22b      	bcs.n	8007090 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800703e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800704a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d112      	bne.n	800707a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d016      	beq.n	800708a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	3324      	adds	r3, #36	@ 0x24
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f947 	bl	80082f4 <xTaskRemoveFromEventList>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00e      	beq.n	800708a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	e007      	b.n	800708a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800707a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800707e:	3301      	adds	r3, #1
 8007080:	b2db      	uxtb	r3, r3
 8007082:	b25a      	sxtb	r2, r3
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800708a:	2301      	movs	r3, #1
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
 800708e:	e001      	b.n	8007094 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007090:	2300      	movs	r3, #0
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f383 8811 	msr	BASEPRI, r3
}
 800709e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3738      	adds	r7, #56	@ 0x38
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08c      	sub	sp, #48	@ 0x30
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10d      	bne.n	80070e2 <xQueueReceive+0x36>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	b672      	cpsid	i
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	b662      	cpsie	i
 80070da:	623b      	str	r3, [r7, #32]
}
 80070dc:	bf00      	nop
 80070de:	bf00      	nop
 80070e0:	e7fd      	b.n	80070de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <xQueueReceive+0x44>
 80070e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <xQueueReceive+0x48>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <xQueueReceive+0x4a>
 80070f4:	2300      	movs	r3, #0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10d      	bne.n	8007116 <xQueueReceive+0x6a>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fe:	b672      	cpsid	i
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	b662      	cpsie	i
 800710e:	61fb      	str	r3, [r7, #28]
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	e7fd      	b.n	8007112 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007116:	f001 fab5 	bl	8008684 <xTaskGetSchedulerState>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <xQueueReceive+0x7a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <xQueueReceive+0x7e>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <xQueueReceive+0x80>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10d      	bne.n	800714c <xQueueReceive+0xa0>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	b672      	cpsid	i
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	b662      	cpsie	i
 8007144:	61bb      	str	r3, [r7, #24]
}
 8007146:	bf00      	nop
 8007148:	bf00      	nop
 800714a:	e7fd      	b.n	8007148 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800714c:	f001 fdee 	bl	8008d2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007154:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01f      	beq.n	800719c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007160:	f000 fb16 	bl	8007790 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	1e5a      	subs	r2, r3, #1
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00f      	beq.n	8007194 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	3310      	adds	r3, #16
 8007178:	4618      	mov	r0, r3
 800717a:	f001 f8bb 	bl	80082f4 <xTaskRemoveFromEventList>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007184:	4b3c      	ldr	r3, [pc, #240]	@ (8007278 <xQueueReceive+0x1cc>)
 8007186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007194:	f001 fe00 	bl	8008d98 <vPortExitCritical>
				return pdPASS;
 8007198:	2301      	movs	r3, #1
 800719a:	e069      	b.n	8007270 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071a2:	f001 fdf9 	bl	8008d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071a6:	2300      	movs	r3, #0
 80071a8:	e062      	b.n	8007270 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071b0:	f107 0310 	add.w	r3, r7, #16
 80071b4:	4618      	mov	r0, r3
 80071b6:	f001 f903 	bl	80083c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071be:	f001 fdeb 	bl	8008d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071c2:	f000 fe85 	bl	8007ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071c6:	f001 fdb1 	bl	8008d2c <vPortEnterCritical>
 80071ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071d0:	b25b      	sxtb	r3, r3
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d103      	bne.n	80071e0 <xQueueReceive+0x134>
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d103      	bne.n	80071f6 <xQueueReceive+0x14a>
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071f6:	f001 fdcf 	bl	8008d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071fa:	1d3a      	adds	r2, r7, #4
 80071fc:	f107 0310 	add.w	r3, r7, #16
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f001 f8f2 	bl	80083ec <xTaskCheckForTimeOut>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d123      	bne.n	8007256 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800720e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007210:	f000 fb36 	bl	8007880 <prvIsQueueEmpty>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d017      	beq.n	800724a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	3324      	adds	r3, #36	@ 0x24
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4611      	mov	r1, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f001 f83e 	bl	80082a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007228:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800722a:	f000 fad7 	bl	80077dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800722e:	f000 fe5d 	bl	8007eec <xTaskResumeAll>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d189      	bne.n	800714c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007238:	4b0f      	ldr	r3, [pc, #60]	@ (8007278 <xQueueReceive+0x1cc>)
 800723a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	e780      	b.n	800714c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800724a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800724c:	f000 fac6 	bl	80077dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007250:	f000 fe4c 	bl	8007eec <xTaskResumeAll>
 8007254:	e77a      	b.n	800714c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007258:	f000 fac0 	bl	80077dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800725c:	f000 fe46 	bl	8007eec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007262:	f000 fb0d 	bl	8007880 <prvIsQueueEmpty>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	f43f af6f 	beq.w	800714c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800726e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007270:	4618      	mov	r0, r3
 8007272:	3730      	adds	r7, #48	@ 0x30
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08e      	sub	sp, #56	@ 0x38
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800728e:	2300      	movs	r3, #0
 8007290:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10d      	bne.n	80072b4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729c:	b672      	cpsid	i
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	b662      	cpsie	i
 80072ac:	623b      	str	r3, [r7, #32]
}
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	e7fd      	b.n	80072b0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00d      	beq.n	80072d8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	b672      	cpsid	i
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	b662      	cpsie	i
 80072d0:	61fb      	str	r3, [r7, #28]
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	e7fd      	b.n	80072d4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072d8:	f001 f9d4 	bl	8008684 <xTaskGetSchedulerState>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <xQueueSemaphoreTake+0x6c>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <xQueueSemaphoreTake+0x70>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e000      	b.n	80072ee <xQueueSemaphoreTake+0x72>
 80072ec:	2300      	movs	r3, #0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10d      	bne.n	800730e <xQueueSemaphoreTake+0x92>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	b672      	cpsid	i
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	b662      	cpsie	i
 8007306:	61bb      	str	r3, [r7, #24]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800730e:	f001 fd0d 	bl	8008d2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	2b00      	cmp	r3, #0
 800731c:	d024      	beq.n	8007368 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800731e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007320:	1e5a      	subs	r2, r3, #1
 8007322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007324:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800732e:	f001 fb73 	bl	8008a18 <pvTaskIncrementMutexHeldCount>
 8007332:	4602      	mov	r2, r0
 8007334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007336:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00f      	beq.n	8007360 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	3310      	adds	r3, #16
 8007344:	4618      	mov	r0, r3
 8007346:	f000 ffd5 	bl	80082f4 <xTaskRemoveFromEventList>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007350:	4b55      	ldr	r3, [pc, #340]	@ (80074a8 <xQueueSemaphoreTake+0x22c>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007360:	f001 fd1a 	bl	8008d98 <vPortExitCritical>
				return pdPASS;
 8007364:	2301      	movs	r3, #1
 8007366:	e09a      	b.n	800749e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d114      	bne.n	8007398 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00d      	beq.n	8007390 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007378:	b672      	cpsid	i
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	b662      	cpsie	i
 8007388:	617b      	str	r3, [r7, #20]
}
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	e7fd      	b.n	800738c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007390:	f001 fd02 	bl	8008d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007394:	2300      	movs	r3, #0
 8007396:	e082      	b.n	800749e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800739e:	f107 030c 	add.w	r3, r7, #12
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 f80c 	bl	80083c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073ac:	f001 fcf4 	bl	8008d98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073b0:	f000 fd8e 	bl	8007ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073b4:	f001 fcba 	bl	8008d2c <vPortEnterCritical>
 80073b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073be:	b25b      	sxtb	r3, r3
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d103      	bne.n	80073ce <xQueueSemaphoreTake+0x152>
 80073c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073d4:	b25b      	sxtb	r3, r3
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073da:	d103      	bne.n	80073e4 <xQueueSemaphoreTake+0x168>
 80073dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073e4:	f001 fcd8 	bl	8008d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073e8:	463a      	mov	r2, r7
 80073ea:	f107 030c 	add.w	r3, r7, #12
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fffb 	bl	80083ec <xTaskCheckForTimeOut>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d132      	bne.n	8007462 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073fe:	f000 fa3f 	bl	8007880 <prvIsQueueEmpty>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d026      	beq.n	8007456 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007410:	f001 fc8c 	bl	8008d2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	4618      	mov	r0, r3
 800741a:	f001 f951 	bl	80086c0 <xTaskPriorityInherit>
 800741e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007420:	f001 fcba 	bl	8008d98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007426:	3324      	adds	r3, #36	@ 0x24
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	4611      	mov	r1, r2
 800742c:	4618      	mov	r0, r3
 800742e:	f000 ff39 	bl	80082a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007432:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007434:	f000 f9d2 	bl	80077dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007438:	f000 fd58 	bl	8007eec <xTaskResumeAll>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	f47f af65 	bne.w	800730e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007444:	4b18      	ldr	r3, [pc, #96]	@ (80074a8 <xQueueSemaphoreTake+0x22c>)
 8007446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	e75b      	b.n	800730e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007456:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007458:	f000 f9c0 	bl	80077dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800745c:	f000 fd46 	bl	8007eec <xTaskResumeAll>
 8007460:	e755      	b.n	800730e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007462:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007464:	f000 f9ba 	bl	80077dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007468:	f000 fd40 	bl	8007eec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800746c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800746e:	f000 fa07 	bl	8007880 <prvIsQueueEmpty>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	f43f af4a 	beq.w	800730e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00d      	beq.n	800749c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007480:	f001 fc54 	bl	8008d2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007484:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007486:	f000 f901 	bl	800768c <prvGetDisinheritPriorityAfterTimeout>
 800748a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800748c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007492:	4618      	mov	r0, r3
 8007494:	f001 fa20 	bl	80088d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007498:	f001 fc7e 	bl	8008d98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800749c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3738      	adds	r7, #56	@ 0x38
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08e      	sub	sp, #56	@ 0x38
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10d      	bne.n	80074de <xQueueReceiveFromISR+0x32>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	b672      	cpsid	i
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	b662      	cpsie	i
 80074d6:	623b      	str	r3, [r7, #32]
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <xQueueReceiveFromISR+0x40>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <xQueueReceiveFromISR+0x44>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <xQueueReceiveFromISR+0x46>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10d      	bne.n	8007512 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	b672      	cpsid	i
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	b662      	cpsie	i
 800750a:	61fb      	str	r3, [r7, #28]
}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	e7fd      	b.n	800750e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007512:	f001 fcf3 	bl	8008efc <vPortValidateInterruptPriority>
	__asm volatile
 8007516:	f3ef 8211 	mrs	r2, BASEPRI
 800751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751e:	b672      	cpsid	i
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	b662      	cpsie	i
 800752e:	61ba      	str	r2, [r7, #24]
 8007530:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007532:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007534:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800753c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d02f      	beq.n	80075a2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007544:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007550:	f000 f91e 	bl	8007790 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	1e5a      	subs	r2, r3, #1
 8007558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800755c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007564:	d112      	bne.n	800758c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d016      	beq.n	800759c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	3310      	adds	r3, #16
 8007572:	4618      	mov	r0, r3
 8007574:	f000 febe 	bl	80082f4 <xTaskRemoveFromEventList>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00e      	beq.n	800759c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e007      	b.n	800759c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800758c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007590:	3301      	adds	r3, #1
 8007592:	b2db      	uxtb	r3, r3
 8007594:	b25a      	sxtb	r2, r3
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800759c:	2301      	movs	r3, #1
 800759e:	637b      	str	r3, [r7, #52]	@ 0x34
 80075a0:	e001      	b.n	80075a6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f383 8811 	msr	BASEPRI, r3
}
 80075b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3738      	adds	r7, #56	@ 0x38
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10d      	bne.n	80075e6 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	b672      	cpsid	i
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	b662      	cpsie	i
 80075de:	60bb      	str	r3, [r7, #8]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80075e6:	f001 fba1 	bl	8008d2c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ee:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80075f0:	f001 fbd2 	bl	8008d98 <vPortExitCritical>

	return uxReturn;
 80075f4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80075fe:	b480      	push	{r7}
 8007600:	b087      	sub	sp, #28
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10d      	bne.n	800762c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007614:	b672      	cpsid	i
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	b662      	cpsie	i
 8007624:	60fb      	str	r3, [r7, #12]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007632:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007634:	4618      	mov	r0, r3
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10d      	bne.n	800766e <vQueueDelete+0x2e>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	b672      	cpsid	i
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	b662      	cpsie	i
 8007666:	60bb      	str	r3, [r7, #8]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 f934 	bl	80078dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f001 fd50 	bl	8009124 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007684:	bf00      	nop
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	d006      	beq.n	80076aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1c3 0307 	rsb	r3, r3, #7
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	e001      	b.n	80076ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80076ae:	68fb      	ldr	r3, [r7, #12]
	}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d14d      	bne.n	800777e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 f86a 	bl	80087c0 <xTaskPriorityDisinherit>
 80076ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	609a      	str	r2, [r3, #8]
 80076f4:	e043      	b.n	800777e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d119      	bne.n	8007730 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6858      	ldr	r0, [r3, #4]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007704:	461a      	mov	r2, r3
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	f008 feef 	bl	80104ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	441a      	add	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	429a      	cmp	r2, r3
 8007724:	d32b      	bcc.n	800777e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	605a      	str	r2, [r3, #4]
 800772e:	e026      	b.n	800777e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68d8      	ldr	r0, [r3, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007738:	461a      	mov	r2, r3
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	f008 fed5 	bl	80104ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	425b      	negs	r3, r3
 800774a:	441a      	add	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d207      	bcs.n	800776c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007764:	425b      	negs	r3, r3
 8007766:	441a      	add	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d105      	bne.n	800777e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	3b01      	subs	r3, #1
 800777c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007786:	697b      	ldr	r3, [r7, #20]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d018      	beq.n	80077d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077aa:	441a      	add	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d303      	bcc.n	80077c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68d9      	ldr	r1, [r3, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077cc:	461a      	mov	r2, r3
 80077ce:	6838      	ldr	r0, [r7, #0]
 80077d0:	f008 fe8b 	bl	80104ea <memcpy>
	}
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077e4:	f001 faa2 	bl	8008d2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077f0:	e011      	b.n	8007816 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d012      	beq.n	8007820 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3324      	adds	r3, #36	@ 0x24
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fd78 	bl	80082f4 <xTaskRemoveFromEventList>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800780a:	f000 fe57 	bl	80084bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	3b01      	subs	r3, #1
 8007812:	b2db      	uxtb	r3, r3
 8007814:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800781a:	2b00      	cmp	r3, #0
 800781c:	dce9      	bgt.n	80077f2 <prvUnlockQueue+0x16>
 800781e:	e000      	b.n	8007822 <prvUnlockQueue+0x46>
					break;
 8007820:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	22ff      	movs	r2, #255	@ 0xff
 8007826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800782a:	f001 fab5 	bl	8008d98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800782e:	f001 fa7d 	bl	8008d2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007838:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800783a:	e011      	b.n	8007860 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d012      	beq.n	800786a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3310      	adds	r3, #16
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fd53 	bl	80082f4 <xTaskRemoveFromEventList>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007854:	f000 fe32 	bl	80084bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	3b01      	subs	r3, #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007864:	2b00      	cmp	r3, #0
 8007866:	dce9      	bgt.n	800783c <prvUnlockQueue+0x60>
 8007868:	e000      	b.n	800786c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800786a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	22ff      	movs	r2, #255	@ 0xff
 8007870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007874:	f001 fa90 	bl	8008d98 <vPortExitCritical>
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007888:	f001 fa50 	bl	8008d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	e001      	b.n	800789e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800789e:	f001 fa7b 	bl	8008d98 <vPortExitCritical>

	return xReturn;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078b4:	f001 fa3a 	bl	8008d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d102      	bne.n	80078ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	e001      	b.n	80078ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078ce:	f001 fa63 	bl	8008d98 <vPortExitCritical>

	return xReturn;
 80078d2:	68fb      	ldr	r3, [r7, #12]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	e016      	b.n	8007918 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80078ea:	4a10      	ldr	r2, [pc, #64]	@ (800792c <vQueueUnregisterQueue+0x50>)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4413      	add	r3, r2
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d10b      	bne.n	8007912 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80078fa:	4a0c      	ldr	r2, [pc, #48]	@ (800792c <vQueueUnregisterQueue+0x50>)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2100      	movs	r1, #0
 8007900:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007904:	4a09      	ldr	r2, [pc, #36]	@ (800792c <vQueueUnregisterQueue+0x50>)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	4413      	add	r3, r2
 800790c:	2200      	movs	r2, #0
 800790e:	605a      	str	r2, [r3, #4]
				break;
 8007910:	e006      	b.n	8007920 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3301      	adds	r3, #1
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b07      	cmp	r3, #7
 800791c:	d9e5      	bls.n	80078ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20006010 	.word	0x20006010

08007930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	@ 0x38
 8007934:	af04      	add	r7, sp, #16
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800793e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10d      	bne.n	8007960 <xTaskCreateStatic+0x30>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007948:	b672      	cpsid	i
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	b662      	cpsie	i
 8007958:	623b      	str	r3, [r7, #32]
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	e7fd      	b.n	800795c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10d      	bne.n	8007982 <xTaskCreateStatic+0x52>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796a:	b672      	cpsid	i
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	b662      	cpsie	i
 800797a:	61fb      	str	r3, [r7, #28]
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	e7fd      	b.n	800797e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007982:	2354      	movs	r3, #84	@ 0x54
 8007984:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b54      	cmp	r3, #84	@ 0x54
 800798a:	d00d      	beq.n	80079a8 <xTaskCreateStatic+0x78>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007990:	b672      	cpsid	i
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	b662      	cpsie	i
 80079a0:	61bb      	str	r3, [r7, #24]
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01e      	beq.n	80079ee <xTaskCreateStatic+0xbe>
 80079b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01b      	beq.n	80079ee <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079c8:	2300      	movs	r3, #0
 80079ca:	9303      	str	r3, [sp, #12]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	9302      	str	r3, [sp, #8]
 80079d0:	f107 0314 	add.w	r3, r7, #20
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f850 	bl	8007a86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079e8:	f000 f8d8 	bl	8007b9c <prvAddNewTaskToReadyList>
 80079ec:	e001      	b.n	80079f2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079f2:	697b      	ldr	r3, [r7, #20]
	}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3728      	adds	r7, #40	@ 0x28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08c      	sub	sp, #48	@ 0x30
 8007a00:	af04      	add	r7, sp, #16
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 fab9 	bl	8008f88 <pvPortMalloc>
 8007a16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00e      	beq.n	8007a3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a1e:	2054      	movs	r0, #84	@ 0x54
 8007a20:	f001 fab2 	bl	8008f88 <pvPortMalloc>
 8007a24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a32:	e005      	b.n	8007a40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a34:	6978      	ldr	r0, [r7, #20]
 8007a36:	f001 fb75 	bl	8009124 <vPortFree>
 8007a3a:	e001      	b.n	8007a40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d017      	beq.n	8007a76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a4e:	88fa      	ldrh	r2, [r7, #6]
 8007a50:	2300      	movs	r3, #0
 8007a52:	9303      	str	r3, [sp, #12]
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	9302      	str	r3, [sp, #8]
 8007a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f80e 	bl	8007a86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a6a:	69f8      	ldr	r0, [r7, #28]
 8007a6c:	f000 f896 	bl	8007b9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a70:	2301      	movs	r3, #1
 8007a72:	61bb      	str	r3, [r7, #24]
 8007a74:	e002      	b.n	8007a7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a76:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
	}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3720      	adds	r7, #32
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b088      	sub	sp, #32
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007a9e:	440b      	add	r3, r1
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f023 0307 	bic.w	r3, r3, #7
 8007aac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00d      	beq.n	8007ad4 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abc:	b672      	cpsid	i
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	b662      	cpsie	i
 8007acc:	617b      	str	r3, [r7, #20]
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	e7fd      	b.n	8007ad0 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01f      	beq.n	8007b1a <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ada:	2300      	movs	r3, #0
 8007adc:	61fb      	str	r3, [r7, #28]
 8007ade:	e012      	b.n	8007b06 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	7819      	ldrb	r1, [r3, #0]
 8007ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	3334      	adds	r3, #52	@ 0x34
 8007af0:	460a      	mov	r2, r1
 8007af2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d006      	beq.n	8007b0e <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	3301      	adds	r3, #1
 8007b04:	61fb      	str	r3, [r7, #28]
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	2b0f      	cmp	r3, #15
 8007b0a:	d9e9      	bls.n	8007ae0 <prvInitialiseNewTask+0x5a>
 8007b0c:	e000      	b.n	8007b10 <prvInitialiseNewTask+0x8a>
			{
				break;
 8007b0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b18:	e003      	b.n	8007b22 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b24:	2b06      	cmp	r3, #6
 8007b26:	d901      	bls.n	8007b2c <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b28:	2306      	movs	r3, #6
 8007b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b30:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b36:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	3304      	adds	r3, #4
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fe35 	bl	80067b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4a:	3318      	adds	r3, #24
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fe30 	bl	80067b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5a:	f1c3 0207 	rsb	r2, r3, #7
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b66:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	68f9      	ldr	r1, [r7, #12]
 8007b7a:	69b8      	ldr	r0, [r7, #24]
 8007b7c:	f000 ffc6 	bl	8008b0c <pxPortInitialiseStack>
 8007b80:	4602      	mov	r2, r0
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b92:	bf00      	nop
 8007b94:	3720      	adds	r7, #32
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ba4:	f001 f8c2 	bl	8008d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8007c54 <prvAddNewTaskToReadyList+0xb8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3301      	adds	r3, #1
 8007bae:	4a29      	ldr	r2, [pc, #164]	@ (8007c54 <prvAddNewTaskToReadyList+0xb8>)
 8007bb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bb2:	4b29      	ldr	r3, [pc, #164]	@ (8007c58 <prvAddNewTaskToReadyList+0xbc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d109      	bne.n	8007bce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bba:	4a27      	ldr	r2, [pc, #156]	@ (8007c58 <prvAddNewTaskToReadyList+0xbc>)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007bc0:	4b24      	ldr	r3, [pc, #144]	@ (8007c54 <prvAddNewTaskToReadyList+0xb8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d110      	bne.n	8007bea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bc8:	f000 fc9c 	bl	8008504 <prvInitialiseTaskLists>
 8007bcc:	e00d      	b.n	8007bea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bce:	4b23      	ldr	r3, [pc, #140]	@ (8007c5c <prvAddNewTaskToReadyList+0xc0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d109      	bne.n	8007bea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bd6:	4b20      	ldr	r3, [pc, #128]	@ (8007c58 <prvAddNewTaskToReadyList+0xbc>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d802      	bhi.n	8007bea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007be4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c58 <prvAddNewTaskToReadyList+0xbc>)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bea:	4b1d      	ldr	r3, [pc, #116]	@ (8007c60 <prvAddNewTaskToReadyList+0xc4>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c60 <prvAddNewTaskToReadyList+0xc4>)
 8007bf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	409a      	lsls	r2, r3
 8007bfc:	4b19      	ldr	r3, [pc, #100]	@ (8007c64 <prvAddNewTaskToReadyList+0xc8>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	4a18      	ldr	r2, [pc, #96]	@ (8007c64 <prvAddNewTaskToReadyList+0xc8>)
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4a15      	ldr	r2, [pc, #84]	@ (8007c68 <prvAddNewTaskToReadyList+0xcc>)
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f7fe fdd5 	bl	80067cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c22:	f001 f8b9 	bl	8008d98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c26:	4b0d      	ldr	r3, [pc, #52]	@ (8007c5c <prvAddNewTaskToReadyList+0xc0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00e      	beq.n	8007c4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c58 <prvAddNewTaskToReadyList+0xbc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d207      	bcs.n	8007c4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c6c <prvAddNewTaskToReadyList+0xd0>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20006150 	.word	0x20006150
 8007c58:	20006050 	.word	0x20006050
 8007c5c:	2000615c 	.word	0x2000615c
 8007c60:	2000616c 	.word	0x2000616c
 8007c64:	20006158 	.word	0x20006158
 8007c68:	20006054 	.word	0x20006054
 8007c6c:	e000ed04 	.word	0xe000ed04

08007c70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007c78:	f001 f858 	bl	8008d2c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <vTaskDelete+0x18>
 8007c82:	4b3a      	ldr	r3, [pc, #232]	@ (8007d6c <vTaskDelete+0xfc>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	e000      	b.n	8007c8a <vTaskDelete+0x1a>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe fdf8 	bl	8006886 <uxListRemove>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d115      	bne.n	8007cc8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca0:	4933      	ldr	r1, [pc, #204]	@ (8007d70 <vTaskDelete+0x100>)
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <vTaskDelete+0x58>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbc:	43da      	mvns	r2, r3
 8007cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8007d74 <vTaskDelete+0x104>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8007d74 <vTaskDelete+0x104>)
 8007cc6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d004      	beq.n	8007cda <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fdd6 	bl	8006886 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007cda:	4b27      	ldr	r3, [pc, #156]	@ (8007d78 <vTaskDelete+0x108>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	4a25      	ldr	r2, [pc, #148]	@ (8007d78 <vTaskDelete+0x108>)
 8007ce2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007ce4:	4b21      	ldr	r3, [pc, #132]	@ (8007d6c <vTaskDelete+0xfc>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d10b      	bne.n	8007d06 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4821      	ldr	r0, [pc, #132]	@ (8007d7c <vTaskDelete+0x10c>)
 8007cf6:	f7fe fd69 	bl	80067cc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007cfa:	4b21      	ldr	r3, [pc, #132]	@ (8007d80 <vTaskDelete+0x110>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	4a1f      	ldr	r2, [pc, #124]	@ (8007d80 <vTaskDelete+0x110>)
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	e009      	b.n	8007d1a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007d06:	4b1f      	ldr	r3, [pc, #124]	@ (8007d84 <vTaskDelete+0x114>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d84 <vTaskDelete+0x114>)
 8007d0e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 fc65 	bl	80085e0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007d16:	f000 fc95 	bl	8008644 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007d1a:	f001 f83d 	bl	8008d98 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d88 <vTaskDelete+0x118>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d01e      	beq.n	8007d64 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8007d26:	4b11      	ldr	r3, [pc, #68]	@ (8007d6c <vTaskDelete+0xfc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d119      	bne.n	8007d64 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007d30:	4b16      	ldr	r3, [pc, #88]	@ (8007d8c <vTaskDelete+0x11c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00d      	beq.n	8007d54 <vTaskDelete+0xe4>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3c:	b672      	cpsid	i
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	b662      	cpsie	i
 8007d4c:	60bb      	str	r3, [r7, #8]
}
 8007d4e:	bf00      	nop
 8007d50:	bf00      	nop
 8007d52:	e7fd      	b.n	8007d50 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8007d54:	4b0e      	ldr	r3, [pc, #56]	@ (8007d90 <vTaskDelete+0x120>)
 8007d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20006050 	.word	0x20006050
 8007d70:	20006054 	.word	0x20006054
 8007d74:	20006158 	.word	0x20006158
 8007d78:	2000616c 	.word	0x2000616c
 8007d7c:	20006124 	.word	0x20006124
 8007d80:	20006138 	.word	0x20006138
 8007d84:	20006150 	.word	0x20006150
 8007d88:	2000615c 	.word	0x2000615c
 8007d8c:	20006178 	.word	0x20006178
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d01a      	beq.n	8007ddc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007da6:	4b15      	ldr	r3, [pc, #84]	@ (8007dfc <vTaskDelay+0x68>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00d      	beq.n	8007dca <vTaskDelay+0x36>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db2:	b672      	cpsid	i
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	b662      	cpsie	i
 8007dc2:	60bb      	str	r3, [r7, #8]
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop
 8007dc8:	e7fd      	b.n	8007dc6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007dca:	f000 f881 	bl	8007ed0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007dce:	2100      	movs	r1, #0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fe35 	bl	8008a40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007dd6:	f000 f889 	bl	8007eec <xTaskResumeAll>
 8007dda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d107      	bne.n	8007df2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007de2:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <vTaskDelay+0x6c>)
 8007de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20006178 	.word	0x20006178
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	@ 0x28
 8007e08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e12:	463a      	mov	r2, r7
 8007e14:	1d39      	adds	r1, r7, #4
 8007e16:	f107 0308 	add.w	r3, r7, #8
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7f8 fc0e 	bl	800063c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	9202      	str	r2, [sp, #8]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	460a      	mov	r2, r1
 8007e32:	4921      	ldr	r1, [pc, #132]	@ (8007eb8 <vTaskStartScheduler+0xb4>)
 8007e34:	4821      	ldr	r0, [pc, #132]	@ (8007ebc <vTaskStartScheduler+0xb8>)
 8007e36:	f7ff fd7b 	bl	8007930 <xTaskCreateStatic>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	4a20      	ldr	r2, [pc, #128]	@ (8007ec0 <vTaskStartScheduler+0xbc>)
 8007e3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e40:	4b1f      	ldr	r3, [pc, #124]	@ (8007ec0 <vTaskStartScheduler+0xbc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
 8007e4c:	e001      	b.n	8007e52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d118      	bne.n	8007e8a <vTaskStartScheduler+0x86>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5c:	b672      	cpsid	i
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	b662      	cpsie	i
 8007e6c:	613b      	str	r3, [r7, #16]
}
 8007e6e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e70:	4b14      	ldr	r3, [pc, #80]	@ (8007ec4 <vTaskStartScheduler+0xc0>)
 8007e72:	f04f 32ff 	mov.w	r2, #4294967295
 8007e76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e78:	4b13      	ldr	r3, [pc, #76]	@ (8007ec8 <vTaskStartScheduler+0xc4>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e7e:	4b13      	ldr	r3, [pc, #76]	@ (8007ecc <vTaskStartScheduler+0xc8>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e84:	f000 fed4 	bl	8008c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e88:	e011      	b.n	8007eae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e90:	d10d      	bne.n	8007eae <vTaskStartScheduler+0xaa>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	b672      	cpsid	i
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	b662      	cpsie	i
 8007ea6:	60fb      	str	r3, [r7, #12]
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	e7fd      	b.n	8007eaa <vTaskStartScheduler+0xa6>
}
 8007eae:	bf00      	nop
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	08011260 	.word	0x08011260
 8007ebc:	080084d5 	.word	0x080084d5
 8007ec0:	20006174 	.word	0x20006174
 8007ec4:	20006170 	.word	0x20006170
 8007ec8:	2000615c 	.word	0x2000615c
 8007ecc:	20006154 	.word	0x20006154

08007ed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <vTaskSuspendAll+0x18>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	4a03      	ldr	r2, [pc, #12]	@ (8007ee8 <vTaskSuspendAll+0x18>)
 8007edc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007ede:	bf00      	nop
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	20006178 	.word	0x20006178

08007eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007efa:	4b43      	ldr	r3, [pc, #268]	@ (8008008 <xTaskResumeAll+0x11c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10d      	bne.n	8007f1e <xTaskResumeAll+0x32>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	b672      	cpsid	i
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	b662      	cpsie	i
 8007f16:	603b      	str	r3, [r7, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f1e:	f000 ff05 	bl	8008d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f22:	4b39      	ldr	r3, [pc, #228]	@ (8008008 <xTaskResumeAll+0x11c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	4a37      	ldr	r2, [pc, #220]	@ (8008008 <xTaskResumeAll+0x11c>)
 8007f2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f2c:	4b36      	ldr	r3, [pc, #216]	@ (8008008 <xTaskResumeAll+0x11c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d161      	bne.n	8007ff8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f34:	4b35      	ldr	r3, [pc, #212]	@ (800800c <xTaskResumeAll+0x120>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d05d      	beq.n	8007ff8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f3c:	e02e      	b.n	8007f9c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3e:	4b34      	ldr	r3, [pc, #208]	@ (8008010 <xTaskResumeAll+0x124>)
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3318      	adds	r3, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fc9b 	bl	8006886 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe fc96 	bl	8006886 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5e:	2201      	movs	r2, #1
 8007f60:	409a      	lsls	r2, r3
 8007f62:	4b2c      	ldr	r3, [pc, #176]	@ (8008014 <xTaskResumeAll+0x128>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	4a2a      	ldr	r2, [pc, #168]	@ (8008014 <xTaskResumeAll+0x128>)
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4a27      	ldr	r2, [pc, #156]	@ (8008018 <xTaskResumeAll+0x12c>)
 8007f7a:	441a      	add	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f7fe fc22 	bl	80067cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8c:	4b23      	ldr	r3, [pc, #140]	@ (800801c <xTaskResumeAll+0x130>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d302      	bcc.n	8007f9c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007f96:	4b22      	ldr	r3, [pc, #136]	@ (8008020 <xTaskResumeAll+0x134>)
 8007f98:	2201      	movs	r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008010 <xTaskResumeAll+0x124>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1cc      	bne.n	8007f3e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007faa:	f000 fb4b 	bl	8008644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007fae:	4b1d      	ldr	r3, [pc, #116]	@ (8008024 <xTaskResumeAll+0x138>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d010      	beq.n	8007fdc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fba:	f000 f859 	bl	8008070 <xTaskIncrementTick>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007fc4:	4b16      	ldr	r3, [pc, #88]	@ (8008020 <xTaskResumeAll+0x134>)
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1f1      	bne.n	8007fba <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007fd6:	4b13      	ldr	r3, [pc, #76]	@ (8008024 <xTaskResumeAll+0x138>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007fdc:	4b10      	ldr	r3, [pc, #64]	@ (8008020 <xTaskResumeAll+0x134>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8008028 <xTaskResumeAll+0x13c>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ff8:	f000 fece 	bl	8008d98 <vPortExitCritical>

	return xAlreadyYielded;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20006178 	.word	0x20006178
 800800c:	20006150 	.word	0x20006150
 8008010:	20006110 	.word	0x20006110
 8008014:	20006158 	.word	0x20006158
 8008018:	20006054 	.word	0x20006054
 800801c:	20006050 	.word	0x20006050
 8008020:	20006164 	.word	0x20006164
 8008024:	20006160 	.word	0x20006160
 8008028:	e000ed04 	.word	0xe000ed04

0800802c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008032:	4b05      	ldr	r3, [pc, #20]	@ (8008048 <xTaskGetTickCount+0x1c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008038:	687b      	ldr	r3, [r7, #4]
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20006154 	.word	0x20006154

0800804c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008052:	f000 ff53 	bl	8008efc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008056:	2300      	movs	r3, #0
 8008058:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800805a:	4b04      	ldr	r3, [pc, #16]	@ (800806c <xTaskGetTickCountFromISR+0x20>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008060:	683b      	ldr	r3, [r7, #0]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20006154 	.word	0x20006154

08008070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008076:	2300      	movs	r3, #0
 8008078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800807a:	4b50      	ldr	r3, [pc, #320]	@ (80081bc <xTaskIncrementTick+0x14c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f040 808b 	bne.w	800819a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008084:	4b4e      	ldr	r3, [pc, #312]	@ (80081c0 <xTaskIncrementTick+0x150>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3301      	adds	r3, #1
 800808a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800808c:	4a4c      	ldr	r2, [pc, #304]	@ (80081c0 <xTaskIncrementTick+0x150>)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d123      	bne.n	80080e0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008098:	4b4a      	ldr	r3, [pc, #296]	@ (80081c4 <xTaskIncrementTick+0x154>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00d      	beq.n	80080be <xTaskIncrementTick+0x4e>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a6:	b672      	cpsid	i
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	b662      	cpsie	i
 80080b6:	603b      	str	r3, [r7, #0]
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	e7fd      	b.n	80080ba <xTaskIncrementTick+0x4a>
 80080be:	4b41      	ldr	r3, [pc, #260]	@ (80081c4 <xTaskIncrementTick+0x154>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	4b40      	ldr	r3, [pc, #256]	@ (80081c8 <xTaskIncrementTick+0x158>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a3e      	ldr	r2, [pc, #248]	@ (80081c4 <xTaskIncrementTick+0x154>)
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	4a3e      	ldr	r2, [pc, #248]	@ (80081c8 <xTaskIncrementTick+0x158>)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	4b3e      	ldr	r3, [pc, #248]	@ (80081cc <xTaskIncrementTick+0x15c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3301      	adds	r3, #1
 80080d8:	4a3c      	ldr	r2, [pc, #240]	@ (80081cc <xTaskIncrementTick+0x15c>)
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	f000 fab2 	bl	8008644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080e0:	4b3b      	ldr	r3, [pc, #236]	@ (80081d0 <xTaskIncrementTick+0x160>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d348      	bcc.n	800817c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ea:	4b36      	ldr	r3, [pc, #216]	@ (80081c4 <xTaskIncrementTick+0x154>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d104      	bne.n	80080fe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f4:	4b36      	ldr	r3, [pc, #216]	@ (80081d0 <xTaskIncrementTick+0x160>)
 80080f6:	f04f 32ff 	mov.w	r2, #4294967295
 80080fa:	601a      	str	r2, [r3, #0]
					break;
 80080fc:	e03e      	b.n	800817c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fe:	4b31      	ldr	r3, [pc, #196]	@ (80081c4 <xTaskIncrementTick+0x154>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	429a      	cmp	r2, r3
 8008114:	d203      	bcs.n	800811e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008116:	4a2e      	ldr	r2, [pc, #184]	@ (80081d0 <xTaskIncrementTick+0x160>)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800811c:	e02e      	b.n	800817c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	3304      	adds	r3, #4
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fbaf 	bl	8006886 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	3318      	adds	r3, #24
 8008134:	4618      	mov	r0, r3
 8008136:	f7fe fba6 	bl	8006886 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813e:	2201      	movs	r2, #1
 8008140:	409a      	lsls	r2, r3
 8008142:	4b24      	ldr	r3, [pc, #144]	@ (80081d4 <xTaskIncrementTick+0x164>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4313      	orrs	r3, r2
 8008148:	4a22      	ldr	r2, [pc, #136]	@ (80081d4 <xTaskIncrementTick+0x164>)
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4a1f      	ldr	r2, [pc, #124]	@ (80081d8 <xTaskIncrementTick+0x168>)
 800815a:	441a      	add	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	3304      	adds	r3, #4
 8008160:	4619      	mov	r1, r3
 8008162:	4610      	mov	r0, r2
 8008164:	f7fe fb32 	bl	80067cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816c:	4b1b      	ldr	r3, [pc, #108]	@ (80081dc <xTaskIncrementTick+0x16c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008172:	429a      	cmp	r2, r3
 8008174:	d3b9      	bcc.n	80080ea <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008176:	2301      	movs	r3, #1
 8008178:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800817a:	e7b6      	b.n	80080ea <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800817c:	4b17      	ldr	r3, [pc, #92]	@ (80081dc <xTaskIncrementTick+0x16c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008182:	4915      	ldr	r1, [pc, #84]	@ (80081d8 <xTaskIncrementTick+0x168>)
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d907      	bls.n	80081a4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008194:	2301      	movs	r3, #1
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e004      	b.n	80081a4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800819a:	4b11      	ldr	r3, [pc, #68]	@ (80081e0 <xTaskIncrementTick+0x170>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3301      	adds	r3, #1
 80081a0:	4a0f      	ldr	r2, [pc, #60]	@ (80081e0 <xTaskIncrementTick+0x170>)
 80081a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80081a4:	4b0f      	ldr	r3, [pc, #60]	@ (80081e4 <xTaskIncrementTick+0x174>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80081b0:	697b      	ldr	r3, [r7, #20]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20006178 	.word	0x20006178
 80081c0:	20006154 	.word	0x20006154
 80081c4:	20006108 	.word	0x20006108
 80081c8:	2000610c 	.word	0x2000610c
 80081cc:	20006168 	.word	0x20006168
 80081d0:	20006170 	.word	0x20006170
 80081d4:	20006158 	.word	0x20006158
 80081d8:	20006054 	.word	0x20006054
 80081dc:	20006050 	.word	0x20006050
 80081e0:	20006160 	.word	0x20006160
 80081e4:	20006164 	.word	0x20006164

080081e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081ee:	4b28      	ldr	r3, [pc, #160]	@ (8008290 <vTaskSwitchContext+0xa8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081f6:	4b27      	ldr	r3, [pc, #156]	@ (8008294 <vTaskSwitchContext+0xac>)
 80081f8:	2201      	movs	r2, #1
 80081fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081fc:	e042      	b.n	8008284 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80081fe:	4b25      	ldr	r3, [pc, #148]	@ (8008294 <vTaskSwitchContext+0xac>)
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008204:	4b24      	ldr	r3, [pc, #144]	@ (8008298 <vTaskSwitchContext+0xb0>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	fab3 f383 	clz	r3, r3
 8008210:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008212:	7afb      	ldrb	r3, [r7, #11]
 8008214:	f1c3 031f 	rsb	r3, r3, #31
 8008218:	617b      	str	r3, [r7, #20]
 800821a:	4920      	ldr	r1, [pc, #128]	@ (800829c <vTaskSwitchContext+0xb4>)
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4613      	mov	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	440b      	add	r3, r1
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10d      	bne.n	800824a <vTaskSwitchContext+0x62>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008232:	b672      	cpsid	i
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	b662      	cpsie	i
 8008242:	607b      	str	r3, [r7, #4]
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	e7fd      	b.n	8008246 <vTaskSwitchContext+0x5e>
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4a11      	ldr	r2, [pc, #68]	@ (800829c <vTaskSwitchContext+0xb4>)
 8008256:	4413      	add	r3, r2
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	3308      	adds	r3, #8
 800826c:	429a      	cmp	r2, r3
 800826e:	d104      	bne.n	800827a <vTaskSwitchContext+0x92>
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4a07      	ldr	r2, [pc, #28]	@ (80082a0 <vTaskSwitchContext+0xb8>)
 8008282:	6013      	str	r3, [r2, #0]
}
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	20006178 	.word	0x20006178
 8008294:	20006164 	.word	0x20006164
 8008298:	20006158 	.word	0x20006158
 800829c:	20006054 	.word	0x20006054
 80082a0:	20006050 	.word	0x20006050

080082a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10d      	bne.n	80082d0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	b672      	cpsid	i
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	b662      	cpsie	i
 80082c8:	60fb      	str	r3, [r7, #12]
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	e7fd      	b.n	80082cc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082d0:	4b07      	ldr	r3, [pc, #28]	@ (80082f0 <vTaskPlaceOnEventList+0x4c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3318      	adds	r3, #24
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7fe fa9b 	bl	8006814 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082de:	2101      	movs	r1, #1
 80082e0:	6838      	ldr	r0, [r7, #0]
 80082e2:	f000 fbad 	bl	8008a40 <prvAddCurrentTaskToDelayedList>
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20006050 	.word	0x20006050

080082f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10d      	bne.n	8008326 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830e:	b672      	cpsid	i
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	b662      	cpsie	i
 800831e:	60fb      	str	r3, [r7, #12]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	3318      	adds	r3, #24
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe faab 	bl	8006886 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008330:	4b1d      	ldr	r3, [pc, #116]	@ (80083a8 <xTaskRemoveFromEventList+0xb4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d11c      	bne.n	8008372 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	3304      	adds	r3, #4
 800833c:	4618      	mov	r0, r3
 800833e:	f7fe faa2 	bl	8006886 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008346:	2201      	movs	r2, #1
 8008348:	409a      	lsls	r2, r3
 800834a:	4b18      	ldr	r3, [pc, #96]	@ (80083ac <xTaskRemoveFromEventList+0xb8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4313      	orrs	r3, r2
 8008350:	4a16      	ldr	r2, [pc, #88]	@ (80083ac <xTaskRemoveFromEventList+0xb8>)
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4a13      	ldr	r2, [pc, #76]	@ (80083b0 <xTaskRemoveFromEventList+0xbc>)
 8008362:	441a      	add	r2, r3
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	3304      	adds	r3, #4
 8008368:	4619      	mov	r1, r3
 800836a:	4610      	mov	r0, r2
 800836c:	f7fe fa2e 	bl	80067cc <vListInsertEnd>
 8008370:	e005      	b.n	800837e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	3318      	adds	r3, #24
 8008376:	4619      	mov	r1, r3
 8008378:	480e      	ldr	r0, [pc, #56]	@ (80083b4 <xTaskRemoveFromEventList+0xc0>)
 800837a:	f7fe fa27 	bl	80067cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008382:	4b0d      	ldr	r3, [pc, #52]	@ (80083b8 <xTaskRemoveFromEventList+0xc4>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008388:	429a      	cmp	r2, r3
 800838a:	d905      	bls.n	8008398 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800838c:	2301      	movs	r3, #1
 800838e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008390:	4b0a      	ldr	r3, [pc, #40]	@ (80083bc <xTaskRemoveFromEventList+0xc8>)
 8008392:	2201      	movs	r2, #1
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	e001      	b.n	800839c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800839c:	697b      	ldr	r3, [r7, #20]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20006178 	.word	0x20006178
 80083ac:	20006158 	.word	0x20006158
 80083b0:	20006054 	.word	0x20006054
 80083b4:	20006110 	.word	0x20006110
 80083b8:	20006050 	.word	0x20006050
 80083bc:	20006164 	.word	0x20006164

080083c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80083c8:	4b06      	ldr	r3, [pc, #24]	@ (80083e4 <vTaskInternalSetTimeOutState+0x24>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80083d0:	4b05      	ldr	r3, [pc, #20]	@ (80083e8 <vTaskInternalSetTimeOutState+0x28>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	605a      	str	r2, [r3, #4]
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	20006168 	.word	0x20006168
 80083e8:	20006154 	.word	0x20006154

080083ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10d      	bne.n	8008418 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008400:	b672      	cpsid	i
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	b662      	cpsie	i
 8008410:	613b      	str	r3, [r7, #16]
}
 8008412:	bf00      	nop
 8008414:	bf00      	nop
 8008416:	e7fd      	b.n	8008414 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10d      	bne.n	800843a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008422:	b672      	cpsid	i
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	b662      	cpsie	i
 8008432:	60fb      	str	r3, [r7, #12]
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop
 8008438:	e7fd      	b.n	8008436 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800843a:	f000 fc77 	bl	8008d2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800843e:	4b1d      	ldr	r3, [pc, #116]	@ (80084b4 <xTaskCheckForTimeOut+0xc8>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008456:	d102      	bne.n	800845e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008458:	2300      	movs	r3, #0
 800845a:	61fb      	str	r3, [r7, #28]
 800845c:	e023      	b.n	80084a6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4b15      	ldr	r3, [pc, #84]	@ (80084b8 <xTaskCheckForTimeOut+0xcc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d007      	beq.n	800847a <xTaskCheckForTimeOut+0x8e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	429a      	cmp	r2, r3
 8008472:	d302      	bcc.n	800847a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	e015      	b.n	80084a6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	429a      	cmp	r2, r3
 8008482:	d20b      	bcs.n	800849c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	1ad2      	subs	r2, r2, r3
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff ff95 	bl	80083c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
 800849a:	e004      	b.n	80084a6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084a2:	2301      	movs	r3, #1
 80084a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80084a6:	f000 fc77 	bl	8008d98 <vPortExitCritical>

	return xReturn;
 80084aa:	69fb      	ldr	r3, [r7, #28]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3720      	adds	r7, #32
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20006154 	.word	0x20006154
 80084b8:	20006168 	.word	0x20006168

080084bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80084c0:	4b03      	ldr	r3, [pc, #12]	@ (80084d0 <vTaskMissedYield+0x14>)
 80084c2:	2201      	movs	r2, #1
 80084c4:	601a      	str	r2, [r3, #0]
}
 80084c6:	bf00      	nop
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	20006164 	.word	0x20006164

080084d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80084dc:	f000 f852 	bl	8008584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084e0:	4b06      	ldr	r3, [pc, #24]	@ (80084fc <prvIdleTask+0x28>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d9f9      	bls.n	80084dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80084e8:	4b05      	ldr	r3, [pc, #20]	@ (8008500 <prvIdleTask+0x2c>)
 80084ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084f8:	e7f0      	b.n	80084dc <prvIdleTask+0x8>
 80084fa:	bf00      	nop
 80084fc:	20006054 	.word	0x20006054
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800850a:	2300      	movs	r3, #0
 800850c:	607b      	str	r3, [r7, #4]
 800850e:	e00c      	b.n	800852a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4a12      	ldr	r2, [pc, #72]	@ (8008564 <prvInitialiseTaskLists+0x60>)
 800851c:	4413      	add	r3, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe f927 	bl	8006772 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3301      	adds	r3, #1
 8008528:	607b      	str	r3, [r7, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b06      	cmp	r3, #6
 800852e:	d9ef      	bls.n	8008510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008530:	480d      	ldr	r0, [pc, #52]	@ (8008568 <prvInitialiseTaskLists+0x64>)
 8008532:	f7fe f91e 	bl	8006772 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008536:	480d      	ldr	r0, [pc, #52]	@ (800856c <prvInitialiseTaskLists+0x68>)
 8008538:	f7fe f91b 	bl	8006772 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800853c:	480c      	ldr	r0, [pc, #48]	@ (8008570 <prvInitialiseTaskLists+0x6c>)
 800853e:	f7fe f918 	bl	8006772 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008542:	480c      	ldr	r0, [pc, #48]	@ (8008574 <prvInitialiseTaskLists+0x70>)
 8008544:	f7fe f915 	bl	8006772 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008548:	480b      	ldr	r0, [pc, #44]	@ (8008578 <prvInitialiseTaskLists+0x74>)
 800854a:	f7fe f912 	bl	8006772 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800854e:	4b0b      	ldr	r3, [pc, #44]	@ (800857c <prvInitialiseTaskLists+0x78>)
 8008550:	4a05      	ldr	r2, [pc, #20]	@ (8008568 <prvInitialiseTaskLists+0x64>)
 8008552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008554:	4b0a      	ldr	r3, [pc, #40]	@ (8008580 <prvInitialiseTaskLists+0x7c>)
 8008556:	4a05      	ldr	r2, [pc, #20]	@ (800856c <prvInitialiseTaskLists+0x68>)
 8008558:	601a      	str	r2, [r3, #0]
}
 800855a:	bf00      	nop
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20006054 	.word	0x20006054
 8008568:	200060e0 	.word	0x200060e0
 800856c:	200060f4 	.word	0x200060f4
 8008570:	20006110 	.word	0x20006110
 8008574:	20006124 	.word	0x20006124
 8008578:	2000613c 	.word	0x2000613c
 800857c:	20006108 	.word	0x20006108
 8008580:	2000610c 	.word	0x2000610c

08008584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800858a:	e019      	b.n	80085c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800858c:	f000 fbce 	bl	8008d2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008590:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <prvCheckTasksWaitingTermination+0x50>)
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3304      	adds	r3, #4
 800859c:	4618      	mov	r0, r3
 800859e:	f7fe f972 	bl	8006886 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085a2:	4b0d      	ldr	r3, [pc, #52]	@ (80085d8 <prvCheckTasksWaitingTermination+0x54>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	4a0b      	ldr	r2, [pc, #44]	@ (80085d8 <prvCheckTasksWaitingTermination+0x54>)
 80085aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80085ac:	4b0b      	ldr	r3, [pc, #44]	@ (80085dc <prvCheckTasksWaitingTermination+0x58>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	4a0a      	ldr	r2, [pc, #40]	@ (80085dc <prvCheckTasksWaitingTermination+0x58>)
 80085b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80085b6:	f000 fbef 	bl	8008d98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f810 	bl	80085e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085c0:	4b06      	ldr	r3, [pc, #24]	@ (80085dc <prvCheckTasksWaitingTermination+0x58>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e1      	bne.n	800858c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20006124 	.word	0x20006124
 80085d8:	20006150 	.word	0x20006150
 80085dc:	20006138 	.word	0x20006138

080085e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d108      	bne.n	8008604 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fd94 	bl	8009124 <vPortFree>
				vPortFree( pxTCB );
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fd91 	bl	8009124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008602:	e01b      	b.n	800863c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800860a:	2b01      	cmp	r3, #1
 800860c:	d103      	bne.n	8008616 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fd88 	bl	8009124 <vPortFree>
	}
 8008614:	e012      	b.n	800863c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800861c:	2b02      	cmp	r3, #2
 800861e:	d00d      	beq.n	800863c <prvDeleteTCB+0x5c>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008624:	b672      	cpsid	i
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	b662      	cpsie	i
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	e7fd      	b.n	8008638 <prvDeleteTCB+0x58>
	}
 800863c:	bf00      	nop
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800864a:	4b0c      	ldr	r3, [pc, #48]	@ (800867c <prvResetNextTaskUnblockTime+0x38>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d104      	bne.n	800865e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008654:	4b0a      	ldr	r3, [pc, #40]	@ (8008680 <prvResetNextTaskUnblockTime+0x3c>)
 8008656:	f04f 32ff 	mov.w	r2, #4294967295
 800865a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800865c:	e008      	b.n	8008670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800865e:	4b07      	ldr	r3, [pc, #28]	@ (800867c <prvResetNextTaskUnblockTime+0x38>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4a04      	ldr	r2, [pc, #16]	@ (8008680 <prvResetNextTaskUnblockTime+0x3c>)
 800866e:	6013      	str	r3, [r2, #0]
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	20006108 	.word	0x20006108
 8008680:	20006170 	.word	0x20006170

08008684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800868a:	4b0b      	ldr	r3, [pc, #44]	@ (80086b8 <xTaskGetSchedulerState+0x34>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008692:	2301      	movs	r3, #1
 8008694:	607b      	str	r3, [r7, #4]
 8008696:	e008      	b.n	80086aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008698:	4b08      	ldr	r3, [pc, #32]	@ (80086bc <xTaskGetSchedulerState+0x38>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80086a0:	2302      	movs	r3, #2
 80086a2:	607b      	str	r3, [r7, #4]
 80086a4:	e001      	b.n	80086aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80086a6:	2300      	movs	r3, #0
 80086a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80086aa:	687b      	ldr	r3, [r7, #4]
	}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	2000615c 	.word	0x2000615c
 80086bc:	20006178 	.word	0x20006178

080086c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d069      	beq.n	80087aa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086da:	4b36      	ldr	r3, [pc, #216]	@ (80087b4 <xTaskPriorityInherit+0xf4>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d259      	bcs.n	8008798 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	db06      	blt.n	80086fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ec:	4b31      	ldr	r3, [pc, #196]	@ (80087b4 <xTaskPriorityInherit+0xf4>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f2:	f1c3 0207 	rsb	r2, r3, #7
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6959      	ldr	r1, [r3, #20]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4a2b      	ldr	r2, [pc, #172]	@ (80087b8 <xTaskPriorityInherit+0xf8>)
 800870c:	4413      	add	r3, r2
 800870e:	4299      	cmp	r1, r3
 8008710:	d13a      	bne.n	8008788 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	3304      	adds	r3, #4
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe f8b5 	bl	8006886 <uxListRemove>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d115      	bne.n	800874e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008726:	4924      	ldr	r1, [pc, #144]	@ (80087b8 <xTaskPriorityInherit+0xf8>)
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	440b      	add	r3, r1
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <xTaskPriorityInherit+0x8e>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873c:	2201      	movs	r2, #1
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	43da      	mvns	r2, r3
 8008744:	4b1d      	ldr	r3, [pc, #116]	@ (80087bc <xTaskPriorityInherit+0xfc>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4013      	ands	r3, r2
 800874a:	4a1c      	ldr	r2, [pc, #112]	@ (80087bc <xTaskPriorityInherit+0xfc>)
 800874c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800874e:	4b19      	ldr	r3, [pc, #100]	@ (80087b4 <xTaskPriorityInherit+0xf4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875c:	2201      	movs	r2, #1
 800875e:	409a      	lsls	r2, r3
 8008760:	4b16      	ldr	r3, [pc, #88]	@ (80087bc <xTaskPriorityInherit+0xfc>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4313      	orrs	r3, r2
 8008766:	4a15      	ldr	r2, [pc, #84]	@ (80087bc <xTaskPriorityInherit+0xfc>)
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4a10      	ldr	r2, [pc, #64]	@ (80087b8 <xTaskPriorityInherit+0xf8>)
 8008778:	441a      	add	r2, r3
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	3304      	adds	r3, #4
 800877e:	4619      	mov	r1, r3
 8008780:	4610      	mov	r0, r2
 8008782:	f7fe f823 	bl	80067cc <vListInsertEnd>
 8008786:	e004      	b.n	8008792 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008788:	4b0a      	ldr	r3, [pc, #40]	@ (80087b4 <xTaskPriorityInherit+0xf4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008792:	2301      	movs	r3, #1
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	e008      	b.n	80087aa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800879c:	4b05      	ldr	r3, [pc, #20]	@ (80087b4 <xTaskPriorityInherit+0xf4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d201      	bcs.n	80087aa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80087a6:	2301      	movs	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087aa:	68fb      	ldr	r3, [r7, #12]
	}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	20006050 	.word	0x20006050
 80087b8:	20006054 	.word	0x20006054
 80087bc:	20006158 	.word	0x20006158

080087c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80087cc:	2300      	movs	r3, #0
 80087ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d074      	beq.n	80088c0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087d6:	4b3d      	ldr	r3, [pc, #244]	@ (80088cc <xTaskPriorityDisinherit+0x10c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d00d      	beq.n	80087fc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e4:	b672      	cpsid	i
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	b662      	cpsie	i
 80087f4:	60fb      	str	r3, [r7, #12]
}
 80087f6:	bf00      	nop
 80087f8:	bf00      	nop
 80087fa:	e7fd      	b.n	80087f8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10d      	bne.n	8008820 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008808:	b672      	cpsid	i
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	b662      	cpsie	i
 8008818:	60bb      	str	r3, [r7, #8]
}
 800881a:	bf00      	nop
 800881c:	bf00      	nop
 800881e:	e7fd      	b.n	800881c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008824:	1e5a      	subs	r2, r3, #1
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008832:	429a      	cmp	r2, r3
 8008834:	d044      	beq.n	80088c0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800883a:	2b00      	cmp	r3, #0
 800883c:	d140      	bne.n	80088c0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	3304      	adds	r3, #4
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe f81f 	bl	8006886 <uxListRemove>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d115      	bne.n	800887a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008852:	491f      	ldr	r1, [pc, #124]	@ (80088d0 <xTaskPriorityDisinherit+0x110>)
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <xTaskPriorityDisinherit+0xba>
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008868:	2201      	movs	r2, #1
 800886a:	fa02 f303 	lsl.w	r3, r2, r3
 800886e:	43da      	mvns	r2, r3
 8008870:	4b18      	ldr	r3, [pc, #96]	@ (80088d4 <xTaskPriorityDisinherit+0x114>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4013      	ands	r3, r2
 8008876:	4a17      	ldr	r2, [pc, #92]	@ (80088d4 <xTaskPriorityDisinherit+0x114>)
 8008878:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008886:	f1c3 0207 	rsb	r2, r3, #7
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008892:	2201      	movs	r2, #1
 8008894:	409a      	lsls	r2, r3
 8008896:	4b0f      	ldr	r3, [pc, #60]	@ (80088d4 <xTaskPriorityDisinherit+0x114>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4313      	orrs	r3, r2
 800889c:	4a0d      	ldr	r2, [pc, #52]	@ (80088d4 <xTaskPriorityDisinherit+0x114>)
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4a08      	ldr	r2, [pc, #32]	@ (80088d0 <xTaskPriorityDisinherit+0x110>)
 80088ae:	441a      	add	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f7fd ff88 	bl	80067cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088bc:	2301      	movs	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088c0:	697b      	ldr	r3, [r7, #20]
	}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20006050 	.word	0x20006050
 80088d0:	20006054 	.word	0x20006054
 80088d4:	20006158 	.word	0x20006158

080088d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80088e6:	2301      	movs	r3, #1
 80088e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 8089 	beq.w	8008a04 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10d      	bne.n	8008916 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fe:	b672      	cpsid	i
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	b662      	cpsie	i
 800890e:	60fb      	str	r3, [r7, #12]
}
 8008910:	bf00      	nop
 8008912:	bf00      	nop
 8008914:	e7fd      	b.n	8008912 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	429a      	cmp	r2, r3
 800891e:	d902      	bls.n	8008926 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	e002      	b.n	800892c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008930:	69fa      	ldr	r2, [r7, #28]
 8008932:	429a      	cmp	r2, r3
 8008934:	d066      	beq.n	8008a04 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	429a      	cmp	r2, r3
 800893e:	d161      	bne.n	8008a04 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008940:	4b32      	ldr	r3, [pc, #200]	@ (8008a0c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	429a      	cmp	r2, r3
 8008948:	d10d      	bne.n	8008966 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	b672      	cpsid	i
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	b662      	cpsie	i
 800895e:	60bb      	str	r3, [r7, #8]
}
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	e7fd      	b.n	8008962 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	2b00      	cmp	r3, #0
 8008978:	db04      	blt.n	8008984 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	f1c3 0207 	rsb	r2, r3, #7
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	6959      	ldr	r1, [r3, #20]
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4a1f      	ldr	r2, [pc, #124]	@ (8008a10 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008994:	4413      	add	r3, r2
 8008996:	4299      	cmp	r1, r3
 8008998:	d134      	bne.n	8008a04 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	3304      	adds	r3, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fd ff71 	bl	8006886 <uxListRemove>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d115      	bne.n	80089d6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ae:	4918      	ldr	r1, [pc, #96]	@ (8008a10 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80089b0:	4613      	mov	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	440b      	add	r3, r1
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10a      	bne.n	80089d6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c4:	2201      	movs	r2, #1
 80089c6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ca:	43da      	mvns	r2, r3
 80089cc:	4b11      	ldr	r3, [pc, #68]	@ (8008a14 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4013      	ands	r3, r2
 80089d2:	4a10      	ldr	r2, [pc, #64]	@ (8008a14 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80089d4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089da:	2201      	movs	r2, #1
 80089dc:	409a      	lsls	r2, r3
 80089de:	4b0d      	ldr	r3, [pc, #52]	@ (8008a14 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008a14 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4a06      	ldr	r2, [pc, #24]	@ (8008a10 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80089f6:	441a      	add	r2, r3
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	3304      	adds	r3, #4
 80089fc:	4619      	mov	r1, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	f7fd fee4 	bl	80067cc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a04:	bf00      	nop
 8008a06:	3720      	adds	r7, #32
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20006050 	.word	0x20006050
 8008a10:	20006054 	.word	0x20006054
 8008a14:	20006158 	.word	0x20006158

08008a18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a18:	b480      	push	{r7}
 8008a1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a1c:	4b07      	ldr	r3, [pc, #28]	@ (8008a3c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d004      	beq.n	8008a2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a24:	4b05      	ldr	r3, [pc, #20]	@ (8008a3c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008a2e:	4b03      	ldr	r3, [pc, #12]	@ (8008a3c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a30:	681b      	ldr	r3, [r3, #0]
	}
 8008a32:	4618      	mov	r0, r3
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	20006050 	.word	0x20006050

08008a40 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a4a:	4b29      	ldr	r3, [pc, #164]	@ (8008af0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a50:	4b28      	ldr	r3, [pc, #160]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3304      	adds	r3, #4
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fd ff15 	bl	8006886 <uxListRemove>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10b      	bne.n	8008a7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008a62:	4b24      	ldr	r3, [pc, #144]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a68:	2201      	movs	r2, #1
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43da      	mvns	r2, r3
 8008a70:	4b21      	ldr	r3, [pc, #132]	@ (8008af8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4013      	ands	r3, r2
 8008a76:	4a20      	ldr	r2, [pc, #128]	@ (8008af8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d10a      	bne.n	8008a98 <prvAddCurrentTaskToDelayedList+0x58>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d007      	beq.n	8008a98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a88:	4b1a      	ldr	r3, [pc, #104]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4619      	mov	r1, r3
 8008a90:	481a      	ldr	r0, [pc, #104]	@ (8008afc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008a92:	f7fd fe9b 	bl	80067cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a96:	e026      	b.n	8008ae6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008aa0:	4b14      	ldr	r3, [pc, #80]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d209      	bcs.n	8008ac4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ab0:	4b13      	ldr	r3, [pc, #76]	@ (8008b00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4619      	mov	r1, r3
 8008abc:	4610      	mov	r0, r2
 8008abe:	f7fd fea9 	bl	8006814 <vListInsert>
}
 8008ac2:	e010      	b.n	8008ae6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f7fd fe9f 	bl	8006814 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d202      	bcs.n	8008ae6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008ae0:	4a09      	ldr	r2, [pc, #36]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	6013      	str	r3, [r2, #0]
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20006154 	.word	0x20006154
 8008af4:	20006050 	.word	0x20006050
 8008af8:	20006158 	.word	0x20006158
 8008afc:	2000613c 	.word	0x2000613c
 8008b00:	2000610c 	.word	0x2000610c
 8008b04:	20006108 	.word	0x20006108
 8008b08:	20006170 	.word	0x20006170

08008b0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3b04      	subs	r3, #4
 8008b1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3b04      	subs	r3, #4
 8008b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f023 0201 	bic.w	r2, r3, #1
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3b04      	subs	r3, #4
 8008b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8008b70 <pxPortInitialiseStack+0x64>)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3b14      	subs	r3, #20
 8008b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3b04      	subs	r3, #4
 8008b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f06f 0202 	mvn.w	r2, #2
 8008b5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3b20      	subs	r3, #32
 8008b60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b62:	68fb      	ldr	r3, [r7, #12]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	08008b75 	.word	0x08008b75

08008b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b7e:	4b15      	ldr	r3, [pc, #84]	@ (8008bd4 <prvTaskExitError+0x60>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b86:	d00d      	beq.n	8008ba4 <prvTaskExitError+0x30>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	b672      	cpsid	i
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	b662      	cpsie	i
 8008b9c:	60fb      	str	r3, [r7, #12]
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	e7fd      	b.n	8008ba0 <prvTaskExitError+0x2c>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	b672      	cpsid	i
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	b662      	cpsie	i
 8008bb8:	60bb      	str	r3, [r7, #8]
}
 8008bba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bbc:	bf00      	nop
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0fc      	beq.n	8008bbe <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	20000020 	.word	0x20000020
	...

08008be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008be0:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <pxCurrentTCBConst2>)
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	6808      	ldr	r0, [r1, #0]
 8008be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bea:	f380 8809 	msr	PSP, r0
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8811 	msr	BASEPRI, r0
 8008bfa:	4770      	bx	lr
 8008bfc:	f3af 8000 	nop.w

08008c00 <pxCurrentTCBConst2>:
 8008c00:	20006050 	.word	0x20006050
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c08:	4808      	ldr	r0, [pc, #32]	@ (8008c2c <prvPortStartFirstTask+0x24>)
 8008c0a:	6800      	ldr	r0, [r0, #0]
 8008c0c:	6800      	ldr	r0, [r0, #0]
 8008c0e:	f380 8808 	msr	MSP, r0
 8008c12:	f04f 0000 	mov.w	r0, #0
 8008c16:	f380 8814 	msr	CONTROL, r0
 8008c1a:	b662      	cpsie	i
 8008c1c:	b661      	cpsie	f
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	df00      	svc	0
 8008c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c2a:	bf00      	nop
 8008c2c:	e000ed08 	.word	0xe000ed08

08008c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c36:	4b37      	ldr	r3, [pc, #220]	@ (8008d14 <xPortStartScheduler+0xe4>)
 8008c38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	22ff      	movs	r2, #255	@ 0xff
 8008c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d18 <xPortStartScheduler+0xe8>)
 8008c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8008d1c <xPortStartScheduler+0xec>)
 8008c60:	2207      	movs	r2, #7
 8008c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c64:	e009      	b.n	8008c7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008c66:	4b2d      	ldr	r3, [pc, #180]	@ (8008d1c <xPortStartScheduler+0xec>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8008d1c <xPortStartScheduler+0xec>)
 8008c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c82:	2b80      	cmp	r3, #128	@ 0x80
 8008c84:	d0ef      	beq.n	8008c66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c86:	4b25      	ldr	r3, [pc, #148]	@ (8008d1c <xPortStartScheduler+0xec>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f1c3 0307 	rsb	r3, r3, #7
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d00d      	beq.n	8008cae <xPortStartScheduler+0x7e>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c96:	b672      	cpsid	i
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	b662      	cpsie	i
 8008ca6:	60bb      	str	r3, [r7, #8]
}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	e7fd      	b.n	8008caa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cae:	4b1b      	ldr	r3, [pc, #108]	@ (8008d1c <xPortStartScheduler+0xec>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	021b      	lsls	r3, r3, #8
 8008cb4:	4a19      	ldr	r2, [pc, #100]	@ (8008d1c <xPortStartScheduler+0xec>)
 8008cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cb8:	4b18      	ldr	r3, [pc, #96]	@ (8008d1c <xPortStartScheduler+0xec>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cc0:	4a16      	ldr	r2, [pc, #88]	@ (8008d1c <xPortStartScheduler+0xec>)
 8008cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ccc:	4b14      	ldr	r3, [pc, #80]	@ (8008d20 <xPortStartScheduler+0xf0>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a13      	ldr	r2, [pc, #76]	@ (8008d20 <xPortStartScheduler+0xf0>)
 8008cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cd8:	4b11      	ldr	r3, [pc, #68]	@ (8008d20 <xPortStartScheduler+0xf0>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a10      	ldr	r2, [pc, #64]	@ (8008d20 <xPortStartScheduler+0xf0>)
 8008cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ce4:	f000 f8dc 	bl	8008ea0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8008d24 <xPortStartScheduler+0xf4>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cee:	f000 f8fb 	bl	8008ee8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d28 <xPortStartScheduler+0xf8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8008d28 <xPortStartScheduler+0xf8>)
 8008cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cfe:	f7ff ff83 	bl	8008c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d02:	f7ff fa71 	bl	80081e8 <vTaskSwitchContext>
	prvTaskExitError();
 8008d06:	f7ff ff35 	bl	8008b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	e000e400 	.word	0xe000e400
 8008d18:	2000617c 	.word	0x2000617c
 8008d1c:	20006180 	.word	0x20006180
 8008d20:	e000ed20 	.word	0xe000ed20
 8008d24:	20000020 	.word	0x20000020
 8008d28:	e000ef34 	.word	0xe000ef34

08008d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	b672      	cpsid	i
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	b662      	cpsie	i
 8008d46:	607b      	str	r3, [r7, #4]
}
 8008d48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d4a:	4b11      	ldr	r3, [pc, #68]	@ (8008d90 <vPortEnterCritical+0x64>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	4a0f      	ldr	r2, [pc, #60]	@ (8008d90 <vPortEnterCritical+0x64>)
 8008d52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d54:	4b0e      	ldr	r3, [pc, #56]	@ (8008d90 <vPortEnterCritical+0x64>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d112      	bne.n	8008d82 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d94 <vPortEnterCritical+0x68>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00d      	beq.n	8008d82 <vPortEnterCritical+0x56>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	b672      	cpsid	i
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	b662      	cpsie	i
 8008d7a:	603b      	str	r3, [r7, #0]
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	e7fd      	b.n	8008d7e <vPortEnterCritical+0x52>
	}
}
 8008d82:	bf00      	nop
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20000020 	.word	0x20000020
 8008d94:	e000ed04 	.word	0xe000ed04

08008d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d9e:	4b13      	ldr	r3, [pc, #76]	@ (8008dec <vPortExitCritical+0x54>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10d      	bne.n	8008dc2 <vPortExitCritical+0x2a>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008daa:	b672      	cpsid	i
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	b662      	cpsie	i
 8008dba:	607b      	str	r3, [r7, #4]
}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	e7fd      	b.n	8008dbe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dec <vPortExitCritical+0x54>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	4a08      	ldr	r2, [pc, #32]	@ (8008dec <vPortExitCritical+0x54>)
 8008dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dcc:	4b07      	ldr	r3, [pc, #28]	@ (8008dec <vPortExitCritical+0x54>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d105      	bne.n	8008de0 <vPortExitCritical+0x48>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f383 8811 	msr	BASEPRI, r3
}
 8008dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	20000020 	.word	0x20000020

08008df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008df0:	f3ef 8009 	mrs	r0, PSP
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	4b15      	ldr	r3, [pc, #84]	@ (8008e50 <pxCurrentTCBConst>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	f01e 0f10 	tst.w	lr, #16
 8008e00:	bf08      	it	eq
 8008e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	6010      	str	r0, [r2, #0]
 8008e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e14:	b672      	cpsid	i
 8008e16:	f380 8811 	msr	BASEPRI, r0
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	b662      	cpsie	i
 8008e24:	f7ff f9e0 	bl	80081e8 <vTaskSwitchContext>
 8008e28:	f04f 0000 	mov.w	r0, #0
 8008e2c:	f380 8811 	msr	BASEPRI, r0
 8008e30:	bc09      	pop	{r0, r3}
 8008e32:	6819      	ldr	r1, [r3, #0]
 8008e34:	6808      	ldr	r0, [r1, #0]
 8008e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3a:	f01e 0f10 	tst.w	lr, #16
 8008e3e:	bf08      	it	eq
 8008e40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e44:	f380 8809 	msr	PSP, r0
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop

08008e50 <pxCurrentTCBConst>:
 8008e50:	20006050 	.word	0x20006050
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	b672      	cpsid	i
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	b662      	cpsie	i
 8008e72:	607b      	str	r3, [r7, #4]
}
 8008e74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e76:	f7ff f8fb 	bl	8008070 <xTaskIncrementTick>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e80:	4b06      	ldr	r3, [pc, #24]	@ (8008e9c <SysTick_Handler+0x44>)
 8008e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	f383 8811 	msr	BASEPRI, r3
}
 8008e92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed4 <vPortSetupTimerInterrupt+0x34>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed8 <vPortSetupTimerInterrupt+0x38>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8008edc <vPortSetupTimerInterrupt+0x3c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8008ee0 <vPortSetupTimerInterrupt+0x40>)
 8008eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eba:	099b      	lsrs	r3, r3, #6
 8008ebc:	4a09      	ldr	r2, [pc, #36]	@ (8008ee4 <vPortSetupTimerInterrupt+0x44>)
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ec2:	4b04      	ldr	r3, [pc, #16]	@ (8008ed4 <vPortSetupTimerInterrupt+0x34>)
 8008ec4:	2207      	movs	r2, #7
 8008ec6:	601a      	str	r2, [r3, #0]
}
 8008ec8:	bf00      	nop
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	e000e010 	.word	0xe000e010
 8008ed8:	e000e018 	.word	0xe000e018
 8008edc:	20000000 	.word	0x20000000
 8008ee0:	10624dd3 	.word	0x10624dd3
 8008ee4:	e000e014 	.word	0xe000e014

08008ee8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ee8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ef8 <vPortEnableVFP+0x10>
 8008eec:	6801      	ldr	r1, [r0, #0]
 8008eee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008ef2:	6001      	str	r1, [r0, #0]
 8008ef4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ef6:	bf00      	nop
 8008ef8:	e000ed88 	.word	0xe000ed88

08008efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f02:	f3ef 8305 	mrs	r3, IPSR
 8008f06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b0f      	cmp	r3, #15
 8008f0c:	d917      	bls.n	8008f3e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8008f78 <vPortValidateInterruptPriority+0x7c>)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f18:	4b18      	ldr	r3, [pc, #96]	@ (8008f7c <vPortValidateInterruptPriority+0x80>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	7afa      	ldrb	r2, [r7, #11]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d20d      	bcs.n	8008f3e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f26:	b672      	cpsid	i
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	b662      	cpsie	i
 8008f36:	607b      	str	r3, [r7, #4]
}
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	e7fd      	b.n	8008f3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f3e:	4b10      	ldr	r3, [pc, #64]	@ (8008f80 <vPortValidateInterruptPriority+0x84>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f46:	4b0f      	ldr	r3, [pc, #60]	@ (8008f84 <vPortValidateInterruptPriority+0x88>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d90d      	bls.n	8008f6a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f52:	b672      	cpsid	i
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	b662      	cpsie	i
 8008f62:	603b      	str	r3, [r7, #0]
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	e7fd      	b.n	8008f66 <vPortValidateInterruptPriority+0x6a>
	}
 8008f6a:	bf00      	nop
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	e000e3f0 	.word	0xe000e3f0
 8008f7c:	2000617c 	.word	0x2000617c
 8008f80:	e000ed0c 	.word	0xe000ed0c
 8008f84:	20006180 	.word	0x20006180

08008f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	@ 0x28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f90:	2300      	movs	r3, #0
 8008f92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f94:	f7fe ff9c 	bl	8007ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f98:	4b5d      	ldr	r3, [pc, #372]	@ (8009110 <pvPortMalloc+0x188>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fa0:	f000 f920 	bl	80091e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fa4:	4b5b      	ldr	r3, [pc, #364]	@ (8009114 <pvPortMalloc+0x18c>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4013      	ands	r3, r2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f040 8094 	bne.w	80090da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d020      	beq.n	8008ffa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008fb8:	2208      	movs	r2, #8
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d017      	beq.n	8008ffa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f023 0307 	bic.w	r3, r3, #7
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00d      	beq.n	8008ffa <pvPortMalloc+0x72>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe2:	b672      	cpsid	i
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	b662      	cpsie	i
 8008ff2:	617b      	str	r3, [r7, #20]
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	e7fd      	b.n	8008ff6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d06c      	beq.n	80090da <pvPortMalloc+0x152>
 8009000:	4b45      	ldr	r3, [pc, #276]	@ (8009118 <pvPortMalloc+0x190>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	429a      	cmp	r2, r3
 8009008:	d867      	bhi.n	80090da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800900a:	4b44      	ldr	r3, [pc, #272]	@ (800911c <pvPortMalloc+0x194>)
 800900c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800900e:	4b43      	ldr	r3, [pc, #268]	@ (800911c <pvPortMalloc+0x194>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009014:	e004      	b.n	8009020 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	429a      	cmp	r2, r3
 8009028:	d903      	bls.n	8009032 <pvPortMalloc+0xaa>
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1f1      	bne.n	8009016 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009032:	4b37      	ldr	r3, [pc, #220]	@ (8009110 <pvPortMalloc+0x188>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009038:	429a      	cmp	r2, r3
 800903a:	d04e      	beq.n	80090da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2208      	movs	r2, #8
 8009042:	4413      	add	r3, r2
 8009044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	1ad2      	subs	r2, r2, r3
 8009056:	2308      	movs	r3, #8
 8009058:	005b      	lsls	r3, r3, #1
 800905a:	429a      	cmp	r2, r3
 800905c:	d922      	bls.n	80090a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800905e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4413      	add	r3, r2
 8009064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	f003 0307 	and.w	r3, r3, #7
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00d      	beq.n	800908c <pvPortMalloc+0x104>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	b672      	cpsid	i
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	b662      	cpsie	i
 8009084:	613b      	str	r3, [r7, #16]
}
 8009086:	bf00      	nop
 8009088:	bf00      	nop
 800908a:	e7fd      	b.n	8009088 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	1ad2      	subs	r2, r2, r3
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800909e:	69b8      	ldr	r0, [r7, #24]
 80090a0:	f000 f902 	bl	80092a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009118 <pvPortMalloc+0x190>)
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009118 <pvPortMalloc+0x190>)
 80090b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090b2:	4b19      	ldr	r3, [pc, #100]	@ (8009118 <pvPortMalloc+0x190>)
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009120 <pvPortMalloc+0x198>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d203      	bcs.n	80090c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090be:	4b16      	ldr	r3, [pc, #88]	@ (8009118 <pvPortMalloc+0x190>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a17      	ldr	r2, [pc, #92]	@ (8009120 <pvPortMalloc+0x198>)
 80090c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	4b12      	ldr	r3, [pc, #72]	@ (8009114 <pvPortMalloc+0x18c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	431a      	orrs	r2, r3
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090da:	f7fe ff07 	bl	8007eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	f003 0307 	and.w	r3, r3, #7
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00d      	beq.n	8009104 <pvPortMalloc+0x17c>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ec:	b672      	cpsid	i
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	b662      	cpsie	i
 80090fc:	60fb      	str	r3, [r7, #12]
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <pvPortMalloc+0x178>
	return pvReturn;
 8009104:	69fb      	ldr	r3, [r7, #28]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3728      	adds	r7, #40	@ 0x28
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20009d8c 	.word	0x20009d8c
 8009114:	20009d98 	.word	0x20009d98
 8009118:	20009d90 	.word	0x20009d90
 800911c:	20009d84 	.word	0x20009d84
 8009120:	20009d94 	.word	0x20009d94

08009124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d04e      	beq.n	80091d4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009136:	2308      	movs	r3, #8
 8009138:	425b      	negs	r3, r3
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	4413      	add	r3, r2
 800913e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	4b24      	ldr	r3, [pc, #144]	@ (80091dc <vPortFree+0xb8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4013      	ands	r3, r2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10d      	bne.n	800916e <vPortFree+0x4a>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009156:	b672      	cpsid	i
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	b662      	cpsie	i
 8009166:	60fb      	str	r3, [r7, #12]
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	e7fd      	b.n	800916a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00d      	beq.n	8009192 <vPortFree+0x6e>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917a:	b672      	cpsid	i
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	b662      	cpsie	i
 800918a:	60bb      	str	r3, [r7, #8]
}
 800918c:	bf00      	nop
 800918e:	bf00      	nop
 8009190:	e7fd      	b.n	800918e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	4b11      	ldr	r3, [pc, #68]	@ (80091dc <vPortFree+0xb8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4013      	ands	r3, r2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d019      	beq.n	80091d4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d115      	bne.n	80091d4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	4b0b      	ldr	r3, [pc, #44]	@ (80091dc <vPortFree+0xb8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	43db      	mvns	r3, r3
 80091b2:	401a      	ands	r2, r3
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091b8:	f7fe fe8a 	bl	8007ed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	4b07      	ldr	r3, [pc, #28]	@ (80091e0 <vPortFree+0xbc>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4413      	add	r3, r2
 80091c6:	4a06      	ldr	r2, [pc, #24]	@ (80091e0 <vPortFree+0xbc>)
 80091c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091ca:	6938      	ldr	r0, [r7, #16]
 80091cc:	f000 f86c 	bl	80092a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80091d0:	f7fe fe8c 	bl	8007eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091d4:	bf00      	nop
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	20009d98 	.word	0x20009d98
 80091e0:	20009d90 	.word	0x20009d90

080091e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091ea:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80091ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091f0:	4b27      	ldr	r3, [pc, #156]	@ (8009290 <prvHeapInit+0xac>)
 80091f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00c      	beq.n	8009218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3307      	adds	r3, #7
 8009202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 0307 	bic.w	r3, r3, #7
 800920a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	4a1f      	ldr	r2, [pc, #124]	@ (8009290 <prvHeapInit+0xac>)
 8009214:	4413      	add	r3, r2
 8009216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800921c:	4a1d      	ldr	r2, [pc, #116]	@ (8009294 <prvHeapInit+0xb0>)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009222:	4b1c      	ldr	r3, [pc, #112]	@ (8009294 <prvHeapInit+0xb0>)
 8009224:	2200      	movs	r2, #0
 8009226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	4413      	add	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009230:	2208      	movs	r2, #8
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 0307 	bic.w	r3, r3, #7
 800923e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4a15      	ldr	r2, [pc, #84]	@ (8009298 <prvHeapInit+0xb4>)
 8009244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009246:	4b14      	ldr	r3, [pc, #80]	@ (8009298 <prvHeapInit+0xb4>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2200      	movs	r2, #0
 800924c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800924e:	4b12      	ldr	r3, [pc, #72]	@ (8009298 <prvHeapInit+0xb4>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	1ad2      	subs	r2, r2, r3
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009264:	4b0c      	ldr	r3, [pc, #48]	@ (8009298 <prvHeapInit+0xb4>)
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	4a0a      	ldr	r2, [pc, #40]	@ (800929c <prvHeapInit+0xb8>)
 8009272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	4a09      	ldr	r2, [pc, #36]	@ (80092a0 <prvHeapInit+0xbc>)
 800927a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800927c:	4b09      	ldr	r3, [pc, #36]	@ (80092a4 <prvHeapInit+0xc0>)
 800927e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009282:	601a      	str	r2, [r3, #0]
}
 8009284:	bf00      	nop
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	20006184 	.word	0x20006184
 8009294:	20009d84 	.word	0x20009d84
 8009298:	20009d8c 	.word	0x20009d8c
 800929c:	20009d94 	.word	0x20009d94
 80092a0:	20009d90 	.word	0x20009d90
 80092a4:	20009d98 	.word	0x20009d98

080092a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092b0:	4b28      	ldr	r3, [pc, #160]	@ (8009354 <prvInsertBlockIntoFreeList+0xac>)
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	e002      	b.n	80092bc <prvInsertBlockIntoFreeList+0x14>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d8f7      	bhi.n	80092b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	4413      	add	r3, r2
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d108      	bne.n	80092ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	441a      	add	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	441a      	add	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d118      	bne.n	8009330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	4b15      	ldr	r3, [pc, #84]	@ (8009358 <prvInsertBlockIntoFreeList+0xb0>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	429a      	cmp	r2, r3
 8009308:	d00d      	beq.n	8009326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	441a      	add	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	e008      	b.n	8009338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009326:	4b0c      	ldr	r3, [pc, #48]	@ (8009358 <prvInsertBlockIntoFreeList+0xb0>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	e003      	b.n	8009338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	429a      	cmp	r2, r3
 800933e:	d002      	beq.n	8009346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009346:	bf00      	nop
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20009d84 	.word	0x20009d84
 8009358:	20009d8c 	.word	0x20009d8c

0800935c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	330c      	adds	r3, #12
 800936c:	461a      	mov	r2, r3
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 fc1d 	bl	800abb0 <tcpip_send_msg_wait_sem>
 8009376:	4603      	mov	r3, r0
 8009378:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800937a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d103      	bne.n	800938a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009388:	e001      	b.n	800938e <netconn_apimsg+0x32>
  }
  return err;
 800938a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08c      	sub	sp, #48	@ 0x30
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	603a      	str	r2, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
 80093a4:	460b      	mov	r3, r1
 80093a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f000 fad9 	bl	8009964 <netconn_alloc>
 80093b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80093b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d046      	beq.n	8009448 <netconn_new_with_proto_and_callback+0xb0>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80093ba:	79bb      	ldrb	r3, [r7, #6]
 80093bc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80093be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80093c2:	f107 0308 	add.w	r3, r7, #8
 80093c6:	4619      	mov	r1, r3
 80093c8:	4822      	ldr	r0, [pc, #136]	@ (8009454 <netconn_new_with_proto_and_callback+0xbc>)
 80093ca:	f7ff ffc7 	bl	800935c <netconn_apimsg>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80093d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d035      	beq.n	8009448 <netconn_new_with_proto_and_callback+0xb0>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80093dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <netconn_new_with_proto_and_callback+0x58>
 80093e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009458 <netconn_new_with_proto_and_callback+0xc0>)
 80093e6:	22a3      	movs	r2, #163	@ 0xa3
 80093e8:	491c      	ldr	r1, [pc, #112]	@ (800945c <netconn_new_with_proto_and_callback+0xc4>)
 80093ea:	481d      	ldr	r0, [pc, #116]	@ (8009460 <netconn_new_with_proto_and_callback+0xc8>)
 80093ec:	f006 ffa2 	bl	8010334 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80093f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f2:	3310      	adds	r3, #16
 80093f4:	4618      	mov	r0, r3
 80093f6:	f006 fd5c 	bl	800feb2 <sys_mbox_valid>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <netconn_new_with_proto_and_callback+0x74>
 8009400:	4b15      	ldr	r3, [pc, #84]	@ (8009458 <netconn_new_with_proto_and_callback+0xc0>)
 8009402:	22a4      	movs	r2, #164	@ 0xa4
 8009404:	4917      	ldr	r1, [pc, #92]	@ (8009464 <netconn_new_with_proto_and_callback+0xcc>)
 8009406:	4816      	ldr	r0, [pc, #88]	@ (8009460 <netconn_new_with_proto_and_callback+0xc8>)
 8009408:	f006 ff94 	bl	8010334 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800940c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940e:	330c      	adds	r3, #12
 8009410:	4618      	mov	r0, r3
 8009412:	f006 fdae 	bl	800ff72 <sys_sem_valid>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <netconn_new_with_proto_and_callback+0x90>
 800941c:	4b0e      	ldr	r3, [pc, #56]	@ (8009458 <netconn_new_with_proto_and_callback+0xc0>)
 800941e:	22a9      	movs	r2, #169	@ 0xa9
 8009420:	4911      	ldr	r1, [pc, #68]	@ (8009468 <netconn_new_with_proto_and_callback+0xd0>)
 8009422:	480f      	ldr	r0, [pc, #60]	@ (8009460 <netconn_new_with_proto_and_callback+0xc8>)
 8009424:	f006 ff86 	bl	8010334 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942a:	330c      	adds	r3, #12
 800942c:	4618      	mov	r0, r3
 800942e:	f006 fd93 	bl	800ff58 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009434:	3310      	adds	r3, #16
 8009436:	4618      	mov	r0, r3
 8009438:	f006 fcb4 	bl	800fda4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800943c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800943e:	2004      	movs	r0, #4
 8009440:	f002 f962 	bl	800b708 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009444:	2300      	movs	r3, #0
 8009446:	e000      	b.n	800944a <netconn_new_with_proto_and_callback+0xb2>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800944a:	4618      	mov	r0, r3
 800944c:	3730      	adds	r7, #48	@ 0x30
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	08009939 	.word	0x08009939
 8009458:	08011268 	.word	0x08011268
 800945c:	0801129c 	.word	0x0801129c
 8009460:	080112c0 	.word	0x080112c0
 8009464:	080112e8 	.word	0x080112e8
 8009468:	08011300 	.word	0x08011300

0800946c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08c      	sub	sp, #48	@ 0x30
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	e012      	b.n	80094a4 <netconn_prepare_delete+0x38>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009482:	f107 030c 	add.w	r3, r7, #12
 8009486:	4619      	mov	r1, r3
 8009488:	4808      	ldr	r0, [pc, #32]	@ (80094ac <netconn_prepare_delete+0x40>)
 800948a:	f7ff ff67 	bl	800935c <netconn_apimsg>
 800948e:	4603      	mov	r3, r0
 8009490:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009494:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <netconn_prepare_delete+0x36>
    return err;
 800949c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80094a0:	e000      	b.n	80094a4 <netconn_prepare_delete+0x38>
  }
  return ERR_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3730      	adds	r7, #48	@ 0x30
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	08009af1 	.word	0x08009af1

080094b0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <netconn_delete+0x12>
    return ERR_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	e00d      	b.n	80094de <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff ffd2 	bl	800946c <netconn_prepare_delete>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80094cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <netconn_delete+0x2a>
    netconn_free(conn);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 faa7 	bl	8009a28 <netconn_free>
  }
  return err;
 80094da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08e      	sub	sp, #56	@ 0x38
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	4613      	mov	r3, r2
 80094f4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d109      	bne.n	8009510 <netconn_bind+0x28>
 80094fc:	4b11      	ldr	r3, [pc, #68]	@ (8009544 <netconn_bind+0x5c>)
 80094fe:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8009502:	4911      	ldr	r1, [pc, #68]	@ (8009548 <netconn_bind+0x60>)
 8009504:	4811      	ldr	r0, [pc, #68]	@ (800954c <netconn_bind+0x64>)
 8009506:	f006 ff15 	bl	8010334 <iprintf>
 800950a:	f06f 030f 	mvn.w	r3, #15
 800950e:	e015      	b.n	800953c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009516:	4b0e      	ldr	r3, [pc, #56]	@ (8009550 <netconn_bind+0x68>)
 8009518:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009522:	88fb      	ldrh	r3, [r7, #6]
 8009524:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009526:	f107 0314 	add.w	r3, r7, #20
 800952a:	4619      	mov	r1, r3
 800952c:	4809      	ldr	r0, [pc, #36]	@ (8009554 <netconn_bind+0x6c>)
 800952e:	f7ff ff15 	bl	800935c <netconn_apimsg>
 8009532:	4603      	mov	r3, r0
 8009534:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009538:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800953c:	4618      	mov	r0, r3
 800953e:	3738      	adds	r7, #56	@ 0x38
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	08011268 	.word	0x08011268
 8009548:	0801137c 	.word	0x0801137c
 800954c:	080112c0 	.word	0x080112c0
 8009550:	08013358 	.word	0x08013358
 8009554:	08009c19 	.word	0x08009c19

08009558 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d109      	bne.n	8009584 <netconn_recv_data+0x2c>
 8009570:	4b49      	ldr	r3, [pc, #292]	@ (8009698 <netconn_recv_data+0x140>)
 8009572:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8009576:	4949      	ldr	r1, [pc, #292]	@ (800969c <netconn_recv_data+0x144>)
 8009578:	4849      	ldr	r0, [pc, #292]	@ (80096a0 <netconn_recv_data+0x148>)
 800957a:	f006 fedb 	bl	8010334 <iprintf>
 800957e:	f06f 030f 	mvn.w	r3, #15
 8009582:	e084      	b.n	800968e <netconn_recv_data+0x136>
  *new_buf = NULL;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d109      	bne.n	80095a4 <netconn_recv_data+0x4c>
 8009590:	4b41      	ldr	r3, [pc, #260]	@ (8009698 <netconn_recv_data+0x140>)
 8009592:	f240 224a 	movw	r2, #586	@ 0x24a
 8009596:	4943      	ldr	r1, [pc, #268]	@ (80096a4 <netconn_recv_data+0x14c>)
 8009598:	4841      	ldr	r0, [pc, #260]	@ (80096a0 <netconn_recv_data+0x148>)
 800959a:	f006 fecb 	bl	8010334 <iprintf>
 800959e:	f06f 030f 	mvn.w	r3, #15
 80095a2:	e074      	b.n	800968e <netconn_recv_data+0x136>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3310      	adds	r3, #16
 80095a8:	4618      	mov	r0, r3
 80095aa:	f006 fc82 	bl	800feb2 <sys_mbox_valid>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10e      	bne.n	80095d2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f8d3 	bl	8009760 <netconn_err>
 80095ba:	4603      	mov	r3, r0
 80095bc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80095be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80095c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80095ca:	e060      	b.n	800968e <netconn_recv_data+0x136>
    }
    return ERR_CONN;
 80095cc:	f06f 030a 	mvn.w	r3, #10
 80095d0:	e05d      	b.n	800968e <netconn_recv_data+0x136>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	7e1b      	ldrb	r3, [r3, #24]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10f      	bne.n	80095fe <netconn_recv_data+0xa6>
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	7e1b      	ldrb	r3, [r3, #24]
 80095ec:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d023      	beq.n	8009646 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3310      	adds	r3, #16
 8009602:	f107 0214 	add.w	r2, r7, #20
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f006 fc36 	bl	800fe7a <sys_arch_mbox_tryfetch>
 800960e:	4603      	mov	r3, r0
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d11f      	bne.n	8009656 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 f8a2 	bl	8009760 <netconn_err>
 800961c:	4603      	mov	r3, r0
 800961e:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 8009620:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009628:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800962c:	e02f      	b.n	800968e <netconn_recv_data+0x136>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	7e1b      	ldrb	r3, [r3, #24]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800963a:	f06f 030a 	mvn.w	r3, #10
 800963e:	e026      	b.n	800968e <netconn_recv_data+0x136>
      }
      return ERR_WOULDBLOCK;
 8009640:	f06f 0306 	mvn.w	r3, #6
 8009644:	e023      	b.n	800968e <netconn_recv_data+0x136>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3310      	adds	r3, #16
 800964a:	f107 0114 	add.w	r1, r7, #20
 800964e:	2200      	movs	r2, #0
 8009650:	4618      	mov	r0, r3
 8009652:	f006 fbd3 	bl	800fdfc <sys_arch_mbox_fetch>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d106      	bne.n	800966a <netconn_recv_data+0x112>
 800965c:	4b0e      	ldr	r3, [pc, #56]	@ (8009698 <netconn_recv_data+0x140>)
 800965e:	f240 2291 	movw	r2, #657	@ 0x291
 8009662:	4911      	ldr	r1, [pc, #68]	@ (80096a8 <netconn_recv_data+0x150>)
 8009664:	480e      	ldr	r0, [pc, #56]	@ (80096a0 <netconn_recv_data+0x148>)
 8009666:	f006 fe65 	bl	8010334 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	891b      	ldrh	r3, [r3, #8]
 8009670:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d005      	beq.n	8009686 <netconn_recv_data+0x12e>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	8bba      	ldrh	r2, [r7, #28]
 8009680:	2101      	movs	r1, #1
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3720      	adds	r7, #32
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	08011268 	.word	0x08011268
 800969c:	080113fc 	.word	0x080113fc
 80096a0:	080112c0 	.word	0x080112c0
 80096a4:	0801141c 	.word	0x0801141c
 80096a8:	08011438 	.word	0x08011438

080096ac <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	4613      	mov	r3, r2
 80096b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <netconn_recv_udp_raw_netbuf_flags+0x20>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096c8:	2b10      	cmp	r3, #16
 80096ca:	d109      	bne.n	80096e0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80096cc:	4b0a      	ldr	r3, [pc, #40]	@ (80096f8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80096ce:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 80096d2:	490a      	ldr	r1, [pc, #40]	@ (80096fc <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80096d4:	480a      	ldr	r0, [pc, #40]	@ (8009700 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80096d6:	f006 fe2d 	bl	8010334 <iprintf>
 80096da:	f06f 030f 	mvn.w	r3, #15
 80096de:	e006      	b.n	80096ee <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	461a      	mov	r2, r3
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff ff36 	bl	8009558 <netconn_recv_data>
 80096ec:	4603      	mov	r3, r0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	08011268 	.word	0x08011268
 80096fc:	08011444 	.word	0x08011444
 8009700:	080112c0 	.word	0x080112c0

08009704 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08c      	sub	sp, #48	@ 0x30
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d109      	bne.n	8009728 <netconn_send+0x24>
 8009714:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <netconn_send+0x4c>)
 8009716:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800971a:	490e      	ldr	r1, [pc, #56]	@ (8009754 <netconn_send+0x50>)
 800971c:	480e      	ldr	r0, [pc, #56]	@ (8009758 <netconn_send+0x54>)
 800971e:	f006 fe09 	bl	8010334 <iprintf>
 8009722:	f06f 030f 	mvn.w	r3, #15
 8009726:	e00e      	b.n	8009746 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009730:	f107 030c 	add.w	r3, r7, #12
 8009734:	4619      	mov	r1, r3
 8009736:	4809      	ldr	r0, [pc, #36]	@ (800975c <netconn_send+0x58>)
 8009738:	f7ff fe10 	bl	800935c <netconn_apimsg>
 800973c:	4603      	mov	r3, r0
 800973e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009742:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009746:	4618      	mov	r0, r3
 8009748:	3730      	adds	r7, #48	@ 0x30
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	08011268 	.word	0x08011268
 8009754:	08011470 	.word	0x08011470
 8009758:	080112c0 	.word	0x080112c0
 800975c:	08009c6f 	.word	0x08009c6f

08009760 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <netconn_err+0x12>
    return ERR_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	e00d      	b.n	800978e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009772:	f006 fc89 	bl	8010088 <sys_arch_protect>
 8009776:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	7a1b      	ldrb	r3, [r3, #8]
 800977c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f006 fc8d 	bl	80100a4 <sys_arch_unprotect>
  return err;
 800978a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d105      	bne.n	80097b8 <recv_udp+0x20>
 80097ac:	4b34      	ldr	r3, [pc, #208]	@ (8009880 <recv_udp+0xe8>)
 80097ae:	22e5      	movs	r2, #229	@ 0xe5
 80097b0:	4934      	ldr	r1, [pc, #208]	@ (8009884 <recv_udp+0xec>)
 80097b2:	4835      	ldr	r0, [pc, #212]	@ (8009888 <recv_udp+0xf0>)
 80097b4:	f006 fdbe 	bl	8010334 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d105      	bne.n	80097ca <recv_udp+0x32>
 80097be:	4b30      	ldr	r3, [pc, #192]	@ (8009880 <recv_udp+0xe8>)
 80097c0:	22e6      	movs	r2, #230	@ 0xe6
 80097c2:	4932      	ldr	r1, [pc, #200]	@ (800988c <recv_udp+0xf4>)
 80097c4:	4830      	ldr	r0, [pc, #192]	@ (8009888 <recv_udp+0xf0>)
 80097c6:	f006 fdb5 	bl	8010334 <iprintf>
  conn = (struct netconn *)arg;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d103      	bne.n	80097dc <recv_udp+0x44>
    pbuf_free(p);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f002 fddb 	bl	800c390 <pbuf_free>
    return;
 80097da:	e04d      	b.n	8009878 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d005      	beq.n	80097f2 <recv_udp+0x5a>
 80097e6:	4b26      	ldr	r3, [pc, #152]	@ (8009880 <recv_udp+0xe8>)
 80097e8:	22ee      	movs	r2, #238	@ 0xee
 80097ea:	4929      	ldr	r1, [pc, #164]	@ (8009890 <recv_udp+0xf8>)
 80097ec:	4826      	ldr	r0, [pc, #152]	@ (8009888 <recv_udp+0xf0>)
 80097ee:	f006 fda1 	bl	8010334 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	3310      	adds	r3, #16
 80097f6:	4618      	mov	r0, r3
 80097f8:	f006 fb5b 	bl	800feb2 <sys_mbox_valid>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d103      	bne.n	800980a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f002 fdc4 	bl	800c390 <pbuf_free>
    return;
 8009808:	e036      	b.n	8009878 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800980a:	2003      	movs	r0, #3
 800980c:	f001 ff06 	bl	800b61c <memp_malloc>
 8009810:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d103      	bne.n	8009820 <recv_udp+0x88>
    pbuf_free(p);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f002 fdb9 	bl	800c390 <pbuf_free>
    return;
 800981e:	e02b      	b.n	8009878 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <recv_udp+0xa0>
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	e000      	b.n	800983a <recv_udp+0xa2>
 8009838:	2300      	movs	r3, #0
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009842:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	891b      	ldrh	r3, [r3, #8]
 8009848:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	3310      	adds	r3, #16
 800984e:	69b9      	ldr	r1, [r7, #24]
 8009850:	4618      	mov	r0, r3
 8009852:	f006 fab9 	bl	800fdc8 <sys_mbox_trypost>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <recv_udp+0xcc>
    netbuf_delete(buf);
 800985c:	69b8      	ldr	r0, [r7, #24]
 800985e:	f000 fa71 	bl	8009d44 <netbuf_delete>
    return;
 8009862:	e009      	b.n	8009878 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d005      	beq.n	8009878 <recv_udp+0xe0>
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	8afa      	ldrh	r2, [r7, #22]
 8009872:	2100      	movs	r1, #0
 8009874:	69f8      	ldr	r0, [r7, #28]
 8009876:	4798      	blx	r3
  }
}
 8009878:	3720      	adds	r7, #32
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	0801150c 	.word	0x0801150c
 8009884:	08011540 	.word	0x08011540
 8009888:	08011564 	.word	0x08011564
 800988c:	0801158c 	.word	0x0801158c
 8009890:	080115ac 	.word	0x080115ac

08009894 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009894:	b590      	push	{r4, r7, lr}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d006      	beq.n	80098b8 <pcb_new+0x24>
 80098aa:	4b1f      	ldr	r3, [pc, #124]	@ (8009928 <pcb_new+0x94>)
 80098ac:	f240 2265 	movw	r2, #613	@ 0x265
 80098b0:	491e      	ldr	r1, [pc, #120]	@ (800992c <pcb_new+0x98>)
 80098b2:	481f      	ldr	r0, [pc, #124]	@ (8009930 <pcb_new+0x9c>)
 80098b4:	f006 fd3e 	bl	8010334 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	d120      	bne.n	8009908 <pcb_new+0x74>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681c      	ldr	r4, [r3, #0]
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f003 fe10 	bl	800d4f2 <udp_new_ip_type>
 80098d2:	4603      	mov	r3, r0
 80098d4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d017      	beq.n	8009910 <pcb_new+0x7c>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b22      	cmp	r3, #34	@ 0x22
 80098e8:	d104      	bne.n	80098f4 <pcb_new+0x60>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6858      	ldr	r0, [r3, #4]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	490c      	ldr	r1, [pc, #48]	@ (8009934 <pcb_new+0xa0>)
 8009902:	f003 fd7d 	bl	800d400 <udp_recv>
      }
      break;
 8009906:	e003      	b.n	8009910 <pcb_new+0x7c>
      }
      break;
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	22fa      	movs	r2, #250	@ 0xfa
 800990c:	711a      	strb	r2, [r3, #4]
      return;
 800990e:	e008      	b.n	8009922 <pcb_new+0x8e>
      break;
 8009910:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d102      	bne.n	8009922 <pcb_new+0x8e>
    msg->err = ERR_MEM;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	22ff      	movs	r2, #255	@ 0xff
 8009920:	711a      	strb	r2, [r3, #4]
  }
}
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	bd90      	pop	{r4, r7, pc}
 8009928:	0801150c 	.word	0x0801150c
 800992c:	080115cc 	.word	0x080115cc
 8009930:	08011564 	.word	0x08011564
 8009934:	08009799 	.word	0x08009799

08009938 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7ff ff9d 	bl	8009894 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	6039      	str	r1, [r7, #0]
 800996e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009974:	2004      	movs	r0, #4
 8009976:	f001 fe51 	bl	800b61c <memp_malloc>
 800997a:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <netconn_alloc+0x22>
    return NULL;
 8009982:	2300      	movs	r3, #0
 8009984:	e045      	b.n	8009a12 <netconn_alloc+0xae>
  }

  conn->pending_err = ERR_OK;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	2200      	movs	r2, #0
 800998a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	79fa      	ldrb	r2, [r7, #7]
 8009990:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2200      	movs	r2, #0
 8009996:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800999e:	2b20      	cmp	r3, #32
 80099a0:	d10c      	bne.n	80099bc <netconn_alloc+0x58>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80099a2:	2306      	movs	r3, #6
 80099a4:	60fb      	str	r3, [r7, #12]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80099a6:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	3310      	adds	r3, #16
 80099ac:	68f9      	ldr	r1, [r7, #12]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f006 f9d6 	bl	800fd60 <sys_mbox_new>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d008      	beq.n	80099cc <netconn_alloc+0x68>
    goto free_and_return;
 80099ba:	e025      	b.n	8009a08 <netconn_alloc+0xa4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80099bc:	4b17      	ldr	r3, [pc, #92]	@ (8009a1c <netconn_alloc+0xb8>)
 80099be:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80099c2:	4917      	ldr	r1, [pc, #92]	@ (8009a20 <netconn_alloc+0xbc>)
 80099c4:	4817      	ldr	r0, [pc, #92]	@ (8009a24 <netconn_alloc+0xc0>)
 80099c6:	f006 fcb5 	bl	8010334 <iprintf>
      goto free_and_return;
 80099ca:	e01d      	b.n	8009a08 <netconn_alloc+0xa4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	330c      	adds	r3, #12
 80099d0:	2100      	movs	r1, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f006 fa8b 	bl	800feee <sys_sem_new>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	3310      	adds	r3, #16
 80099e2:	4618      	mov	r0, r3
 80099e4:	f006 f9de 	bl	800fda4 <sys_mbox_free>
    goto free_and_return;
 80099e8:	e00e      	b.n	8009a08 <netconn_alloc+0xa4>
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
#endif
  conn->state        = NETCONN_NONE;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2200      	movs	r2, #0
 80099ee:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f04f 32ff 	mov.w	r2, #4294967295
 80099f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	7dfa      	ldrb	r2, [r7, #23]
 8009a02:	761a      	strb	r2, [r3, #24]
  return conn;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	e004      	b.n	8009a12 <netconn_alloc+0xae>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009a08:	6939      	ldr	r1, [r7, #16]
 8009a0a:	2004      	movs	r0, #4
 8009a0c:	f001 fe7c 	bl	800b708 <memp_free>
  return NULL;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	0801150c 	.word	0x0801150c
 8009a20:	080115ec 	.word	0x080115ec
 8009a24:	08011564 	.word	0x08011564

08009a28 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d006      	beq.n	8009a46 <netconn_free+0x1e>
 8009a38:	4b13      	ldr	r3, [pc, #76]	@ (8009a88 <netconn_free+0x60>)
 8009a3a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009a3e:	4913      	ldr	r1, [pc, #76]	@ (8009a8c <netconn_free+0x64>)
 8009a40:	4813      	ldr	r0, [pc, #76]	@ (8009a90 <netconn_free+0x68>)
 8009a42:	f006 fc77 	bl	8010334 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	3310      	adds	r3, #16
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f006 fa31 	bl	800feb2 <sys_mbox_valid>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d006      	beq.n	8009a64 <netconn_free+0x3c>
 8009a56:	4b0c      	ldr	r3, [pc, #48]	@ (8009a88 <netconn_free+0x60>)
 8009a58:	f240 3223 	movw	r2, #803	@ 0x323
 8009a5c:	490d      	ldr	r1, [pc, #52]	@ (8009a94 <netconn_free+0x6c>)
 8009a5e:	480c      	ldr	r0, [pc, #48]	@ (8009a90 <netconn_free+0x68>)
 8009a60:	f006 fc68 	bl	8010334 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	330c      	adds	r3, #12
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f006 fa75 	bl	800ff58 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	330c      	adds	r3, #12
 8009a72:	4618      	mov	r0, r3
 8009a74:	f006 fa8e 	bl	800ff94 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	2004      	movs	r0, #4
 8009a7c:	f001 fe44 	bl	800b708 <memp_free>
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	0801150c 	.word	0x0801150c
 8009a8c:	08011614 	.word	0x08011614
 8009a90:	08011564 	.word	0x08011564
 8009a94:	08011644 	.word	0x08011644

08009a98 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3310      	adds	r3, #16
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f006 fa04 	bl	800feb2 <sys_mbox_valid>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d01a      	beq.n	8009ae6 <netconn_drain+0x4e>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009ab0:	e003      	b.n	8009aba <netconn_drain+0x22>
            pbuf_free((struct pbuf *)mem);
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 f945 	bl	8009d44 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3310      	adds	r3, #16
 8009abe:	f107 020c 	add.w	r2, r7, #12
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f006 f9d8 	bl	800fe7a <sys_arch_mbox_tryfetch>
 8009aca:	4603      	mov	r3, r0
 8009acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad0:	d1ef      	bne.n	8009ab2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3310      	adds	r3, #16
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f006 f964 	bl	800fda4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	3310      	adds	r3, #16
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f006 f9f7 	bl	800fed4 <sys_mbox_set_invalid>
    }
    sys_mbox_free(&conn->acceptmbox);
    sys_mbox_set_invalid(&conn->acceptmbox);
  }
#endif /* LWIP_TCP */
}
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
	...

08009af0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	785b      	ldrb	r3, [r3, #1]
 8009b02:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00d      	beq.n	8009b26 <lwip_netconn_do_delconn+0x36>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b14:	2b10      	cmp	r3, #16
 8009b16:	d006      	beq.n	8009b26 <lwip_netconn_do_delconn+0x36>
 8009b18:	4b3b      	ldr	r3, [pc, #236]	@ (8009c08 <lwip_netconn_do_delconn+0x118>)
 8009b1a:	f240 425e 	movw	r2, #1118	@ 0x45e
 8009b1e:	493b      	ldr	r1, [pc, #236]	@ (8009c0c <lwip_netconn_do_delconn+0x11c>)
 8009b20:	483b      	ldr	r0, [pc, #236]	@ (8009c10 <lwip_netconn_do_delconn+0x120>)
 8009b22:	f006 fc07 	bl	8010334 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009b26:	7afb      	ldrb	r3, [r7, #11]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <lwip_netconn_do_delconn+0x48>
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d002      	beq.n	8009b38 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009b32:	7afb      	ldrb	r3, [r7, #11]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d109      	bne.n	8009b4c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009b38:	7afb      	ldrb	r3, [r7, #11]
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d10a      	bne.n	8009b54 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	7e1b      	ldrb	r3, [r3, #24]
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d103      	bne.n	8009b54 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	22fb      	movs	r2, #251	@ 0xfb
 8009b50:	711a      	strb	r2, [r3, #4]
 8009b52:	e04f      	b.n	8009bf4 <lwip_netconn_do_delconn+0x104>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009b54:	7afb      	ldrb	r3, [r7, #11]
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d10d      	bne.n	8009b76 <lwip_netconn_do_delconn+0x86>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	7e1b      	ldrb	r3, [r3, #24]
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d106      	bne.n	8009b76 <lwip_netconn_do_delconn+0x86>
 8009b68:	4b27      	ldr	r3, [pc, #156]	@ (8009c08 <lwip_netconn_do_delconn+0x118>)
 8009b6a:	f240 427a 	movw	r2, #1146	@ 0x47a
 8009b6e:	4929      	ldr	r1, [pc, #164]	@ (8009c14 <lwip_netconn_do_delconn+0x124>)
 8009b70:	4827      	ldr	r0, [pc, #156]	@ (8009c10 <lwip_netconn_do_delconn+0x120>)
 8009b72:	f006 fbdf 	bl	8010334 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff ff89 	bl	8009a98 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d017      	beq.n	8009bc0 <lwip_netconn_do_delconn+0xd0>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b9a:	2b20      	cmp	r3, #32
 8009b9c:	d10b      	bne.n	8009bb6 <lwip_netconn_do_delconn+0xc6>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f003 fc46 	bl	800d440 <udp_remove>
          break;
 8009bb4:	e000      	b.n	8009bb8 <lwip_netconn_do_delconn+0xc8>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8009bb6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d007      	beq.n	8009bda <lwip_netconn_do_delconn+0xea>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	6810      	ldr	r0, [r2, #0]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d007      	beq.n	8009bf4 <lwip_netconn_do_delconn+0x104>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	6810      	ldr	r0, [r2, #0]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	2102      	movs	r1, #2
 8009bf2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	330c      	adds	r3, #12
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f006 f9b9 	bl	800ff72 <sys_sem_valid>
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009c00:	bf00      	nop
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	0801150c 	.word	0x0801150c
 8009c0c:	08011680 	.word	0x08011680
 8009c10:	08011564 	.word	0x08011564
 8009c14:	08011694 	.word	0x08011694

08009c18 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d016      	beq.n	8009c5c <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c38:	2b20      	cmp	r3, #32
 8009c3a:	d10c      	bne.n	8009c56 <lwip_netconn_do_bind+0x3e>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6858      	ldr	r0, [r3, #4]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	6899      	ldr	r1, [r3, #8]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	899b      	ldrh	r3, [r3, #12]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f003 fb50 	bl	800d2f0 <udp_bind>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]
        break;
 8009c54:	e004      	b.n	8009c60 <lwip_netconn_do_bind+0x48>
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009c56:	23fa      	movs	r3, #250	@ 0xfa
 8009c58:	73fb      	strb	r3, [r7, #15]
        break;
 8009c5a:	e001      	b.n	8009c60 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 8009c5c:	23fa      	movs	r3, #250	@ 0xfa
 8009c5e:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	7bfa      	ldrb	r2, [r7, #15]
 8009c64:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009c66:	bf00      	nop
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff fd6e 	bl	8009760 <netconn_err>
 8009c84:	4603      	mov	r3, r0
 8009c86:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d134      	bne.n	8009cfa <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d02d      	beq.n	8009cf6 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ca4:	2b20      	cmp	r3, #32
 8009ca6:	d123      	bne.n	8009cf0 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10c      	bne.n	8009ccc <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	f003 f92b 	bl	800cf1c <udp_send>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8009cca:	e016      	b.n	8009cfa <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6858      	ldr	r0, [r3, #4]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	6819      	ldr	r1, [r3, #0]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f103 0208 	add.w	r2, r3, #8
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	899b      	ldrh	r3, [r3, #12]
 8009ce6:	f003 f94d 	bl	800cf84 <udp_sendto>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
          break;
 8009cee:	e004      	b.n	8009cfa <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8009cf0:	23f5      	movs	r3, #245	@ 0xf5
 8009cf2:	73fb      	strb	r3, [r7, #15]
          break;
 8009cf4:	e001      	b.n	8009cfa <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8009cf6:	23f5      	movs	r3, #245	@ 0xf5
 8009cf8:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	7bfa      	ldrb	r2, [r7, #15]
 8009cfe:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009d00:	bf00      	nop
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8009d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dc04      	bgt.n	8009d24 <err_to_errno+0x1c>
 8009d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d1e:	f113 0f10 	cmn.w	r3, #16
 8009d22:	da01      	bge.n	8009d28 <err_to_errno+0x20>
    return EIO;
 8009d24:	2305      	movs	r3, #5
 8009d26:	e005      	b.n	8009d34 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8009d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d2c:	425b      	negs	r3, r3
 8009d2e:	4a04      	ldr	r2, [pc, #16]	@ (8009d40 <err_to_errno+0x38>)
 8009d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	08013264 	.word	0x08013264

08009d44 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d013      	beq.n	8009d7a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f002 fb16 	bl	800c390 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	2003      	movs	r0, #3
 8009d76:	f001 fcc7 	bl	800b708 <memp_free>
  }
}
 8009d7a:	bf00      	nop
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d106      	bne.n	8009da0 <netbuf_free+0x1c>
 8009d92:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc8 <netbuf_free+0x44>)
 8009d94:	2281      	movs	r2, #129	@ 0x81
 8009d96:	490d      	ldr	r1, [pc, #52]	@ (8009dcc <netbuf_free+0x48>)
 8009d98:	480d      	ldr	r0, [pc, #52]	@ (8009dd0 <netbuf_free+0x4c>)
 8009d9a:	f006 facb 	bl	8010334 <iprintf>
 8009d9e:	e00f      	b.n	8009dc0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d004      	beq.n	8009db2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f002 faef 	bl	800c390 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	605a      	str	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	080116e4 	.word	0x080116e4
 8009dcc:	08011780 	.word	0x08011780
 8009dd0:	08011734 	.word	0x08011734

08009dd4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d108      	bne.n	8009dfa <netbuf_ref+0x26>
 8009de8:	4b1c      	ldr	r3, [pc, #112]	@ (8009e5c <netbuf_ref+0x88>)
 8009dea:	2299      	movs	r2, #153	@ 0x99
 8009dec:	491c      	ldr	r1, [pc, #112]	@ (8009e60 <netbuf_ref+0x8c>)
 8009dee:	481d      	ldr	r0, [pc, #116]	@ (8009e64 <netbuf_ref+0x90>)
 8009df0:	f006 faa0 	bl	8010334 <iprintf>
 8009df4:	f06f 030f 	mvn.w	r3, #15
 8009df8:	e02b      	b.n	8009e52 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f002 fac2 	bl	800c390 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8009e0c:	2241      	movs	r2, #65	@ 0x41
 8009e0e:	2100      	movs	r1, #0
 8009e10:	2036      	movs	r0, #54	@ 0x36
 8009e12:	f001 ffdb 	bl	800bdcc <pbuf_alloc>
 8009e16:	4602      	mov	r2, r0
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d105      	bne.n	8009e30 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8009e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2e:	e010      	b.n	8009e52 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	88fa      	ldrh	r2, [r7, #6]
 8009e3e:	811a      	strh	r2, [r3, #8]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	6812      	ldr	r2, [r2, #0]
 8009e44:	891b      	ldrh	r3, [r3, #8]
 8009e46:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	080116e4 	.word	0x080116e4
 8009e60:	0801179c 	.word	0x0801179c
 8009e64:	08011734 	.word	0x08011734

08009e68 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	db02      	blt.n	8009e80 <tryget_socket_unconn_nouse+0x18>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	dd01      	ble.n	8009e84 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8009e80:	2300      	movs	r3, #0
 8009e82:	e003      	b.n	8009e8c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	4a03      	ldr	r2, [pc, #12]	@ (8009e98 <tryget_socket_unconn_nouse+0x30>)
 8009e8a:	4413      	add	r3, r2
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	20009d9c 	.word	0x20009d9c

08009e9c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff ffdf 	bl	8009e68 <tryget_socket_unconn_nouse>
 8009eaa:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8009eac:	68fb      	ldr	r3, [r7, #12]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7ff ffec 	bl	8009e9c <tryget_socket_unconn>
 8009ec4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <tryget_socket+0x22>
    if (sock->conn) {
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <tryget_socket+0x22>
      return sock;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	e000      	b.n	8009eda <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff ffe2 	bl	8009eb6 <tryget_socket>
 8009ef2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d104      	bne.n	8009f04 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8009efa:	4b05      	ldr	r3, [pc, #20]	@ (8009f10 <get_socket+0x2c>)
 8009efc:	2209      	movs	r2, #9
 8009efe:	601a      	str	r2, [r3, #0]
    return NULL;
 8009f00:	2300      	movs	r3, #0
 8009f02:	e000      	b.n	8009f06 <get_socket+0x22>
  }
  return sock;
 8009f04:	68fb      	ldr	r3, [r7, #12]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	2000d118 	.word	0x2000d118

08009f14 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	e052      	b.n	8009fca <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8009f24:	f006 f8b0 	bl	8010088 <sys_arch_protect>
 8009f28:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8009f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8009fdc <alloc_socket+0xc8>)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	4413      	add	r3, r2
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d142      	bne.n	8009fbe <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8009f38:	4a28      	ldr	r2, [pc, #160]	@ (8009fdc <alloc_socket+0xc8>)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	011b      	lsls	r3, r3, #4
 8009f3e:	4413      	add	r3, r2
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8009f44:	68b8      	ldr	r0, [r7, #8]
 8009f46:	f006 f8ad 	bl	80100a4 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8009f4a:	4a24      	ldr	r2, [pc, #144]	@ (8009fdc <alloc_socket+0xc8>)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	4413      	add	r3, r2
 8009f52:	3304      	adds	r3, #4
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8009f58:	4a20      	ldr	r2, [pc, #128]	@ (8009fdc <alloc_socket+0xc8>)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	4413      	add	r3, r2
 8009f60:	330e      	adds	r3, #14
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d006      	beq.n	8009f76 <alloc_socket+0x62>
 8009f68:	4b1d      	ldr	r3, [pc, #116]	@ (8009fe0 <alloc_socket+0xcc>)
 8009f6a:	f240 220e 	movw	r2, #526	@ 0x20e
 8009f6e:	491d      	ldr	r1, [pc, #116]	@ (8009fe4 <alloc_socket+0xd0>)
 8009f70:	481d      	ldr	r0, [pc, #116]	@ (8009fe8 <alloc_socket+0xd4>)
 8009f72:	f006 f9df 	bl	8010334 <iprintf>
      sockets[i].rcvevent   = 0;
 8009f76:	4a19      	ldr	r2, [pc, #100]	@ (8009fdc <alloc_socket+0xc8>)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	4413      	add	r3, r2
 8009f7e:	3308      	adds	r3, #8
 8009f80:	2200      	movs	r2, #0
 8009f82:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f8c:	2b10      	cmp	r3, #16
 8009f8e:	d102      	bne.n	8009f96 <alloc_socket+0x82>
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <alloc_socket+0x86>
 8009f96:	2301      	movs	r3, #1
 8009f98:	e000      	b.n	8009f9c <alloc_socket+0x88>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	b299      	uxth	r1, r3
 8009f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8009fdc <alloc_socket+0xc8>)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	4413      	add	r3, r2
 8009fa6:	330a      	adds	r3, #10
 8009fa8:	460a      	mov	r2, r1
 8009faa:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8009fac:	4a0b      	ldr	r2, [pc, #44]	@ (8009fdc <alloc_socket+0xc8>)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	011b      	lsls	r3, r3, #4
 8009fb2:	4413      	add	r3, r2
 8009fb4:	330c      	adds	r3, #12
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	e00a      	b.n	8009fd4 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8009fbe:	68b8      	ldr	r0, [r7, #8]
 8009fc0:	f006 f870 	bl	80100a4 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	dda9      	ble.n	8009f24 <alloc_socket+0x10>
  }
  return -1;
 8009fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20009d9c 	.word	0x20009d9c
 8009fe0:	0801187c 	.word	0x0801187c
 8009fe4:	080118b0 	.word	0x080118b0
 8009fe8:	080118d0 	.word	0x080118d0

08009fec <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08a      	sub	sp, #40	@ 0x28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7ff ff73 	bl	8009ee4 <get_socket>
 8009ffe:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 800a000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <lwip_bind+0x20>
    return -1;
 800a006:	f04f 33ff 	mov.w	r3, #4294967295
 800a00a:	e051      	b.n	800a0b0 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b10      	cmp	r3, #16
 800a010:	d108      	bne.n	800a024 <lwip_bind+0x38>
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	785b      	ldrb	r3, [r3, #1]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d104      	bne.n	800a024 <lwip_bind+0x38>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	2b00      	cmp	r3, #0
 800a022:	d014      	beq.n	800a04e <lwip_bind+0x62>
 800a024:	4b24      	ldr	r3, [pc, #144]	@ (800a0b8 <lwip_bind+0xcc>)
 800a026:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800a02a:	4924      	ldr	r1, [pc, #144]	@ (800a0bc <lwip_bind+0xd0>)
 800a02c:	4824      	ldr	r0, [pc, #144]	@ (800a0c0 <lwip_bind+0xd4>)
 800a02e:	f006 f981 	bl	8010334 <iprintf>
 800a032:	f06f 000f 	mvn.w	r0, #15
 800a036:	f7ff fe67 	bl	8009d08 <err_to_errno>
 800a03a:	6178      	str	r0, [r7, #20]
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <lwip_bind+0x5c>
 800a042:	4a20      	ldr	r2, [pc, #128]	@ (800a0c4 <lwip_bind+0xd8>)
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	f04f 33ff 	mov.w	r3, #4294967295
 800a04c:	e030      	b.n	800a0b0 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	613b      	str	r3, [r7, #16]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	885b      	ldrh	r3, [r3, #2]
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 fe09 	bl	800ac70 <lwip_htons>
 800a05e:	4603      	mov	r3, r0
 800a060:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a068:	f107 0110 	add.w	r1, r7, #16
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7ff fa3b 	bl	80094e8 <netconn_bind>
 800a072:	4603      	mov	r3, r0
 800a074:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 800a078:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00e      	beq.n	800a09e <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800a080:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800a084:	4618      	mov	r0, r3
 800a086:	f7ff fe3f 	bl	8009d08 <err_to_errno>
 800a08a:	61b8      	str	r0, [r7, #24]
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <lwip_bind+0xac>
 800a092:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c4 <lwip_bind+0xd8>)
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a098:	f04f 33ff 	mov.w	r3, #4294967295
 800a09c:	e008      	b.n	800a0b0 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800a09e:	2300      	movs	r3, #0
 800a0a0:	61fb      	str	r3, [r7, #28]
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <lwip_bind+0xc2>
 800a0a8:	4a06      	ldr	r2, [pc, #24]	@ (800a0c4 <lwip_bind+0xd8>)
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3728      	adds	r7, #40	@ 0x28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	0801187c 	.word	0x0801187c
 800a0bc:	08011920 	.word	0x08011920
 800a0c0:	080118d0 	.word	0x080118d0
 800a0c4:	2000d118 	.word	0x2000d118

0800a0c8 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800a0c8:	b590      	push	{r4, r7, lr}
 800a0ca:	b08b      	sub	sp, #44	@ 0x2c
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d106      	bne.n	800a0f0 <lwip_sock_make_addr+0x28>
 800a0e2:	4b2b      	ldr	r3, [pc, #172]	@ (800a190 <lwip_sock_make_addr+0xc8>)
 800a0e4:	f240 4207 	movw	r2, #1031	@ 0x407
 800a0e8:	492a      	ldr	r1, [pc, #168]	@ (800a194 <lwip_sock_make_addr+0xcc>)
 800a0ea:	482b      	ldr	r0, [pc, #172]	@ (800a198 <lwip_sock_make_addr+0xd0>)
 800a0ec:	f006 f922 	bl	8010334 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <lwip_sock_make_addr+0x3c>
 800a0f6:	4b26      	ldr	r3, [pc, #152]	@ (800a190 <lwip_sock_make_addr+0xc8>)
 800a0f8:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800a0fc:	4927      	ldr	r1, [pc, #156]	@ (800a19c <lwip_sock_make_addr+0xd4>)
 800a0fe:	4826      	ldr	r0, [pc, #152]	@ (800a198 <lwip_sock_make_addr+0xd0>)
 800a100:	f006 f918 	bl	8010334 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <lwip_sock_make_addr+0x50>
 800a10a:	4b21      	ldr	r3, [pc, #132]	@ (800a190 <lwip_sock_make_addr+0xc8>)
 800a10c:	f240 4209 	movw	r2, #1033	@ 0x409
 800a110:	4923      	ldr	r1, [pc, #140]	@ (800a1a0 <lwip_sock_make_addr+0xd8>)
 800a112:	4821      	ldr	r0, [pc, #132]	@ (800a198 <lwip_sock_make_addr+0xd0>)
 800a114:	f006 f90e 	bl	8010334 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800a118:	f107 0314 	add.w	r3, r7, #20
 800a11c:	2210      	movs	r2, #16
 800a11e:	701a      	strb	r2, [r3, #0]
 800a120:	f107 0314 	add.w	r3, r7, #20
 800a124:	2202      	movs	r2, #2
 800a126:	705a      	strb	r2, [r3, #1]
 800a128:	f107 0414 	add.w	r4, r7, #20
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 fd9e 	bl	800ac70 <lwip_htons>
 800a134:	4603      	mov	r3, r0
 800a136:	8063      	strh	r3, [r4, #2]
 800a138:	f107 0314 	add.w	r3, r7, #20
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	605a      	str	r2, [r3, #4]
 800a142:	f107 0314 	add.w	r3, r7, #20
 800a146:	3308      	adds	r3, #8
 800a148:	2208      	movs	r2, #8
 800a14a:	2100      	movs	r1, #0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f006 f956 	bl	80103fe <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800a152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	7d3a      	ldrb	r2, [r7, #20]
 800a158:	4293      	cmp	r3, r2
 800a15a:	d202      	bcs.n	800a162 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800a15c:	2301      	movs	r3, #1
 800a15e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a160:	e008      	b.n	800a174 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800a162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	7d3a      	ldrb	r2, [r7, #20]
 800a168:	4293      	cmp	r3, r2
 800a16a:	d903      	bls.n	800a174 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800a16c:	7d3b      	ldrb	r3, [r7, #20]
 800a16e:	461a      	mov	r2, r3
 800a170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a172:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800a174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	f107 0314 	add.w	r3, r7, #20
 800a17c:	4619      	mov	r1, r3
 800a17e:	6838      	ldr	r0, [r7, #0]
 800a180:	f006 f9b3 	bl	80104ea <memcpy>
  return truncated;
 800a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a186:	4618      	mov	r0, r3
 800a188:	372c      	adds	r7, #44	@ 0x2c
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd90      	pop	{r4, r7, pc}
 800a18e:	bf00      	nop
 800a190:	0801187c 	.word	0x0801187c
 800a194:	08011974 	.word	0x08011974
 800a198:	080118d0 	.word	0x080118d0
 800a19c:	08011988 	.word	0x08011988
 800a1a0:	08011998 	.word	0x08011998

0800a1a4 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800a1a4:	b590      	push	{r4, r7, lr}
 800a1a6:	b08d      	sub	sp, #52	@ 0x34
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10d      	bne.n	800a1d6 <lwip_recvfrom_udp_raw+0x32>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	dd09      	ble.n	800a1d6 <lwip_recvfrom_udp_raw+0x32>
 800a1c2:	4b5e      	ldr	r3, [pc, #376]	@ (800a33c <lwip_recvfrom_udp_raw+0x198>)
 800a1c4:	f240 4249 	movw	r2, #1097	@ 0x449
 800a1c8:	495d      	ldr	r1, [pc, #372]	@ (800a340 <lwip_recvfrom_udp_raw+0x19c>)
 800a1ca:	485e      	ldr	r0, [pc, #376]	@ (800a344 <lwip_recvfrom_udp_raw+0x1a0>)
 800a1cc:	f006 f8b2 	bl	8010334 <iprintf>
 800a1d0:	f06f 030f 	mvn.w	r3, #15
 800a1d4:	e0ad      	b.n	800a332 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800a1e0:	2304      	movs	r3, #4
 800a1e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a1e6:	e002      	b.n	800a1ee <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d11e      	bne.n	800a238 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a202:	f107 0110 	add.w	r1, r7, #16
 800a206:	4618      	mov	r0, r3
 800a208:	f7ff fa50 	bl	80096ac <netconn_recv_udp_raw_netbuf_flags>
 800a20c:	4603      	mov	r3, r0
 800a20e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800a210:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800a218:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a21c:	e089      	b.n	800a332 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d106      	bne.n	800a232 <lwip_recvfrom_udp_raw+0x8e>
 800a224:	4b45      	ldr	r3, [pc, #276]	@ (800a33c <lwip_recvfrom_udp_raw+0x198>)
 800a226:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a22a:	4947      	ldr	r1, [pc, #284]	@ (800a348 <lwip_recvfrom_udp_raw+0x1a4>)
 800a22c:	4845      	ldr	r0, [pc, #276]	@ (800a344 <lwip_recvfrom_udp_raw+0x1a0>)
 800a22e:	f006 f881 	bl	8010334 <iprintf>
    sock->lastdata.netbuf = buf;
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	891b      	ldrh	r3, [r3, #8]
 800a23e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a244:	2300      	movs	r3, #0
 800a246:	61fb      	str	r3, [r7, #28]
 800a248:	e029      	b.n	800a29e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800a24a:	8b3a      	ldrh	r2, [r7, #24]
 800a24c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	689a      	ldr	r2, [r3, #8]
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	00db      	lsls	r3, r3, #3
 800a25a:	4413      	add	r3, r2
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	8afb      	ldrh	r3, [r7, #22]
 800a260:	429a      	cmp	r2, r3
 800a262:	d902      	bls.n	800a26a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800a264:	8afb      	ldrh	r3, [r7, #22]
 800a266:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a268:	e006      	b.n	800a278 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	00db      	lsls	r3, r3, #3
 800a272:	4413      	add	r3, r2
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689a      	ldr	r2, [r3, #8]
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	00db      	lsls	r3, r3, #3
 800a284:	4413      	add	r3, r2
 800a286:	6819      	ldr	r1, [r3, #0]
 800a288:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a28a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a28c:	f002 fa86 	bl	800c79c <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800a290:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a294:	4413      	add	r3, r2
 800a296:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	3301      	adds	r3, #1
 800a29c:	61fb      	str	r3, [r7, #28]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	da03      	bge.n	800a2b0 <lwip_recvfrom_udp_raw+0x10c>
 800a2a8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a2aa:	8b3b      	ldrh	r3, [r7, #24]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d3cc      	bcc.n	800a24a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01a      	beq.n	800a2ee <lwip_recvfrom_udp_raw+0x14a>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d016      	beq.n	800a2ee <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d012      	beq.n	800a2ee <lwip_recvfrom_udp_raw+0x14a>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00e      	beq.n	800a2ee <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6818      	ldr	r0, [r3, #0]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f103 0108 	add.w	r1, r3, #8
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	f7ff feed 	bl	800a0c8 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d007      	beq.n	800a30c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800a300:	7d7b      	ldrb	r3, [r7, #21]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff fd10 	bl	8009d44 <netbuf_delete>
  }
  if (datagram_len) {
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	8b3a      	ldrh	r2, [r7, #24]
 800a32e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	372c      	adds	r7, #44	@ 0x2c
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}
 800a33a:	bf00      	nop
 800a33c:	0801187c 	.word	0x0801187c
 800a340:	080119a8 	.word	0x080119a8
 800a344:	080118d0 	.word	0x080118d0
 800a348:	080119d4 	.word	0x080119d4

0800a34c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b096      	sub	sp, #88	@ 0x58
 800a350:	af02      	add	r7, sp, #8
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fdc2 	bl	8009ee4 <get_socket>
 800a360:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 800a362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a364:	2b00      	cmp	r3, #0
 800a366:	d102      	bne.n	800a36e <lwip_recvfrom+0x22>
    return -1;
 800a368:	f04f 33ff 	mov.w	r3, #4294967295
 800a36c:	e05e      	b.n	800a42c <lwip_recvfrom+0xe0>
    done_socket(sock);
    return ret;
  } else
#endif
  {
    u16_t datagram_len = 0;
 800a36e:	2300      	movs	r3, #0
 800a370:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 800a37a:	2300      	movs	r3, #0
 800a37c:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 800a386:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a38a:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800a38c:	2301      	movs	r3, #1
 800a38e:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800a390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a392:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800a394:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <lwip_recvfrom+0x54>
 800a39a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	e000      	b.n	800a3a2 <lwip_recvfrom+0x56>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800a3a4:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800a3a8:	f107 0214 	add.w	r2, r7, #20
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800a3b6:	f7ff fef5 	bl	800a1a4 <lwip_recvfrom_udp_raw>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 800a3c0:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00e      	beq.n	800a3e6 <lwip_recvfrom+0x9a>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800a3c8:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff fc9b 	bl	8009d08 <err_to_errno>
 800a3d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800a3d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <lwip_recvfrom+0x94>
 800a3da:	4a16      	ldr	r2, [pc, #88]	@ (800a434 <lwip_recvfrom+0xe8>)
 800a3dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3de:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800a3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e4:	e022      	b.n	800a42c <lwip_recvfrom+0xe0>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800a3e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	bf28      	it	cs
 800a3f0:	4613      	movcs	r3, r2
 800a3f2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d206      	bcs.n	800a408 <lwip_recvfrom+0xbc>
 800a3fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4293      	cmp	r3, r2
 800a402:	bf28      	it	cs
 800a404:	4613      	movcs	r3, r2
 800a406:	e001      	b.n	800a40c <lwip_recvfrom+0xc0>
 800a408:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a40c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 800a40e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <lwip_recvfrom+0xce>
      *fromlen = msg.msg_namelen;
 800a414:	69ba      	ldr	r2, [r7, #24]
 800a416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a418:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800a41a:	2300      	movs	r3, #0
 800a41c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a41e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <lwip_recvfrom+0xde>
 800a424:	4a03      	ldr	r2, [pc, #12]	@ (800a434 <lwip_recvfrom+0xe8>)
 800a426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a428:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800a42a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3750      	adds	r7, #80	@ 0x50
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	2000d118 	.word	0x2000d118

0800a438 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b090      	sub	sp, #64	@ 0x40
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff fd4c 	bl	8009ee4 <get_socket>
 800a44c:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (!sock) {
 800a44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a450:	2b00      	cmp	r3, #0
 800a452:	d102      	bne.n	800a45a <lwip_sendto+0x22>
    return -1;
 800a454:	f04f 33ff 	mov.w	r3, #4294967295
 800a458:	e099      	b.n	800a58e <lwip_sendto+0x156>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a464:	2b10      	cmp	r3, #16
 800a466:	d10d      	bne.n	800a484 <lwip_sendto+0x4c>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
#else /* LWIP_TCP */
    LWIP_UNUSED_ARG(flags);
    sock_set_errno(sock, err_to_errno(ERR_ARG));
 800a468:	f06f 000f 	mvn.w	r0, #15
 800a46c:	f7ff fc4c 	bl	8009d08 <err_to_errno>
 800a470:	6278      	str	r0, [r7, #36]	@ 0x24
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <lwip_sendto+0x46>
 800a478:	4a47      	ldr	r2, [pc, #284]	@ (800a598 <lwip_sendto+0x160>)
 800a47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47c:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	e084      	b.n	800a58e <lwip_sendto+0x156>
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a48a:	d30a      	bcc.n	800a4a2 <lwip_sendto+0x6a>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800a48c:	235a      	movs	r3, #90	@ 0x5a
 800a48e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <lwip_sendto+0x64>
 800a496:	4a40      	ldr	r2, [pc, #256]	@ (800a598 <lwip_sendto+0x160>)
 800a498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a0:	e075      	b.n	800a58e <lwip_sendto+0x156>
  }
  short_size = (u16_t)size;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800a4a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d102      	bne.n	800a4b2 <lwip_sendto+0x7a>
 800a4ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d023      	beq.n	800a4fa <lwip_sendto+0xc2>
 800a4b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4b4:	2b10      	cmp	r3, #16
 800a4b6:	d10b      	bne.n	800a4d0 <lwip_sendto+0x98>
 800a4b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d008      	beq.n	800a4d0 <lwip_sendto+0x98>
 800a4be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4c0:	785b      	ldrb	r3, [r3, #1]
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d104      	bne.n	800a4d0 <lwip_sendto+0x98>
 800a4c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4c8:	f003 0303 	and.w	r3, r3, #3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d014      	beq.n	800a4fa <lwip_sendto+0xc2>
 800a4d0:	4b32      	ldr	r3, [pc, #200]	@ (800a59c <lwip_sendto+0x164>)
 800a4d2:	f240 6252 	movw	r2, #1618	@ 0x652
 800a4d6:	4932      	ldr	r1, [pc, #200]	@ (800a5a0 <lwip_sendto+0x168>)
 800a4d8:	4832      	ldr	r0, [pc, #200]	@ (800a5a4 <lwip_sendto+0x16c>)
 800a4da:	f005 ff2b 	bl	8010334 <iprintf>
 800a4de:	f06f 000f 	mvn.w	r0, #15
 800a4e2:	f7ff fc11 	bl	8009d08 <err_to_errno>
 800a4e6:	6338      	str	r0, [r7, #48]	@ 0x30
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <lwip_sendto+0xbc>
 800a4ee:	4a2a      	ldr	r2, [pc, #168]	@ (800a598 <lwip_sendto+0x160>)
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f8:	e049      	b.n	800a58e <lwip_sendto+0x156>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	61bb      	str	r3, [r7, #24]
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800a502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00a      	beq.n	800a51e <lwip_sendto+0xe6>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800a508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	61fb      	str	r3, [r7, #28]
 800a50e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a510:	885b      	ldrh	r3, [r3, #2]
 800a512:	4618      	mov	r0, r3
 800a514:	f000 fbac 	bl	800ac70 <lwip_htons>
 800a518:	4603      	mov	r3, r0
 800a51a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a51c:	e003      	b.n	800a526 <lwip_sendto+0xee>
  } else {
    remote_port = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800a522:	2300      	movs	r3, #0
 800a524:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 800a526:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a528:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800a52a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a52c:	f107 0314 	add.w	r3, r7, #20
 800a530:	68b9      	ldr	r1, [r7, #8]
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff fc4e 	bl	8009dd4 <netbuf_ref>
 800a538:	4603      	mov	r3, r0
 800a53a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800a53e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10a      	bne.n	800a55c <lwip_sendto+0x124>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f107 0214 	add.w	r2, r7, #20
 800a54e:	4611      	mov	r1, r2
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff f8d7 	bl	8009704 <netconn_send>
 800a556:	4603      	mov	r3, r0
 800a558:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800a55c:	f107 0314 	add.w	r3, r7, #20
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff fc0f 	bl	8009d84 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800a566:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff fbcc 	bl	8009d08 <err_to_errno>
 800a570:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <lwip_sendto+0x146>
 800a578:	4a07      	ldr	r2, [pc, #28]	@ (800a598 <lwip_sendto+0x160>)
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800a57e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <lwip_sendto+0x152>
 800a586:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a588:	e001      	b.n	800a58e <lwip_sendto+0x156>
 800a58a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3740      	adds	r7, #64	@ 0x40
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	2000d118 	.word	0x2000d118
 800a59c:	0801187c 	.word	0x0801187c
 800a5a0:	08011ad4 	.word	0x08011ad4
 800a5a4:	080118d0 	.word	0x080118d0

0800a5a8 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	d009      	beq.n	800a5ce <lwip_socket+0x26>
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	dc23      	bgt.n	800a608 <lwip_socket+0x60>
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d019      	beq.n	800a5fa <lwip_socket+0x52>
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d009      	beq.n	800a5e0 <lwip_socket+0x38>
 800a5cc:	e01c      	b.n	800a608 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	4a22      	ldr	r2, [pc, #136]	@ (800a65c <lwip_socket+0xb4>)
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	2040      	movs	r0, #64	@ 0x40
 800a5d8:	f7fe fede 	bl	8009398 <netconn_new_with_proto_and_callback>
 800a5dc:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800a5de:	e019      	b.n	800a614 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b88      	cmp	r3, #136	@ 0x88
 800a5e4:	d101      	bne.n	800a5ea <lwip_socket+0x42>
 800a5e6:	2321      	movs	r3, #33	@ 0x21
 800a5e8:	e000      	b.n	800a5ec <lwip_socket+0x44>
 800a5ea:	2320      	movs	r3, #32
 800a5ec:	4a1b      	ldr	r2, [pc, #108]	@ (800a65c <lwip_socket+0xb4>)
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe fed1 	bl	8009398 <netconn_new_with_proto_and_callback>
 800a5f6:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a5f8:	e00c      	b.n	800a614 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800a5fa:	4a18      	ldr	r2, [pc, #96]	@ (800a65c <lwip_socket+0xb4>)
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	2010      	movs	r0, #16
 800a600:	f7fe feca 	bl	8009398 <netconn_new_with_proto_and_callback>
 800a604:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800a606:	e005      	b.n	800a614 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800a608:	4b15      	ldr	r3, [pc, #84]	@ (800a660 <lwip_socket+0xb8>)
 800a60a:	2216      	movs	r2, #22
 800a60c:	601a      	str	r2, [r3, #0]
      return -1;
 800a60e:	f04f 33ff 	mov.w	r3, #4294967295
 800a612:	e01e      	b.n	800a652 <lwip_socket+0xaa>
  }

  if (!conn) {
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d105      	bne.n	800a626 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800a61a:	4b11      	ldr	r3, [pc, #68]	@ (800a660 <lwip_socket+0xb8>)
 800a61c:	2269      	movs	r2, #105	@ 0x69
 800a61e:	601a      	str	r2, [r3, #0]
    return -1;
 800a620:	f04f 33ff 	mov.w	r3, #4294967295
 800a624:	e015      	b.n	800a652 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800a626:	2100      	movs	r1, #0
 800a628:	6978      	ldr	r0, [r7, #20]
 800a62a:	f7ff fc73 	bl	8009f14 <alloc_socket>
 800a62e:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a636:	d108      	bne.n	800a64a <lwip_socket+0xa2>
    netconn_delete(conn);
 800a638:	6978      	ldr	r0, [r7, #20]
 800a63a:	f7fe ff39 	bl	80094b0 <netconn_delete>
    set_errno(ENFILE);
 800a63e:	4b08      	ldr	r3, [pc, #32]	@ (800a660 <lwip_socket+0xb8>)
 800a640:	2217      	movs	r2, #23
 800a642:	601a      	str	r2, [r3, #0]
    return -1;
 800a644:	f04f 33ff 	mov.w	r3, #4294967295
 800a648:	e003      	b.n	800a652 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	615a      	str	r2, [r3, #20]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800a650:	693b      	ldr	r3, [r7, #16]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3718      	adds	r7, #24
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	0800a6ed 	.word	0x0800a6ed
 800a660:	2000d118 	.word	0x2000d118

0800a664 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
 800a676:	e02c      	b.n	800a6d2 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	695a      	ldr	r2, [r3, #20]
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	00db      	lsls	r3, r3, #3
 800a680:	4413      	add	r3, r2
 800a682:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d11e      	bne.n	800a6cc <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d009      	beq.n	800a6a8 <lwip_poll_should_wake+0x44>
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <lwip_poll_should_wake+0x44>
        return 1;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e01a      	b.n	800a6de <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d009      	beq.n	800a6c2 <lwip_poll_should_wake+0x5e>
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <lwip_poll_should_wake+0x5e>
        return 1;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e00d      	b.n	800a6de <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e008      	b.n	800a6de <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	617b      	str	r3, [r7, #20]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d3cd      	bcc.n	800a678 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
	...

0800a6ec <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08a      	sub	sp, #40	@ 0x28
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 80a4 	beq.w	800a84c <event_callback+0x160>
    s = conn->socket;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	da18      	bge.n	800a742 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800a710:	f005 fcba 	bl	8010088 <sys_arch_protect>
 800a714:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	da0b      	bge.n	800a736 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	1e5a      	subs	r2, r3, #1
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	615a      	str	r2, [r3, #20]
        }
        SYS_ARCH_UNPROTECT(lev);
 800a72e:	69f8      	ldr	r0, [r7, #28]
 800a730:	f005 fcb8 	bl	80100a4 <sys_arch_unprotect>
        return;
 800a734:	e08d      	b.n	800a852 <event_callback+0x166>
      }
      s = conn->socket;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800a73c:	69f8      	ldr	r0, [r7, #28]
 800a73e:	f005 fcb1 	bl	80100a4 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800a742:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a744:	f7ff fbce 	bl	8009ee4 <get_socket>
 800a748:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d07f      	beq.n	800a850 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800a750:	2301      	movs	r3, #1
 800a752:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800a754:	f005 fc98 	bl	8010088 <sys_arch_protect>
 800a758:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800a75a:	78fb      	ldrb	r3, [r7, #3]
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d83e      	bhi.n	800a7de <event_callback+0xf2>
 800a760:	a201      	add	r2, pc, #4	@ (adr r2, 800a768 <event_callback+0x7c>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a77d 	.word	0x0800a77d
 800a76c:	0800a79f 	.word	0x0800a79f
 800a770:	0800a7b7 	.word	0x0800a7b7
 800a774:	0800a7cb 	.word	0x0800a7cb
 800a778:	0800a7d7 	.word	0x0800a7d7
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a782:	b29b      	uxth	r3, r3
 800a784:	3301      	adds	r3, #1
 800a786:	b29b      	uxth	r3, r3
 800a788:	b21a      	sxth	r2, r3
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a794:	2b01      	cmp	r3, #1
 800a796:	dd2a      	ble.n	800a7ee <event_callback+0x102>
        check_waiters = 0;
 800a798:	2300      	movs	r3, #0
 800a79a:	623b      	str	r3, [r7, #32]
      }
      break;
 800a79c:	e027      	b.n	800a7ee <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	b21a      	sxth	r2, r3
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	623b      	str	r3, [r7, #32]
      break;
 800a7b4:	e01c      	b.n	800a7f0 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	895b      	ldrh	r3, [r3, #10]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <event_callback+0xd6>
        check_waiters = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	815a      	strh	r2, [r3, #10]
      break;
 800a7c8:	e012      	b.n	800a7f0 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	623b      	str	r3, [r7, #32]
      break;
 800a7d4:	e00c      	b.n	800a7f0 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	819a      	strh	r2, [r3, #12]
      break;
 800a7dc:	e008      	b.n	800a7f0 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800a7de:	4b1e      	ldr	r3, [pc, #120]	@ (800a858 <event_callback+0x16c>)
 800a7e0:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800a7e4:	491d      	ldr	r1, [pc, #116]	@ (800a85c <event_callback+0x170>)
 800a7e6:	481e      	ldr	r0, [pc, #120]	@ (800a860 <event_callback+0x174>)
 800a7e8:	f005 fda4 	bl	8010334 <iprintf>
      break;
 800a7ec:	e000      	b.n	800a7f0 <event_callback+0x104>
      break;
 800a7ee:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	7b9b      	ldrb	r3, [r3, #14]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d025      	beq.n	800a844 <event_callback+0x158>
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d022      	beq.n	800a844 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	bfcc      	ite	gt
 800a808:	2301      	movgt	r3, #1
 800a80a:	2300      	movle	r3, #0
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	895b      	ldrh	r3, [r3, #10]
 800a814:	2b00      	cmp	r3, #0
 800a816:	bf14      	ite	ne
 800a818:	2301      	movne	r3, #1
 800a81a:	2300      	moveq	r3, #0
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	899b      	ldrh	r3, [r3, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	bf14      	ite	ne
 800a828:	2301      	movne	r3, #1
 800a82a:	2300      	moveq	r3, #0
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800a830:	69f8      	ldr	r0, [r7, #28]
 800a832:	f005 fc37 	bl	80100a4 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	6979      	ldr	r1, [r7, #20]
 800a83c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a83e:	f000 f811 	bl	800a864 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800a842:	e006      	b.n	800a852 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800a844:	69f8      	ldr	r0, [r7, #28]
 800a846:	f005 fc2d 	bl	80100a4 <sys_arch_unprotect>
 800a84a:	e002      	b.n	800a852 <event_callback+0x166>
    return;
 800a84c:	bf00      	nop
 800a84e:	e000      	b.n	800a852 <event_callback+0x166>
      return;
 800a850:	bf00      	nop
  }
  done_socket(sock);
}
 800a852:	3728      	adds	r7, #40	@ 0x28
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	0801187c 	.word	0x0801187c
 800a85c:	08011b70 	.word	0x08011b70
 800a860:	080118d0 	.word	0x080118d0

0800a864 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b088      	sub	sp, #32
 800a868:	af02      	add	r7, sp, #8
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
 800a870:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a872:	4b42      	ldr	r3, [pc, #264]	@ (800a97c <select_check_waiters+0x118>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	e078      	b.n	800a96c <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d171      	bne.n	800a966 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d009      	beq.n	800a8a2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	68f9      	ldr	r1, [r7, #12]
 800a898:	6978      	ldr	r0, [r7, #20]
 800a89a:	f7ff fee3 	bl	800a664 <lwip_poll_should_wake>
 800a89e:	6138      	str	r0, [r7, #16]
 800a8a0:	e056      	b.n	800a950 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d017      	beq.n	800a8d8 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d013      	beq.n	800a8d8 <select_check_waiters+0x74>
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	689a      	ldr	r2, [r3, #8]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	da00      	bge.n	800a8bc <select_check_waiters+0x58>
 800a8ba:	331f      	adds	r3, #31
 800a8bc:	115b      	asrs	r3, r3, #5
 800a8be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f003 031f 	and.w	r3, r3, #31
 800a8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d001      	beq.n	800a8d8 <select_check_waiters+0x74>
            do_signal = 1;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d01a      	beq.n	800a914 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d117      	bne.n	800a914 <select_check_waiters+0xb0>
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d013      	beq.n	800a914 <select_check_waiters+0xb0>
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	da00      	bge.n	800a8f8 <select_check_waiters+0x94>
 800a8f6:	331f      	adds	r3, #31
 800a8f8:	115b      	asrs	r3, r3, #5
 800a8fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f003 031f 	and.w	r3, r3, #31
 800a904:	fa22 f303 	lsr.w	r3, r2, r3
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <select_check_waiters+0xb0>
            do_signal = 1;
 800a910:	2301      	movs	r3, #1
 800a912:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d01a      	beq.n	800a950 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d117      	bne.n	800a950 <select_check_waiters+0xec>
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d013      	beq.n	800a950 <select_check_waiters+0xec>
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	691a      	ldr	r2, [r3, #16]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	da00      	bge.n	800a934 <select_check_waiters+0xd0>
 800a932:	331f      	adds	r3, #31
 800a934:	115b      	asrs	r3, r3, #5
 800a936:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f003 031f 	and.w	r3, r3, #31
 800a940:	fa22 f303 	lsr.w	r3, r2, r3
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <select_check_waiters+0xec>
            do_signal = 1;
 800a94c:	2301      	movs	r3, #1
 800a94e:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d007      	beq.n	800a966 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2201      	movs	r2, #1
 800a95a:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	3320      	adds	r3, #32
 800a960:	4618      	mov	r0, r3
 800a962:	f005 faec 	bl	800ff3e <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d183      	bne.n	800a87a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800a972:	bf00      	nop
 800a974:	bf00      	nop
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20009ddc 	.word	0x20009ddc

0800a980 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a98a:	f002 f8cd 	bl	800cb28 <sys_timeouts_sleeptime>
 800a98e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a996:	d10b      	bne.n	800a9b0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a998:	4813      	ldr	r0, [pc, #76]	@ (800a9e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a99a:	f005 fb42 	bl	8010022 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a99e:	2200      	movs	r2, #0
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f005 fa2a 	bl	800fdfc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a9a8:	480f      	ldr	r0, [pc, #60]	@ (800a9e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a9aa:	f005 fb2b 	bl	8010004 <sys_mutex_lock>
    return;
 800a9ae:	e018      	b.n	800a9e2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d102      	bne.n	800a9bc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a9b6:	f002 f87d 	bl	800cab4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a9ba:	e7e6      	b.n	800a98a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a9bc:	480a      	ldr	r0, [pc, #40]	@ (800a9e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a9be:	f005 fb30 	bl	8010022 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f005 fa18 	bl	800fdfc <sys_arch_mbox_fetch>
 800a9cc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a9ce:	4806      	ldr	r0, [pc, #24]	@ (800a9e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a9d0:	f005 fb18 	bl	8010004 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9da:	d102      	bne.n	800a9e2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a9dc:	f002 f86a 	bl	800cab4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a9e0:	e7d3      	b.n	800a98a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	20009dec 	.word	0x20009dec

0800a9ec <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a9f4:	4810      	ldr	r0, [pc, #64]	@ (800aa38 <tcpip_thread+0x4c>)
 800a9f6:	f005 fb05 	bl	8010004 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a9fa:	4b10      	ldr	r3, [pc, #64]	@ (800aa3c <tcpip_thread+0x50>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d005      	beq.n	800aa0e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800aa02:	4b0e      	ldr	r3, [pc, #56]	@ (800aa3c <tcpip_thread+0x50>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a0e      	ldr	r2, [pc, #56]	@ (800aa40 <tcpip_thread+0x54>)
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800aa0e:	f107 030c 	add.w	r3, r7, #12
 800aa12:	4619      	mov	r1, r3
 800aa14:	480b      	ldr	r0, [pc, #44]	@ (800aa44 <tcpip_thread+0x58>)
 800aa16:	f7ff ffb3 	bl	800a980 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d106      	bne.n	800aa2e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aa20:	4b09      	ldr	r3, [pc, #36]	@ (800aa48 <tcpip_thread+0x5c>)
 800aa22:	2291      	movs	r2, #145	@ 0x91
 800aa24:	4909      	ldr	r1, [pc, #36]	@ (800aa4c <tcpip_thread+0x60>)
 800aa26:	480a      	ldr	r0, [pc, #40]	@ (800aa50 <tcpip_thread+0x64>)
 800aa28:	f005 fc84 	bl	8010334 <iprintf>
      continue;
 800aa2c:	e003      	b.n	800aa36 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 f80f 	bl	800aa54 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800aa36:	e7ea      	b.n	800aa0e <tcpip_thread+0x22>
 800aa38:	20009dec 	.word	0x20009dec
 800aa3c:	20009de0 	.word	0x20009de0
 800aa40:	20009de4 	.word	0x20009de4
 800aa44:	20009de8 	.word	0x20009de8
 800aa48:	08011bc4 	.word	0x08011bc4
 800aa4c:	08011bf4 	.word	0x08011bf4
 800aa50:	08011c14 	.word	0x08011c14

0800aa54 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d026      	beq.n	800aab2 <tcpip_thread_handle_msg+0x5e>
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	dc2b      	bgt.n	800aac0 <tcpip_thread_handle_msg+0x6c>
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <tcpip_thread_handle_msg+0x1e>
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d015      	beq.n	800aa9c <tcpip_thread_handle_msg+0x48>
 800aa70:	e026      	b.n	800aac0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	6850      	ldr	r0, [r2, #4]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	6892      	ldr	r2, [r2, #8]
 800aa7e:	4611      	mov	r1, r2
 800aa80:	4798      	blx	r3
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f001 fc7f 	bl	800c390 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	2006      	movs	r0, #6
 800aa96:	f000 fe37 	bl	800b708 <memp_free>
      break;
 800aa9a:	e018      	b.n	800aace <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	6892      	ldr	r2, [r2, #8]
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	2005      	movs	r0, #5
 800aaac:	f000 fe2c 	bl	800b708 <memp_free>
      break;
 800aab0:	e00d      	b.n	800aace <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6892      	ldr	r2, [r2, #8]
 800aaba:	4610      	mov	r0, r2
 800aabc:	4798      	blx	r3
      break;
 800aabe:	e006      	b.n	800aace <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aac0:	4b05      	ldr	r3, [pc, #20]	@ (800aad8 <tcpip_thread_handle_msg+0x84>)
 800aac2:	22cf      	movs	r2, #207	@ 0xcf
 800aac4:	4905      	ldr	r1, [pc, #20]	@ (800aadc <tcpip_thread_handle_msg+0x88>)
 800aac6:	4806      	ldr	r0, [pc, #24]	@ (800aae0 <tcpip_thread_handle_msg+0x8c>)
 800aac8:	f005 fc34 	bl	8010334 <iprintf>
      break;
 800aacc:	bf00      	nop
  }
}
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	08011bc4 	.word	0x08011bc4
 800aadc:	08011bf4 	.word	0x08011bf4
 800aae0:	08011c14 	.word	0x08011c14

0800aae4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aaf0:	481a      	ldr	r0, [pc, #104]	@ (800ab5c <tcpip_inpkt+0x78>)
 800aaf2:	f005 f9de 	bl	800feb2 <sys_mbox_valid>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d105      	bne.n	800ab08 <tcpip_inpkt+0x24>
 800aafc:	4b18      	ldr	r3, [pc, #96]	@ (800ab60 <tcpip_inpkt+0x7c>)
 800aafe:	22fc      	movs	r2, #252	@ 0xfc
 800ab00:	4918      	ldr	r1, [pc, #96]	@ (800ab64 <tcpip_inpkt+0x80>)
 800ab02:	4819      	ldr	r0, [pc, #100]	@ (800ab68 <tcpip_inpkt+0x84>)
 800ab04:	f005 fc16 	bl	8010334 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ab08:	2006      	movs	r0, #6
 800ab0a:	f000 fd87 	bl	800b61c <memp_malloc>
 800ab0e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d102      	bne.n	800ab1c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ab16:	f04f 33ff 	mov.w	r3, #4294967295
 800ab1a:	e01a      	b.n	800ab52 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ab34:	6979      	ldr	r1, [r7, #20]
 800ab36:	4809      	ldr	r0, [pc, #36]	@ (800ab5c <tcpip_inpkt+0x78>)
 800ab38:	f005 f946 	bl	800fdc8 <sys_mbox_trypost>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ab42:	6979      	ldr	r1, [r7, #20]
 800ab44:	2006      	movs	r0, #6
 800ab46:	f000 fddf 	bl	800b708 <memp_free>
    return ERR_MEM;
 800ab4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab4e:	e000      	b.n	800ab52 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ab50:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20009de8 	.word	0x20009de8
 800ab60:	08011bc4 	.word	0x08011bc4
 800ab64:	08011c3c 	.word	0x08011c3c
 800ab68:	08011c14 	.word	0x08011c14

0800ab6c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ab7c:	f003 0318 	and.w	r3, r3, #24
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d006      	beq.n	800ab92 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ab84:	4a08      	ldr	r2, [pc, #32]	@ (800aba8 <tcpip_input+0x3c>)
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff ffab 	bl	800aae4 <tcpip_inpkt>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	e005      	b.n	800ab9e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ab92:	4a06      	ldr	r2, [pc, #24]	@ (800abac <tcpip_input+0x40>)
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7ff ffa4 	bl	800aae4 <tcpip_inpkt>
 800ab9c:	4603      	mov	r3, r0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	0800fbb5 	.word	0x0800fbb5
 800abac:	0800e855 	.word	0x0800e855

0800abb0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800abbc:	4806      	ldr	r0, [pc, #24]	@ (800abd8 <tcpip_send_msg_wait_sem+0x28>)
 800abbe:	f005 fa21 	bl	8010004 <sys_mutex_lock>
  fn(apimsg);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	68b8      	ldr	r0, [r7, #8]
 800abc6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800abc8:	4803      	ldr	r0, [pc, #12]	@ (800abd8 <tcpip_send_msg_wait_sem+0x28>)
 800abca:	f005 fa2a 	bl	8010022 <sys_mutex_unlock>
  return ERR_OK;
 800abce:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	20009dec 	.word	0x20009dec

0800abdc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af02      	add	r7, sp, #8
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800abe6:	f000 f871 	bl	800accc <lwip_init>

  tcpip_init_done = initfunc;
 800abea:	4a17      	ldr	r2, [pc, #92]	@ (800ac48 <tcpip_init+0x6c>)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800abf0:	4a16      	ldr	r2, [pc, #88]	@ (800ac4c <tcpip_init+0x70>)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800abf6:	2106      	movs	r1, #6
 800abf8:	4815      	ldr	r0, [pc, #84]	@ (800ac50 <tcpip_init+0x74>)
 800abfa:	f005 f8b1 	bl	800fd60 <sys_mbox_new>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d006      	beq.n	800ac12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ac04:	4b13      	ldr	r3, [pc, #76]	@ (800ac54 <tcpip_init+0x78>)
 800ac06:	f240 2261 	movw	r2, #609	@ 0x261
 800ac0a:	4913      	ldr	r1, [pc, #76]	@ (800ac58 <tcpip_init+0x7c>)
 800ac0c:	4813      	ldr	r0, [pc, #76]	@ (800ac5c <tcpip_init+0x80>)
 800ac0e:	f005 fb91 	bl	8010334 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ac12:	4813      	ldr	r0, [pc, #76]	@ (800ac60 <tcpip_init+0x84>)
 800ac14:	f005 f9da 	bl	800ffcc <sys_mutex_new>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d006      	beq.n	800ac2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac54 <tcpip_init+0x78>)
 800ac20:	f240 2265 	movw	r2, #613	@ 0x265
 800ac24:	490f      	ldr	r1, [pc, #60]	@ (800ac64 <tcpip_init+0x88>)
 800ac26:	480d      	ldr	r0, [pc, #52]	@ (800ac5c <tcpip_init+0x80>)
 800ac28:	f005 fb84 	bl	8010334 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac34:	2200      	movs	r2, #0
 800ac36:	490c      	ldr	r1, [pc, #48]	@ (800ac68 <tcpip_init+0x8c>)
 800ac38:	480c      	ldr	r0, [pc, #48]	@ (800ac6c <tcpip_init+0x90>)
 800ac3a:	f005 f9ff 	bl	801003c <sys_thread_new>
}
 800ac3e:	bf00      	nop
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	20009de0 	.word	0x20009de0
 800ac4c:	20009de4 	.word	0x20009de4
 800ac50:	20009de8 	.word	0x20009de8
 800ac54:	08011bc4 	.word	0x08011bc4
 800ac58:	08011c4c 	.word	0x08011c4c
 800ac5c:	08011c14 	.word	0x08011c14
 800ac60:	20009dec 	.word	0x20009dec
 800ac64:	08011c70 	.word	0x08011c70
 800ac68:	0800a9ed 	.word	0x0800a9ed
 800ac6c:	08011c94 	.word	0x08011c94

0800ac70 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ac7a:	88fb      	ldrh	r3, [r7, #6]
 800ac7c:	021b      	lsls	r3, r3, #8
 800ac7e:	b21a      	sxth	r2, r3
 800ac80:	88fb      	ldrh	r3, [r7, #6]
 800ac82:	0a1b      	lsrs	r3, r3, #8
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	b21b      	sxth	r3, r3
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	b21b      	sxth	r3, r3
 800ac8c:	b29b      	uxth	r3, r3
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	370c      	adds	r7, #12
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	061a      	lsls	r2, r3, #24
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	021b      	lsls	r3, r3, #8
 800acaa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800acae:	431a      	orrs	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	0a1b      	lsrs	r3, r3, #8
 800acb4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800acb8:	431a      	orrs	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	0e1b      	lsrs	r3, r3, #24
 800acbe:	4313      	orrs	r3, r2
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800acd6:	f005 f96b 	bl	800ffb0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800acda:	f000 f8d3 	bl	800ae84 <mem_init>
  memp_init();
 800acde:	f000 fc2f 	bl	800b540 <memp_init>
  pbuf_init();
  netif_init();
 800ace2:	f000 fd3b 	bl	800b75c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ace6:	f001 ff57 	bl	800cb98 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800acea:	f001 fe9b 	bl	800ca24 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800acee:	bf00      	nop
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ad02:	4b05      	ldr	r3, [pc, #20]	@ (800ad18 <ptr_to_mem+0x20>)
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	88fb      	ldrh	r3, [r7, #6]
 800ad08:	4413      	add	r3, r2
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	370c      	adds	r7, #12
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	2000a45c 	.word	0x2000a45c

0800ad1c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad24:	4b05      	ldr	r3, [pc, #20]	@ (800ad3c <mem_to_ptr+0x20>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	b29b      	uxth	r3, r3
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	2000a45c 	.word	0x2000a45c

0800ad40 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ad40:	b590      	push	{r4, r7, lr}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ad48:	4b45      	ldr	r3, [pc, #276]	@ (800ae60 <plug_holes+0x120>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d206      	bcs.n	800ad60 <plug_holes+0x20>
 800ad52:	4b44      	ldr	r3, [pc, #272]	@ (800ae64 <plug_holes+0x124>)
 800ad54:	f240 12df 	movw	r2, #479	@ 0x1df
 800ad58:	4943      	ldr	r1, [pc, #268]	@ (800ae68 <plug_holes+0x128>)
 800ad5a:	4844      	ldr	r0, [pc, #272]	@ (800ae6c <plug_holes+0x12c>)
 800ad5c:	f005 faea 	bl	8010334 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ad60:	4b43      	ldr	r3, [pc, #268]	@ (800ae70 <plug_holes+0x130>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d306      	bcc.n	800ad78 <plug_holes+0x38>
 800ad6a:	4b3e      	ldr	r3, [pc, #248]	@ (800ae64 <plug_holes+0x124>)
 800ad6c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ad70:	4940      	ldr	r1, [pc, #256]	@ (800ae74 <plug_holes+0x134>)
 800ad72:	483e      	ldr	r0, [pc, #248]	@ (800ae6c <plug_holes+0x12c>)
 800ad74:	f005 fade 	bl	8010334 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	791b      	ldrb	r3, [r3, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d006      	beq.n	800ad8e <plug_holes+0x4e>
 800ad80:	4b38      	ldr	r3, [pc, #224]	@ (800ae64 <plug_holes+0x124>)
 800ad82:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ad86:	493c      	ldr	r1, [pc, #240]	@ (800ae78 <plug_holes+0x138>)
 800ad88:	4838      	ldr	r0, [pc, #224]	@ (800ae6c <plug_holes+0x12c>)
 800ad8a:	f005 fad3 	bl	8010334 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ad96:	d906      	bls.n	800ada6 <plug_holes+0x66>
 800ad98:	4b32      	ldr	r3, [pc, #200]	@ (800ae64 <plug_holes+0x124>)
 800ad9a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800ad9e:	4937      	ldr	r1, [pc, #220]	@ (800ae7c <plug_holes+0x13c>)
 800ada0:	4832      	ldr	r0, [pc, #200]	@ (800ae6c <plug_holes+0x12c>)
 800ada2:	f005 fac7 	bl	8010334 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff ffa4 	bl	800acf8 <ptr_to_mem>
 800adb0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d024      	beq.n	800ae04 <plug_holes+0xc4>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	791b      	ldrb	r3, [r3, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d120      	bne.n	800ae04 <plug_holes+0xc4>
 800adc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ae70 <plug_holes+0x130>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d01b      	beq.n	800ae04 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800adcc:	4b2c      	ldr	r3, [pc, #176]	@ (800ae80 <plug_holes+0x140>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	429a      	cmp	r2, r3
 800add4:	d102      	bne.n	800addc <plug_holes+0x9c>
      lfree = mem;
 800add6:	4a2a      	ldr	r2, [pc, #168]	@ (800ae80 <plug_holes+0x140>)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	881a      	ldrh	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800adec:	d00a      	beq.n	800ae04 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff ff80 	bl	800acf8 <ptr_to_mem>
 800adf8:	4604      	mov	r4, r0
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff ff8e 	bl	800ad1c <mem_to_ptr>
 800ae00:	4603      	mov	r3, r0
 800ae02:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	885b      	ldrh	r3, [r3, #2]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff ff75 	bl	800acf8 <ptr_to_mem>
 800ae0e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d01f      	beq.n	800ae58 <plug_holes+0x118>
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	791b      	ldrb	r3, [r3, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d11b      	bne.n	800ae58 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae20:	4b17      	ldr	r3, [pc, #92]	@ (800ae80 <plug_holes+0x140>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d102      	bne.n	800ae30 <plug_holes+0xf0>
      lfree = pmem;
 800ae2a:	4a15      	ldr	r2, [pc, #84]	@ (800ae80 <plug_holes+0x140>)
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	881a      	ldrh	r2, [r3, #0]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	881b      	ldrh	r3, [r3, #0]
 800ae3c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ae40:	d00a      	beq.n	800ae58 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7ff ff56 	bl	800acf8 <ptr_to_mem>
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	68b8      	ldr	r0, [r7, #8]
 800ae50:	f7ff ff64 	bl	800ad1c <mem_to_ptr>
 800ae54:	4603      	mov	r3, r0
 800ae56:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ae58:	bf00      	nop
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd90      	pop	{r4, r7, pc}
 800ae60:	2000a45c 	.word	0x2000a45c
 800ae64:	08011ca4 	.word	0x08011ca4
 800ae68:	08011cd4 	.word	0x08011cd4
 800ae6c:	08011cec 	.word	0x08011cec
 800ae70:	2000a460 	.word	0x2000a460
 800ae74:	08011d14 	.word	0x08011d14
 800ae78:	08011d30 	.word	0x08011d30
 800ae7c:	08011d4c 	.word	0x08011d4c
 800ae80:	2000a468 	.word	0x2000a468

0800ae84 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ae8a:	4b1f      	ldr	r3, [pc, #124]	@ (800af08 <mem_init+0x84>)
 800ae8c:	3303      	adds	r3, #3
 800ae8e:	f023 0303 	bic.w	r3, r3, #3
 800ae92:	461a      	mov	r2, r3
 800ae94:	4b1d      	ldr	r3, [pc, #116]	@ (800af0c <mem_init+0x88>)
 800ae96:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ae98:	4b1c      	ldr	r3, [pc, #112]	@ (800af0c <mem_init+0x88>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800aea4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800aeb2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800aeb6:	f7ff ff1f 	bl	800acf8 <ptr_to_mem>
 800aeba:	4603      	mov	r3, r0
 800aebc:	4a14      	ldr	r2, [pc, #80]	@ (800af10 <mem_init+0x8c>)
 800aebe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aec0:	4b13      	ldr	r3, [pc, #76]	@ (800af10 <mem_init+0x8c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2201      	movs	r2, #1
 800aec6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aec8:	4b11      	ldr	r3, [pc, #68]	@ (800af10 <mem_init+0x8c>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800aed0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aed2:	4b0f      	ldr	r3, [pc, #60]	@ (800af10 <mem_init+0x8c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800aeda:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800aedc:	4b0b      	ldr	r3, [pc, #44]	@ (800af0c <mem_init+0x88>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a0c      	ldr	r2, [pc, #48]	@ (800af14 <mem_init+0x90>)
 800aee2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800aee4:	480c      	ldr	r0, [pc, #48]	@ (800af18 <mem_init+0x94>)
 800aee6:	f005 f871 	bl	800ffcc <sys_mutex_new>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d006      	beq.n	800aefe <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800aef0:	4b0a      	ldr	r3, [pc, #40]	@ (800af1c <mem_init+0x98>)
 800aef2:	f240 221f 	movw	r2, #543	@ 0x21f
 800aef6:	490a      	ldr	r1, [pc, #40]	@ (800af20 <mem_init+0x9c>)
 800aef8:	480a      	ldr	r0, [pc, #40]	@ (800af24 <mem_init+0xa0>)
 800aefa:	f005 fa1b 	bl	8010334 <iprintf>
  }
}
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20009e08 	.word	0x20009e08
 800af0c:	2000a45c 	.word	0x2000a45c
 800af10:	2000a460 	.word	0x2000a460
 800af14:	2000a468 	.word	0x2000a468
 800af18:	2000a464 	.word	0x2000a464
 800af1c:	08011ca4 	.word	0x08011ca4
 800af20:	08011d78 	.word	0x08011d78
 800af24:	08011cec 	.word	0x08011cec

0800af28 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff fef3 	bl	800ad1c <mem_to_ptr>
 800af36:	4603      	mov	r3, r0
 800af38:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff feda 	bl	800acf8 <ptr_to_mem>
 800af44:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	885b      	ldrh	r3, [r3, #2]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff fed4 	bl	800acf8 <ptr_to_mem>
 800af50:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800af5a:	d818      	bhi.n	800af8e <mem_link_valid+0x66>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	885b      	ldrh	r3, [r3, #2]
 800af60:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800af64:	d813      	bhi.n	800af8e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af6a:	8afa      	ldrh	r2, [r7, #22]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d004      	beq.n	800af7a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	8afa      	ldrh	r2, [r7, #22]
 800af76:	429a      	cmp	r2, r3
 800af78:	d109      	bne.n	800af8e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af7a:	4b08      	ldr	r3, [pc, #32]	@ (800af9c <mem_link_valid+0x74>)
 800af7c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	429a      	cmp	r2, r3
 800af82:	d006      	beq.n	800af92 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	885b      	ldrh	r3, [r3, #2]
 800af88:	8afa      	ldrh	r2, [r7, #22]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d001      	beq.n	800af92 <mem_link_valid+0x6a>
    return 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	e000      	b.n	800af94 <mem_link_valid+0x6c>
  }
  return 1;
 800af92:	2301      	movs	r3, #1
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	2000a460 	.word	0x2000a460

0800afa0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b088      	sub	sp, #32
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d070      	beq.n	800b090 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f003 0303 	and.w	r3, r3, #3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00d      	beq.n	800afd4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800afb8:	4b37      	ldr	r3, [pc, #220]	@ (800b098 <mem_free+0xf8>)
 800afba:	f240 2273 	movw	r2, #627	@ 0x273
 800afbe:	4937      	ldr	r1, [pc, #220]	@ (800b09c <mem_free+0xfc>)
 800afc0:	4837      	ldr	r0, [pc, #220]	@ (800b0a0 <mem_free+0x100>)
 800afc2:	f005 f9b7 	bl	8010334 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800afc6:	f005 f85f 	bl	8010088 <sys_arch_protect>
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f005 f869 	bl	80100a4 <sys_arch_unprotect>
    return;
 800afd2:	e05e      	b.n	800b092 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3b08      	subs	r3, #8
 800afd8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800afda:	4b32      	ldr	r3, [pc, #200]	@ (800b0a4 <mem_free+0x104>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69fa      	ldr	r2, [r7, #28]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d306      	bcc.n	800aff2 <mem_free+0x52>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f103 020c 	add.w	r2, r3, #12
 800afea:	4b2f      	ldr	r3, [pc, #188]	@ (800b0a8 <mem_free+0x108>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d90d      	bls.n	800b00e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800aff2:	4b29      	ldr	r3, [pc, #164]	@ (800b098 <mem_free+0xf8>)
 800aff4:	f240 227f 	movw	r2, #639	@ 0x27f
 800aff8:	492c      	ldr	r1, [pc, #176]	@ (800b0ac <mem_free+0x10c>)
 800affa:	4829      	ldr	r0, [pc, #164]	@ (800b0a0 <mem_free+0x100>)
 800affc:	f005 f99a 	bl	8010334 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b000:	f005 f842 	bl	8010088 <sys_arch_protect>
 800b004:	6138      	str	r0, [r7, #16]
 800b006:	6938      	ldr	r0, [r7, #16]
 800b008:	f005 f84c 	bl	80100a4 <sys_arch_unprotect>
    return;
 800b00c:	e041      	b.n	800b092 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b00e:	4828      	ldr	r0, [pc, #160]	@ (800b0b0 <mem_free+0x110>)
 800b010:	f004 fff8 	bl	8010004 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	791b      	ldrb	r3, [r3, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d110      	bne.n	800b03e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b01c:	4b1e      	ldr	r3, [pc, #120]	@ (800b098 <mem_free+0xf8>)
 800b01e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b022:	4924      	ldr	r1, [pc, #144]	@ (800b0b4 <mem_free+0x114>)
 800b024:	481e      	ldr	r0, [pc, #120]	@ (800b0a0 <mem_free+0x100>)
 800b026:	f005 f985 	bl	8010334 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b02a:	4821      	ldr	r0, [pc, #132]	@ (800b0b0 <mem_free+0x110>)
 800b02c:	f004 fff9 	bl	8010022 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b030:	f005 f82a 	bl	8010088 <sys_arch_protect>
 800b034:	6178      	str	r0, [r7, #20]
 800b036:	6978      	ldr	r0, [r7, #20]
 800b038:	f005 f834 	bl	80100a4 <sys_arch_unprotect>
    return;
 800b03c:	e029      	b.n	800b092 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b03e:	69f8      	ldr	r0, [r7, #28]
 800b040:	f7ff ff72 	bl	800af28 <mem_link_valid>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d110      	bne.n	800b06c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b04a:	4b13      	ldr	r3, [pc, #76]	@ (800b098 <mem_free+0xf8>)
 800b04c:	f240 2295 	movw	r2, #661	@ 0x295
 800b050:	4919      	ldr	r1, [pc, #100]	@ (800b0b8 <mem_free+0x118>)
 800b052:	4813      	ldr	r0, [pc, #76]	@ (800b0a0 <mem_free+0x100>)
 800b054:	f005 f96e 	bl	8010334 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b058:	4815      	ldr	r0, [pc, #84]	@ (800b0b0 <mem_free+0x110>)
 800b05a:	f004 ffe2 	bl	8010022 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b05e:	f005 f813 	bl	8010088 <sys_arch_protect>
 800b062:	61b8      	str	r0, [r7, #24]
 800b064:	69b8      	ldr	r0, [r7, #24]
 800b066:	f005 f81d 	bl	80100a4 <sys_arch_unprotect>
    return;
 800b06a:	e012      	b.n	800b092 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	2200      	movs	r2, #0
 800b070:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b072:	4b12      	ldr	r3, [pc, #72]	@ (800b0bc <mem_free+0x11c>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d202      	bcs.n	800b082 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b07c:	4a0f      	ldr	r2, [pc, #60]	@ (800b0bc <mem_free+0x11c>)
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b082:	69f8      	ldr	r0, [r7, #28]
 800b084:	f7ff fe5c 	bl	800ad40 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b088:	4809      	ldr	r0, [pc, #36]	@ (800b0b0 <mem_free+0x110>)
 800b08a:	f004 ffca 	bl	8010022 <sys_mutex_unlock>
 800b08e:	e000      	b.n	800b092 <mem_free+0xf2>
    return;
 800b090:	bf00      	nop
}
 800b092:	3720      	adds	r7, #32
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	08011ca4 	.word	0x08011ca4
 800b09c:	08011d94 	.word	0x08011d94
 800b0a0:	08011cec 	.word	0x08011cec
 800b0a4:	2000a45c 	.word	0x2000a45c
 800b0a8:	2000a460 	.word	0x2000a460
 800b0ac:	08011db8 	.word	0x08011db8
 800b0b0:	2000a464 	.word	0x2000a464
 800b0b4:	08011dd4 	.word	0x08011dd4
 800b0b8:	08011dfc 	.word	0x08011dfc
 800b0bc:	2000a468 	.word	0x2000a468

0800b0c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b0cc:	887b      	ldrh	r3, [r7, #2]
 800b0ce:	3303      	adds	r3, #3
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b0d8:	8bfb      	ldrh	r3, [r7, #30]
 800b0da:	2b0b      	cmp	r3, #11
 800b0dc:	d801      	bhi.n	800b0e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b0de:	230c      	movs	r3, #12
 800b0e0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b0e2:	8bfb      	ldrh	r3, [r7, #30]
 800b0e4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b0e8:	d803      	bhi.n	800b0f2 <mem_trim+0x32>
 800b0ea:	8bfa      	ldrh	r2, [r7, #30]
 800b0ec:	887b      	ldrh	r3, [r7, #2]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d201      	bcs.n	800b0f6 <mem_trim+0x36>
    return NULL;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e0d8      	b.n	800b2a8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b0f6:	4b6e      	ldr	r3, [pc, #440]	@ (800b2b0 <mem_trim+0x1f0>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d304      	bcc.n	800b10a <mem_trim+0x4a>
 800b100:	4b6c      	ldr	r3, [pc, #432]	@ (800b2b4 <mem_trim+0x1f4>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	429a      	cmp	r2, r3
 800b108:	d306      	bcc.n	800b118 <mem_trim+0x58>
 800b10a:	4b6b      	ldr	r3, [pc, #428]	@ (800b2b8 <mem_trim+0x1f8>)
 800b10c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b110:	496a      	ldr	r1, [pc, #424]	@ (800b2bc <mem_trim+0x1fc>)
 800b112:	486b      	ldr	r0, [pc, #428]	@ (800b2c0 <mem_trim+0x200>)
 800b114:	f005 f90e 	bl	8010334 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b118:	4b65      	ldr	r3, [pc, #404]	@ (800b2b0 <mem_trim+0x1f0>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d304      	bcc.n	800b12c <mem_trim+0x6c>
 800b122:	4b64      	ldr	r3, [pc, #400]	@ (800b2b4 <mem_trim+0x1f4>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d307      	bcc.n	800b13c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b12c:	f004 ffac 	bl	8010088 <sys_arch_protect>
 800b130:	60b8      	str	r0, [r7, #8]
 800b132:	68b8      	ldr	r0, [r7, #8]
 800b134:	f004 ffb6 	bl	80100a4 <sys_arch_unprotect>
    return rmem;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	e0b5      	b.n	800b2a8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3b08      	subs	r3, #8
 800b140:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b142:	69b8      	ldr	r0, [r7, #24]
 800b144:	f7ff fdea 	bl	800ad1c <mem_to_ptr>
 800b148:	4603      	mov	r3, r0
 800b14a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	881a      	ldrh	r2, [r3, #0]
 800b150:	8afb      	ldrh	r3, [r7, #22]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	b29b      	uxth	r3, r3
 800b156:	3b08      	subs	r3, #8
 800b158:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b15a:	8bfa      	ldrh	r2, [r7, #30]
 800b15c:	8abb      	ldrh	r3, [r7, #20]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d906      	bls.n	800b170 <mem_trim+0xb0>
 800b162:	4b55      	ldr	r3, [pc, #340]	@ (800b2b8 <mem_trim+0x1f8>)
 800b164:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b168:	4956      	ldr	r1, [pc, #344]	@ (800b2c4 <mem_trim+0x204>)
 800b16a:	4855      	ldr	r0, [pc, #340]	@ (800b2c0 <mem_trim+0x200>)
 800b16c:	f005 f8e2 	bl	8010334 <iprintf>
  if (newsize > size) {
 800b170:	8bfa      	ldrh	r2, [r7, #30]
 800b172:	8abb      	ldrh	r3, [r7, #20]
 800b174:	429a      	cmp	r2, r3
 800b176:	d901      	bls.n	800b17c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b178:	2300      	movs	r3, #0
 800b17a:	e095      	b.n	800b2a8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b17c:	8bfa      	ldrh	r2, [r7, #30]
 800b17e:	8abb      	ldrh	r3, [r7, #20]
 800b180:	429a      	cmp	r2, r3
 800b182:	d101      	bne.n	800b188 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	e08f      	b.n	800b2a8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b188:	484f      	ldr	r0, [pc, #316]	@ (800b2c8 <mem_trim+0x208>)
 800b18a:	f004 ff3b 	bl	8010004 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff fdb0 	bl	800acf8 <ptr_to_mem>
 800b198:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	791b      	ldrb	r3, [r3, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d13f      	bne.n	800b222 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b1aa:	d106      	bne.n	800b1ba <mem_trim+0xfa>
 800b1ac:	4b42      	ldr	r3, [pc, #264]	@ (800b2b8 <mem_trim+0x1f8>)
 800b1ae:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b1b2:	4946      	ldr	r1, [pc, #280]	@ (800b2cc <mem_trim+0x20c>)
 800b1b4:	4842      	ldr	r0, [pc, #264]	@ (800b2c0 <mem_trim+0x200>)
 800b1b6:	f005 f8bd 	bl	8010334 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b1c0:	8afa      	ldrh	r2, [r7, #22]
 800b1c2:	8bfb      	ldrh	r3, [r7, #30]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b1cc:	4b40      	ldr	r3, [pc, #256]	@ (800b2d0 <mem_trim+0x210>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d106      	bne.n	800b1e4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b1d6:	89fb      	ldrh	r3, [r7, #14]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fd8d 	bl	800acf8 <ptr_to_mem>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	4a3b      	ldr	r2, [pc, #236]	@ (800b2d0 <mem_trim+0x210>)
 800b1e2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b1e4:	89fb      	ldrh	r3, [r7, #14]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff fd86 	bl	800acf8 <ptr_to_mem>
 800b1ec:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	89ba      	ldrh	r2, [r7, #12]
 800b1f8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	8afa      	ldrh	r2, [r7, #22]
 800b1fe:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	89fa      	ldrh	r2, [r7, #14]
 800b204:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b20e:	d047      	beq.n	800b2a0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fd6f 	bl	800acf8 <ptr_to_mem>
 800b21a:	4602      	mov	r2, r0
 800b21c:	89fb      	ldrh	r3, [r7, #14]
 800b21e:	8053      	strh	r3, [r2, #2]
 800b220:	e03e      	b.n	800b2a0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b222:	8bfb      	ldrh	r3, [r7, #30]
 800b224:	f103 0214 	add.w	r2, r3, #20
 800b228:	8abb      	ldrh	r3, [r7, #20]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d838      	bhi.n	800b2a0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b22e:	8afa      	ldrh	r2, [r7, #22]
 800b230:	8bfb      	ldrh	r3, [r7, #30]
 800b232:	4413      	add	r3, r2
 800b234:	b29b      	uxth	r3, r3
 800b236:	3308      	adds	r3, #8
 800b238:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b242:	d106      	bne.n	800b252 <mem_trim+0x192>
 800b244:	4b1c      	ldr	r3, [pc, #112]	@ (800b2b8 <mem_trim+0x1f8>)
 800b246:	f240 3216 	movw	r2, #790	@ 0x316
 800b24a:	4920      	ldr	r1, [pc, #128]	@ (800b2cc <mem_trim+0x20c>)
 800b24c:	481c      	ldr	r0, [pc, #112]	@ (800b2c0 <mem_trim+0x200>)
 800b24e:	f005 f871 	bl	8010334 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b252:	89fb      	ldrh	r3, [r7, #14]
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff fd4f 	bl	800acf8 <ptr_to_mem>
 800b25a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b25c:	4b1c      	ldr	r3, [pc, #112]	@ (800b2d0 <mem_trim+0x210>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	429a      	cmp	r2, r3
 800b264:	d202      	bcs.n	800b26c <mem_trim+0x1ac>
      lfree = mem2;
 800b266:	4a1a      	ldr	r2, [pc, #104]	@ (800b2d0 <mem_trim+0x210>)
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	2200      	movs	r2, #0
 800b270:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	881a      	ldrh	r2, [r3, #0]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	8afa      	ldrh	r2, [r7, #22]
 800b27e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	89fa      	ldrh	r2, [r7, #14]
 800b284:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	881b      	ldrh	r3, [r3, #0]
 800b28a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b28e:	d007      	beq.n	800b2a0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	881b      	ldrh	r3, [r3, #0]
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff fd2f 	bl	800acf8 <ptr_to_mem>
 800b29a:	4602      	mov	r2, r0
 800b29c:	89fb      	ldrh	r3, [r7, #14]
 800b29e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b2a0:	4809      	ldr	r0, [pc, #36]	@ (800b2c8 <mem_trim+0x208>)
 800b2a2:	f004 febe 	bl	8010022 <sys_mutex_unlock>
  return rmem;
 800b2a6:	687b      	ldr	r3, [r7, #4]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3720      	adds	r7, #32
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	2000a45c 	.word	0x2000a45c
 800b2b4:	2000a460 	.word	0x2000a460
 800b2b8:	08011ca4 	.word	0x08011ca4
 800b2bc:	08011e30 	.word	0x08011e30
 800b2c0:	08011cec 	.word	0x08011cec
 800b2c4:	08011e48 	.word	0x08011e48
 800b2c8:	2000a464 	.word	0x2000a464
 800b2cc:	08011e68 	.word	0x08011e68
 800b2d0:	2000a468 	.word	0x2000a468

0800b2d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b2de:	88fb      	ldrh	r3, [r7, #6]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <mem_malloc+0x14>
    return NULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	e0e2      	b.n	800b4ae <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b2e8:	88fb      	ldrh	r3, [r7, #6]
 800b2ea:	3303      	adds	r3, #3
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	f023 0303 	bic.w	r3, r3, #3
 800b2f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b2f4:	8bbb      	ldrh	r3, [r7, #28]
 800b2f6:	2b0b      	cmp	r3, #11
 800b2f8:	d801      	bhi.n	800b2fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b2fa:	230c      	movs	r3, #12
 800b2fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b2fe:	8bbb      	ldrh	r3, [r7, #28]
 800b300:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b304:	d803      	bhi.n	800b30e <mem_malloc+0x3a>
 800b306:	8bba      	ldrh	r2, [r7, #28]
 800b308:	88fb      	ldrh	r3, [r7, #6]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d201      	bcs.n	800b312 <mem_malloc+0x3e>
    return NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	e0cd      	b.n	800b4ae <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b312:	4869      	ldr	r0, [pc, #420]	@ (800b4b8 <mem_malloc+0x1e4>)
 800b314:	f004 fe76 	bl	8010004 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b318:	4b68      	ldr	r3, [pc, #416]	@ (800b4bc <mem_malloc+0x1e8>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff fcfd 	bl	800ad1c <mem_to_ptr>
 800b322:	4603      	mov	r3, r0
 800b324:	83fb      	strh	r3, [r7, #30]
 800b326:	e0b7      	b.n	800b498 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b328:	8bfb      	ldrh	r3, [r7, #30]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff fce4 	bl	800acf8 <ptr_to_mem>
 800b330:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	791b      	ldrb	r3, [r3, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	f040 80a7 	bne.w	800b48a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	461a      	mov	r2, r3
 800b342:	8bfb      	ldrh	r3, [r7, #30]
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	f1a3 0208 	sub.w	r2, r3, #8
 800b34a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b34c:	429a      	cmp	r2, r3
 800b34e:	f0c0 809c 	bcc.w	800b48a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	8bfb      	ldrh	r3, [r7, #30]
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	f1a3 0208 	sub.w	r2, r3, #8
 800b360:	8bbb      	ldrh	r3, [r7, #28]
 800b362:	3314      	adds	r3, #20
 800b364:	429a      	cmp	r2, r3
 800b366:	d333      	bcc.n	800b3d0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b368:	8bfa      	ldrh	r2, [r7, #30]
 800b36a:	8bbb      	ldrh	r3, [r7, #28]
 800b36c:	4413      	add	r3, r2
 800b36e:	b29b      	uxth	r3, r3
 800b370:	3308      	adds	r3, #8
 800b372:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b374:	8a7b      	ldrh	r3, [r7, #18]
 800b376:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b37a:	d106      	bne.n	800b38a <mem_malloc+0xb6>
 800b37c:	4b50      	ldr	r3, [pc, #320]	@ (800b4c0 <mem_malloc+0x1ec>)
 800b37e:	f240 3287 	movw	r2, #903	@ 0x387
 800b382:	4950      	ldr	r1, [pc, #320]	@ (800b4c4 <mem_malloc+0x1f0>)
 800b384:	4850      	ldr	r0, [pc, #320]	@ (800b4c8 <mem_malloc+0x1f4>)
 800b386:	f004 ffd5 	bl	8010334 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b38a:	8a7b      	ldrh	r3, [r7, #18]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fcb3 	bl	800acf8 <ptr_to_mem>
 800b392:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	881a      	ldrh	r2, [r3, #0]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	8bfa      	ldrh	r2, [r7, #30]
 800b3a6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	8a7a      	ldrh	r2, [r7, #18]
 800b3ac:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b3bc:	d00b      	beq.n	800b3d6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff fc98 	bl	800acf8 <ptr_to_mem>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	8a7b      	ldrh	r3, [r7, #18]
 800b3cc:	8053      	strh	r3, [r2, #2]
 800b3ce:	e002      	b.n	800b3d6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b3d6:	4b39      	ldr	r3, [pc, #228]	@ (800b4bc <mem_malloc+0x1e8>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d127      	bne.n	800b430 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b3e0:	4b36      	ldr	r3, [pc, #216]	@ (800b4bc <mem_malloc+0x1e8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b3e6:	e005      	b.n	800b3f4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff fc83 	bl	800acf8 <ptr_to_mem>
 800b3f2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	791b      	ldrb	r3, [r3, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d004      	beq.n	800b406 <mem_malloc+0x132>
 800b3fc:	4b33      	ldr	r3, [pc, #204]	@ (800b4cc <mem_malloc+0x1f8>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	69ba      	ldr	r2, [r7, #24]
 800b402:	429a      	cmp	r2, r3
 800b404:	d1f0      	bne.n	800b3e8 <mem_malloc+0x114>
          }
          lfree = cur;
 800b406:	4a2d      	ldr	r2, [pc, #180]	@ (800b4bc <mem_malloc+0x1e8>)
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b40c:	4b2b      	ldr	r3, [pc, #172]	@ (800b4bc <mem_malloc+0x1e8>)
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	4b2e      	ldr	r3, [pc, #184]	@ (800b4cc <mem_malloc+0x1f8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	429a      	cmp	r2, r3
 800b416:	d00b      	beq.n	800b430 <mem_malloc+0x15c>
 800b418:	4b28      	ldr	r3, [pc, #160]	@ (800b4bc <mem_malloc+0x1e8>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	791b      	ldrb	r3, [r3, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d006      	beq.n	800b430 <mem_malloc+0x15c>
 800b422:	4b27      	ldr	r3, [pc, #156]	@ (800b4c0 <mem_malloc+0x1ec>)
 800b424:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b428:	4929      	ldr	r1, [pc, #164]	@ (800b4d0 <mem_malloc+0x1fc>)
 800b42a:	4827      	ldr	r0, [pc, #156]	@ (800b4c8 <mem_malloc+0x1f4>)
 800b42c:	f004 ff82 	bl	8010334 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b430:	4821      	ldr	r0, [pc, #132]	@ (800b4b8 <mem_malloc+0x1e4>)
 800b432:	f004 fdf6 	bl	8010022 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b436:	8bba      	ldrh	r2, [r7, #28]
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	4413      	add	r3, r2
 800b43c:	3308      	adds	r3, #8
 800b43e:	4a23      	ldr	r2, [pc, #140]	@ (800b4cc <mem_malloc+0x1f8>)
 800b440:	6812      	ldr	r2, [r2, #0]
 800b442:	4293      	cmp	r3, r2
 800b444:	d906      	bls.n	800b454 <mem_malloc+0x180>
 800b446:	4b1e      	ldr	r3, [pc, #120]	@ (800b4c0 <mem_malloc+0x1ec>)
 800b448:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b44c:	4921      	ldr	r1, [pc, #132]	@ (800b4d4 <mem_malloc+0x200>)
 800b44e:	481e      	ldr	r0, [pc, #120]	@ (800b4c8 <mem_malloc+0x1f4>)
 800b450:	f004 ff70 	bl	8010334 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f003 0303 	and.w	r3, r3, #3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d006      	beq.n	800b46c <mem_malloc+0x198>
 800b45e:	4b18      	ldr	r3, [pc, #96]	@ (800b4c0 <mem_malloc+0x1ec>)
 800b460:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b464:	491c      	ldr	r1, [pc, #112]	@ (800b4d8 <mem_malloc+0x204>)
 800b466:	4818      	ldr	r0, [pc, #96]	@ (800b4c8 <mem_malloc+0x1f4>)
 800b468:	f004 ff64 	bl	8010334 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f003 0303 	and.w	r3, r3, #3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d006      	beq.n	800b484 <mem_malloc+0x1b0>
 800b476:	4b12      	ldr	r3, [pc, #72]	@ (800b4c0 <mem_malloc+0x1ec>)
 800b478:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b47c:	4917      	ldr	r1, [pc, #92]	@ (800b4dc <mem_malloc+0x208>)
 800b47e:	4812      	ldr	r0, [pc, #72]	@ (800b4c8 <mem_malloc+0x1f4>)
 800b480:	f004 ff58 	bl	8010334 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	3308      	adds	r3, #8
 800b488:	e011      	b.n	800b4ae <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b48a:	8bfb      	ldrh	r3, [r7, #30]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7ff fc33 	bl	800acf8 <ptr_to_mem>
 800b492:	4603      	mov	r3, r0
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b498:	8bfa      	ldrh	r2, [r7, #30]
 800b49a:	8bbb      	ldrh	r3, [r7, #28]
 800b49c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	f4ff af41 	bcc.w	800b328 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b4a6:	4804      	ldr	r0, [pc, #16]	@ (800b4b8 <mem_malloc+0x1e4>)
 800b4a8:	f004 fdbb 	bl	8010022 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3720      	adds	r7, #32
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	2000a464 	.word	0x2000a464
 800b4bc:	2000a468 	.word	0x2000a468
 800b4c0:	08011ca4 	.word	0x08011ca4
 800b4c4:	08011e68 	.word	0x08011e68
 800b4c8:	08011cec 	.word	0x08011cec
 800b4cc:	2000a460 	.word	0x2000a460
 800b4d0:	08011e7c 	.word	0x08011e7c
 800b4d4:	08011e98 	.word	0x08011e98
 800b4d8:	08011ec8 	.word	0x08011ec8
 800b4dc:	08011ef8 	.word	0x08011ef8

0800b4e0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	3303      	adds	r3, #3
 800b4f6:	f023 0303 	bic.w	r3, r3, #3
 800b4fa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	e011      	b.n	800b526 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	461a      	mov	r2, r3
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	4413      	add	r3, r2
 800b51e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	3301      	adds	r3, #1
 800b524:	60fb      	str	r3, [r7, #12]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	885b      	ldrh	r3, [r3, #2]
 800b52a:	461a      	mov	r2, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	4293      	cmp	r3, r2
 800b530:	dbe7      	blt.n	800b502 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b532:	bf00      	nop
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b546:	2300      	movs	r3, #0
 800b548:	80fb      	strh	r3, [r7, #6]
 800b54a:	e009      	b.n	800b560 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b54c:	88fb      	ldrh	r3, [r7, #6]
 800b54e:	4a08      	ldr	r2, [pc, #32]	@ (800b570 <memp_init+0x30>)
 800b550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b554:	4618      	mov	r0, r3
 800b556:	f7ff ffc3 	bl	800b4e0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b55a:	88fb      	ldrh	r3, [r7, #6]
 800b55c:	3301      	adds	r3, #1
 800b55e:	80fb      	strh	r3, [r7, #6]
 800b560:	88fb      	ldrh	r3, [r7, #6]
 800b562:	2b09      	cmp	r3, #9
 800b564:	d9f2      	bls.n	800b54c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b566:	bf00      	nop
 800b568:	bf00      	nop
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	08013320 	.word	0x08013320

0800b574 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b57c:	f004 fd84 	bl	8010088 <sys_arch_protect>
 800b580:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d015      	beq.n	800b5bc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	6812      	ldr	r2, [r2, #0]
 800b598:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	f003 0303 	and.w	r3, r3, #3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d006      	beq.n	800b5b2 <do_memp_malloc_pool+0x3e>
 800b5a4:	4b09      	ldr	r3, [pc, #36]	@ (800b5cc <do_memp_malloc_pool+0x58>)
 800b5a6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b5aa:	4909      	ldr	r1, [pc, #36]	@ (800b5d0 <do_memp_malloc_pool+0x5c>)
 800b5ac:	4809      	ldr	r0, [pc, #36]	@ (800b5d4 <do_memp_malloc_pool+0x60>)
 800b5ae:	f004 fec1 	bl	8010334 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f004 fd76 	bl	80100a4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	e003      	b.n	800b5c4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f004 fd71 	bl	80100a4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	08011f1c 	.word	0x08011f1c
 800b5d0:	08011f4c 	.word	0x08011f4c
 800b5d4:	08011f70 	.word	0x08011f70

0800b5d8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d106      	bne.n	800b5f4 <memp_malloc_pool+0x1c>
 800b5e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b610 <memp_malloc_pool+0x38>)
 800b5e8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b5ec:	4909      	ldr	r1, [pc, #36]	@ (800b614 <memp_malloc_pool+0x3c>)
 800b5ee:	480a      	ldr	r0, [pc, #40]	@ (800b618 <memp_malloc_pool+0x40>)
 800b5f0:	f004 fea0 	bl	8010334 <iprintf>
  if (desc == NULL) {
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <memp_malloc_pool+0x26>
    return NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e003      	b.n	800b606 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7ff ffb8 	bl	800b574 <do_memp_malloc_pool>
 800b604:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	08011f1c 	.word	0x08011f1c
 800b614:	08011f98 	.word	0x08011f98
 800b618:	08011f70 	.word	0x08011f70

0800b61c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	2b09      	cmp	r3, #9
 800b62a:	d908      	bls.n	800b63e <memp_malloc+0x22>
 800b62c:	4b0a      	ldr	r3, [pc, #40]	@ (800b658 <memp_malloc+0x3c>)
 800b62e:	f240 1257 	movw	r2, #343	@ 0x157
 800b632:	490a      	ldr	r1, [pc, #40]	@ (800b65c <memp_malloc+0x40>)
 800b634:	480a      	ldr	r0, [pc, #40]	@ (800b660 <memp_malloc+0x44>)
 800b636:	f004 fe7d 	bl	8010334 <iprintf>
 800b63a:	2300      	movs	r3, #0
 800b63c:	e008      	b.n	800b650 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b63e:	79fb      	ldrb	r3, [r7, #7]
 800b640:	4a08      	ldr	r2, [pc, #32]	@ (800b664 <memp_malloc+0x48>)
 800b642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff ff94 	bl	800b574 <do_memp_malloc_pool>
 800b64c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b64e:	68fb      	ldr	r3, [r7, #12]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	08011f1c 	.word	0x08011f1c
 800b65c:	08011fac 	.word	0x08011fac
 800b660:	08011f70 	.word	0x08011f70
 800b664:	08013320 	.word	0x08013320

0800b668 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	f003 0303 	and.w	r3, r3, #3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d006      	beq.n	800b68a <do_memp_free_pool+0x22>
 800b67c:	4b0d      	ldr	r3, [pc, #52]	@ (800b6b4 <do_memp_free_pool+0x4c>)
 800b67e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b682:	490d      	ldr	r1, [pc, #52]	@ (800b6b8 <do_memp_free_pool+0x50>)
 800b684:	480d      	ldr	r0, [pc, #52]	@ (800b6bc <do_memp_free_pool+0x54>)
 800b686:	f004 fe55 	bl	8010334 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b68e:	f004 fcfb 	bl	8010088 <sys_arch_protect>
 800b692:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b6a6:	68b8      	ldr	r0, [r7, #8]
 800b6a8:	f004 fcfc 	bl	80100a4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b6ac:	bf00      	nop
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	08011f1c 	.word	0x08011f1c
 800b6b8:	08011fcc 	.word	0x08011fcc
 800b6bc:	08011f70 	.word	0x08011f70

0800b6c0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d106      	bne.n	800b6de <memp_free_pool+0x1e>
 800b6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b6fc <memp_free_pool+0x3c>)
 800b6d2:	f240 1295 	movw	r2, #405	@ 0x195
 800b6d6:	490a      	ldr	r1, [pc, #40]	@ (800b700 <memp_free_pool+0x40>)
 800b6d8:	480a      	ldr	r0, [pc, #40]	@ (800b704 <memp_free_pool+0x44>)
 800b6da:	f004 fe2b 	bl	8010334 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d007      	beq.n	800b6f4 <memp_free_pool+0x34>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d004      	beq.n	800b6f4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7ff ffbb 	bl	800b668 <do_memp_free_pool>
 800b6f2:	e000      	b.n	800b6f6 <memp_free_pool+0x36>
    return;
 800b6f4:	bf00      	nop
}
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	08011f1c 	.word	0x08011f1c
 800b700:	08011f98 	.word	0x08011f98
 800b704:	08011f70 	.word	0x08011f70

0800b708 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b714:	79fb      	ldrb	r3, [r7, #7]
 800b716:	2b09      	cmp	r3, #9
 800b718:	d907      	bls.n	800b72a <memp_free+0x22>
 800b71a:	4b0c      	ldr	r3, [pc, #48]	@ (800b74c <memp_free+0x44>)
 800b71c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b720:	490b      	ldr	r1, [pc, #44]	@ (800b750 <memp_free+0x48>)
 800b722:	480c      	ldr	r0, [pc, #48]	@ (800b754 <memp_free+0x4c>)
 800b724:	f004 fe06 	bl	8010334 <iprintf>
 800b728:	e00c      	b.n	800b744 <memp_free+0x3c>

  if (mem == NULL) {
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d008      	beq.n	800b742 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b730:	79fb      	ldrb	r3, [r7, #7]
 800b732:	4a09      	ldr	r2, [pc, #36]	@ (800b758 <memp_free+0x50>)
 800b734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7ff ff94 	bl	800b668 <do_memp_free_pool>
 800b740:	e000      	b.n	800b744 <memp_free+0x3c>
    return;
 800b742:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	08011f1c 	.word	0x08011f1c
 800b750:	08011fec 	.word	0x08011fec
 800b754:	08011f70 	.word	0x08011f70
 800b758:	08013320 	.word	0x08013320

0800b75c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b75c:	b480      	push	{r7}
 800b75e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b760:	bf00      	nop
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
	...

0800b76c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d108      	bne.n	800b792 <netif_add+0x26>
 800b780:	4b57      	ldr	r3, [pc, #348]	@ (800b8e0 <netif_add+0x174>)
 800b782:	f240 1227 	movw	r2, #295	@ 0x127
 800b786:	4957      	ldr	r1, [pc, #348]	@ (800b8e4 <netif_add+0x178>)
 800b788:	4857      	ldr	r0, [pc, #348]	@ (800b8e8 <netif_add+0x17c>)
 800b78a:	f004 fdd3 	bl	8010334 <iprintf>
 800b78e:	2300      	movs	r3, #0
 800b790:	e0a2      	b.n	800b8d8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	2b00      	cmp	r3, #0
 800b796:	d108      	bne.n	800b7aa <netif_add+0x3e>
 800b798:	4b51      	ldr	r3, [pc, #324]	@ (800b8e0 <netif_add+0x174>)
 800b79a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b79e:	4953      	ldr	r1, [pc, #332]	@ (800b8ec <netif_add+0x180>)
 800b7a0:	4851      	ldr	r0, [pc, #324]	@ (800b8e8 <netif_add+0x17c>)
 800b7a2:	f004 fdc7 	bl	8010334 <iprintf>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	e096      	b.n	800b8d8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b7b0:	4b4f      	ldr	r3, [pc, #316]	@ (800b8f0 <netif_add+0x184>)
 800b7b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b7ba:	4b4d      	ldr	r3, [pc, #308]	@ (800b8f0 <netif_add+0x184>)
 800b7bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b7c4:	4b4a      	ldr	r3, [pc, #296]	@ (800b8f0 <netif_add+0x184>)
 800b7c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	4a45      	ldr	r2, [pc, #276]	@ (800b8f4 <netif_add+0x188>)
 800b7de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a3a      	ldr	r2, [r7, #32]
 800b7f8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b7fa:	4b3f      	ldr	r3, [pc, #252]	@ (800b8f8 <netif_add+0x18c>)
 800b7fc:	781a      	ldrb	r2, [r3, #0]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b808:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	68b9      	ldr	r1, [r7, #8]
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 f90f 	bl	800ba34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	4798      	blx	r3
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <netif_add+0xba>
    return NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	e058      	b.n	800b8d8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b82c:	2bff      	cmp	r3, #255	@ 0xff
 800b82e:	d103      	bne.n	800b838 <netif_add+0xcc>
        netif->num = 0;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b83c:	4b2f      	ldr	r3, [pc, #188]	@ (800b8fc <netif_add+0x190>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	617b      	str	r3, [r7, #20]
 800b842:	e02b      	b.n	800b89c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d106      	bne.n	800b85a <netif_add+0xee>
 800b84c:	4b24      	ldr	r3, [pc, #144]	@ (800b8e0 <netif_add+0x174>)
 800b84e:	f240 128b 	movw	r2, #395	@ 0x18b
 800b852:	492b      	ldr	r1, [pc, #172]	@ (800b900 <netif_add+0x194>)
 800b854:	4824      	ldr	r0, [pc, #144]	@ (800b8e8 <netif_add+0x17c>)
 800b856:	f004 fd6d 	bl	8010334 <iprintf>
        num_netifs++;
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	3301      	adds	r3, #1
 800b85e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	2bff      	cmp	r3, #255	@ 0xff
 800b864:	dd06      	ble.n	800b874 <netif_add+0x108>
 800b866:	4b1e      	ldr	r3, [pc, #120]	@ (800b8e0 <netif_add+0x174>)
 800b868:	f240 128d 	movw	r2, #397	@ 0x18d
 800b86c:	4925      	ldr	r1, [pc, #148]	@ (800b904 <netif_add+0x198>)
 800b86e:	481e      	ldr	r0, [pc, #120]	@ (800b8e8 <netif_add+0x17c>)
 800b870:	f004 fd60 	bl	8010334 <iprintf>
        if (netif2->num == netif->num) {
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b880:	429a      	cmp	r2, r3
 800b882:	d108      	bne.n	800b896 <netif_add+0x12a>
          netif->num++;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b88a:	3301      	adds	r3, #1
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b894:	e005      	b.n	800b8a2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1d0      	bne.n	800b844 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1be      	bne.n	800b826 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8ae:	2bfe      	cmp	r3, #254	@ 0xfe
 800b8b0:	d103      	bne.n	800b8ba <netif_add+0x14e>
    netif_num = 0;
 800b8b2:	4b11      	ldr	r3, [pc, #68]	@ (800b8f8 <netif_add+0x18c>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	701a      	strb	r2, [r3, #0]
 800b8b8:	e006      	b.n	800b8c8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f8 <netif_add+0x18c>)
 800b8c6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b8fc <netif_add+0x190>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b8d0:	4a0a      	ldr	r2, [pc, #40]	@ (800b8fc <netif_add+0x190>)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	08012008 	.word	0x08012008
 800b8e4:	0801209c 	.word	0x0801209c
 800b8e8:	08012058 	.word	0x08012058
 800b8ec:	080120b8 	.word	0x080120b8
 800b8f0:	08013358 	.word	0x08013358
 800b8f4:	0800bd0f 	.word	0x0800bd0f
 800b8f8:	2000d00c 	.word	0x2000d00c
 800b8fc:	2000d004 	.word	0x2000d004
 800b900:	080120dc 	.word	0x080120dc
 800b904:	080120f0 	.word	0x080120f0

0800b908 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 fdf9 	bl	800d50c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b91a:	bf00      	nop
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
	...

0800b924 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d106      	bne.n	800b944 <netif_do_set_ipaddr+0x20>
 800b936:	4b1d      	ldr	r3, [pc, #116]	@ (800b9ac <netif_do_set_ipaddr+0x88>)
 800b938:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b93c:	491c      	ldr	r1, [pc, #112]	@ (800b9b0 <netif_do_set_ipaddr+0x8c>)
 800b93e:	481d      	ldr	r0, [pc, #116]	@ (800b9b4 <netif_do_set_ipaddr+0x90>)
 800b940:	f004 fcf8 	bl	8010334 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d106      	bne.n	800b958 <netif_do_set_ipaddr+0x34>
 800b94a:	4b18      	ldr	r3, [pc, #96]	@ (800b9ac <netif_do_set_ipaddr+0x88>)
 800b94c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b950:	4917      	ldr	r1, [pc, #92]	@ (800b9b0 <netif_do_set_ipaddr+0x8c>)
 800b952:	4818      	ldr	r0, [pc, #96]	@ (800b9b4 <netif_do_set_ipaddr+0x90>)
 800b954:	f004 fcee 	bl	8010334 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	3304      	adds	r3, #4
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	429a      	cmp	r2, r3
 800b964:	d01c      	beq.n	800b9a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	3304      	adds	r3, #4
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b976:	f107 0314 	add.w	r3, r7, #20
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f7ff ffc3 	bl	800b908 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <netif_do_set_ipaddr+0x6a>
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	e000      	b.n	800b990 <netif_do_set_ipaddr+0x6c>
 800b98e:	2300      	movs	r3, #0
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b994:	2101      	movs	r1, #1
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f8d2 	bl	800bb40 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b99c:	2301      	movs	r3, #1
 800b99e:	e000      	b.n	800b9a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3718      	adds	r7, #24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	08012008 	.word	0x08012008
 800b9b0:	08012120 	.word	0x08012120
 800b9b4:	08012058 	.word	0x08012058

0800b9b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d00a      	beq.n	800b9e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <netif_do_set_netmask+0x26>
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	e000      	b.n	800b9e0 <netif_do_set_netmask+0x28>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e000      	b.n	800b9ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3714      	adds	r7, #20
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b085      	sub	sp, #20
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	60f8      	str	r0, [r7, #12]
 800b9fe:	60b9      	str	r1, [r7, #8]
 800ba00:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	330c      	adds	r3, #12
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d00a      	beq.n	800ba26 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <netif_do_set_gw+0x26>
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	e000      	b.n	800ba1e <netif_do_set_gw+0x28>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ba22:	2301      	movs	r3, #1
 800ba24:	e000      	b.n	800ba28 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b088      	sub	sp, #32
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ba50:	4b1c      	ldr	r3, [pc, #112]	@ (800bac4 <netif_set_addr+0x90>)
 800ba52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ba5a:	4b1a      	ldr	r3, [pc, #104]	@ (800bac4 <netif_set_addr+0x90>)
 800ba5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ba64:	4b17      	ldr	r3, [pc, #92]	@ (800bac4 <netif_set_addr+0x90>)
 800ba66:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d003      	beq.n	800ba76 <netif_set_addr+0x42>
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <netif_set_addr+0x46>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e000      	b.n	800ba7c <netif_set_addr+0x48>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d006      	beq.n	800ba92 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ba84:	f107 0310 	add.w	r3, r7, #16
 800ba88:	461a      	mov	r2, r3
 800ba8a:	68b9      	ldr	r1, [r7, #8]
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f7ff ff49 	bl	800b924 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ba92:	69fa      	ldr	r2, [r7, #28]
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f7ff ff8e 	bl	800b9b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ba9c:	69ba      	ldr	r2, [r7, #24]
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f7ff ffa8 	bl	800b9f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d106      	bne.n	800baba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800baac:	f107 0310 	add.w	r3, r7, #16
 800bab0:	461a      	mov	r2, r3
 800bab2:	68b9      	ldr	r1, [r7, #8]
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff ff35 	bl	800b924 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800baba:	bf00      	nop
 800babc:	3720      	adds	r7, #32
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	08013358 	.word	0x08013358

0800bac8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bad0:	4a04      	ldr	r2, [pc, #16]	@ (800bae4 <netif_set_default+0x1c>)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bad6:	bf00      	nop
 800bad8:	370c      	adds	r7, #12
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	2000d008 	.word	0x2000d008

0800bae8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d107      	bne.n	800bb06 <netif_set_up+0x1e>
 800baf6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb34 <netif_set_up+0x4c>)
 800baf8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800bafc:	490e      	ldr	r1, [pc, #56]	@ (800bb38 <netif_set_up+0x50>)
 800bafe:	480f      	ldr	r0, [pc, #60]	@ (800bb3c <netif_set_up+0x54>)
 800bb00:	f004 fc18 	bl	8010334 <iprintf>
 800bb04:	e013      	b.n	800bb2e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb0c:	f003 0301 	and.w	r3, r3, #1
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10c      	bne.n	800bb2e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb1a:	f043 0301 	orr.w	r3, r3, #1
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bb26:	2103      	movs	r1, #3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f809 	bl	800bb40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	08012008 	.word	0x08012008
 800bb38:	08012190 	.word	0x08012190
 800bb3c:	08012058 	.word	0x08012058

0800bb40 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d106      	bne.n	800bb60 <netif_issue_reports+0x20>
 800bb52:	4b18      	ldr	r3, [pc, #96]	@ (800bbb4 <netif_issue_reports+0x74>)
 800bb54:	f240 326d 	movw	r2, #877	@ 0x36d
 800bb58:	4917      	ldr	r1, [pc, #92]	@ (800bbb8 <netif_issue_reports+0x78>)
 800bb5a:	4818      	ldr	r0, [pc, #96]	@ (800bbbc <netif_issue_reports+0x7c>)
 800bb5c:	f004 fbea 	bl	8010334 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb66:	f003 0304 	and.w	r3, r3, #4
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d01e      	beq.n	800bbac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb74:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d017      	beq.n	800bbac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bb7c:	78fb      	ldrb	r3, [r7, #3]
 800bb7e:	f003 0301 	and.w	r3, r3, #1
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d013      	beq.n	800bbae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00e      	beq.n	800bbae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb96:	f003 0308 	and.w	r3, r3, #8
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d007      	beq.n	800bbae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f002 fc1b 	bl	800e3e0 <etharp_request>
 800bbaa:	e000      	b.n	800bbae <netif_issue_reports+0x6e>
    return;
 800bbac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	08012008 	.word	0x08012008
 800bbb8:	080121ac 	.word	0x080121ac
 800bbbc:	08012058 	.word	0x08012058

0800bbc0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d107      	bne.n	800bbde <netif_set_down+0x1e>
 800bbce:	4b12      	ldr	r3, [pc, #72]	@ (800bc18 <netif_set_down+0x58>)
 800bbd0:	f240 329b 	movw	r2, #923	@ 0x39b
 800bbd4:	4911      	ldr	r1, [pc, #68]	@ (800bc1c <netif_set_down+0x5c>)
 800bbd6:	4812      	ldr	r0, [pc, #72]	@ (800bc20 <netif_set_down+0x60>)
 800bbd8:	f004 fbac 	bl	8010334 <iprintf>
 800bbdc:	e019      	b.n	800bc12 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bbe4:	f003 0301 	and.w	r3, r3, #1
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d012      	beq.n	800bc12 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bbf2:	f023 0301 	bic.w	r3, r3, #1
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc04:	f003 0308 	and.w	r3, r3, #8
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f001 ffa5 	bl	800db5c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	08012008 	.word	0x08012008
 800bc1c:	080121d0 	.word	0x080121d0
 800bc20:	08012058 	.word	0x08012058

0800bc24 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d107      	bne.n	800bc42 <netif_set_link_up+0x1e>
 800bc32:	4b13      	ldr	r3, [pc, #76]	@ (800bc80 <netif_set_link_up+0x5c>)
 800bc34:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800bc38:	4912      	ldr	r1, [pc, #72]	@ (800bc84 <netif_set_link_up+0x60>)
 800bc3a:	4813      	ldr	r0, [pc, #76]	@ (800bc88 <netif_set_link_up+0x64>)
 800bc3c:	f004 fb7a 	bl	8010334 <iprintf>
 800bc40:	e01b      	b.n	800bc7a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d114      	bne.n	800bc7a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc56:	f043 0304 	orr.w	r3, r3, #4
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bc62:	2103      	movs	r1, #3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff ff6b 	bl	800bb40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <netif_set_link_up+0x56>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	69db      	ldr	r3, [r3, #28]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	08012008 	.word	0x08012008
 800bc84:	080121f0 	.word	0x080121f0
 800bc88:	08012058 	.word	0x08012058

0800bc8c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d107      	bne.n	800bcaa <netif_set_link_down+0x1e>
 800bc9a:	4b11      	ldr	r3, [pc, #68]	@ (800bce0 <netif_set_link_down+0x54>)
 800bc9c:	f240 4206 	movw	r2, #1030	@ 0x406
 800bca0:	4910      	ldr	r1, [pc, #64]	@ (800bce4 <netif_set_link_down+0x58>)
 800bca2:	4811      	ldr	r0, [pc, #68]	@ (800bce8 <netif_set_link_down+0x5c>)
 800bca4:	f004 fb46 	bl	8010334 <iprintf>
 800bca8:	e017      	b.n	800bcda <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d010      	beq.n	800bcda <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bcbe:	f023 0304 	bic.w	r3, r3, #4
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <netif_set_link_down+0x4e>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	69db      	ldr	r3, [r3, #28]
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	08012008 	.word	0x08012008
 800bce4:	08012214 	.word	0x08012214
 800bce8:	08012058 	.word	0x08012058

0800bcec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	61da      	str	r2, [r3, #28]
  }
}
 800bd02:	bf00      	nop
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b085      	sub	sp, #20
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	60f8      	str	r0, [r7, #12]
 800bd16:	60b9      	str	r1, [r7, #8]
 800bd18:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bd1a:	f06f 030b 	mvn.w	r3, #11
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
	...

0800bd2c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d013      	beq.n	800bd64 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd74 <netif_get_by_index+0x48>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60fb      	str	r3, [r7, #12]
 800bd42:	e00c      	b.n	800bd5e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	79fa      	ldrb	r2, [r7, #7]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d101      	bne.n	800bd58 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	e006      	b.n	800bd66 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1ef      	bne.n	800bd44 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	2000d004 	.word	0x2000d004

0800bd78 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4611      	mov	r1, r2
 800bd84:	461a      	mov	r2, r3
 800bd86:	460b      	mov	r3, r1
 800bd88:	80fb      	strh	r3, [r7, #6]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	88fa      	ldrh	r2, [r7, #6]
 800bd9e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	88ba      	ldrh	r2, [r7, #4]
 800bda4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bda6:	8b3b      	ldrh	r3, [r7, #24]
 800bda8:	b2da      	uxtb	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	7f3a      	ldrb	r2, [r7, #28]
 800bdb2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	73da      	strb	r2, [r3, #15]
}
 800bdc0:	bf00      	nop
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b08c      	sub	sp, #48	@ 0x30
 800bdd0:	af02      	add	r7, sp, #8
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	71fb      	strb	r3, [r7, #7]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	80bb      	strh	r3, [r7, #4]
 800bdda:	4613      	mov	r3, r2
 800bddc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bde2:	887b      	ldrh	r3, [r7, #2]
 800bde4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bde8:	d07d      	beq.n	800bee6 <pbuf_alloc+0x11a>
 800bdea:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bdee:	f300 80c6 	bgt.w	800bf7e <pbuf_alloc+0x1b2>
 800bdf2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bdf6:	d010      	beq.n	800be1a <pbuf_alloc+0x4e>
 800bdf8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bdfc:	f300 80bf 	bgt.w	800bf7e <pbuf_alloc+0x1b2>
 800be00:	2b01      	cmp	r3, #1
 800be02:	d002      	beq.n	800be0a <pbuf_alloc+0x3e>
 800be04:	2b41      	cmp	r3, #65	@ 0x41
 800be06:	f040 80ba 	bne.w	800bf7e <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800be0a:	887a      	ldrh	r2, [r7, #2]
 800be0c:	88bb      	ldrh	r3, [r7, #4]
 800be0e:	4619      	mov	r1, r3
 800be10:	2000      	movs	r0, #0
 800be12:	f000 f8cf 	bl	800bfb4 <pbuf_alloc_reference>
 800be16:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800be18:	e0bb      	b.n	800bf92 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800be1a:	2300      	movs	r3, #0
 800be1c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800be1e:	2300      	movs	r3, #0
 800be20:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800be22:	88bb      	ldrh	r3, [r7, #4]
 800be24:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800be26:	2009      	movs	r0, #9
 800be28:	f7ff fbf8 	bl	800b61c <memp_malloc>
 800be2c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d107      	bne.n	800be44 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800be34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <pbuf_alloc+0x74>
            pbuf_free(p);
 800be3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be3c:	f000 faa8 	bl	800c390 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	e0a7      	b.n	800bf94 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800be44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800be46:	3303      	adds	r3, #3
 800be48:	b29b      	uxth	r3, r3
 800be4a:	f023 0303 	bic.w	r3, r3, #3
 800be4e:	b29b      	uxth	r3, r3
 800be50:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800be54:	b29b      	uxth	r3, r3
 800be56:	8b7a      	ldrh	r2, [r7, #26]
 800be58:	4293      	cmp	r3, r2
 800be5a:	bf28      	it	cs
 800be5c:	4613      	movcs	r3, r2
 800be5e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800be60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800be62:	3310      	adds	r3, #16
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	4413      	add	r3, r2
 800be68:	3303      	adds	r3, #3
 800be6a:	f023 0303 	bic.w	r3, r3, #3
 800be6e:	4618      	mov	r0, r3
 800be70:	89f9      	ldrh	r1, [r7, #14]
 800be72:	8b7a      	ldrh	r2, [r7, #26]
 800be74:	2300      	movs	r3, #0
 800be76:	9301      	str	r3, [sp, #4]
 800be78:	887b      	ldrh	r3, [r7, #2]
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	460b      	mov	r3, r1
 800be7e:	4601      	mov	r1, r0
 800be80:	6938      	ldr	r0, [r7, #16]
 800be82:	f7ff ff79 	bl	800bd78 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f003 0303 	and.w	r3, r3, #3
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d006      	beq.n	800bea0 <pbuf_alloc+0xd4>
 800be92:	4b42      	ldr	r3, [pc, #264]	@ (800bf9c <pbuf_alloc+0x1d0>)
 800be94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be98:	4941      	ldr	r1, [pc, #260]	@ (800bfa0 <pbuf_alloc+0x1d4>)
 800be9a:	4842      	ldr	r0, [pc, #264]	@ (800bfa4 <pbuf_alloc+0x1d8>)
 800be9c:	f004 fa4a 	bl	8010334 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bea0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bea2:	3303      	adds	r3, #3
 800bea4:	f023 0303 	bic.w	r3, r3, #3
 800bea8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800beac:	d106      	bne.n	800bebc <pbuf_alloc+0xf0>
 800beae:	4b3b      	ldr	r3, [pc, #236]	@ (800bf9c <pbuf_alloc+0x1d0>)
 800beb0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800beb4:	493c      	ldr	r1, [pc, #240]	@ (800bfa8 <pbuf_alloc+0x1dc>)
 800beb6:	483b      	ldr	r0, [pc, #236]	@ (800bfa4 <pbuf_alloc+0x1d8>)
 800beb8:	f004 fa3c 	bl	8010334 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d102      	bne.n	800bec8 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bec6:	e002      	b.n	800bece <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bed2:	8b7a      	ldrh	r2, [r7, #26]
 800bed4:	89fb      	ldrh	r3, [r7, #14]
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800beda:	2300      	movs	r3, #0
 800bedc:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800bede:	8b7b      	ldrh	r3, [r7, #26]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1a0      	bne.n	800be26 <pbuf_alloc+0x5a>
      break;
 800bee4:	e055      	b.n	800bf92 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bee6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bee8:	3303      	adds	r3, #3
 800beea:	b29b      	uxth	r3, r3
 800beec:	f023 0303 	bic.w	r3, r3, #3
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	88bb      	ldrh	r3, [r7, #4]
 800bef4:	3303      	adds	r3, #3
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	f023 0303 	bic.w	r3, r3, #3
 800befc:	b29b      	uxth	r3, r3
 800befe:	4413      	add	r3, r2
 800bf00:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bf02:	8b3b      	ldrh	r3, [r7, #24]
 800bf04:	3310      	adds	r3, #16
 800bf06:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bf08:	8b3a      	ldrh	r2, [r7, #24]
 800bf0a:	88bb      	ldrh	r3, [r7, #4]
 800bf0c:	3303      	adds	r3, #3
 800bf0e:	f023 0303 	bic.w	r3, r3, #3
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d306      	bcc.n	800bf24 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bf16:	8afa      	ldrh	r2, [r7, #22]
 800bf18:	88bb      	ldrh	r3, [r7, #4]
 800bf1a:	3303      	adds	r3, #3
 800bf1c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d201      	bcs.n	800bf28 <pbuf_alloc+0x15c>
        return NULL;
 800bf24:	2300      	movs	r3, #0
 800bf26:	e035      	b.n	800bf94 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bf28:	8afb      	ldrh	r3, [r7, #22]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7ff f9d2 	bl	800b2d4 <mem_malloc>
 800bf30:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <pbuf_alloc+0x170>
        return NULL;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e02b      	b.n	800bf94 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bf3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bf3e:	3310      	adds	r3, #16
 800bf40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf42:	4413      	add	r3, r2
 800bf44:	3303      	adds	r3, #3
 800bf46:	f023 0303 	bic.w	r3, r3, #3
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	88b9      	ldrh	r1, [r7, #4]
 800bf4e:	88ba      	ldrh	r2, [r7, #4]
 800bf50:	2300      	movs	r3, #0
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	887b      	ldrh	r3, [r7, #2]
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf5e:	f7ff ff0b 	bl	800bd78 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bf62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	f003 0303 	and.w	r3, r3, #3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d010      	beq.n	800bf90 <pbuf_alloc+0x1c4>
 800bf6e:	4b0b      	ldr	r3, [pc, #44]	@ (800bf9c <pbuf_alloc+0x1d0>)
 800bf70:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800bf74:	490d      	ldr	r1, [pc, #52]	@ (800bfac <pbuf_alloc+0x1e0>)
 800bf76:	480b      	ldr	r0, [pc, #44]	@ (800bfa4 <pbuf_alloc+0x1d8>)
 800bf78:	f004 f9dc 	bl	8010334 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bf7c:	e008      	b.n	800bf90 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bf7e:	4b07      	ldr	r3, [pc, #28]	@ (800bf9c <pbuf_alloc+0x1d0>)
 800bf80:	f240 1227 	movw	r2, #295	@ 0x127
 800bf84:	490a      	ldr	r1, [pc, #40]	@ (800bfb0 <pbuf_alloc+0x1e4>)
 800bf86:	4807      	ldr	r0, [pc, #28]	@ (800bfa4 <pbuf_alloc+0x1d8>)
 800bf88:	f004 f9d4 	bl	8010334 <iprintf>
      return NULL;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	e001      	b.n	800bf94 <pbuf_alloc+0x1c8>
      break;
 800bf90:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3728      	adds	r7, #40	@ 0x28
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	08012238 	.word	0x08012238
 800bfa0:	08012268 	.word	0x08012268
 800bfa4:	08012298 	.word	0x08012298
 800bfa8:	080122c0 	.word	0x080122c0
 800bfac:	080122f4 	.word	0x080122f4
 800bfb0:	08012320 	.word	0x08012320

0800bfb4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af02      	add	r7, sp, #8
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	807b      	strh	r3, [r7, #2]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bfc4:	883b      	ldrh	r3, [r7, #0]
 800bfc6:	2b41      	cmp	r3, #65	@ 0x41
 800bfc8:	d009      	beq.n	800bfde <pbuf_alloc_reference+0x2a>
 800bfca:	883b      	ldrh	r3, [r7, #0]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d006      	beq.n	800bfde <pbuf_alloc_reference+0x2a>
 800bfd0:	4b0f      	ldr	r3, [pc, #60]	@ (800c010 <pbuf_alloc_reference+0x5c>)
 800bfd2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800bfd6:	490f      	ldr	r1, [pc, #60]	@ (800c014 <pbuf_alloc_reference+0x60>)
 800bfd8:	480f      	ldr	r0, [pc, #60]	@ (800c018 <pbuf_alloc_reference+0x64>)
 800bfda:	f004 f9ab 	bl	8010334 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bfde:	2008      	movs	r0, #8
 800bfe0:	f7ff fb1c 	bl	800b61c <memp_malloc>
 800bfe4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d101      	bne.n	800bff0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bfec:	2300      	movs	r3, #0
 800bfee:	e00b      	b.n	800c008 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bff0:	8879      	ldrh	r1, [r7, #2]
 800bff2:	887a      	ldrh	r2, [r7, #2]
 800bff4:	2300      	movs	r3, #0
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	883b      	ldrh	r3, [r7, #0]
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	460b      	mov	r3, r1
 800bffe:	6879      	ldr	r1, [r7, #4]
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7ff feb9 	bl	800bd78 <pbuf_init_alloced_pbuf>
  return p;
 800c006:	68fb      	ldr	r3, [r7, #12]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	08012238 	.word	0x08012238
 800c014:	0801233c 	.word	0x0801233c
 800c018:	08012298 	.word	0x08012298

0800c01c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af02      	add	r7, sp, #8
 800c022:	607b      	str	r3, [r7, #4]
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	460b      	mov	r3, r1
 800c02a:	81bb      	strh	r3, [r7, #12]
 800c02c:	4613      	mov	r3, r2
 800c02e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c034:	8a7b      	ldrh	r3, [r7, #18]
 800c036:	3303      	adds	r3, #3
 800c038:	f023 0203 	bic.w	r2, r3, #3
 800c03c:	89bb      	ldrh	r3, [r7, #12]
 800c03e:	441a      	add	r2, r3
 800c040:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c042:	429a      	cmp	r2, r3
 800c044:	d901      	bls.n	800c04a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c046:	2300      	movs	r3, #0
 800c048:	e018      	b.n	800c07c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d007      	beq.n	800c060 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c050:	8a7b      	ldrh	r3, [r7, #18]
 800c052:	3303      	adds	r3, #3
 800c054:	f023 0303 	bic.w	r3, r3, #3
 800c058:	6a3a      	ldr	r2, [r7, #32]
 800c05a:	4413      	add	r3, r2
 800c05c:	617b      	str	r3, [r7, #20]
 800c05e:	e001      	b.n	800c064 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c060:	2300      	movs	r3, #0
 800c062:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	89b9      	ldrh	r1, [r7, #12]
 800c068:	89ba      	ldrh	r2, [r7, #12]
 800c06a:	2302      	movs	r3, #2
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	897b      	ldrh	r3, [r7, #10]
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	460b      	mov	r3, r1
 800c074:	6979      	ldr	r1, [r7, #20]
 800c076:	f7ff fe7f 	bl	800bd78 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c07a:	687b      	ldr	r3, [r7, #4]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3718      	adds	r7, #24
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <pbuf_realloc+0x20>
 800c096:	4b3a      	ldr	r3, [pc, #232]	@ (800c180 <pbuf_realloc+0xfc>)
 800c098:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c09c:	4939      	ldr	r1, [pc, #228]	@ (800c184 <pbuf_realloc+0x100>)
 800c09e:	483a      	ldr	r0, [pc, #232]	@ (800c188 <pbuf_realloc+0x104>)
 800c0a0:	f004 f948 	bl	8010334 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	891b      	ldrh	r3, [r3, #8]
 800c0a8:	887a      	ldrh	r2, [r7, #2]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d263      	bcs.n	800c176 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	891a      	ldrh	r2, [r3, #8]
 800c0b2:	887b      	ldrh	r3, [r7, #2]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c0b8:	887b      	ldrh	r3, [r7, #2]
 800c0ba:	817b      	strh	r3, [r7, #10]
  q = p;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c0c0:	e018      	b.n	800c0f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	895b      	ldrh	r3, [r3, #10]
 800c0c6:	897a      	ldrh	r2, [r7, #10]
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	891a      	ldrh	r2, [r3, #8]
 800c0d0:	893b      	ldrh	r3, [r7, #8]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d106      	bne.n	800c0f4 <pbuf_realloc+0x70>
 800c0e6:	4b26      	ldr	r3, [pc, #152]	@ (800c180 <pbuf_realloc+0xfc>)
 800c0e8:	f240 12af 	movw	r2, #431	@ 0x1af
 800c0ec:	4927      	ldr	r1, [pc, #156]	@ (800c18c <pbuf_realloc+0x108>)
 800c0ee:	4826      	ldr	r0, [pc, #152]	@ (800c188 <pbuf_realloc+0x104>)
 800c0f0:	f004 f920 	bl	8010334 <iprintf>
  while (rem_len > q->len) {
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	895b      	ldrh	r3, [r3, #10]
 800c0f8:	897a      	ldrh	r2, [r7, #10]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d8e1      	bhi.n	800c0c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	7b1b      	ldrb	r3, [r3, #12]
 800c102:	f003 030f 	and.w	r3, r3, #15
 800c106:	2b00      	cmp	r3, #0
 800c108:	d121      	bne.n	800c14e <pbuf_realloc+0xca>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	895b      	ldrh	r3, [r3, #10]
 800c10e:	897a      	ldrh	r2, [r7, #10]
 800c110:	429a      	cmp	r2, r3
 800c112:	d01c      	beq.n	800c14e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	7b5b      	ldrb	r3, [r3, #13]
 800c118:	f003 0302 	and.w	r3, r3, #2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d116      	bne.n	800c14e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	b29a      	uxth	r2, r3
 800c12a:	897b      	ldrh	r3, [r7, #10]
 800c12c:	4413      	add	r3, r2
 800c12e:	b29b      	uxth	r3, r3
 800c130:	4619      	mov	r1, r3
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7fe ffc4 	bl	800b0c0 <mem_trim>
 800c138:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <pbuf_realloc+0xca>
 800c140:	4b0f      	ldr	r3, [pc, #60]	@ (800c180 <pbuf_realloc+0xfc>)
 800c142:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c146:	4912      	ldr	r1, [pc, #72]	@ (800c190 <pbuf_realloc+0x10c>)
 800c148:	480f      	ldr	r0, [pc, #60]	@ (800c188 <pbuf_realloc+0x104>)
 800c14a:	f004 f8f3 	bl	8010334 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	897a      	ldrh	r2, [r7, #10]
 800c152:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	895a      	ldrh	r2, [r3, #10]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d004      	beq.n	800c16e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 f911 	bl	800c390 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	e000      	b.n	800c178 <pbuf_realloc+0xf4>
    return;
 800c176:	bf00      	nop

}
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	08012238 	.word	0x08012238
 800c184:	08012350 	.word	0x08012350
 800c188:	08012298 	.word	0x08012298
 800c18c:	08012368 	.word	0x08012368
 800c190:	08012380 	.word	0x08012380

0800c194 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d106      	bne.n	800c1b6 <pbuf_add_header_impl+0x22>
 800c1a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c258 <pbuf_add_header_impl+0xc4>)
 800c1aa:	f240 12df 	movw	r2, #479	@ 0x1df
 800c1ae:	492b      	ldr	r1, [pc, #172]	@ (800c25c <pbuf_add_header_impl+0xc8>)
 800c1b0:	482b      	ldr	r0, [pc, #172]	@ (800c260 <pbuf_add_header_impl+0xcc>)
 800c1b2:	f004 f8bf 	bl	8010334 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d003      	beq.n	800c1c4 <pbuf_add_header_impl+0x30>
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1c2:	d301      	bcc.n	800c1c8 <pbuf_add_header_impl+0x34>
    return 1;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e043      	b.n	800c250 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <pbuf_add_header_impl+0x3e>
    return 0;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e03e      	b.n	800c250 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	891a      	ldrh	r2, [r3, #8]
 800c1da:	8a7b      	ldrh	r3, [r7, #18]
 800c1dc:	4413      	add	r3, r2
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	8a7a      	ldrh	r2, [r7, #18]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d901      	bls.n	800c1ea <pbuf_add_header_impl+0x56>
    return 1;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e032      	b.n	800c250 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	7b1b      	ldrb	r3, [r3, #12]
 800c1ee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c1f0:	8a3b      	ldrh	r3, [r7, #16]
 800c1f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00c      	beq.n	800c214 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	425b      	negs	r3, r3
 800c202:	4413      	add	r3, r2
 800c204:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	3310      	adds	r3, #16
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d20d      	bcs.n	800c22c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c210:	2301      	movs	r3, #1
 800c212:	e01d      	b.n	800c250 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c214:	79fb      	ldrb	r3, [r7, #7]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d006      	beq.n	800c228 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	425b      	negs	r3, r3
 800c222:	4413      	add	r3, r2
 800c224:	617b      	str	r3, [r7, #20]
 800c226:	e001      	b.n	800c22c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c228:	2301      	movs	r3, #1
 800c22a:	e011      	b.n	800c250 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	697a      	ldr	r2, [r7, #20]
 800c230:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	895a      	ldrh	r2, [r3, #10]
 800c236:	8a7b      	ldrh	r3, [r7, #18]
 800c238:	4413      	add	r3, r2
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	891a      	ldrh	r2, [r3, #8]
 800c244:	8a7b      	ldrh	r3, [r7, #18]
 800c246:	4413      	add	r3, r2
 800c248:	b29a      	uxth	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3718      	adds	r7, #24
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	08012238 	.word	0x08012238
 800c25c:	0801239c 	.word	0x0801239c
 800c260:	08012298 	.word	0x08012298

0800c264 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c26e:	2200      	movs	r2, #0
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff ff8e 	bl	800c194 <pbuf_add_header_impl>
 800c278:	4603      	mov	r3, r0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d106      	bne.n	800c2a2 <pbuf_remove_header+0x1e>
 800c294:	4b20      	ldr	r3, [pc, #128]	@ (800c318 <pbuf_remove_header+0x94>)
 800c296:	f240 224b 	movw	r2, #587	@ 0x24b
 800c29a:	4920      	ldr	r1, [pc, #128]	@ (800c31c <pbuf_remove_header+0x98>)
 800c29c:	4820      	ldr	r0, [pc, #128]	@ (800c320 <pbuf_remove_header+0x9c>)
 800c29e:	f004 f849 	bl	8010334 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d003      	beq.n	800c2b0 <pbuf_remove_header+0x2c>
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2ae:	d301      	bcc.n	800c2b4 <pbuf_remove_header+0x30>
    return 1;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e02c      	b.n	800c30e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d101      	bne.n	800c2be <pbuf_remove_header+0x3a>
    return 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e027      	b.n	800c30e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	895b      	ldrh	r3, [r3, #10]
 800c2c6:	89fa      	ldrh	r2, [r7, #14]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d908      	bls.n	800c2de <pbuf_remove_header+0x5a>
 800c2cc:	4b12      	ldr	r3, [pc, #72]	@ (800c318 <pbuf_remove_header+0x94>)
 800c2ce:	f240 2255 	movw	r2, #597	@ 0x255
 800c2d2:	4914      	ldr	r1, [pc, #80]	@ (800c324 <pbuf_remove_header+0xa0>)
 800c2d4:	4812      	ldr	r0, [pc, #72]	@ (800c320 <pbuf_remove_header+0x9c>)
 800c2d6:	f004 f82d 	bl	8010334 <iprintf>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e017      	b.n	800c30e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	441a      	add	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	895a      	ldrh	r2, [r3, #10]
 800c2f4:	89fb      	ldrh	r3, [r7, #14]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	891a      	ldrh	r2, [r3, #8]
 800c302:	89fb      	ldrh	r3, [r7, #14]
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	b29a      	uxth	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	08012238 	.word	0x08012238
 800c31c:	0801239c 	.word	0x0801239c
 800c320:	08012298 	.word	0x08012298
 800c324:	080123a8 	.word	0x080123a8

0800c328 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	807b      	strh	r3, [r7, #2]
 800c334:	4613      	mov	r3, r2
 800c336:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c338:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	da08      	bge.n	800c352 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c340:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c344:	425b      	negs	r3, r3
 800c346:	4619      	mov	r1, r3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7ff ff9b 	bl	800c284 <pbuf_remove_header>
 800c34e:	4603      	mov	r3, r0
 800c350:	e007      	b.n	800c362 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c352:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c356:	787a      	ldrb	r2, [r7, #1]
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7ff ff1a 	bl	800c194 <pbuf_add_header_impl>
 800c360:	4603      	mov	r3, r0
  }
}
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b082      	sub	sp, #8
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	460b      	mov	r3, r1
 800c374:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c376:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c37a:	2201      	movs	r2, #1
 800c37c:	4619      	mov	r1, r3
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f7ff ffd2 	bl	800c328 <pbuf_header_impl>
 800c384:	4603      	mov	r3, r0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3708      	adds	r7, #8
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
	...

0800c390 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d10b      	bne.n	800c3b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d106      	bne.n	800c3b2 <pbuf_free+0x22>
 800c3a4:	4b3b      	ldr	r3, [pc, #236]	@ (800c494 <pbuf_free+0x104>)
 800c3a6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c3aa:	493b      	ldr	r1, [pc, #236]	@ (800c498 <pbuf_free+0x108>)
 800c3ac:	483b      	ldr	r0, [pc, #236]	@ (800c49c <pbuf_free+0x10c>)
 800c3ae:	f003 ffc1 	bl	8010334 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	e069      	b.n	800c48a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c3ba:	e062      	b.n	800c482 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c3bc:	f003 fe64 	bl	8010088 <sys_arch_protect>
 800c3c0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	7b9b      	ldrb	r3, [r3, #14]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d106      	bne.n	800c3d8 <pbuf_free+0x48>
 800c3ca:	4b32      	ldr	r3, [pc, #200]	@ (800c494 <pbuf_free+0x104>)
 800c3cc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c3d0:	4933      	ldr	r1, [pc, #204]	@ (800c4a0 <pbuf_free+0x110>)
 800c3d2:	4832      	ldr	r0, [pc, #200]	@ (800c49c <pbuf_free+0x10c>)
 800c3d4:	f003 ffae 	bl	8010334 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	7b9b      	ldrb	r3, [r3, #14]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	739a      	strb	r2, [r3, #14]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	7b9b      	ldrb	r3, [r3, #14]
 800c3e8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c3ea:	69b8      	ldr	r0, [r7, #24]
 800c3ec:	f003 fe5a 	bl	80100a4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d143      	bne.n	800c47e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	7b1b      	ldrb	r3, [r3, #12]
 800c400:	f003 030f 	and.w	r3, r3, #15
 800c404:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	7b5b      	ldrb	r3, [r3, #13]
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d011      	beq.n	800c436 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <pbuf_free+0x9c>
 800c41e:	4b1d      	ldr	r3, [pc, #116]	@ (800c494 <pbuf_free+0x104>)
 800c420:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c424:	491f      	ldr	r1, [pc, #124]	@ (800c4a4 <pbuf_free+0x114>)
 800c426:	481d      	ldr	r0, [pc, #116]	@ (800c49c <pbuf_free+0x10c>)
 800c428:	f003 ff84 	bl	8010334 <iprintf>
        pc->custom_free_function(p);
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	4798      	blx	r3
 800c434:	e01d      	b.n	800c472 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c436:	7bfb      	ldrb	r3, [r7, #15]
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d104      	bne.n	800c446 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c43c:	6879      	ldr	r1, [r7, #4]
 800c43e:	2009      	movs	r0, #9
 800c440:	f7ff f962 	bl	800b708 <memp_free>
 800c444:	e015      	b.n	800c472 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d104      	bne.n	800c456 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c44c:	6879      	ldr	r1, [r7, #4]
 800c44e:	2008      	movs	r0, #8
 800c450:	f7ff f95a 	bl	800b708 <memp_free>
 800c454:	e00d      	b.n	800c472 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c456:	7bfb      	ldrb	r3, [r7, #15]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d103      	bne.n	800c464 <pbuf_free+0xd4>
          mem_free(p);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7fe fd9f 	bl	800afa0 <mem_free>
 800c462:	e006      	b.n	800c472 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c464:	4b0b      	ldr	r3, [pc, #44]	@ (800c494 <pbuf_free+0x104>)
 800c466:	f240 320f 	movw	r2, #783	@ 0x30f
 800c46a:	490f      	ldr	r1, [pc, #60]	@ (800c4a8 <pbuf_free+0x118>)
 800c46c:	480b      	ldr	r0, [pc, #44]	@ (800c49c <pbuf_free+0x10c>)
 800c46e:	f003 ff61 	bl	8010334 <iprintf>
        }
      }
      count++;
 800c472:	7ffb      	ldrb	r3, [r7, #31]
 800c474:	3301      	adds	r3, #1
 800c476:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	607b      	str	r3, [r7, #4]
 800c47c:	e001      	b.n	800c482 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c47e:	2300      	movs	r3, #0
 800c480:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d199      	bne.n	800c3bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c488:	7ffb      	ldrb	r3, [r7, #31]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3720      	adds	r7, #32
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	08012238 	.word	0x08012238
 800c498:	0801239c 	.word	0x0801239c
 800c49c:	08012298 	.word	0x08012298
 800c4a0:	080123c8 	.word	0x080123c8
 800c4a4:	080123e0 	.word	0x080123e0
 800c4a8:	08012404 	.word	0x08012404

0800c4ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c4b8:	e005      	b.n	800c4c6 <pbuf_clen+0x1a>
    ++len;
 800c4ba:	89fb      	ldrh	r3, [r7, #14]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1f6      	bne.n	800c4ba <pbuf_clen+0xe>
  }
  return len;
 800c4cc:	89fb      	ldrh	r3, [r7, #14]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
	...

0800c4dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d016      	beq.n	800c518 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c4ea:	f003 fdcd 	bl	8010088 <sys_arch_protect>
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	7b9b      	ldrb	r3, [r3, #14]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	739a      	strb	r2, [r3, #14]
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f003 fdd1 	bl	80100a4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	7b9b      	ldrb	r3, [r3, #14]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d106      	bne.n	800c518 <pbuf_ref+0x3c>
 800c50a:	4b05      	ldr	r3, [pc, #20]	@ (800c520 <pbuf_ref+0x44>)
 800c50c:	f240 3242 	movw	r2, #834	@ 0x342
 800c510:	4904      	ldr	r1, [pc, #16]	@ (800c524 <pbuf_ref+0x48>)
 800c512:	4805      	ldr	r0, [pc, #20]	@ (800c528 <pbuf_ref+0x4c>)
 800c514:	f003 ff0e 	bl	8010334 <iprintf>
  }
}
 800c518:	bf00      	nop
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	08012238 	.word	0x08012238
 800c524:	08012418 	.word	0x08012418
 800c528:	08012298 	.word	0x08012298

0800c52c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <pbuf_cat+0x16>
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d107      	bne.n	800c552 <pbuf_cat+0x26>
 800c542:	4b20      	ldr	r3, [pc, #128]	@ (800c5c4 <pbuf_cat+0x98>)
 800c544:	f240 3259 	movw	r2, #857	@ 0x359
 800c548:	491f      	ldr	r1, [pc, #124]	@ (800c5c8 <pbuf_cat+0x9c>)
 800c54a:	4820      	ldr	r0, [pc, #128]	@ (800c5cc <pbuf_cat+0xa0>)
 800c54c:	f003 fef2 	bl	8010334 <iprintf>
 800c550:	e034      	b.n	800c5bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	e00a      	b.n	800c56e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	891a      	ldrh	r2, [r3, #8]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	891b      	ldrh	r3, [r3, #8]
 800c560:	4413      	add	r3, r2
 800c562:	b29a      	uxth	r2, r3
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	60fb      	str	r3, [r7, #12]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1f0      	bne.n	800c558 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	891a      	ldrh	r2, [r3, #8]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	895b      	ldrh	r3, [r3, #10]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d006      	beq.n	800c590 <pbuf_cat+0x64>
 800c582:	4b10      	ldr	r3, [pc, #64]	@ (800c5c4 <pbuf_cat+0x98>)
 800c584:	f240 3262 	movw	r2, #866	@ 0x362
 800c588:	4911      	ldr	r1, [pc, #68]	@ (800c5d0 <pbuf_cat+0xa4>)
 800c58a:	4810      	ldr	r0, [pc, #64]	@ (800c5cc <pbuf_cat+0xa0>)
 800c58c:	f003 fed2 	bl	8010334 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d006      	beq.n	800c5a6 <pbuf_cat+0x7a>
 800c598:	4b0a      	ldr	r3, [pc, #40]	@ (800c5c4 <pbuf_cat+0x98>)
 800c59a:	f240 3263 	movw	r2, #867	@ 0x363
 800c59e:	490d      	ldr	r1, [pc, #52]	@ (800c5d4 <pbuf_cat+0xa8>)
 800c5a0:	480a      	ldr	r0, [pc, #40]	@ (800c5cc <pbuf_cat+0xa0>)
 800c5a2:	f003 fec7 	bl	8010334 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	891a      	ldrh	r2, [r3, #8]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	891b      	ldrh	r3, [r3, #8]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	08012238 	.word	0x08012238
 800c5c8:	0801242c 	.word	0x0801242c
 800c5cc:	08012298 	.word	0x08012298
 800c5d0:	08012464 	.word	0x08012464
 800c5d4:	08012494 	.word	0x08012494

0800c5d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff ffa1 	bl	800c52c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c5ea:	6838      	ldr	r0, [r7, #0]
 800c5ec:	f7ff ff76 	bl	800c4dc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c602:	2300      	movs	r3, #0
 800c604:	617b      	str	r3, [r7, #20]
 800c606:	2300      	movs	r3, #0
 800c608:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d008      	beq.n	800c622 <pbuf_copy+0x2a>
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d005      	beq.n	800c622 <pbuf_copy+0x2a>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	891a      	ldrh	r2, [r3, #8]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	891b      	ldrh	r3, [r3, #8]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d209      	bcs.n	800c636 <pbuf_copy+0x3e>
 800c622:	4b57      	ldr	r3, [pc, #348]	@ (800c780 <pbuf_copy+0x188>)
 800c624:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c628:	4956      	ldr	r1, [pc, #344]	@ (800c784 <pbuf_copy+0x18c>)
 800c62a:	4857      	ldr	r0, [pc, #348]	@ (800c788 <pbuf_copy+0x190>)
 800c62c:	f003 fe82 	bl	8010334 <iprintf>
 800c630:	f06f 030f 	mvn.w	r3, #15
 800c634:	e09f      	b.n	800c776 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	895b      	ldrh	r3, [r3, #10]
 800c63a:	461a      	mov	r2, r3
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	1ad2      	subs	r2, r2, r3
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	895b      	ldrh	r3, [r3, #10]
 800c644:	4619      	mov	r1, r3
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	1acb      	subs	r3, r1, r3
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d306      	bcc.n	800c65c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	895b      	ldrh	r3, [r3, #10]
 800c652:	461a      	mov	r2, r3
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	60fb      	str	r3, [r7, #12]
 800c65a:	e005      	b.n	800c668 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	895b      	ldrh	r3, [r3, #10]
 800c660:	461a      	mov	r2, r3
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	18d0      	adds	r0, r2, r3
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	685a      	ldr	r2, [r3, #4]
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	4413      	add	r3, r2
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	4619      	mov	r1, r3
 800c67c:	f003 ff35 	bl	80104ea <memcpy>
    offset_to += len;
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	4413      	add	r3, r2
 800c686:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	4413      	add	r3, r2
 800c68e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	895b      	ldrh	r3, [r3, #10]
 800c694:	461a      	mov	r2, r3
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	4293      	cmp	r3, r2
 800c69a:	d906      	bls.n	800c6aa <pbuf_copy+0xb2>
 800c69c:	4b38      	ldr	r3, [pc, #224]	@ (800c780 <pbuf_copy+0x188>)
 800c69e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c6a2:	493a      	ldr	r1, [pc, #232]	@ (800c78c <pbuf_copy+0x194>)
 800c6a4:	4838      	ldr	r0, [pc, #224]	@ (800c788 <pbuf_copy+0x190>)
 800c6a6:	f003 fe45 	bl	8010334 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	895b      	ldrh	r3, [r3, #10]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d906      	bls.n	800c6c4 <pbuf_copy+0xcc>
 800c6b6:	4b32      	ldr	r3, [pc, #200]	@ (800c780 <pbuf_copy+0x188>)
 800c6b8:	f240 32da 	movw	r2, #986	@ 0x3da
 800c6bc:	4934      	ldr	r1, [pc, #208]	@ (800c790 <pbuf_copy+0x198>)
 800c6be:	4832      	ldr	r0, [pc, #200]	@ (800c788 <pbuf_copy+0x190>)
 800c6c0:	f003 fe38 	bl	8010334 <iprintf>
    if (offset_from >= p_from->len) {
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	895b      	ldrh	r3, [r3, #10]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d304      	bcc.n	800c6da <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	895b      	ldrh	r3, [r3, #10]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d114      	bne.n	800c710 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10c      	bne.n	800c710 <pbuf_copy+0x118>
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d009      	beq.n	800c710 <pbuf_copy+0x118>
 800c6fc:	4b20      	ldr	r3, [pc, #128]	@ (800c780 <pbuf_copy+0x188>)
 800c6fe:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c702:	4924      	ldr	r1, [pc, #144]	@ (800c794 <pbuf_copy+0x19c>)
 800c704:	4820      	ldr	r0, [pc, #128]	@ (800c788 <pbuf_copy+0x190>)
 800c706:	f003 fe15 	bl	8010334 <iprintf>
 800c70a:	f06f 030f 	mvn.w	r3, #15
 800c70e:	e032      	b.n	800c776 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d013      	beq.n	800c73e <pbuf_copy+0x146>
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	895a      	ldrh	r2, [r3, #10]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	891b      	ldrh	r3, [r3, #8]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d10d      	bne.n	800c73e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d009      	beq.n	800c73e <pbuf_copy+0x146>
 800c72a:	4b15      	ldr	r3, [pc, #84]	@ (800c780 <pbuf_copy+0x188>)
 800c72c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c730:	4919      	ldr	r1, [pc, #100]	@ (800c798 <pbuf_copy+0x1a0>)
 800c732:	4815      	ldr	r0, [pc, #84]	@ (800c788 <pbuf_copy+0x190>)
 800c734:	f003 fdfe 	bl	8010334 <iprintf>
 800c738:	f06f 0305 	mvn.w	r3, #5
 800c73c:	e01b      	b.n	800c776 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d013      	beq.n	800c76c <pbuf_copy+0x174>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	895a      	ldrh	r2, [r3, #10]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	891b      	ldrh	r3, [r3, #8]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d10d      	bne.n	800c76c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d009      	beq.n	800c76c <pbuf_copy+0x174>
 800c758:	4b09      	ldr	r3, [pc, #36]	@ (800c780 <pbuf_copy+0x188>)
 800c75a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c75e:	490e      	ldr	r1, [pc, #56]	@ (800c798 <pbuf_copy+0x1a0>)
 800c760:	4809      	ldr	r0, [pc, #36]	@ (800c788 <pbuf_copy+0x190>)
 800c762:	f003 fde7 	bl	8010334 <iprintf>
 800c766:	f06f 0305 	mvn.w	r3, #5
 800c76a:	e004      	b.n	800c776 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f47f af61 	bne.w	800c636 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	08012238 	.word	0x08012238
 800c784:	080124e0 	.word	0x080124e0
 800c788:	08012298 	.word	0x08012298
 800c78c:	08012510 	.word	0x08012510
 800c790:	08012528 	.word	0x08012528
 800c794:	08012544 	.word	0x08012544
 800c798:	08012554 	.word	0x08012554

0800c79c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b088      	sub	sp, #32
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	80fb      	strh	r3, [r7, #6]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d108      	bne.n	800c7d2 <pbuf_copy_partial+0x36>
 800c7c0:	4b2b      	ldr	r3, [pc, #172]	@ (800c870 <pbuf_copy_partial+0xd4>)
 800c7c2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c7c6:	492b      	ldr	r1, [pc, #172]	@ (800c874 <pbuf_copy_partial+0xd8>)
 800c7c8:	482b      	ldr	r0, [pc, #172]	@ (800c878 <pbuf_copy_partial+0xdc>)
 800c7ca:	f003 fdb3 	bl	8010334 <iprintf>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e04a      	b.n	800c868 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d108      	bne.n	800c7ea <pbuf_copy_partial+0x4e>
 800c7d8:	4b25      	ldr	r3, [pc, #148]	@ (800c870 <pbuf_copy_partial+0xd4>)
 800c7da:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c7de:	4927      	ldr	r1, [pc, #156]	@ (800c87c <pbuf_copy_partial+0xe0>)
 800c7e0:	4825      	ldr	r0, [pc, #148]	@ (800c878 <pbuf_copy_partial+0xdc>)
 800c7e2:	f003 fda7 	bl	8010334 <iprintf>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	e03e      	b.n	800c868 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	61fb      	str	r3, [r7, #28]
 800c7ee:	e034      	b.n	800c85a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c7f0:	88bb      	ldrh	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00a      	beq.n	800c80c <pbuf_copy_partial+0x70>
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	895b      	ldrh	r3, [r3, #10]
 800c7fa:	88ba      	ldrh	r2, [r7, #4]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d305      	bcc.n	800c80c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	895b      	ldrh	r3, [r3, #10]
 800c804:	88ba      	ldrh	r2, [r7, #4]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	80bb      	strh	r3, [r7, #4]
 800c80a:	e023      	b.n	800c854 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	895a      	ldrh	r2, [r3, #10]
 800c810:	88bb      	ldrh	r3, [r7, #4]
 800c812:	1ad3      	subs	r3, r2, r3
 800c814:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c816:	8b3a      	ldrh	r2, [r7, #24]
 800c818:	88fb      	ldrh	r3, [r7, #6]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d901      	bls.n	800c822 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c81e:	88fb      	ldrh	r3, [r7, #6]
 800c820:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c822:	8b7b      	ldrh	r3, [r7, #26]
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	18d0      	adds	r0, r2, r3
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	88bb      	ldrh	r3, [r7, #4]
 800c82e:	4413      	add	r3, r2
 800c830:	8b3a      	ldrh	r2, [r7, #24]
 800c832:	4619      	mov	r1, r3
 800c834:	f003 fe59 	bl	80104ea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c838:	8afa      	ldrh	r2, [r7, #22]
 800c83a:	8b3b      	ldrh	r3, [r7, #24]
 800c83c:	4413      	add	r3, r2
 800c83e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c840:	8b7a      	ldrh	r2, [r7, #26]
 800c842:	8b3b      	ldrh	r3, [r7, #24]
 800c844:	4413      	add	r3, r2
 800c846:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c848:	88fa      	ldrh	r2, [r7, #6]
 800c84a:	8b3b      	ldrh	r3, [r7, #24]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	61fb      	str	r3, [r7, #28]
 800c85a:	88fb      	ldrh	r3, [r7, #6]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <pbuf_copy_partial+0xca>
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d1c4      	bne.n	800c7f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c866:	8afb      	ldrh	r3, [r7, #22]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3720      	adds	r7, #32
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	08012238 	.word	0x08012238
 800c874:	08012580 	.word	0x08012580
 800c878:	08012298 	.word	0x08012298
 800c87c:	080125a0 	.word	0x080125a0

0800c880 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	603a      	str	r2, [r7, #0]
 800c88a:	71fb      	strb	r3, [r7, #7]
 800c88c:	460b      	mov	r3, r1
 800c88e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	8919      	ldrh	r1, [r3, #8]
 800c894:	88ba      	ldrh	r2, [r7, #4]
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff fa97 	bl	800bdcc <pbuf_alloc>
 800c89e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <pbuf_clone+0x2a>
    return NULL;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e011      	b.n	800c8ce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c8aa:	6839      	ldr	r1, [r7, #0]
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f7ff fea3 	bl	800c5f8 <pbuf_copy>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c8b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d006      	beq.n	800c8cc <pbuf_clone+0x4c>
 800c8be:	4b06      	ldr	r3, [pc, #24]	@ (800c8d8 <pbuf_clone+0x58>)
 800c8c0:	f240 5224 	movw	r2, #1316	@ 0x524
 800c8c4:	4905      	ldr	r1, [pc, #20]	@ (800c8dc <pbuf_clone+0x5c>)
 800c8c6:	4806      	ldr	r0, [pc, #24]	@ (800c8e0 <pbuf_clone+0x60>)
 800c8c8:	f003 fd34 	bl	8010334 <iprintf>
  return q;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	08012238 	.word	0x08012238
 800c8dc:	080126ac 	.word	0x080126ac
 800c8e0:	08012298 	.word	0x08012298

0800c8e4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c8f0:	2007      	movs	r0, #7
 800c8f2:	f7fe fe93 	bl	800b61c <memp_malloc>
 800c8f6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d109      	bne.n	800c912 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d151      	bne.n	800c9a8 <sys_timeout_abs+0xc4>
 800c904:	4b2a      	ldr	r3, [pc, #168]	@ (800c9b0 <sys_timeout_abs+0xcc>)
 800c906:	22be      	movs	r2, #190	@ 0xbe
 800c908:	492a      	ldr	r1, [pc, #168]	@ (800c9b4 <sys_timeout_abs+0xd0>)
 800c90a:	482b      	ldr	r0, [pc, #172]	@ (800c9b8 <sys_timeout_abs+0xd4>)
 800c90c:	f003 fd12 	bl	8010334 <iprintf>
    return;
 800c910:	e04a      	b.n	800c9a8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2200      	movs	r2, #0
 800c916:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c92a:	4b24      	ldr	r3, [pc, #144]	@ (800c9bc <sys_timeout_abs+0xd8>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d103      	bne.n	800c93a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c932:	4a22      	ldr	r2, [pc, #136]	@ (800c9bc <sys_timeout_abs+0xd8>)
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	6013      	str	r3, [r2, #0]
    return;
 800c938:	e037      	b.n	800c9aa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	685a      	ldr	r2, [r3, #4]
 800c93e:	4b1f      	ldr	r3, [pc, #124]	@ (800c9bc <sys_timeout_abs+0xd8>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	0fdb      	lsrs	r3, r3, #31
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d007      	beq.n	800c962 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c952:	4b1a      	ldr	r3, [pc, #104]	@ (800c9bc <sys_timeout_abs+0xd8>)
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c95a:	4a18      	ldr	r2, [pc, #96]	@ (800c9bc <sys_timeout_abs+0xd8>)
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	e023      	b.n	800c9aa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c962:	4b16      	ldr	r3, [pc, #88]	@ (800c9bc <sys_timeout_abs+0xd8>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	617b      	str	r3, [r7, #20]
 800c968:	e01a      	b.n	800c9a0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00b      	beq.n	800c98a <sys_timeout_abs+0xa6>
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	0fdb      	lsrs	r3, r3, #31
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b00      	cmp	r3, #0
 800c988:	d007      	beq.n	800c99a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	693a      	ldr	r2, [r7, #16]
 800c996:	601a      	str	r2, [r3, #0]
        break;
 800c998:	e007      	b.n	800c9aa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	617b      	str	r3, [r7, #20]
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1e1      	bne.n	800c96a <sys_timeout_abs+0x86>
 800c9a6:	e000      	b.n	800c9aa <sys_timeout_abs+0xc6>
    return;
 800c9a8:	bf00      	nop
      }
    }
  }
}
 800c9aa:	3718      	adds	r7, #24
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	080126c0 	.word	0x080126c0
 800c9b4:	080126f4 	.word	0x080126f4
 800c9b8:	08012734 	.word	0x08012734
 800c9bc:	2000d010 	.word	0x2000d010

0800c9c0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	4798      	blx	r3

  now = sys_now();
 800c9d2:	f7f9 f95b 	bl	8005c8c <sys_now>
 800c9d6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	4b0f      	ldr	r3, [pc, #60]	@ (800ca1c <lwip_cyclic_timer+0x5c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	0fdb      	lsrs	r3, r3, #31
 800c9ec:	f003 0301 	and.w	r3, r3, #1
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d009      	beq.n	800ca0a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	4907      	ldr	r1, [pc, #28]	@ (800ca20 <lwip_cyclic_timer+0x60>)
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff ff6e 	bl	800c8e4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ca08:	e004      	b.n	800ca14 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	4904      	ldr	r1, [pc, #16]	@ (800ca20 <lwip_cyclic_timer+0x60>)
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f7ff ff68 	bl	800c8e4 <sys_timeout_abs>
}
 800ca14:	bf00      	nop
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	2000d014 	.word	0x2000d014
 800ca20:	0800c9c1 	.word	0x0800c9c1

0800ca24 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	607b      	str	r3, [r7, #4]
 800ca2e:	e00e      	b.n	800ca4e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ca30:	4a0b      	ldr	r2, [pc, #44]	@ (800ca60 <sys_timeouts_init+0x3c>)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	4a08      	ldr	r2, [pc, #32]	@ (800ca60 <sys_timeouts_init+0x3c>)
 800ca3e:	4413      	add	r3, r2
 800ca40:	461a      	mov	r2, r3
 800ca42:	4908      	ldr	r1, [pc, #32]	@ (800ca64 <sys_timeouts_init+0x40>)
 800ca44:	f000 f810 	bl	800ca68 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	607b      	str	r3, [r7, #4]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d9ed      	bls.n	800ca30 <sys_timeouts_init+0xc>
  }
}
 800ca54:	bf00      	nop
 800ca56:	bf00      	nop
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	08013348 	.word	0x08013348
 800ca64:	0800c9c1 	.word	0x0800c9c1

0800ca68 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca7a:	d306      	bcc.n	800ca8a <sys_timeout+0x22>
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	@ (800caa8 <sys_timeout+0x40>)
 800ca7e:	f240 1229 	movw	r2, #297	@ 0x129
 800ca82:	490a      	ldr	r1, [pc, #40]	@ (800caac <sys_timeout+0x44>)
 800ca84:	480a      	ldr	r0, [pc, #40]	@ (800cab0 <sys_timeout+0x48>)
 800ca86:	f003 fc55 	bl	8010334 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ca8a:	f7f9 f8ff 	bl	8005c8c <sys_now>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	68b9      	ldr	r1, [r7, #8]
 800ca9a:	6978      	ldr	r0, [r7, #20]
 800ca9c:	f7ff ff22 	bl	800c8e4 <sys_timeout_abs>
#endif
}
 800caa0:	bf00      	nop
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	080126c0 	.word	0x080126c0
 800caac:	0801275c 	.word	0x0801275c
 800cab0:	08012734 	.word	0x08012734

0800cab4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800caba:	f7f9 f8e7 	bl	8005c8c <sys_now>
 800cabe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800cac0:	4b17      	ldr	r3, [pc, #92]	@ (800cb20 <sys_check_timeouts+0x6c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d022      	beq.n	800cb12 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	0fdb      	lsrs	r3, r3, #31
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d11a      	bne.n	800cb16 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a0e      	ldr	r2, [pc, #56]	@ (800cb20 <sys_check_timeouts+0x6c>)
 800cae6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	4a0a      	ldr	r2, [pc, #40]	@ (800cb24 <sys_check_timeouts+0x70>)
 800cafa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cafc:	68b9      	ldr	r1, [r7, #8]
 800cafe:	2007      	movs	r0, #7
 800cb00:	f7fe fe02 	bl	800b708 <memp_free>
    if (handler != NULL) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0da      	beq.n	800cac0 <sys_check_timeouts+0xc>
      handler(arg);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6838      	ldr	r0, [r7, #0]
 800cb0e:	4798      	blx	r3
  do {
 800cb10:	e7d6      	b.n	800cac0 <sys_check_timeouts+0xc>
      return;
 800cb12:	bf00      	nop
 800cb14:	e000      	b.n	800cb18 <sys_check_timeouts+0x64>
      return;
 800cb16:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	2000d010 	.word	0x2000d010
 800cb24:	2000d014 	.word	0x2000d014

0800cb28 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800cb2e:	4b16      	ldr	r3, [pc, #88]	@ (800cb88 <sys_timeouts_sleeptime+0x60>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d102      	bne.n	800cb3c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800cb36:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3a:	e020      	b.n	800cb7e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800cb3c:	f7f9 f8a6 	bl	8005c8c <sys_now>
 800cb40:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800cb42:	4b11      	ldr	r3, [pc, #68]	@ (800cb88 <sys_timeouts_sleeptime+0x60>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	685a      	ldr	r2, [r3, #4]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	0fdb      	lsrs	r3, r3, #31
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d001      	beq.n	800cb5c <sys_timeouts_sleeptime+0x34>
    return 0;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e010      	b.n	800cb7e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800cb5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb88 <sys_timeouts_sleeptime+0x60>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	da06      	bge.n	800cb7c <sys_timeouts_sleeptime+0x54>
 800cb6e:	4b07      	ldr	r3, [pc, #28]	@ (800cb8c <sys_timeouts_sleeptime+0x64>)
 800cb70:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800cb74:	4906      	ldr	r1, [pc, #24]	@ (800cb90 <sys_timeouts_sleeptime+0x68>)
 800cb76:	4807      	ldr	r0, [pc, #28]	@ (800cb94 <sys_timeouts_sleeptime+0x6c>)
 800cb78:	f003 fbdc 	bl	8010334 <iprintf>
    return ret;
 800cb7c:	683b      	ldr	r3, [r7, #0]
  }
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	2000d010 	.word	0x2000d010
 800cb8c:	080126c0 	.word	0x080126c0
 800cb90:	08012794 	.word	0x08012794
 800cb94:	08012734 	.word	0x08012734

0800cb98 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cb9c:	f003 faca 	bl	8010134 <rand>
 800cba0:	4603      	mov	r3, r0
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	4b01      	ldr	r3, [pc, #4]	@ (800cbb8 <udp_init+0x20>)
 800cbb2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cbb4:	bf00      	nop
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	20000024 	.word	0x20000024

0800cbbc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800cbc6:	4b17      	ldr	r3, [pc, #92]	@ (800cc24 <udp_new_port+0x68>)
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	1c5a      	adds	r2, r3, #1
 800cbcc:	b291      	uxth	r1, r2
 800cbce:	4a15      	ldr	r2, [pc, #84]	@ (800cc24 <udp_new_port+0x68>)
 800cbd0:	8011      	strh	r1, [r2, #0]
 800cbd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d103      	bne.n	800cbe2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800cbda:	4b12      	ldr	r3, [pc, #72]	@ (800cc24 <udp_new_port+0x68>)
 800cbdc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800cbe0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbe2:	4b11      	ldr	r3, [pc, #68]	@ (800cc28 <udp_new_port+0x6c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	e011      	b.n	800cc0e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	8a5a      	ldrh	r2, [r3, #18]
 800cbee:	4b0d      	ldr	r3, [pc, #52]	@ (800cc24 <udp_new_port+0x68>)
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d108      	bne.n	800cc08 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800cbf6:	88fb      	ldrh	r3, [r7, #6]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	80fb      	strh	r3, [r7, #6]
 800cbfc:	88fb      	ldrh	r3, [r7, #6]
 800cbfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc02:	d3e0      	bcc.n	800cbc6 <udp_new_port+0xa>
        return 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	e007      	b.n	800cc18 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	603b      	str	r3, [r7, #0]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1ea      	bne.n	800cbea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800cc14:	4b03      	ldr	r3, [pc, #12]	@ (800cc24 <udp_new_port+0x68>)
 800cc16:	881b      	ldrh	r3, [r3, #0]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	20000024 	.word	0x20000024
 800cc28:	2000d018 	.word	0x2000d018

0800cc2c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	4613      	mov	r3, r2
 800cc38:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d105      	bne.n	800cc4c <udp_input_local_match+0x20>
 800cc40:	4b27      	ldr	r3, [pc, #156]	@ (800cce0 <udp_input_local_match+0xb4>)
 800cc42:	2287      	movs	r2, #135	@ 0x87
 800cc44:	4927      	ldr	r1, [pc, #156]	@ (800cce4 <udp_input_local_match+0xb8>)
 800cc46:	4828      	ldr	r0, [pc, #160]	@ (800cce8 <udp_input_local_match+0xbc>)
 800cc48:	f003 fb74 	bl	8010334 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d105      	bne.n	800cc5e <udp_input_local_match+0x32>
 800cc52:	4b23      	ldr	r3, [pc, #140]	@ (800cce0 <udp_input_local_match+0xb4>)
 800cc54:	2288      	movs	r2, #136	@ 0x88
 800cc56:	4925      	ldr	r1, [pc, #148]	@ (800ccec <udp_input_local_match+0xc0>)
 800cc58:	4823      	ldr	r0, [pc, #140]	@ (800cce8 <udp_input_local_match+0xbc>)
 800cc5a:	f003 fb6b 	bl	8010334 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	7a1b      	ldrb	r3, [r3, #8]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00b      	beq.n	800cc7e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	7a1a      	ldrb	r2, [r3, #8]
 800cc6a:	4b21      	ldr	r3, [pc, #132]	@ (800ccf0 <udp_input_local_match+0xc4>)
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc72:	3301      	adds	r3, #1
 800cc74:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d001      	beq.n	800cc7e <udp_input_local_match+0x52>
    return 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e02b      	b.n	800ccd6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cc7e:	79fb      	ldrb	r3, [r7, #7]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d018      	beq.n	800ccb6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d013      	beq.n	800ccb2 <udp_input_local_match+0x86>
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00f      	beq.n	800ccb2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cc92:	4b17      	ldr	r3, [pc, #92]	@ (800ccf0 <udp_input_local_match+0xc4>)
 800cc94:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9a:	d00a      	beq.n	800ccb2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	4b13      	ldr	r3, [pc, #76]	@ (800ccf0 <udp_input_local_match+0xc4>)
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	405a      	eors	r2, r3
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	3308      	adds	r3, #8
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d110      	bne.n	800ccd4 <udp_input_local_match+0xa8>
          return 1;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e00f      	b.n	800ccd6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d009      	beq.n	800ccd0 <udp_input_local_match+0xa4>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d005      	beq.n	800ccd0 <udp_input_local_match+0xa4>
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	4b09      	ldr	r3, [pc, #36]	@ (800ccf0 <udp_input_local_match+0xc4>)
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d101      	bne.n	800ccd4 <udp_input_local_match+0xa8>
        return 1;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e000      	b.n	800ccd6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	080127a8 	.word	0x080127a8
 800cce4:	080127d8 	.word	0x080127d8
 800cce8:	080127fc 	.word	0x080127fc
 800ccec:	08012824 	.word	0x08012824
 800ccf0:	20009df0 	.word	0x20009df0

0800ccf4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ccf4:	b590      	push	{r4, r7, lr}
 800ccf6:	b08d      	sub	sp, #52	@ 0x34
 800ccf8:	af02      	add	r7, sp, #8
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d105      	bne.n	800cd14 <udp_input+0x20>
 800cd08:	4b7c      	ldr	r3, [pc, #496]	@ (800cefc <udp_input+0x208>)
 800cd0a:	22cf      	movs	r2, #207	@ 0xcf
 800cd0c:	497c      	ldr	r1, [pc, #496]	@ (800cf00 <udp_input+0x20c>)
 800cd0e:	487d      	ldr	r0, [pc, #500]	@ (800cf04 <udp_input+0x210>)
 800cd10:	f003 fb10 	bl	8010334 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d105      	bne.n	800cd26 <udp_input+0x32>
 800cd1a:	4b78      	ldr	r3, [pc, #480]	@ (800cefc <udp_input+0x208>)
 800cd1c:	22d0      	movs	r2, #208	@ 0xd0
 800cd1e:	497a      	ldr	r1, [pc, #488]	@ (800cf08 <udp_input+0x214>)
 800cd20:	4878      	ldr	r0, [pc, #480]	@ (800cf04 <udp_input+0x210>)
 800cd22:	f003 fb07 	bl	8010334 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	895b      	ldrh	r3, [r3, #10]
 800cd2a:	2b07      	cmp	r3, #7
 800cd2c:	d803      	bhi.n	800cd36 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff fb2e 	bl	800c390 <pbuf_free>
    goto end;
 800cd34:	e0de      	b.n	800cef4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cd3c:	4b73      	ldr	r3, [pc, #460]	@ (800cf0c <udp_input+0x218>)
 800cd3e:	695b      	ldr	r3, [r3, #20]
 800cd40:	4a72      	ldr	r2, [pc, #456]	@ (800cf0c <udp_input+0x218>)
 800cd42:	6812      	ldr	r2, [r2, #0]
 800cd44:	4611      	mov	r1, r2
 800cd46:	4618      	mov	r0, r3
 800cd48:	f001 ff76 	bl	800ec38 <ip4_addr_isbroadcast_u32>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	881b      	ldrh	r3, [r3, #0]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fd ff8a 	bl	800ac70 <lwip_htons>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	885b      	ldrh	r3, [r3, #2]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fd ff82 	bl	800ac70 <lwip_htons>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cd70:	2300      	movs	r3, #0
 800cd72:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd7c:	4b64      	ldr	r3, [pc, #400]	@ (800cf10 <udp_input+0x21c>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd82:	e054      	b.n	800ce2e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd86:	8a5b      	ldrh	r3, [r3, #18]
 800cd88:	89fa      	ldrh	r2, [r7, #14]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d14a      	bne.n	800ce24 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cd8e:	7cfb      	ldrb	r3, [r7, #19]
 800cd90:	461a      	mov	r2, r3
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd96:	f7ff ff49 	bl	800cc2c <udp_input_local_match>
 800cd9a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d041      	beq.n	800ce24 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda2:	7c1b      	ldrb	r3, [r3, #16]
 800cda4:	f003 0304 	and.w	r3, r3, #4
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d11d      	bne.n	800cde8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d102      	bne.n	800cdb8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb4:	61fb      	str	r3, [r7, #28]
 800cdb6:	e017      	b.n	800cde8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cdb8:	7cfb      	ldrb	r3, [r7, #19]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d014      	beq.n	800cde8 <udp_input+0xf4>
 800cdbe:	4b53      	ldr	r3, [pc, #332]	@ (800cf0c <udp_input+0x218>)
 800cdc0:	695b      	ldr	r3, [r3, #20]
 800cdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc6:	d10f      	bne.n	800cde8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	3304      	adds	r3, #4
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d008      	beq.n	800cde8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	3304      	adds	r3, #4
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d101      	bne.n	800cde8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdea:	8a9b      	ldrh	r3, [r3, #20]
 800cdec:	8a3a      	ldrh	r2, [r7, #16]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d118      	bne.n	800ce24 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d005      	beq.n	800ce06 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	4b43      	ldr	r3, [pc, #268]	@ (800cf0c <udp_input+0x218>)
 800ce00:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d10e      	bne.n	800ce24 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ce06:	6a3b      	ldr	r3, [r7, #32]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d014      	beq.n	800ce36 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0e:	68da      	ldr	r2, [r3, #12]
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ce14:	4b3e      	ldr	r3, [pc, #248]	@ (800cf10 <udp_input+0x21c>)
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ce1c:	4a3c      	ldr	r2, [pc, #240]	@ (800cf10 <udp_input+0x21c>)
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce20:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ce22:	e008      	b.n	800ce36 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce26:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1a7      	bne.n	800cd84 <udp_input+0x90>
 800ce34:	e000      	b.n	800ce38 <udp_input+0x144>
        break;
 800ce36:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ce38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ce42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <udp_input+0x15a>
    for_us = 1;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	76fb      	strb	r3, [r7, #27]
 800ce4c:	e00a      	b.n	800ce64 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	3304      	adds	r3, #4
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	4b2d      	ldr	r3, [pc, #180]	@ (800cf0c <udp_input+0x218>)
 800ce56:	695b      	ldr	r3, [r3, #20]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	bf0c      	ite	eq
 800ce5c:	2301      	moveq	r3, #1
 800ce5e:	2300      	movne	r3, #0
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ce64:	7efb      	ldrb	r3, [r7, #27]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d041      	beq.n	800ceee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ce6a:	2108      	movs	r1, #8
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7ff fa09 	bl	800c284 <pbuf_remove_header>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00a      	beq.n	800ce8e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ce78:	4b20      	ldr	r3, [pc, #128]	@ (800cefc <udp_input+0x208>)
 800ce7a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ce7e:	4925      	ldr	r1, [pc, #148]	@ (800cf14 <udp_input+0x220>)
 800ce80:	4820      	ldr	r0, [pc, #128]	@ (800cf04 <udp_input+0x210>)
 800ce82:	f003 fa57 	bl	8010334 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7ff fa82 	bl	800c390 <pbuf_free>
      goto end;
 800ce8c:	e032      	b.n	800cef4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d012      	beq.n	800ceba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ce94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00a      	beq.n	800ceb2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9e:	699c      	ldr	r4, [r3, #24]
 800cea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea2:	69d8      	ldr	r0, [r3, #28]
 800cea4:	8a3b      	ldrh	r3, [r7, #16]
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	4b1b      	ldr	r3, [pc, #108]	@ (800cf18 <udp_input+0x224>)
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ceae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ceb0:	e021      	b.n	800cef6 <udp_input+0x202>
        pbuf_free(p);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff fa6c 	bl	800c390 <pbuf_free>
        goto end;
 800ceb8:	e01c      	b.n	800cef4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ceba:	7cfb      	ldrb	r3, [r7, #19]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d112      	bne.n	800cee6 <udp_input+0x1f2>
 800cec0:	4b12      	ldr	r3, [pc, #72]	@ (800cf0c <udp_input+0x218>)
 800cec2:	695b      	ldr	r3, [r3, #20]
 800cec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cec8:	2be0      	cmp	r3, #224	@ 0xe0
 800ceca:	d00c      	beq.n	800cee6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cecc:	4b0f      	ldr	r3, [pc, #60]	@ (800cf0c <udp_input+0x218>)
 800cece:	899b      	ldrh	r3, [r3, #12]
 800ced0:	3308      	adds	r3, #8
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	b21b      	sxth	r3, r3
 800ced6:	4619      	mov	r1, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7ff fa46 	bl	800c36a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cede:	2103      	movs	r1, #3
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f001 fb93 	bl	800e60c <icmp_dest_unreach>
      pbuf_free(p);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7ff fa52 	bl	800c390 <pbuf_free>
  return;
 800ceec:	e003      	b.n	800cef6 <udp_input+0x202>
    pbuf_free(p);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7ff fa4e 	bl	800c390 <pbuf_free>
  return;
 800cef4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cef6:	372c      	adds	r7, #44	@ 0x2c
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd90      	pop	{r4, r7, pc}
 800cefc:	080127a8 	.word	0x080127a8
 800cf00:	0801284c 	.word	0x0801284c
 800cf04:	080127fc 	.word	0x080127fc
 800cf08:	08012864 	.word	0x08012864
 800cf0c:	20009df0 	.word	0x20009df0
 800cf10:	2000d018 	.word	0x2000d018
 800cf14:	08012880 	.word	0x08012880
 800cf18:	20009e00 	.word	0x20009e00

0800cf1c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d109      	bne.n	800cf40 <udp_send+0x24>
 800cf2c:	4b11      	ldr	r3, [pc, #68]	@ (800cf74 <udp_send+0x58>)
 800cf2e:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800cf32:	4911      	ldr	r1, [pc, #68]	@ (800cf78 <udp_send+0x5c>)
 800cf34:	4811      	ldr	r0, [pc, #68]	@ (800cf7c <udp_send+0x60>)
 800cf36:	f003 f9fd 	bl	8010334 <iprintf>
 800cf3a:	f06f 030f 	mvn.w	r3, #15
 800cf3e:	e015      	b.n	800cf6c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d109      	bne.n	800cf5a <udp_send+0x3e>
 800cf46:	4b0b      	ldr	r3, [pc, #44]	@ (800cf74 <udp_send+0x58>)
 800cf48:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800cf4c:	490c      	ldr	r1, [pc, #48]	@ (800cf80 <udp_send+0x64>)
 800cf4e:	480b      	ldr	r0, [pc, #44]	@ (800cf7c <udp_send+0x60>)
 800cf50:	f003 f9f0 	bl	8010334 <iprintf>
 800cf54:	f06f 030f 	mvn.w	r3, #15
 800cf58:	e008      	b.n	800cf6c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	1d1a      	adds	r2, r3, #4
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	8a9b      	ldrh	r3, [r3, #20]
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f80d 	bl	800cf84 <udp_sendto>
 800cf6a:	4603      	mov	r3, r0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	080127a8 	.word	0x080127a8
 800cf78:	0801289c 	.word	0x0801289c
 800cf7c:	080127fc 	.word	0x080127fc
 800cf80:	080128b4 	.word	0x080128b4

0800cf84 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af02      	add	r7, sp, #8
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d109      	bne.n	800cfac <udp_sendto+0x28>
 800cf98:	4b23      	ldr	r3, [pc, #140]	@ (800d028 <udp_sendto+0xa4>)
 800cf9a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cf9e:	4923      	ldr	r1, [pc, #140]	@ (800d02c <udp_sendto+0xa8>)
 800cfa0:	4823      	ldr	r0, [pc, #140]	@ (800d030 <udp_sendto+0xac>)
 800cfa2:	f003 f9c7 	bl	8010334 <iprintf>
 800cfa6:	f06f 030f 	mvn.w	r3, #15
 800cfaa:	e038      	b.n	800d01e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d109      	bne.n	800cfc6 <udp_sendto+0x42>
 800cfb2:	4b1d      	ldr	r3, [pc, #116]	@ (800d028 <udp_sendto+0xa4>)
 800cfb4:	f240 2219 	movw	r2, #537	@ 0x219
 800cfb8:	491e      	ldr	r1, [pc, #120]	@ (800d034 <udp_sendto+0xb0>)
 800cfba:	481d      	ldr	r0, [pc, #116]	@ (800d030 <udp_sendto+0xac>)
 800cfbc:	f003 f9ba 	bl	8010334 <iprintf>
 800cfc0:	f06f 030f 	mvn.w	r3, #15
 800cfc4:	e02b      	b.n	800d01e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d109      	bne.n	800cfe0 <udp_sendto+0x5c>
 800cfcc:	4b16      	ldr	r3, [pc, #88]	@ (800d028 <udp_sendto+0xa4>)
 800cfce:	f240 221a 	movw	r2, #538	@ 0x21a
 800cfd2:	4919      	ldr	r1, [pc, #100]	@ (800d038 <udp_sendto+0xb4>)
 800cfd4:	4816      	ldr	r0, [pc, #88]	@ (800d030 <udp_sendto+0xac>)
 800cfd6:	f003 f9ad 	bl	8010334 <iprintf>
 800cfda:	f06f 030f 	mvn.w	r3, #15
 800cfde:	e01e      	b.n	800d01e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	7a1b      	ldrb	r3, [r3, #8]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d006      	beq.n	800cff6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	7a1b      	ldrb	r3, [r3, #8]
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fe fe9d 	bl	800bd2c <netif_get_by_index>
 800cff2:	6178      	str	r0, [r7, #20]
 800cff4:	e003      	b.n	800cffe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f001 fb92 	bl	800e720 <ip4_route>
 800cffc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d102      	bne.n	800d00a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800d004:	f06f 0303 	mvn.w	r3, #3
 800d008:	e009      	b.n	800d01e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d00a:	887a      	ldrh	r2, [r7, #2]
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	4613      	mov	r3, r2
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	68b9      	ldr	r1, [r7, #8]
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f000 f810 	bl	800d03c <udp_sendto_if>
 800d01c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3718      	adds	r7, #24
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	080127a8 	.word	0x080127a8
 800d02c:	080128cc 	.word	0x080128cc
 800d030:	080127fc 	.word	0x080127fc
 800d034:	080128e4 	.word	0x080128e4
 800d038:	08012900 	.word	0x08012900

0800d03c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af02      	add	r7, sp, #8
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
 800d048:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d109      	bne.n	800d064 <udp_sendto_if+0x28>
 800d050:	4b2e      	ldr	r3, [pc, #184]	@ (800d10c <udp_sendto_if+0xd0>)
 800d052:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d056:	492e      	ldr	r1, [pc, #184]	@ (800d110 <udp_sendto_if+0xd4>)
 800d058:	482e      	ldr	r0, [pc, #184]	@ (800d114 <udp_sendto_if+0xd8>)
 800d05a:	f003 f96b 	bl	8010334 <iprintf>
 800d05e:	f06f 030f 	mvn.w	r3, #15
 800d062:	e04f      	b.n	800d104 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d109      	bne.n	800d07e <udp_sendto_if+0x42>
 800d06a:	4b28      	ldr	r3, [pc, #160]	@ (800d10c <udp_sendto_if+0xd0>)
 800d06c:	f240 2281 	movw	r2, #641	@ 0x281
 800d070:	4929      	ldr	r1, [pc, #164]	@ (800d118 <udp_sendto_if+0xdc>)
 800d072:	4828      	ldr	r0, [pc, #160]	@ (800d114 <udp_sendto_if+0xd8>)
 800d074:	f003 f95e 	bl	8010334 <iprintf>
 800d078:	f06f 030f 	mvn.w	r3, #15
 800d07c:	e042      	b.n	800d104 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d109      	bne.n	800d098 <udp_sendto_if+0x5c>
 800d084:	4b21      	ldr	r3, [pc, #132]	@ (800d10c <udp_sendto_if+0xd0>)
 800d086:	f240 2282 	movw	r2, #642	@ 0x282
 800d08a:	4924      	ldr	r1, [pc, #144]	@ (800d11c <udp_sendto_if+0xe0>)
 800d08c:	4821      	ldr	r0, [pc, #132]	@ (800d114 <udp_sendto_if+0xd8>)
 800d08e:	f003 f951 	bl	8010334 <iprintf>
 800d092:	f06f 030f 	mvn.w	r3, #15
 800d096:	e035      	b.n	800d104 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d109      	bne.n	800d0b2 <udp_sendto_if+0x76>
 800d09e:	4b1b      	ldr	r3, [pc, #108]	@ (800d10c <udp_sendto_if+0xd0>)
 800d0a0:	f240 2283 	movw	r2, #643	@ 0x283
 800d0a4:	491e      	ldr	r1, [pc, #120]	@ (800d120 <udp_sendto_if+0xe4>)
 800d0a6:	481b      	ldr	r0, [pc, #108]	@ (800d114 <udp_sendto_if+0xd8>)
 800d0a8:	f003 f944 	bl	8010334 <iprintf>
 800d0ac:	f06f 030f 	mvn.w	r3, #15
 800d0b0:	e028      	b.n	800d104 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d009      	beq.n	800d0cc <udp_sendto_if+0x90>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d005      	beq.n	800d0cc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d0c8:	2be0      	cmp	r3, #224	@ 0xe0
 800d0ca:	d103      	bne.n	800d0d4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	617b      	str	r3, [r7, #20]
 800d0d2:	e00b      	b.n	800d0ec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	6a3b      	ldr	r3, [r7, #32]
 800d0da:	3304      	adds	r3, #4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d002      	beq.n	800d0e8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d0e2:	f06f 0303 	mvn.w	r3, #3
 800d0e6:	e00d      	b.n	800d104 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d0ec:	887a      	ldrh	r2, [r7, #2]
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	6a3b      	ldr	r3, [r7, #32]
 800d0f4:	9300      	str	r3, [sp, #0]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	68b9      	ldr	r1, [r7, #8]
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f000 f811 	bl	800d124 <udp_sendto_if_src>
 800d102:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d104:	4618      	mov	r0, r3
 800d106:	3718      	adds	r7, #24
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	080127a8 	.word	0x080127a8
 800d110:	0801291c 	.word	0x0801291c
 800d114:	080127fc 	.word	0x080127fc
 800d118:	08012938 	.word	0x08012938
 800d11c:	08012954 	.word	0x08012954
 800d120:	08012974 	.word	0x08012974

0800d124 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b08c      	sub	sp, #48	@ 0x30
 800d128:	af04      	add	r7, sp, #16
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
 800d130:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d109      	bne.n	800d14c <udp_sendto_if_src+0x28>
 800d138:	4b65      	ldr	r3, [pc, #404]	@ (800d2d0 <udp_sendto_if_src+0x1ac>)
 800d13a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d13e:	4965      	ldr	r1, [pc, #404]	@ (800d2d4 <udp_sendto_if_src+0x1b0>)
 800d140:	4865      	ldr	r0, [pc, #404]	@ (800d2d8 <udp_sendto_if_src+0x1b4>)
 800d142:	f003 f8f7 	bl	8010334 <iprintf>
 800d146:	f06f 030f 	mvn.w	r3, #15
 800d14a:	e0bc      	b.n	800d2c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d109      	bne.n	800d166 <udp_sendto_if_src+0x42>
 800d152:	4b5f      	ldr	r3, [pc, #380]	@ (800d2d0 <udp_sendto_if_src+0x1ac>)
 800d154:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800d158:	4960      	ldr	r1, [pc, #384]	@ (800d2dc <udp_sendto_if_src+0x1b8>)
 800d15a:	485f      	ldr	r0, [pc, #380]	@ (800d2d8 <udp_sendto_if_src+0x1b4>)
 800d15c:	f003 f8ea 	bl	8010334 <iprintf>
 800d160:	f06f 030f 	mvn.w	r3, #15
 800d164:	e0af      	b.n	800d2c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d109      	bne.n	800d180 <udp_sendto_if_src+0x5c>
 800d16c:	4b58      	ldr	r3, [pc, #352]	@ (800d2d0 <udp_sendto_if_src+0x1ac>)
 800d16e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800d172:	495b      	ldr	r1, [pc, #364]	@ (800d2e0 <udp_sendto_if_src+0x1bc>)
 800d174:	4858      	ldr	r0, [pc, #352]	@ (800d2d8 <udp_sendto_if_src+0x1b4>)
 800d176:	f003 f8dd 	bl	8010334 <iprintf>
 800d17a:	f06f 030f 	mvn.w	r3, #15
 800d17e:	e0a2      	b.n	800d2c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	2b00      	cmp	r3, #0
 800d184:	d109      	bne.n	800d19a <udp_sendto_if_src+0x76>
 800d186:	4b52      	ldr	r3, [pc, #328]	@ (800d2d0 <udp_sendto_if_src+0x1ac>)
 800d188:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800d18c:	4955      	ldr	r1, [pc, #340]	@ (800d2e4 <udp_sendto_if_src+0x1c0>)
 800d18e:	4852      	ldr	r0, [pc, #328]	@ (800d2d8 <udp_sendto_if_src+0x1b4>)
 800d190:	f003 f8d0 	bl	8010334 <iprintf>
 800d194:	f06f 030f 	mvn.w	r3, #15
 800d198:	e095      	b.n	800d2c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d109      	bne.n	800d1b4 <udp_sendto_if_src+0x90>
 800d1a0:	4b4b      	ldr	r3, [pc, #300]	@ (800d2d0 <udp_sendto_if_src+0x1ac>)
 800d1a2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800d1a6:	4950      	ldr	r1, [pc, #320]	@ (800d2e8 <udp_sendto_if_src+0x1c4>)
 800d1a8:	484b      	ldr	r0, [pc, #300]	@ (800d2d8 <udp_sendto_if_src+0x1b4>)
 800d1aa:	f003 f8c3 	bl	8010334 <iprintf>
 800d1ae:	f06f 030f 	mvn.w	r3, #15
 800d1b2:	e088      	b.n	800d2c6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	8a5b      	ldrh	r3, [r3, #18]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10f      	bne.n	800d1dc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d1bc:	68f9      	ldr	r1, [r7, #12]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	8a5b      	ldrh	r3, [r3, #18]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f000 f893 	bl	800d2f0 <udp_bind>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d1ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d1d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d1da:	e074      	b.n	800d2c6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	891b      	ldrh	r3, [r3, #8]
 800d1e0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d902      	bls.n	800d1ee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ec:	e06b      	b.n	800d2c6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d1ee:	2108      	movs	r1, #8
 800d1f0:	68b8      	ldr	r0, [r7, #8]
 800d1f2:	f7ff f837 	bl	800c264 <pbuf_add_header>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d015      	beq.n	800d228 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d1fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d200:	2108      	movs	r1, #8
 800d202:	2022      	movs	r0, #34	@ 0x22
 800d204:	f7fe fde2 	bl	800bdcc <pbuf_alloc>
 800d208:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d102      	bne.n	800d216 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d210:	f04f 33ff 	mov.w	r3, #4294967295
 800d214:	e057      	b.n	800d2c6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	891b      	ldrh	r3, [r3, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d006      	beq.n	800d22c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d21e:	68b9      	ldr	r1, [r7, #8]
 800d220:	69f8      	ldr	r0, [r7, #28]
 800d222:	f7ff f9d9 	bl	800c5d8 <pbuf_chain>
 800d226:	e001      	b.n	800d22c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	895b      	ldrh	r3, [r3, #10]
 800d230:	2b07      	cmp	r3, #7
 800d232:	d806      	bhi.n	800d242 <udp_sendto_if_src+0x11e>
 800d234:	4b26      	ldr	r3, [pc, #152]	@ (800d2d0 <udp_sendto_if_src+0x1ac>)
 800d236:	f240 320d 	movw	r2, #781	@ 0x30d
 800d23a:	492c      	ldr	r1, [pc, #176]	@ (800d2ec <udp_sendto_if_src+0x1c8>)
 800d23c:	4826      	ldr	r0, [pc, #152]	@ (800d2d8 <udp_sendto_if_src+0x1b4>)
 800d23e:	f003 f879 	bl	8010334 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8a5b      	ldrh	r3, [r3, #18]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fd fd0f 	bl	800ac70 <lwip_htons>
 800d252:	4603      	mov	r3, r0
 800d254:	461a      	mov	r2, r3
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d25a:	887b      	ldrh	r3, [r7, #2]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fd fd07 	bl	800ac70 <lwip_htons>
 800d262:	4603      	mov	r3, r0
 800d264:	461a      	mov	r2, r3
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2200      	movs	r2, #0
 800d26e:	719a      	strb	r2, [r3, #6]
 800d270:	2200      	movs	r2, #0
 800d272:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	891b      	ldrh	r3, [r3, #8]
 800d278:	4618      	mov	r0, r3
 800d27a:	f7fd fcf9 	bl	800ac70 <lwip_htons>
 800d27e:	4603      	mov	r3, r0
 800d280:	461a      	mov	r2, r3
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d286:	2311      	movs	r3, #17
 800d288:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	7adb      	ldrb	r3, [r3, #11]
 800d28e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	7a9b      	ldrb	r3, [r3, #10]
 800d294:	7cb9      	ldrb	r1, [r7, #18]
 800d296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d298:	9202      	str	r2, [sp, #8]
 800d29a:	7cfa      	ldrb	r2, [r7, #19]
 800d29c:	9201      	str	r2, [sp, #4]
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2a6:	69f8      	ldr	r0, [r7, #28]
 800d2a8:	f001 fc18 	bl	800eadc <ip4_output_if_src>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d2b0:	69fa      	ldr	r2, [r7, #28]
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d004      	beq.n	800d2c2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d2b8:	69f8      	ldr	r0, [r7, #28]
 800d2ba:	f7ff f869 	bl	800c390 <pbuf_free>
    q = NULL;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d2c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3720      	adds	r7, #32
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	080127a8 	.word	0x080127a8
 800d2d4:	08012994 	.word	0x08012994
 800d2d8:	080127fc 	.word	0x080127fc
 800d2dc:	080129b4 	.word	0x080129b4
 800d2e0:	080129d4 	.word	0x080129d4
 800d2e4:	080129f8 	.word	0x080129f8
 800d2e8:	08012a1c 	.word	0x08012a1c
 800d2ec:	08012a40 	.word	0x08012a40

0800d2f0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d101      	bne.n	800d308 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d304:	4b39      	ldr	r3, [pc, #228]	@ (800d3ec <udp_bind+0xfc>)
 800d306:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d109      	bne.n	800d322 <udp_bind+0x32>
 800d30e:	4b38      	ldr	r3, [pc, #224]	@ (800d3f0 <udp_bind+0x100>)
 800d310:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800d314:	4937      	ldr	r1, [pc, #220]	@ (800d3f4 <udp_bind+0x104>)
 800d316:	4838      	ldr	r0, [pc, #224]	@ (800d3f8 <udp_bind+0x108>)
 800d318:	f003 f80c 	bl	8010334 <iprintf>
 800d31c:	f06f 030f 	mvn.w	r3, #15
 800d320:	e060      	b.n	800d3e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d322:	2300      	movs	r3, #0
 800d324:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d326:	4b35      	ldr	r3, [pc, #212]	@ (800d3fc <udp_bind+0x10c>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	617b      	str	r3, [r7, #20]
 800d32c:	e009      	b.n	800d342 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d32e:	68fa      	ldr	r2, [r7, #12]
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	429a      	cmp	r2, r3
 800d334:	d102      	bne.n	800d33c <udp_bind+0x4c>
      rebind = 1;
 800d336:	2301      	movs	r3, #1
 800d338:	74fb      	strb	r3, [r7, #19]
      break;
 800d33a:	e005      	b.n	800d348 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	617b      	str	r3, [r7, #20]
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1f2      	bne.n	800d32e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d348:	88fb      	ldrh	r3, [r7, #6]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d109      	bne.n	800d362 <udp_bind+0x72>
    port = udp_new_port();
 800d34e:	f7ff fc35 	bl	800cbbc <udp_new_port>
 800d352:	4603      	mov	r3, r0
 800d354:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d356:	88fb      	ldrh	r3, [r7, #6]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d12c      	bne.n	800d3b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d35c:	f06f 0307 	mvn.w	r3, #7
 800d360:	e040      	b.n	800d3e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d362:	4b26      	ldr	r3, [pc, #152]	@ (800d3fc <udp_bind+0x10c>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	617b      	str	r3, [r7, #20]
 800d368:	e022      	b.n	800d3b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d01b      	beq.n	800d3aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	8a5b      	ldrh	r3, [r3, #18]
 800d376:	88fa      	ldrh	r2, [r7, #6]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d116      	bne.n	800d3aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d384:	429a      	cmp	r2, r3
 800d386:	d00d      	beq.n	800d3a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00a      	beq.n	800d3a4 <udp_bind+0xb4>
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d006      	beq.n	800d3a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d396:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d003      	beq.n	800d3a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d102      	bne.n	800d3aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d3a4:	f06f 0307 	mvn.w	r3, #7
 800d3a8:	e01c      	b.n	800d3e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	617b      	str	r3, [r7, #20]
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1d9      	bne.n	800d36a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <udp_bind+0xd2>
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	e000      	b.n	800d3c4 <udp_bind+0xd4>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	88fa      	ldrh	r2, [r7, #6]
 800d3cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d3ce:	7cfb      	ldrb	r3, [r7, #19]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d106      	bne.n	800d3e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d3d4:	4b09      	ldr	r3, [pc, #36]	@ (800d3fc <udp_bind+0x10c>)
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d3dc:	4a07      	ldr	r2, [pc, #28]	@ (800d3fc <udp_bind+0x10c>)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	08013358 	.word	0x08013358
 800d3f0:	080127a8 	.word	0x080127a8
 800d3f4:	08012a70 	.word	0x08012a70
 800d3f8:	080127fc 	.word	0x080127fc
 800d3fc:	2000d018 	.word	0x2000d018

0800d400 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d107      	bne.n	800d422 <udp_recv+0x22>
 800d412:	4b08      	ldr	r3, [pc, #32]	@ (800d434 <udp_recv+0x34>)
 800d414:	f240 428a 	movw	r2, #1162	@ 0x48a
 800d418:	4907      	ldr	r1, [pc, #28]	@ (800d438 <udp_recv+0x38>)
 800d41a:	4808      	ldr	r0, [pc, #32]	@ (800d43c <udp_recv+0x3c>)
 800d41c:	f002 ff8a 	bl	8010334 <iprintf>
 800d420:	e005      	b.n	800d42e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	61da      	str	r2, [r3, #28]
}
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	080127a8 	.word	0x080127a8
 800d438:	08012adc 	.word	0x08012adc
 800d43c:	080127fc 	.word	0x080127fc

0800d440 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d107      	bne.n	800d45e <udp_remove+0x1e>
 800d44e:	4b19      	ldr	r3, [pc, #100]	@ (800d4b4 <udp_remove+0x74>)
 800d450:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800d454:	4918      	ldr	r1, [pc, #96]	@ (800d4b8 <udp_remove+0x78>)
 800d456:	4819      	ldr	r0, [pc, #100]	@ (800d4bc <udp_remove+0x7c>)
 800d458:	f002 ff6c 	bl	8010334 <iprintf>
 800d45c:	e026      	b.n	800d4ac <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d45e:	4b18      	ldr	r3, [pc, #96]	@ (800d4c0 <udp_remove+0x80>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	429a      	cmp	r2, r3
 800d466:	d105      	bne.n	800d474 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d468:	4b15      	ldr	r3, [pc, #84]	@ (800d4c0 <udp_remove+0x80>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	4a14      	ldr	r2, [pc, #80]	@ (800d4c0 <udp_remove+0x80>)
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	e017      	b.n	800d4a4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d474:	4b12      	ldr	r3, [pc, #72]	@ (800d4c0 <udp_remove+0x80>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	e010      	b.n	800d49e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d009      	beq.n	800d498 <udp_remove+0x58>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d104      	bne.n	800d498 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68da      	ldr	r2, [r3, #12]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	60da      	str	r2, [r3, #12]
        break;
 800d496:	e005      	b.n	800d4a4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	60fb      	str	r3, [r7, #12]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1eb      	bne.n	800d47c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d4a4:	6879      	ldr	r1, [r7, #4]
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	f7fe f92e 	bl	800b708 <memp_free>
}
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	080127a8 	.word	0x080127a8
 800d4b8:	08012af4 	.word	0x08012af4
 800d4bc:	080127fc 	.word	0x080127fc
 800d4c0:	2000d018 	.word	0x2000d018

0800d4c4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	f7fe f8a6 	bl	800b61c <memp_malloc>
 800d4d0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d007      	beq.n	800d4e8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d4d8:	2220      	movs	r2, #32
 800d4da:	2100      	movs	r1, #0
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f002 ff8e 	bl	80103fe <memset>
    pcb->ttl = UDP_TTL;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	22ff      	movs	r2, #255	@ 0xff
 800d4e6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d4e8:	687b      	ldr	r3, [r7, #4]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3708      	adds	r7, #8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b084      	sub	sp, #16
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800d4fc:	f7ff ffe2 	bl	800d4c4 <udp_new>
 800d500:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d502:	68fb      	ldr	r3, [r7, #12]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3710      	adds	r7, #16
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b085      	sub	sp, #20
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01e      	beq.n	800d55a <udp_netif_ip_addr_changed+0x4e>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d01a      	beq.n	800d55a <udp_netif_ip_addr_changed+0x4e>
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d017      	beq.n	800d55a <udp_netif_ip_addr_changed+0x4e>
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d013      	beq.n	800d55a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d532:	4b0d      	ldr	r3, [pc, #52]	@ (800d568 <udp_netif_ip_addr_changed+0x5c>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	e00c      	b.n	800d554 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	429a      	cmp	r2, r3
 800d544:	d103      	bne.n	800d54e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1ef      	bne.n	800d53a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d55a:	bf00      	nop
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	2000d018 	.word	0x2000d018

0800d56c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d574:	4915      	ldr	r1, [pc, #84]	@ (800d5cc <etharp_free_entry+0x60>)
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	4613      	mov	r3, r2
 800d57a:	005b      	lsls	r3, r3, #1
 800d57c:	4413      	add	r3, r2
 800d57e:	00db      	lsls	r3, r3, #3
 800d580:	440b      	add	r3, r1
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d013      	beq.n	800d5b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d588:	4910      	ldr	r1, [pc, #64]	@ (800d5cc <etharp_free_entry+0x60>)
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	4613      	mov	r3, r2
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	4413      	add	r3, r2
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	440b      	add	r3, r1
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fe fef9 	bl	800c390 <pbuf_free>
    arp_table[i].q = NULL;
 800d59e:	490b      	ldr	r1, [pc, #44]	@ (800d5cc <etharp_free_entry+0x60>)
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	4413      	add	r3, r2
 800d5a8:	00db      	lsls	r3, r3, #3
 800d5aa:	440b      	add	r3, r1
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d5b0:	4906      	ldr	r1, [pc, #24]	@ (800d5cc <etharp_free_entry+0x60>)
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	005b      	lsls	r3, r3, #1
 800d5b8:	4413      	add	r3, r2
 800d5ba:	00db      	lsls	r3, r3, #3
 800d5bc:	440b      	add	r3, r1
 800d5be:	3314      	adds	r3, #20
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d5c4:	bf00      	nop
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	2000d01c 	.word	0x2000d01c

0800d5d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	607b      	str	r3, [r7, #4]
 800d5da:	e096      	b.n	800d70a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d5dc:	494f      	ldr	r1, [pc, #316]	@ (800d71c <etharp_tmr+0x14c>)
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	005b      	lsls	r3, r3, #1
 800d5e4:	4413      	add	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	440b      	add	r3, r1
 800d5ea:	3314      	adds	r3, #20
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d5f0:	78fb      	ldrb	r3, [r7, #3]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 8086 	beq.w	800d704 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d5f8:	4948      	ldr	r1, [pc, #288]	@ (800d71c <etharp_tmr+0x14c>)
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	4413      	add	r3, r2
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	440b      	add	r3, r1
 800d606:	3312      	adds	r3, #18
 800d608:	881b      	ldrh	r3, [r3, #0]
 800d60a:	3301      	adds	r3, #1
 800d60c:	b298      	uxth	r0, r3
 800d60e:	4943      	ldr	r1, [pc, #268]	@ (800d71c <etharp_tmr+0x14c>)
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	4613      	mov	r3, r2
 800d614:	005b      	lsls	r3, r3, #1
 800d616:	4413      	add	r3, r2
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	440b      	add	r3, r1
 800d61c:	3312      	adds	r3, #18
 800d61e:	4602      	mov	r2, r0
 800d620:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d622:	493e      	ldr	r1, [pc, #248]	@ (800d71c <etharp_tmr+0x14c>)
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	4613      	mov	r3, r2
 800d628:	005b      	lsls	r3, r3, #1
 800d62a:	4413      	add	r3, r2
 800d62c:	00db      	lsls	r3, r3, #3
 800d62e:	440b      	add	r3, r1
 800d630:	3312      	adds	r3, #18
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d638:	d215      	bcs.n	800d666 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d63a:	4938      	ldr	r1, [pc, #224]	@ (800d71c <etharp_tmr+0x14c>)
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	4613      	mov	r3, r2
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	4413      	add	r3, r2
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	440b      	add	r3, r1
 800d648:	3314      	adds	r3, #20
 800d64a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d10e      	bne.n	800d66e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d650:	4932      	ldr	r1, [pc, #200]	@ (800d71c <etharp_tmr+0x14c>)
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	4613      	mov	r3, r2
 800d656:	005b      	lsls	r3, r3, #1
 800d658:	4413      	add	r3, r2
 800d65a:	00db      	lsls	r3, r3, #3
 800d65c:	440b      	add	r3, r1
 800d65e:	3312      	adds	r3, #18
 800d660:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d662:	2b04      	cmp	r3, #4
 800d664:	d903      	bls.n	800d66e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7ff ff80 	bl	800d56c <etharp_free_entry>
 800d66c:	e04a      	b.n	800d704 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d66e:	492b      	ldr	r1, [pc, #172]	@ (800d71c <etharp_tmr+0x14c>)
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	4613      	mov	r3, r2
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	4413      	add	r3, r2
 800d678:	00db      	lsls	r3, r3, #3
 800d67a:	440b      	add	r3, r1
 800d67c:	3314      	adds	r3, #20
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	2b03      	cmp	r3, #3
 800d682:	d10a      	bne.n	800d69a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d684:	4925      	ldr	r1, [pc, #148]	@ (800d71c <etharp_tmr+0x14c>)
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	4613      	mov	r3, r2
 800d68a:	005b      	lsls	r3, r3, #1
 800d68c:	4413      	add	r3, r2
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	440b      	add	r3, r1
 800d692:	3314      	adds	r3, #20
 800d694:	2204      	movs	r2, #4
 800d696:	701a      	strb	r2, [r3, #0]
 800d698:	e034      	b.n	800d704 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d69a:	4920      	ldr	r1, [pc, #128]	@ (800d71c <etharp_tmr+0x14c>)
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	005b      	lsls	r3, r3, #1
 800d6a2:	4413      	add	r3, r2
 800d6a4:	00db      	lsls	r3, r3, #3
 800d6a6:	440b      	add	r3, r1
 800d6a8:	3314      	adds	r3, #20
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	d10a      	bne.n	800d6c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d6b0:	491a      	ldr	r1, [pc, #104]	@ (800d71c <etharp_tmr+0x14c>)
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	005b      	lsls	r3, r3, #1
 800d6b8:	4413      	add	r3, r2
 800d6ba:	00db      	lsls	r3, r3, #3
 800d6bc:	440b      	add	r3, r1
 800d6be:	3314      	adds	r3, #20
 800d6c0:	2202      	movs	r2, #2
 800d6c2:	701a      	strb	r2, [r3, #0]
 800d6c4:	e01e      	b.n	800d704 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d6c6:	4915      	ldr	r1, [pc, #84]	@ (800d71c <etharp_tmr+0x14c>)
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	005b      	lsls	r3, r3, #1
 800d6ce:	4413      	add	r3, r2
 800d6d0:	00db      	lsls	r3, r3, #3
 800d6d2:	440b      	add	r3, r1
 800d6d4:	3314      	adds	r3, #20
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d113      	bne.n	800d704 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d6dc:	490f      	ldr	r1, [pc, #60]	@ (800d71c <etharp_tmr+0x14c>)
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	005b      	lsls	r3, r3, #1
 800d6e4:	4413      	add	r3, r2
 800d6e6:	00db      	lsls	r3, r3, #3
 800d6e8:	440b      	add	r3, r1
 800d6ea:	3308      	adds	r3, #8
 800d6ec:	6818      	ldr	r0, [r3, #0]
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	4413      	add	r3, r2
 800d6f6:	00db      	lsls	r3, r3, #3
 800d6f8:	4a08      	ldr	r2, [pc, #32]	@ (800d71c <etharp_tmr+0x14c>)
 800d6fa:	4413      	add	r3, r2
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	4619      	mov	r1, r3
 800d700:	f000 fe6e 	bl	800e3e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	3301      	adds	r3, #1
 800d708:	607b      	str	r3, [r7, #4]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b09      	cmp	r3, #9
 800d70e:	f77f af65 	ble.w	800d5dc <etharp_tmr+0xc>
      }
    }
  }
}
 800d712:	bf00      	nop
 800d714:	bf00      	nop
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	2000d01c 	.word	0x2000d01c

0800d720 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08a      	sub	sp, #40	@ 0x28
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	460b      	mov	r3, r1
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d72e:	230a      	movs	r3, #10
 800d730:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d732:	230a      	movs	r3, #10
 800d734:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d736:	230a      	movs	r3, #10
 800d738:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800d73a:	2300      	movs	r3, #0
 800d73c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d73e:	230a      	movs	r3, #10
 800d740:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d742:	2300      	movs	r3, #0
 800d744:	83bb      	strh	r3, [r7, #28]
 800d746:	2300      	movs	r3, #0
 800d748:	837b      	strh	r3, [r7, #26]
 800d74a:	2300      	movs	r3, #0
 800d74c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d74e:	2300      	movs	r3, #0
 800d750:	843b      	strh	r3, [r7, #32]
 800d752:	e0ae      	b.n	800d8b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d754:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d758:	49a6      	ldr	r1, [pc, #664]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d75a:	4613      	mov	r3, r2
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	4413      	add	r3, r2
 800d760:	00db      	lsls	r3, r3, #3
 800d762:	440b      	add	r3, r1
 800d764:	3314      	adds	r3, #20
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d76a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d76e:	2b0a      	cmp	r3, #10
 800d770:	d105      	bne.n	800d77e <etharp_find_entry+0x5e>
 800d772:	7dfb      	ldrb	r3, [r7, #23]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d102      	bne.n	800d77e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d778:	8c3b      	ldrh	r3, [r7, #32]
 800d77a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d77c:	e095      	b.n	800d8aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d77e:	7dfb      	ldrb	r3, [r7, #23]
 800d780:	2b00      	cmp	r3, #0
 800d782:	f000 8092 	beq.w	800d8aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d786:	7dfb      	ldrb	r3, [r7, #23]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d009      	beq.n	800d7a0 <etharp_find_entry+0x80>
 800d78c:	7dfb      	ldrb	r3, [r7, #23]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d806      	bhi.n	800d7a0 <etharp_find_entry+0x80>
 800d792:	4b99      	ldr	r3, [pc, #612]	@ (800d9f8 <etharp_find_entry+0x2d8>)
 800d794:	f240 1223 	movw	r2, #291	@ 0x123
 800d798:	4998      	ldr	r1, [pc, #608]	@ (800d9fc <etharp_find_entry+0x2dc>)
 800d79a:	4899      	ldr	r0, [pc, #612]	@ (800da00 <etharp_find_entry+0x2e0>)
 800d79c:	f002 fdca 	bl	8010334 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d020      	beq.n	800d7e8 <etharp_find_entry+0xc8>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	6819      	ldr	r1, [r3, #0]
 800d7aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7ae:	4891      	ldr	r0, [pc, #580]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	4413      	add	r3, r2
 800d7b6:	00db      	lsls	r3, r3, #3
 800d7b8:	4403      	add	r3, r0
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4299      	cmp	r1, r3
 800d7c0:	d112      	bne.n	800d7e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00c      	beq.n	800d7e2 <etharp_find_entry+0xc2>
 800d7c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7cc:	4989      	ldr	r1, [pc, #548]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	4413      	add	r3, r2
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	440b      	add	r3, r1
 800d7d8:	3308      	adds	r3, #8
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d102      	bne.n	800d7e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d7e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7e6:	e100      	b.n	800d9ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d140      	bne.n	800d870 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d7ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7f2:	4980      	ldr	r1, [pc, #512]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	4413      	add	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	440b      	add	r3, r1
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d01a      	beq.n	800d83a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d804:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d808:	497a      	ldr	r1, [pc, #488]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d80a:	4613      	mov	r3, r2
 800d80c:	005b      	lsls	r3, r3, #1
 800d80e:	4413      	add	r3, r2
 800d810:	00db      	lsls	r3, r3, #3
 800d812:	440b      	add	r3, r1
 800d814:	3312      	adds	r3, #18
 800d816:	881b      	ldrh	r3, [r3, #0]
 800d818:	8bba      	ldrh	r2, [r7, #28]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d845      	bhi.n	800d8aa <etharp_find_entry+0x18a>
            old_queue = i;
 800d81e:	8c3b      	ldrh	r3, [r7, #32]
 800d820:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d822:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d826:	4973      	ldr	r1, [pc, #460]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d828:	4613      	mov	r3, r2
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	4413      	add	r3, r2
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	440b      	add	r3, r1
 800d832:	3312      	adds	r3, #18
 800d834:	881b      	ldrh	r3, [r3, #0]
 800d836:	83bb      	strh	r3, [r7, #28]
 800d838:	e037      	b.n	800d8aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d83a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d83e:	496d      	ldr	r1, [pc, #436]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d840:	4613      	mov	r3, r2
 800d842:	005b      	lsls	r3, r3, #1
 800d844:	4413      	add	r3, r2
 800d846:	00db      	lsls	r3, r3, #3
 800d848:	440b      	add	r3, r1
 800d84a:	3312      	adds	r3, #18
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	8b7a      	ldrh	r2, [r7, #26]
 800d850:	429a      	cmp	r2, r3
 800d852:	d82a      	bhi.n	800d8aa <etharp_find_entry+0x18a>
            old_pending = i;
 800d854:	8c3b      	ldrh	r3, [r7, #32]
 800d856:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800d858:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d85c:	4965      	ldr	r1, [pc, #404]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d85e:	4613      	mov	r3, r2
 800d860:	005b      	lsls	r3, r3, #1
 800d862:	4413      	add	r3, r2
 800d864:	00db      	lsls	r3, r3, #3
 800d866:	440b      	add	r3, r1
 800d868:	3312      	adds	r3, #18
 800d86a:	881b      	ldrh	r3, [r3, #0]
 800d86c:	837b      	strh	r3, [r7, #26]
 800d86e:	e01c      	b.n	800d8aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d870:	7dfb      	ldrb	r3, [r7, #23]
 800d872:	2b01      	cmp	r3, #1
 800d874:	d919      	bls.n	800d8aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d876:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d87a:	495e      	ldr	r1, [pc, #376]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d87c:	4613      	mov	r3, r2
 800d87e:	005b      	lsls	r3, r3, #1
 800d880:	4413      	add	r3, r2
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	440b      	add	r3, r1
 800d886:	3312      	adds	r3, #18
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	8b3a      	ldrh	r2, [r7, #24]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d80c      	bhi.n	800d8aa <etharp_find_entry+0x18a>
            old_stable = i;
 800d890:	8c3b      	ldrh	r3, [r7, #32]
 800d892:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800d894:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d898:	4956      	ldr	r1, [pc, #344]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d89a:	4613      	mov	r3, r2
 800d89c:	005b      	lsls	r3, r3, #1
 800d89e:	4413      	add	r3, r2
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	440b      	add	r3, r1
 800d8a4:	3312      	adds	r3, #18
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d8aa:	8c3b      	ldrh	r3, [r7, #32]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	843b      	strh	r3, [r7, #32]
 800d8b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d8b6:	2b09      	cmp	r3, #9
 800d8b8:	f77f af4c 	ble.w	800d754 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d8bc:	7afb      	ldrb	r3, [r7, #11]
 800d8be:	f003 0302 	and.w	r3, r3, #2
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d108      	bne.n	800d8d8 <etharp_find_entry+0x1b8>
 800d8c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d8ca:	2b0a      	cmp	r3, #10
 800d8cc:	d107      	bne.n	800d8de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d8ce:	7afb      	ldrb	r3, [r7, #11]
 800d8d0:	f003 0301 	and.w	r3, r3, #1
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d102      	bne.n	800d8de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8dc:	e085      	b.n	800d9ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d8de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d8e2:	2b09      	cmp	r3, #9
 800d8e4:	dc02      	bgt.n	800d8ec <etharp_find_entry+0x1cc>
    i = empty;
 800d8e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8e8:	843b      	strh	r3, [r7, #32]
 800d8ea:	e039      	b.n	800d960 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d8ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d8f0:	2b09      	cmp	r3, #9
 800d8f2:	dc14      	bgt.n	800d91e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d8f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d8f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8fc:	493d      	ldr	r1, [pc, #244]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d8fe:	4613      	mov	r3, r2
 800d900:	005b      	lsls	r3, r3, #1
 800d902:	4413      	add	r3, r2
 800d904:	00db      	lsls	r3, r3, #3
 800d906:	440b      	add	r3, r1
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d018      	beq.n	800d940 <etharp_find_entry+0x220>
 800d90e:	4b3a      	ldr	r3, [pc, #232]	@ (800d9f8 <etharp_find_entry+0x2d8>)
 800d910:	f240 126d 	movw	r2, #365	@ 0x16d
 800d914:	493b      	ldr	r1, [pc, #236]	@ (800da04 <etharp_find_entry+0x2e4>)
 800d916:	483a      	ldr	r0, [pc, #232]	@ (800da00 <etharp_find_entry+0x2e0>)
 800d918:	f002 fd0c 	bl	8010334 <iprintf>
 800d91c:	e010      	b.n	800d940 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d91e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d922:	2b09      	cmp	r3, #9
 800d924:	dc02      	bgt.n	800d92c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d926:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d928:	843b      	strh	r3, [r7, #32]
 800d92a:	e009      	b.n	800d940 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d92c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d930:	2b09      	cmp	r3, #9
 800d932:	dc02      	bgt.n	800d93a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d934:	8bfb      	ldrh	r3, [r7, #30]
 800d936:	843b      	strh	r3, [r7, #32]
 800d938:	e002      	b.n	800d940 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d93a:	f04f 33ff 	mov.w	r3, #4294967295
 800d93e:	e054      	b.n	800d9ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d940:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d944:	2b09      	cmp	r3, #9
 800d946:	dd06      	ble.n	800d956 <etharp_find_entry+0x236>
 800d948:	4b2b      	ldr	r3, [pc, #172]	@ (800d9f8 <etharp_find_entry+0x2d8>)
 800d94a:	f240 127f 	movw	r2, #383	@ 0x17f
 800d94e:	492e      	ldr	r1, [pc, #184]	@ (800da08 <etharp_find_entry+0x2e8>)
 800d950:	482b      	ldr	r0, [pc, #172]	@ (800da00 <etharp_find_entry+0x2e0>)
 800d952:	f002 fcef 	bl	8010334 <iprintf>
    etharp_free_entry(i);
 800d956:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7ff fe06 	bl	800d56c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d960:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d964:	2b09      	cmp	r3, #9
 800d966:	dd06      	ble.n	800d976 <etharp_find_entry+0x256>
 800d968:	4b23      	ldr	r3, [pc, #140]	@ (800d9f8 <etharp_find_entry+0x2d8>)
 800d96a:	f240 1283 	movw	r2, #387	@ 0x183
 800d96e:	4926      	ldr	r1, [pc, #152]	@ (800da08 <etharp_find_entry+0x2e8>)
 800d970:	4823      	ldr	r0, [pc, #140]	@ (800da00 <etharp_find_entry+0x2e0>)
 800d972:	f002 fcdf 	bl	8010334 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d976:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d97a:	491e      	ldr	r1, [pc, #120]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d97c:	4613      	mov	r3, r2
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	4413      	add	r3, r2
 800d982:	00db      	lsls	r3, r3, #3
 800d984:	440b      	add	r3, r1
 800d986:	3314      	adds	r3, #20
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d006      	beq.n	800d99c <etharp_find_entry+0x27c>
 800d98e:	4b1a      	ldr	r3, [pc, #104]	@ (800d9f8 <etharp_find_entry+0x2d8>)
 800d990:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800d994:	491d      	ldr	r1, [pc, #116]	@ (800da0c <etharp_find_entry+0x2ec>)
 800d996:	481a      	ldr	r0, [pc, #104]	@ (800da00 <etharp_find_entry+0x2e0>)
 800d998:	f002 fccc 	bl	8010334 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00b      	beq.n	800d9ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d9a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6819      	ldr	r1, [r3, #0]
 800d9aa:	4812      	ldr	r0, [pc, #72]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	4413      	add	r3, r2
 800d9b2:	00db      	lsls	r3, r3, #3
 800d9b4:	4403      	add	r3, r0
 800d9b6:	3304      	adds	r3, #4
 800d9b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d9ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9be:	490d      	ldr	r1, [pc, #52]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	4413      	add	r3, r2
 800d9c6:	00db      	lsls	r3, r3, #3
 800d9c8:	440b      	add	r3, r1
 800d9ca:	3312      	adds	r3, #18
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d9d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9d4:	4907      	ldr	r1, [pc, #28]	@ (800d9f4 <etharp_find_entry+0x2d4>)
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	4413      	add	r3, r2
 800d9dc:	00db      	lsls	r3, r3, #3
 800d9de:	440b      	add	r3, r1
 800d9e0:	3308      	adds	r3, #8
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d9e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3728      	adds	r7, #40	@ 0x28
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	2000d01c 	.word	0x2000d01c
 800d9f8:	08012b0c 	.word	0x08012b0c
 800d9fc:	08012b44 	.word	0x08012b44
 800da00:	08012b84 	.word	0x08012b84
 800da04:	08012bac 	.word	0x08012bac
 800da08:	08012bc4 	.word	0x08012bc4
 800da0c:	08012bd8 	.word	0x08012bd8

0800da10 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b088      	sub	sp, #32
 800da14:	af02      	add	r7, sp, #8
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
 800da1c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800da24:	2b06      	cmp	r3, #6
 800da26:	d006      	beq.n	800da36 <etharp_update_arp_entry+0x26>
 800da28:	4b48      	ldr	r3, [pc, #288]	@ (800db4c <etharp_update_arp_entry+0x13c>)
 800da2a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800da2e:	4948      	ldr	r1, [pc, #288]	@ (800db50 <etharp_update_arp_entry+0x140>)
 800da30:	4848      	ldr	r0, [pc, #288]	@ (800db54 <etharp_update_arp_entry+0x144>)
 800da32:	f002 fc7f 	bl	8010334 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d012      	beq.n	800da62 <etharp_update_arp_entry+0x52>
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00e      	beq.n	800da62 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68f9      	ldr	r1, [r7, #12]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f001 f8f4 	bl	800ec38 <ip4_addr_isbroadcast_u32>
 800da50:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800da52:	2b00      	cmp	r3, #0
 800da54:	d105      	bne.n	800da62 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800da5e:	2be0      	cmp	r3, #224	@ 0xe0
 800da60:	d102      	bne.n	800da68 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800da62:	f06f 030f 	mvn.w	r3, #15
 800da66:	e06c      	b.n	800db42 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800da68:	78fb      	ldrb	r3, [r7, #3]
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	4619      	mov	r1, r3
 800da6e:	68b8      	ldr	r0, [r7, #8]
 800da70:	f7ff fe56 	bl	800d720 <etharp_find_entry>
 800da74:	4603      	mov	r3, r0
 800da76:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800da78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	da02      	bge.n	800da86 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800da80:	8afb      	ldrh	r3, [r7, #22]
 800da82:	b25b      	sxtb	r3, r3
 800da84:	e05d      	b.n	800db42 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800da86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da8a:	4933      	ldr	r1, [pc, #204]	@ (800db58 <etharp_update_arp_entry+0x148>)
 800da8c:	4613      	mov	r3, r2
 800da8e:	005b      	lsls	r3, r3, #1
 800da90:	4413      	add	r3, r2
 800da92:	00db      	lsls	r3, r3, #3
 800da94:	440b      	add	r3, r1
 800da96:	3314      	adds	r3, #20
 800da98:	2202      	movs	r2, #2
 800da9a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800da9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800daa0:	492d      	ldr	r1, [pc, #180]	@ (800db58 <etharp_update_arp_entry+0x148>)
 800daa2:	4613      	mov	r3, r2
 800daa4:	005b      	lsls	r3, r3, #1
 800daa6:	4413      	add	r3, r2
 800daa8:	00db      	lsls	r3, r3, #3
 800daaa:	440b      	add	r3, r1
 800daac:	3308      	adds	r3, #8
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dab2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dab6:	4613      	mov	r3, r2
 800dab8:	005b      	lsls	r3, r3, #1
 800daba:	4413      	add	r3, r2
 800dabc:	00db      	lsls	r3, r3, #3
 800dabe:	3308      	adds	r3, #8
 800dac0:	4a25      	ldr	r2, [pc, #148]	@ (800db58 <etharp_update_arp_entry+0x148>)
 800dac2:	4413      	add	r3, r2
 800dac4:	3304      	adds	r3, #4
 800dac6:	2206      	movs	r2, #6
 800dac8:	6879      	ldr	r1, [r7, #4]
 800daca:	4618      	mov	r0, r3
 800dacc:	f002 fd0d 	bl	80104ea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dad0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dad4:	4920      	ldr	r1, [pc, #128]	@ (800db58 <etharp_update_arp_entry+0x148>)
 800dad6:	4613      	mov	r3, r2
 800dad8:	005b      	lsls	r3, r3, #1
 800dada:	4413      	add	r3, r2
 800dadc:	00db      	lsls	r3, r3, #3
 800dade:	440b      	add	r3, r1
 800dae0:	3312      	adds	r3, #18
 800dae2:	2200      	movs	r2, #0
 800dae4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800daea:	491b      	ldr	r1, [pc, #108]	@ (800db58 <etharp_update_arp_entry+0x148>)
 800daec:	4613      	mov	r3, r2
 800daee:	005b      	lsls	r3, r3, #1
 800daf0:	4413      	add	r3, r2
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	440b      	add	r3, r1
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d021      	beq.n	800db40 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800dafc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db00:	4915      	ldr	r1, [pc, #84]	@ (800db58 <etharp_update_arp_entry+0x148>)
 800db02:	4613      	mov	r3, r2
 800db04:	005b      	lsls	r3, r3, #1
 800db06:	4413      	add	r3, r2
 800db08:	00db      	lsls	r3, r3, #3
 800db0a:	440b      	add	r3, r1
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800db10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db14:	4910      	ldr	r1, [pc, #64]	@ (800db58 <etharp_update_arp_entry+0x148>)
 800db16:	4613      	mov	r3, r2
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	4413      	add	r3, r2
 800db1c:	00db      	lsls	r3, r3, #3
 800db1e:	440b      	add	r3, r1
 800db20:	2200      	movs	r2, #0
 800db22:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800db2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6939      	ldr	r1, [r7, #16]
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f002 f8cb 	bl	800fcd0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800db3a:	6938      	ldr	r0, [r7, #16]
 800db3c:	f7fe fc28 	bl	800c390 <pbuf_free>
  }
  return ERR_OK;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3718      	adds	r7, #24
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	08012b0c 	.word	0x08012b0c
 800db50:	08012c04 	.word	0x08012c04
 800db54:	08012b84 	.word	0x08012b84
 800db58:	2000d01c 	.word	0x2000d01c

0800db5c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db64:	2300      	movs	r3, #0
 800db66:	60fb      	str	r3, [r7, #12]
 800db68:	e01e      	b.n	800dba8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800db6a:	4913      	ldr	r1, [pc, #76]	@ (800dbb8 <etharp_cleanup_netif+0x5c>)
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	4613      	mov	r3, r2
 800db70:	005b      	lsls	r3, r3, #1
 800db72:	4413      	add	r3, r2
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	440b      	add	r3, r1
 800db78:	3314      	adds	r3, #20
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800db7e:	7afb      	ldrb	r3, [r7, #11]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00e      	beq.n	800dba2 <etharp_cleanup_netif+0x46>
 800db84:	490c      	ldr	r1, [pc, #48]	@ (800dbb8 <etharp_cleanup_netif+0x5c>)
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	4613      	mov	r3, r2
 800db8a:	005b      	lsls	r3, r3, #1
 800db8c:	4413      	add	r3, r2
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	440b      	add	r3, r1
 800db92:	3308      	adds	r3, #8
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d102      	bne.n	800dba2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800db9c:	68f8      	ldr	r0, [r7, #12]
 800db9e:	f7ff fce5 	bl	800d56c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3301      	adds	r3, #1
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b09      	cmp	r3, #9
 800dbac:	dddd      	ble.n	800db6a <etharp_cleanup_netif+0xe>
    }
  }
}
 800dbae:	bf00      	nop
 800dbb0:	bf00      	nop
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	2000d01c 	.word	0x2000d01c

0800dbbc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dbbc:	b5b0      	push	{r4, r5, r7, lr}
 800dbbe:	b08a      	sub	sp, #40	@ 0x28
 800dbc0:	af04      	add	r7, sp, #16
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d107      	bne.n	800dbdc <etharp_input+0x20>
 800dbcc:	4b3d      	ldr	r3, [pc, #244]	@ (800dcc4 <etharp_input+0x108>)
 800dbce:	f240 228a 	movw	r2, #650	@ 0x28a
 800dbd2:	493d      	ldr	r1, [pc, #244]	@ (800dcc8 <etharp_input+0x10c>)
 800dbd4:	483d      	ldr	r0, [pc, #244]	@ (800dccc <etharp_input+0x110>)
 800dbd6:	f002 fbad 	bl	8010334 <iprintf>
 800dbda:	e06f      	b.n	800dcbc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	881b      	ldrh	r3, [r3, #0]
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dbec:	d10c      	bne.n	800dc08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dbf2:	2b06      	cmp	r3, #6
 800dbf4:	d108      	bne.n	800dc08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dbfa:	2b04      	cmp	r3, #4
 800dbfc:	d104      	bne.n	800dc08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	885b      	ldrh	r3, [r3, #2]
 800dc02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dc04:	2b08      	cmp	r3, #8
 800dc06:	d003      	beq.n	800dc10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7fe fbc1 	bl	800c390 <pbuf_free>
    return;
 800dc0e:	e055      	b.n	800dcbc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	330e      	adds	r3, #14
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	3318      	adds	r3, #24
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	3304      	adds	r3, #4
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d102      	bne.n	800dc30 <etharp_input+0x74>
    for_us = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	75fb      	strb	r3, [r7, #23]
 800dc2e:	e009      	b.n	800dc44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	3304      	adds	r3, #4
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	bf0c      	ite	eq
 800dc3c:	2301      	moveq	r3, #1
 800dc3e:	2300      	movne	r3, #0
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	f103 0208 	add.w	r2, r3, #8
 800dc4a:	7dfb      	ldrb	r3, [r7, #23]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d001      	beq.n	800dc54 <etharp_input+0x98>
 800dc50:	2301      	movs	r3, #1
 800dc52:	e000      	b.n	800dc56 <etharp_input+0x9a>
 800dc54:	2302      	movs	r3, #2
 800dc56:	f107 010c 	add.w	r1, r7, #12
 800dc5a:	6838      	ldr	r0, [r7, #0]
 800dc5c:	f7ff fed8 	bl	800da10 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	88db      	ldrh	r3, [r3, #6]
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc6a:	d003      	beq.n	800dc74 <etharp_input+0xb8>
 800dc6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc70:	d01e      	beq.n	800dcb0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800dc72:	e020      	b.n	800dcb6 <etharp_input+0xfa>
      if (for_us) {
 800dc74:	7dfb      	ldrb	r3, [r7, #23]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d01c      	beq.n	800dcb4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dc90:	693a      	ldr	r2, [r7, #16]
 800dc92:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dc94:	2102      	movs	r1, #2
 800dc96:	9103      	str	r1, [sp, #12]
 800dc98:	f107 010c 	add.w	r1, r7, #12
 800dc9c:	9102      	str	r1, [sp, #8]
 800dc9e:	9201      	str	r2, [sp, #4]
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	462b      	mov	r3, r5
 800dca4:	4622      	mov	r2, r4
 800dca6:	4601      	mov	r1, r0
 800dca8:	6838      	ldr	r0, [r7, #0]
 800dcaa:	f000 faeb 	bl	800e284 <etharp_raw>
      break;
 800dcae:	e001      	b.n	800dcb4 <etharp_input+0xf8>
      break;
 800dcb0:	bf00      	nop
 800dcb2:	e000      	b.n	800dcb6 <etharp_input+0xfa>
      break;
 800dcb4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7fe fb6a 	bl	800c390 <pbuf_free>
}
 800dcbc:	3718      	adds	r7, #24
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bdb0      	pop	{r4, r5, r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	08012b0c 	.word	0x08012b0c
 800dcc8:	08012c5c 	.word	0x08012c5c
 800dccc:	08012b84 	.word	0x08012b84

0800dcd0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af02      	add	r7, sp, #8
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	4613      	mov	r3, r2
 800dcdc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dcde:	79fa      	ldrb	r2, [r7, #7]
 800dce0:	4944      	ldr	r1, [pc, #272]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800dce2:	4613      	mov	r3, r2
 800dce4:	005b      	lsls	r3, r3, #1
 800dce6:	4413      	add	r3, r2
 800dce8:	00db      	lsls	r3, r3, #3
 800dcea:	440b      	add	r3, r1
 800dcec:	3314      	adds	r3, #20
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d806      	bhi.n	800dd02 <etharp_output_to_arp_index+0x32>
 800dcf4:	4b40      	ldr	r3, [pc, #256]	@ (800ddf8 <etharp_output_to_arp_index+0x128>)
 800dcf6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800dcfa:	4940      	ldr	r1, [pc, #256]	@ (800ddfc <etharp_output_to_arp_index+0x12c>)
 800dcfc:	4840      	ldr	r0, [pc, #256]	@ (800de00 <etharp_output_to_arp_index+0x130>)
 800dcfe:	f002 fb19 	bl	8010334 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dd02:	79fa      	ldrb	r2, [r7, #7]
 800dd04:	493b      	ldr	r1, [pc, #236]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800dd06:	4613      	mov	r3, r2
 800dd08:	005b      	lsls	r3, r3, #1
 800dd0a:	4413      	add	r3, r2
 800dd0c:	00db      	lsls	r3, r3, #3
 800dd0e:	440b      	add	r3, r1
 800dd10:	3314      	adds	r3, #20
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	d153      	bne.n	800ddc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dd18:	79fa      	ldrb	r2, [r7, #7]
 800dd1a:	4936      	ldr	r1, [pc, #216]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	005b      	lsls	r3, r3, #1
 800dd20:	4413      	add	r3, r2
 800dd22:	00db      	lsls	r3, r3, #3
 800dd24:	440b      	add	r3, r1
 800dd26:	3312      	adds	r3, #18
 800dd28:	881b      	ldrh	r3, [r3, #0]
 800dd2a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800dd2e:	d919      	bls.n	800dd64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dd30:	79fa      	ldrb	r2, [r7, #7]
 800dd32:	4613      	mov	r3, r2
 800dd34:	005b      	lsls	r3, r3, #1
 800dd36:	4413      	add	r3, r2
 800dd38:	00db      	lsls	r3, r3, #3
 800dd3a:	4a2e      	ldr	r2, [pc, #184]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800dd3c:	4413      	add	r3, r2
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4619      	mov	r1, r3
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f000 fb4c 	bl	800e3e0 <etharp_request>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d138      	bne.n	800ddc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dd4e:	79fa      	ldrb	r2, [r7, #7]
 800dd50:	4928      	ldr	r1, [pc, #160]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800dd52:	4613      	mov	r3, r2
 800dd54:	005b      	lsls	r3, r3, #1
 800dd56:	4413      	add	r3, r2
 800dd58:	00db      	lsls	r3, r3, #3
 800dd5a:	440b      	add	r3, r1
 800dd5c:	3314      	adds	r3, #20
 800dd5e:	2203      	movs	r2, #3
 800dd60:	701a      	strb	r2, [r3, #0]
 800dd62:	e02d      	b.n	800ddc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dd64:	79fa      	ldrb	r2, [r7, #7]
 800dd66:	4923      	ldr	r1, [pc, #140]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800dd68:	4613      	mov	r3, r2
 800dd6a:	005b      	lsls	r3, r3, #1
 800dd6c:	4413      	add	r3, r2
 800dd6e:	00db      	lsls	r3, r3, #3
 800dd70:	440b      	add	r3, r1
 800dd72:	3312      	adds	r3, #18
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800dd7a:	d321      	bcc.n	800ddc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dd7c:	79fa      	ldrb	r2, [r7, #7]
 800dd7e:	4613      	mov	r3, r2
 800dd80:	005b      	lsls	r3, r3, #1
 800dd82:	4413      	add	r3, r2
 800dd84:	00db      	lsls	r3, r3, #3
 800dd86:	4a1b      	ldr	r2, [pc, #108]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800dd88:	4413      	add	r3, r2
 800dd8a:	1d19      	adds	r1, r3, #4
 800dd8c:	79fa      	ldrb	r2, [r7, #7]
 800dd8e:	4613      	mov	r3, r2
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	4413      	add	r3, r2
 800dd94:	00db      	lsls	r3, r3, #3
 800dd96:	3308      	adds	r3, #8
 800dd98:	4a16      	ldr	r2, [pc, #88]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800dd9a:	4413      	add	r3, r2
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	461a      	mov	r2, r3
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f000 fafb 	bl	800e39c <etharp_request_dst>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d109      	bne.n	800ddc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ddac:	79fa      	ldrb	r2, [r7, #7]
 800ddae:	4911      	ldr	r1, [pc, #68]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	005b      	lsls	r3, r3, #1
 800ddb4:	4413      	add	r3, r2
 800ddb6:	00db      	lsls	r3, r3, #3
 800ddb8:	440b      	add	r3, r1
 800ddba:	3314      	adds	r3, #20
 800ddbc:	2203      	movs	r2, #3
 800ddbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800ddc6:	79fa      	ldrb	r2, [r7, #7]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	4413      	add	r3, r2
 800ddce:	00db      	lsls	r3, r3, #3
 800ddd0:	3308      	adds	r3, #8
 800ddd2:	4a08      	ldr	r2, [pc, #32]	@ (800ddf4 <etharp_output_to_arp_index+0x124>)
 800ddd4:	4413      	add	r3, r2
 800ddd6:	3304      	adds	r3, #4
 800ddd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dddc:	9200      	str	r2, [sp, #0]
 800ddde:	460a      	mov	r2, r1
 800dde0:	68b9      	ldr	r1, [r7, #8]
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f001 ff74 	bl	800fcd0 <ethernet_output>
 800dde8:	4603      	mov	r3, r0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	2000d01c 	.word	0x2000d01c
 800ddf8:	08012b0c 	.word	0x08012b0c
 800ddfc:	08012c7c 	.word	0x08012c7c
 800de00:	08012b84 	.word	0x08012b84

0800de04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08a      	sub	sp, #40	@ 0x28
 800de08:	af02      	add	r7, sp, #8
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d106      	bne.n	800de28 <etharp_output+0x24>
 800de1a:	4b73      	ldr	r3, [pc, #460]	@ (800dfe8 <etharp_output+0x1e4>)
 800de1c:	f240 321e 	movw	r2, #798	@ 0x31e
 800de20:	4972      	ldr	r1, [pc, #456]	@ (800dfec <etharp_output+0x1e8>)
 800de22:	4873      	ldr	r0, [pc, #460]	@ (800dff0 <etharp_output+0x1ec>)
 800de24:	f002 fa86 	bl	8010334 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d106      	bne.n	800de3c <etharp_output+0x38>
 800de2e:	4b6e      	ldr	r3, [pc, #440]	@ (800dfe8 <etharp_output+0x1e4>)
 800de30:	f240 321f 	movw	r2, #799	@ 0x31f
 800de34:	496f      	ldr	r1, [pc, #444]	@ (800dff4 <etharp_output+0x1f0>)
 800de36:	486e      	ldr	r0, [pc, #440]	@ (800dff0 <etharp_output+0x1ec>)
 800de38:	f002 fa7c 	bl	8010334 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <etharp_output+0x4c>
 800de42:	4b69      	ldr	r3, [pc, #420]	@ (800dfe8 <etharp_output+0x1e4>)
 800de44:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800de48:	496b      	ldr	r1, [pc, #428]	@ (800dff8 <etharp_output+0x1f4>)
 800de4a:	4869      	ldr	r0, [pc, #420]	@ (800dff0 <etharp_output+0x1ec>)
 800de4c:	f002 fa72 	bl	8010334 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68f9      	ldr	r1, [r7, #12]
 800de56:	4618      	mov	r0, r3
 800de58:	f000 feee 	bl	800ec38 <ip4_addr_isbroadcast_u32>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800de62:	4b66      	ldr	r3, [pc, #408]	@ (800dffc <etharp_output+0x1f8>)
 800de64:	61fb      	str	r3, [r7, #28]
 800de66:	e0af      	b.n	800dfc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800de70:	2be0      	cmp	r3, #224	@ 0xe0
 800de72:	d118      	bne.n	800dea6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800de74:	2301      	movs	r3, #1
 800de76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800de78:	2300      	movs	r3, #0
 800de7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800de7c:	235e      	movs	r3, #94	@ 0x5e
 800de7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	3301      	adds	r3, #1
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	3302      	adds	r3, #2
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	3303      	adds	r3, #3
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800de9e:	f107 0310 	add.w	r3, r7, #16
 800dea2:	61fb      	str	r3, [r7, #28]
 800dea4:	e090      	b.n	800dfc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3304      	adds	r3, #4
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	405a      	eors	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	3308      	adds	r3, #8
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4013      	ands	r3, r2
 800deba:	2b00      	cmp	r3, #0
 800debc:	d012      	beq.n	800dee4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dec4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800dec8:	4293      	cmp	r3, r2
 800deca:	d00b      	beq.n	800dee4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	330c      	adds	r3, #12
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d003      	beq.n	800dede <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	330c      	adds	r3, #12
 800deda:	61bb      	str	r3, [r7, #24]
 800dedc:	e002      	b.n	800dee4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dede:	f06f 0303 	mvn.w	r3, #3
 800dee2:	e07d      	b.n	800dfe0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dee4:	4b46      	ldr	r3, [pc, #280]	@ (800e000 <etharp_output+0x1fc>)
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	4619      	mov	r1, r3
 800deea:	4a46      	ldr	r2, [pc, #280]	@ (800e004 <etharp_output+0x200>)
 800deec:	460b      	mov	r3, r1
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	440b      	add	r3, r1
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	4413      	add	r3, r2
 800def6:	3314      	adds	r3, #20
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d925      	bls.n	800df4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800defe:	4b40      	ldr	r3, [pc, #256]	@ (800e000 <etharp_output+0x1fc>)
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	4619      	mov	r1, r3
 800df04:	4a3f      	ldr	r2, [pc, #252]	@ (800e004 <etharp_output+0x200>)
 800df06:	460b      	mov	r3, r1
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	440b      	add	r3, r1
 800df0c:	00db      	lsls	r3, r3, #3
 800df0e:	4413      	add	r3, r2
 800df10:	3308      	adds	r3, #8
 800df12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	429a      	cmp	r2, r3
 800df18:	d117      	bne.n	800df4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	4b38      	ldr	r3, [pc, #224]	@ (800e000 <etharp_output+0x1fc>)
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	4618      	mov	r0, r3
 800df24:	4937      	ldr	r1, [pc, #220]	@ (800e004 <etharp_output+0x200>)
 800df26:	4603      	mov	r3, r0
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	4403      	add	r3, r0
 800df2c:	00db      	lsls	r3, r3, #3
 800df2e:	440b      	add	r3, r1
 800df30:	3304      	adds	r3, #4
 800df32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800df34:	429a      	cmp	r2, r3
 800df36:	d108      	bne.n	800df4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800df38:	4b31      	ldr	r3, [pc, #196]	@ (800e000 <etharp_output+0x1fc>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	461a      	mov	r2, r3
 800df3e:	68b9      	ldr	r1, [r7, #8]
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f7ff fec5 	bl	800dcd0 <etharp_output_to_arp_index>
 800df46:	4603      	mov	r3, r0
 800df48:	e04a      	b.n	800dfe0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800df4a:	2300      	movs	r3, #0
 800df4c:	75fb      	strb	r3, [r7, #23]
 800df4e:	e031      	b.n	800dfb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800df50:	7dfa      	ldrb	r2, [r7, #23]
 800df52:	492c      	ldr	r1, [pc, #176]	@ (800e004 <etharp_output+0x200>)
 800df54:	4613      	mov	r3, r2
 800df56:	005b      	lsls	r3, r3, #1
 800df58:	4413      	add	r3, r2
 800df5a:	00db      	lsls	r3, r3, #3
 800df5c:	440b      	add	r3, r1
 800df5e:	3314      	adds	r3, #20
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	2b01      	cmp	r3, #1
 800df64:	d923      	bls.n	800dfae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800df66:	7dfa      	ldrb	r2, [r7, #23]
 800df68:	4926      	ldr	r1, [pc, #152]	@ (800e004 <etharp_output+0x200>)
 800df6a:	4613      	mov	r3, r2
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	4413      	add	r3, r2
 800df70:	00db      	lsls	r3, r3, #3
 800df72:	440b      	add	r3, r1
 800df74:	3308      	adds	r3, #8
 800df76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d117      	bne.n	800dfae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	6819      	ldr	r1, [r3, #0]
 800df82:	7dfa      	ldrb	r2, [r7, #23]
 800df84:	481f      	ldr	r0, [pc, #124]	@ (800e004 <etharp_output+0x200>)
 800df86:	4613      	mov	r3, r2
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	4413      	add	r3, r2
 800df8c:	00db      	lsls	r3, r3, #3
 800df8e:	4403      	add	r3, r0
 800df90:	3304      	adds	r3, #4
 800df92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800df94:	4299      	cmp	r1, r3
 800df96:	d10a      	bne.n	800dfae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800df98:	4a19      	ldr	r2, [pc, #100]	@ (800e000 <etharp_output+0x1fc>)
 800df9a:	7dfb      	ldrb	r3, [r7, #23]
 800df9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800df9e:	7dfb      	ldrb	r3, [r7, #23]
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	68b9      	ldr	r1, [r7, #8]
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f7ff fe93 	bl	800dcd0 <etharp_output_to_arp_index>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	e018      	b.n	800dfe0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dfae:	7dfb      	ldrb	r3, [r7, #23]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	75fb      	strb	r3, [r7, #23]
 800dfb4:	7dfb      	ldrb	r3, [r7, #23]
 800dfb6:	2b09      	cmp	r3, #9
 800dfb8:	d9ca      	bls.n	800df50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800dfba:	68ba      	ldr	r2, [r7, #8]
 800dfbc:	69b9      	ldr	r1, [r7, #24]
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f000 f822 	bl	800e008 <etharp_query>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	e00b      	b.n	800dfe0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800dfce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	68b9      	ldr	r1, [r7, #8]
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f001 fe79 	bl	800fcd0 <ethernet_output>
 800dfde:	4603      	mov	r3, r0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3720      	adds	r7, #32
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	08012b0c 	.word	0x08012b0c
 800dfec:	08012c5c 	.word	0x08012c5c
 800dff0:	08012b84 	.word	0x08012b84
 800dff4:	08012cac 	.word	0x08012cac
 800dff8:	08012c4c 	.word	0x08012c4c
 800dffc:	0801335c 	.word	0x0801335c
 800e000:	2000d10c 	.word	0x2000d10c
 800e004:	2000d01c 	.word	0x2000d01c

0800e008 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08c      	sub	sp, #48	@ 0x30
 800e00c:	af02      	add	r7, sp, #8
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	3326      	adds	r3, #38	@ 0x26
 800e018:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e01a:	23ff      	movs	r3, #255	@ 0xff
 800e01c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800e020:	2300      	movs	r3, #0
 800e022:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	68f9      	ldr	r1, [r7, #12]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 fe04 	bl	800ec38 <ip4_addr_isbroadcast_u32>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10c      	bne.n	800e050 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e03e:	2be0      	cmp	r3, #224	@ 0xe0
 800e040:	d006      	beq.n	800e050 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d003      	beq.n	800e050 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d102      	bne.n	800e056 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e050:	f06f 030f 	mvn.w	r3, #15
 800e054:	e101      	b.n	800e25a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	2101      	movs	r1, #1
 800e05a:	68b8      	ldr	r0, [r7, #8]
 800e05c:	f7ff fb60 	bl	800d720 <etharp_find_entry>
 800e060:	4603      	mov	r3, r0
 800e062:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e064:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	da02      	bge.n	800e072 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e06c:	8a7b      	ldrh	r3, [r7, #18]
 800e06e:	b25b      	sxtb	r3, r3
 800e070:	e0f3      	b.n	800e25a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e072:	8a7b      	ldrh	r3, [r7, #18]
 800e074:	2b7e      	cmp	r3, #126	@ 0x7e
 800e076:	d906      	bls.n	800e086 <etharp_query+0x7e>
 800e078:	4b7a      	ldr	r3, [pc, #488]	@ (800e264 <etharp_query+0x25c>)
 800e07a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800e07e:	497a      	ldr	r1, [pc, #488]	@ (800e268 <etharp_query+0x260>)
 800e080:	487a      	ldr	r0, [pc, #488]	@ (800e26c <etharp_query+0x264>)
 800e082:	f002 f957 	bl	8010334 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e086:	8a7b      	ldrh	r3, [r7, #18]
 800e088:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e08a:	7c7a      	ldrb	r2, [r7, #17]
 800e08c:	4978      	ldr	r1, [pc, #480]	@ (800e270 <etharp_query+0x268>)
 800e08e:	4613      	mov	r3, r2
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	4413      	add	r3, r2
 800e094:	00db      	lsls	r3, r3, #3
 800e096:	440b      	add	r3, r1
 800e098:	3314      	adds	r3, #20
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d115      	bne.n	800e0cc <etharp_query+0xc4>
    is_new_entry = 1;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e0a4:	7c7a      	ldrb	r2, [r7, #17]
 800e0a6:	4972      	ldr	r1, [pc, #456]	@ (800e270 <etharp_query+0x268>)
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	005b      	lsls	r3, r3, #1
 800e0ac:	4413      	add	r3, r2
 800e0ae:	00db      	lsls	r3, r3, #3
 800e0b0:	440b      	add	r3, r1
 800e0b2:	3314      	adds	r3, #20
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e0b8:	7c7a      	ldrb	r2, [r7, #17]
 800e0ba:	496d      	ldr	r1, [pc, #436]	@ (800e270 <etharp_query+0x268>)
 800e0bc:	4613      	mov	r3, r2
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	4413      	add	r3, r2
 800e0c2:	00db      	lsls	r3, r3, #3
 800e0c4:	440b      	add	r3, r1
 800e0c6:	3308      	adds	r3, #8
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e0cc:	7c7a      	ldrb	r2, [r7, #17]
 800e0ce:	4968      	ldr	r1, [pc, #416]	@ (800e270 <etharp_query+0x268>)
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	4413      	add	r3, r2
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	440b      	add	r3, r1
 800e0da:	3314      	adds	r3, #20
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d011      	beq.n	800e106 <etharp_query+0xfe>
 800e0e2:	7c7a      	ldrb	r2, [r7, #17]
 800e0e4:	4962      	ldr	r1, [pc, #392]	@ (800e270 <etharp_query+0x268>)
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	005b      	lsls	r3, r3, #1
 800e0ea:	4413      	add	r3, r2
 800e0ec:	00db      	lsls	r3, r3, #3
 800e0ee:	440b      	add	r3, r1
 800e0f0:	3314      	adds	r3, #20
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d806      	bhi.n	800e106 <etharp_query+0xfe>
 800e0f8:	4b5a      	ldr	r3, [pc, #360]	@ (800e264 <etharp_query+0x25c>)
 800e0fa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800e0fe:	495d      	ldr	r1, [pc, #372]	@ (800e274 <etharp_query+0x26c>)
 800e100:	485a      	ldr	r0, [pc, #360]	@ (800e26c <etharp_query+0x264>)
 800e102:	f002 f917 	bl	8010334 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e106:	6a3b      	ldr	r3, [r7, #32]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d102      	bne.n	800e112 <etharp_query+0x10a>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10c      	bne.n	800e12c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e112:	68b9      	ldr	r1, [r7, #8]
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f000 f963 	bl	800e3e0 <etharp_request>
 800e11a:	4603      	mov	r3, r0
 800e11c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d102      	bne.n	800e12c <etharp_query+0x124>
      return result;
 800e126:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e12a:	e096      	b.n	800e25a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d106      	bne.n	800e140 <etharp_query+0x138>
 800e132:	4b4c      	ldr	r3, [pc, #304]	@ (800e264 <etharp_query+0x25c>)
 800e134:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800e138:	494f      	ldr	r1, [pc, #316]	@ (800e278 <etharp_query+0x270>)
 800e13a:	484c      	ldr	r0, [pc, #304]	@ (800e26c <etharp_query+0x264>)
 800e13c:	f002 f8fa 	bl	8010334 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e140:	7c7a      	ldrb	r2, [r7, #17]
 800e142:	494b      	ldr	r1, [pc, #300]	@ (800e270 <etharp_query+0x268>)
 800e144:	4613      	mov	r3, r2
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	4413      	add	r3, r2
 800e14a:	00db      	lsls	r3, r3, #3
 800e14c:	440b      	add	r3, r1
 800e14e:	3314      	adds	r3, #20
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	2b01      	cmp	r3, #1
 800e154:	d917      	bls.n	800e186 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e156:	4a49      	ldr	r2, [pc, #292]	@ (800e27c <etharp_query+0x274>)
 800e158:	7c7b      	ldrb	r3, [r7, #17]
 800e15a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e15c:	7c7a      	ldrb	r2, [r7, #17]
 800e15e:	4613      	mov	r3, r2
 800e160:	005b      	lsls	r3, r3, #1
 800e162:	4413      	add	r3, r2
 800e164:	00db      	lsls	r3, r3, #3
 800e166:	3308      	adds	r3, #8
 800e168:	4a41      	ldr	r2, [pc, #260]	@ (800e270 <etharp_query+0x268>)
 800e16a:	4413      	add	r3, r2
 800e16c:	3304      	adds	r3, #4
 800e16e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e172:	9200      	str	r2, [sp, #0]
 800e174:	697a      	ldr	r2, [r7, #20]
 800e176:	6879      	ldr	r1, [r7, #4]
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f001 fda9 	bl	800fcd0 <ethernet_output>
 800e17e:	4603      	mov	r3, r0
 800e180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e184:	e067      	b.n	800e256 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e186:	7c7a      	ldrb	r2, [r7, #17]
 800e188:	4939      	ldr	r1, [pc, #228]	@ (800e270 <etharp_query+0x268>)
 800e18a:	4613      	mov	r3, r2
 800e18c:	005b      	lsls	r3, r3, #1
 800e18e:	4413      	add	r3, r2
 800e190:	00db      	lsls	r3, r3, #3
 800e192:	440b      	add	r3, r1
 800e194:	3314      	adds	r3, #20
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d15c      	bne.n	800e256 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e1a4:	e01c      	b.n	800e1e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	895a      	ldrh	r2, [r3, #10]
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	891b      	ldrh	r3, [r3, #8]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d10a      	bne.n	800e1c8 <etharp_query+0x1c0>
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d006      	beq.n	800e1c8 <etharp_query+0x1c0>
 800e1ba:	4b2a      	ldr	r3, [pc, #168]	@ (800e264 <etharp_query+0x25c>)
 800e1bc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e1c0:	492f      	ldr	r1, [pc, #188]	@ (800e280 <etharp_query+0x278>)
 800e1c2:	482a      	ldr	r0, [pc, #168]	@ (800e26c <etharp_query+0x264>)
 800e1c4:	f002 f8b6 	bl	8010334 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	7b1b      	ldrb	r3, [r3, #12]
 800e1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d002      	beq.n	800e1da <etharp_query+0x1d2>
        copy_needed = 1;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	61bb      	str	r3, [r7, #24]
        break;
 800e1d8:	e005      	b.n	800e1e6 <etharp_query+0x1de>
      }
      p = p->next;
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1df      	bne.n	800e1a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d007      	beq.n	800e1fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e1f2:	200e      	movs	r0, #14
 800e1f4:	f7fe fb44 	bl	800c880 <pbuf_clone>
 800e1f8:	61f8      	str	r0, [r7, #28]
 800e1fa:	e004      	b.n	800e206 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e200:	69f8      	ldr	r0, [r7, #28]
 800e202:	f7fe f96b 	bl	800c4dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d021      	beq.n	800e250 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e20c:	7c7a      	ldrb	r2, [r7, #17]
 800e20e:	4918      	ldr	r1, [pc, #96]	@ (800e270 <etharp_query+0x268>)
 800e210:	4613      	mov	r3, r2
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	4413      	add	r3, r2
 800e216:	00db      	lsls	r3, r3, #3
 800e218:	440b      	add	r3, r1
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00a      	beq.n	800e236 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e220:	7c7a      	ldrb	r2, [r7, #17]
 800e222:	4913      	ldr	r1, [pc, #76]	@ (800e270 <etharp_query+0x268>)
 800e224:	4613      	mov	r3, r2
 800e226:	005b      	lsls	r3, r3, #1
 800e228:	4413      	add	r3, r2
 800e22a:	00db      	lsls	r3, r3, #3
 800e22c:	440b      	add	r3, r1
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4618      	mov	r0, r3
 800e232:	f7fe f8ad 	bl	800c390 <pbuf_free>
      }
      arp_table[i].q = p;
 800e236:	7c7a      	ldrb	r2, [r7, #17]
 800e238:	490d      	ldr	r1, [pc, #52]	@ (800e270 <etharp_query+0x268>)
 800e23a:	4613      	mov	r3, r2
 800e23c:	005b      	lsls	r3, r3, #1
 800e23e:	4413      	add	r3, r2
 800e240:	00db      	lsls	r3, r3, #3
 800e242:	440b      	add	r3, r1
 800e244:	69fa      	ldr	r2, [r7, #28]
 800e246:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e248:	2300      	movs	r3, #0
 800e24a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e24e:	e002      	b.n	800e256 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e250:	23ff      	movs	r3, #255	@ 0xff
 800e252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800e256:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3728      	adds	r7, #40	@ 0x28
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	08012b0c 	.word	0x08012b0c
 800e268:	08012cb8 	.word	0x08012cb8
 800e26c:	08012b84 	.word	0x08012b84
 800e270:	2000d01c 	.word	0x2000d01c
 800e274:	08012cc8 	.word	0x08012cc8
 800e278:	08012cac 	.word	0x08012cac
 800e27c:	2000d10c 	.word	0x2000d10c
 800e280:	08012cf0 	.word	0x08012cf0

0800e284 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b08a      	sub	sp, #40	@ 0x28
 800e288:	af02      	add	r7, sp, #8
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
 800e290:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d106      	bne.n	800e2aa <etharp_raw+0x26>
 800e29c:	4b3a      	ldr	r3, [pc, #232]	@ (800e388 <etharp_raw+0x104>)
 800e29e:	f240 4257 	movw	r2, #1111	@ 0x457
 800e2a2:	493a      	ldr	r1, [pc, #232]	@ (800e38c <etharp_raw+0x108>)
 800e2a4:	483a      	ldr	r0, [pc, #232]	@ (800e390 <etharp_raw+0x10c>)
 800e2a6:	f002 f845 	bl	8010334 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e2aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e2ae:	211c      	movs	r1, #28
 800e2b0:	200e      	movs	r0, #14
 800e2b2:	f7fd fd8b 	bl	800bdcc <pbuf_alloc>
 800e2b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d102      	bne.n	800e2c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e2be:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c2:	e05d      	b.n	800e380 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	895b      	ldrh	r3, [r3, #10]
 800e2c8:	2b1b      	cmp	r3, #27
 800e2ca:	d806      	bhi.n	800e2da <etharp_raw+0x56>
 800e2cc:	4b2e      	ldr	r3, [pc, #184]	@ (800e388 <etharp_raw+0x104>)
 800e2ce:	f240 4262 	movw	r2, #1122	@ 0x462
 800e2d2:	4930      	ldr	r1, [pc, #192]	@ (800e394 <etharp_raw+0x110>)
 800e2d4:	482e      	ldr	r0, [pc, #184]	@ (800e390 <etharp_raw+0x10c>)
 800e2d6:	f002 f82d 	bl	8010334 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e2e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fc fcc4 	bl	800ac70 <lwip_htons>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e2f6:	2b06      	cmp	r3, #6
 800e2f8:	d006      	beq.n	800e308 <etharp_raw+0x84>
 800e2fa:	4b23      	ldr	r3, [pc, #140]	@ (800e388 <etharp_raw+0x104>)
 800e2fc:	f240 4269 	movw	r2, #1129	@ 0x469
 800e300:	4925      	ldr	r1, [pc, #148]	@ (800e398 <etharp_raw+0x114>)
 800e302:	4823      	ldr	r0, [pc, #140]	@ (800e390 <etharp_raw+0x10c>)
 800e304:	f002 f816 	bl	8010334 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	3308      	adds	r3, #8
 800e30c:	2206      	movs	r2, #6
 800e30e:	6839      	ldr	r1, [r7, #0]
 800e310:	4618      	mov	r0, r3
 800e312:	f002 f8ea 	bl	80104ea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	3312      	adds	r3, #18
 800e31a:	2206      	movs	r2, #6
 800e31c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e31e:	4618      	mov	r0, r3
 800e320:	f002 f8e3 	bl	80104ea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	330e      	adds	r3, #14
 800e328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e32a:	6812      	ldr	r2, [r2, #0]
 800e32c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	3318      	adds	r3, #24
 800e332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e334:	6812      	ldr	r2, [r2, #0]
 800e336:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	2200      	movs	r2, #0
 800e33c:	701a      	strb	r2, [r3, #0]
 800e33e:	2200      	movs	r2, #0
 800e340:	f042 0201 	orr.w	r2, r2, #1
 800e344:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	2200      	movs	r2, #0
 800e34a:	f042 0208 	orr.w	r2, r2, #8
 800e34e:	709a      	strb	r2, [r3, #2]
 800e350:	2200      	movs	r2, #0
 800e352:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	2206      	movs	r2, #6
 800e358:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2204      	movs	r2, #4
 800e35e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e360:	f640 0306 	movw	r3, #2054	@ 0x806
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	69b9      	ldr	r1, [r7, #24]
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f001 fcaf 	bl	800fcd0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e372:	69b8      	ldr	r0, [r7, #24]
 800e374:	f7fe f80c 	bl	800c390 <pbuf_free>
  p = NULL;
 800e378:	2300      	movs	r3, #0
 800e37a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e37c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3720      	adds	r7, #32
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	08012b0c 	.word	0x08012b0c
 800e38c:	08012c5c 	.word	0x08012c5c
 800e390:	08012b84 	.word	0x08012b84
 800e394:	08012d0c 	.word	0x08012d0c
 800e398:	08012d40 	.word	0x08012d40

0800e39c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b088      	sub	sp, #32
 800e3a0:	af04      	add	r7, sp, #16
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	9203      	str	r2, [sp, #12]
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	9202      	str	r2, [sp, #8]
 800e3c0:	4a06      	ldr	r2, [pc, #24]	@ (800e3dc <etharp_request_dst+0x40>)
 800e3c2:	9201      	str	r2, [sp, #4]
 800e3c4:	9300      	str	r3, [sp, #0]
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f7ff ff5a 	bl	800e284 <etharp_raw>
 800e3d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	08013364 	.word	0x08013364

0800e3e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e3ea:	4a05      	ldr	r2, [pc, #20]	@ (800e400 <etharp_request+0x20>)
 800e3ec:	6839      	ldr	r1, [r7, #0]
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7ff ffd4 	bl	800e39c <etharp_request_dst>
 800e3f4:	4603      	mov	r3, r0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	0801335c 	.word	0x0801335c

0800e404 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b08e      	sub	sp, #56	@ 0x38
 800e408:	af04      	add	r7, sp, #16
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e40e:	4b79      	ldr	r3, [pc, #484]	@ (800e5f4 <icmp_input+0x1f0>)
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	f003 030f 	and.w	r3, r3, #15
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	b2db      	uxtb	r3, r3
 800e422:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800e424:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e426:	2b13      	cmp	r3, #19
 800e428:	f240 80cd 	bls.w	800e5c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	895b      	ldrh	r3, [r3, #10]
 800e430:	2b03      	cmp	r3, #3
 800e432:	f240 80ca 	bls.w	800e5ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e440:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e444:	2b00      	cmp	r3, #0
 800e446:	f000 80b7 	beq.w	800e5b8 <icmp_input+0x1b4>
 800e44a:	2b08      	cmp	r3, #8
 800e44c:	f040 80b7 	bne.w	800e5be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e450:	4b69      	ldr	r3, [pc, #420]	@ (800e5f8 <icmp_input+0x1f4>)
 800e452:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e454:	4b67      	ldr	r3, [pc, #412]	@ (800e5f4 <icmp_input+0x1f0>)
 800e456:	695b      	ldr	r3, [r3, #20]
 800e458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e45c:	2be0      	cmp	r3, #224	@ 0xe0
 800e45e:	f000 80bb 	beq.w	800e5d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e462:	4b64      	ldr	r3, [pc, #400]	@ (800e5f4 <icmp_input+0x1f0>)
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	4a63      	ldr	r2, [pc, #396]	@ (800e5f4 <icmp_input+0x1f0>)
 800e468:	6812      	ldr	r2, [r2, #0]
 800e46a:	4611      	mov	r1, r2
 800e46c:	4618      	mov	r0, r3
 800e46e:	f000 fbe3 	bl	800ec38 <ip4_addr_isbroadcast_u32>
 800e472:	4603      	mov	r3, r0
 800e474:	2b00      	cmp	r3, #0
 800e476:	f040 80b1 	bne.w	800e5dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	891b      	ldrh	r3, [r3, #8]
 800e47e:	2b07      	cmp	r3, #7
 800e480:	f240 80a5 	bls.w	800e5ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e484:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e486:	330e      	adds	r3, #14
 800e488:	4619      	mov	r1, r3
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f7fd feea 	bl	800c264 <pbuf_add_header>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d04b      	beq.n	800e52e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	891a      	ldrh	r2, [r3, #8]
 800e49a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e49c:	4413      	add	r3, r2
 800e49e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	891b      	ldrh	r3, [r3, #8]
 800e4a4:	8b7a      	ldrh	r2, [r7, #26]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	f0c0 809a 	bcc.w	800e5e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e4ac:	8b7b      	ldrh	r3, [r7, #26]
 800e4ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	200e      	movs	r0, #14
 800e4b6:	f7fd fc89 	bl	800bdcc <pbuf_alloc>
 800e4ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	f000 8090 	beq.w	800e5e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	895b      	ldrh	r3, [r3, #10]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e4cc:	3308      	adds	r3, #8
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d203      	bcs.n	800e4da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e4d2:	6978      	ldr	r0, [r7, #20]
 800e4d4:	f7fd ff5c 	bl	800c390 <pbuf_free>
          goto icmperr;
 800e4d8:	e085      	b.n	800e5e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e4e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f002 f801 	bl	80104ea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e4e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	6978      	ldr	r0, [r7, #20]
 800e4ee:	f7fd fec9 	bl	800c284 <pbuf_remove_header>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d009      	beq.n	800e50c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e4f8:	4b40      	ldr	r3, [pc, #256]	@ (800e5fc <icmp_input+0x1f8>)
 800e4fa:	22b6      	movs	r2, #182	@ 0xb6
 800e4fc:	4940      	ldr	r1, [pc, #256]	@ (800e600 <icmp_input+0x1fc>)
 800e4fe:	4841      	ldr	r0, [pc, #260]	@ (800e604 <icmp_input+0x200>)
 800e500:	f001 ff18 	bl	8010334 <iprintf>
          pbuf_free(r);
 800e504:	6978      	ldr	r0, [r7, #20]
 800e506:	f7fd ff43 	bl	800c390 <pbuf_free>
          goto icmperr;
 800e50a:	e06c      	b.n	800e5e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e50c:	6879      	ldr	r1, [r7, #4]
 800e50e:	6978      	ldr	r0, [r7, #20]
 800e510:	f7fe f872 	bl	800c5f8 <pbuf_copy>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d003      	beq.n	800e522 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e51a:	6978      	ldr	r0, [r7, #20]
 800e51c:	f7fd ff38 	bl	800c390 <pbuf_free>
          goto icmperr;
 800e520:	e061      	b.n	800e5e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f7fd ff34 	bl	800c390 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	607b      	str	r3, [r7, #4]
 800e52c:	e00f      	b.n	800e54e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e52e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e530:	330e      	adds	r3, #14
 800e532:	4619      	mov	r1, r3
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7fd fea5 	bl	800c284 <pbuf_remove_header>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d006      	beq.n	800e54e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e540:	4b2e      	ldr	r3, [pc, #184]	@ (800e5fc <icmp_input+0x1f8>)
 800e542:	22c7      	movs	r2, #199	@ 0xc7
 800e544:	4930      	ldr	r1, [pc, #192]	@ (800e608 <icmp_input+0x204>)
 800e546:	482f      	ldr	r0, [pc, #188]	@ (800e604 <icmp_input+0x200>)
 800e548:	f001 fef4 	bl	8010334 <iprintf>
          goto icmperr;
 800e54c:	e04b      	b.n	800e5e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e554:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e556:	4619      	mov	r1, r3
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f7fd fe83 	bl	800c264 <pbuf_add_header>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d12b      	bne.n	800e5bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e572:	4b20      	ldr	r3, [pc, #128]	@ (800e5f4 <icmp_input+0x1f0>)
 800e574:	691a      	ldr	r2, [r3, #16]
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	2200      	movs	r2, #0
 800e57e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	2200      	movs	r2, #0
 800e584:	709a      	strb	r2, [r3, #2]
 800e586:	2200      	movs	r2, #0
 800e588:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	22ff      	movs	r2, #255	@ 0xff
 800e58e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2200      	movs	r2, #0
 800e594:	729a      	strb	r2, [r3, #10]
 800e596:	2200      	movs	r2, #0
 800e598:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	9302      	str	r3, [sp, #8]
 800e59e:	2301      	movs	r3, #1
 800e5a0:	9301      	str	r3, [sp, #4]
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	9300      	str	r3, [sp, #0]
 800e5a6:	23ff      	movs	r3, #255	@ 0xff
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	69f9      	ldr	r1, [r7, #28]
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 fa6b 	bl	800ea88 <ip4_output_if>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e5b6:	e001      	b.n	800e5bc <icmp_input+0x1b8>
      break;
 800e5b8:	bf00      	nop
 800e5ba:	e000      	b.n	800e5be <icmp_input+0x1ba>
      break;
 800e5bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7fd fee6 	bl	800c390 <pbuf_free>
  return;
 800e5c4:	e013      	b.n	800e5ee <icmp_input+0x1ea>
    goto lenerr;
 800e5c6:	bf00      	nop
 800e5c8:	e002      	b.n	800e5d0 <icmp_input+0x1cc>
    goto lenerr;
 800e5ca:	bf00      	nop
 800e5cc:	e000      	b.n	800e5d0 <icmp_input+0x1cc>
        goto lenerr;
 800e5ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7fd fedd 	bl	800c390 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e5d6:	e00a      	b.n	800e5ee <icmp_input+0x1ea>
        goto icmperr;
 800e5d8:	bf00      	nop
 800e5da:	e004      	b.n	800e5e6 <icmp_input+0x1e2>
        goto icmperr;
 800e5dc:	bf00      	nop
 800e5de:	e002      	b.n	800e5e6 <icmp_input+0x1e2>
          goto icmperr;
 800e5e0:	bf00      	nop
 800e5e2:	e000      	b.n	800e5e6 <icmp_input+0x1e2>
          goto icmperr;
 800e5e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7fd fed2 	bl	800c390 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e5ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e5ee:	3728      	adds	r7, #40	@ 0x28
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	20009df0 	.word	0x20009df0
 800e5f8:	20009e04 	.word	0x20009e04
 800e5fc:	08012d84 	.word	0x08012d84
 800e600:	08012dbc 	.word	0x08012dbc
 800e604:	08012df4 	.word	0x08012df4
 800e608:	08012e1c 	.word	0x08012e1c

0800e60c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	460b      	mov	r3, r1
 800e616:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e618:	78fb      	ldrb	r3, [r7, #3]
 800e61a:	461a      	mov	r2, r3
 800e61c:	2103      	movs	r1, #3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 f814 	bl	800e64c <icmp_send_response>
}
 800e624:	bf00      	nop
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	460b      	mov	r3, r1
 800e636:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e638:	78fb      	ldrb	r3, [r7, #3]
 800e63a:	461a      	mov	r2, r3
 800e63c:	210b      	movs	r1, #11
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f804 	bl	800e64c <icmp_send_response>
}
 800e644:	bf00      	nop
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b08c      	sub	sp, #48	@ 0x30
 800e650:	af04      	add	r7, sp, #16
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	460b      	mov	r3, r1
 800e656:	70fb      	strb	r3, [r7, #3]
 800e658:	4613      	mov	r3, r2
 800e65a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e65c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e660:	2124      	movs	r1, #36	@ 0x24
 800e662:	2022      	movs	r0, #34	@ 0x22
 800e664:	f7fd fbb2 	bl	800bdcc <pbuf_alloc>
 800e668:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d04c      	beq.n	800e70a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	895b      	ldrh	r3, [r3, #10]
 800e674:	2b23      	cmp	r3, #35	@ 0x23
 800e676:	d806      	bhi.n	800e686 <icmp_send_response+0x3a>
 800e678:	4b26      	ldr	r3, [pc, #152]	@ (800e714 <icmp_send_response+0xc8>)
 800e67a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800e67e:	4926      	ldr	r1, [pc, #152]	@ (800e718 <icmp_send_response+0xcc>)
 800e680:	4826      	ldr	r0, [pc, #152]	@ (800e71c <icmp_send_response+0xd0>)
 800e682:	f001 fe57 	bl	8010334 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	78fa      	ldrb	r2, [r7, #3]
 800e696:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	78ba      	ldrb	r2, [r7, #2]
 800e69c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	711a      	strb	r2, [r3, #4]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	719a      	strb	r2, [r3, #6]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	f103 0008 	add.w	r0, r3, #8
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	221c      	movs	r2, #28
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	f001 ff12 	bl	80104ea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e6cc:	f107 030c 	add.w	r3, r7, #12
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f000 f825 	bl	800e720 <ip4_route>
 800e6d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d011      	beq.n	800e702 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	709a      	strb	r2, [r3, #2]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e6e8:	f107 020c 	add.w	r2, r7, #12
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	9302      	str	r3, [sp, #8]
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	9301      	str	r3, [sp, #4]
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	23ff      	movs	r3, #255	@ 0xff
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	69f8      	ldr	r0, [r7, #28]
 800e6fe:	f000 f9c3 	bl	800ea88 <ip4_output_if>
  }
  pbuf_free(q);
 800e702:	69f8      	ldr	r0, [r7, #28]
 800e704:	f7fd fe44 	bl	800c390 <pbuf_free>
 800e708:	e000      	b.n	800e70c <icmp_send_response+0xc0>
    return;
 800e70a:	bf00      	nop
}
 800e70c:	3720      	adds	r7, #32
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	08012d84 	.word	0x08012d84
 800e718:	08012e50 	.word	0x08012e50
 800e71c:	08012df4 	.word	0x08012df4

0800e720 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e720:	b480      	push	{r7}
 800e722:	b085      	sub	sp, #20
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e728:	4b33      	ldr	r3, [pc, #204]	@ (800e7f8 <ip4_route+0xd8>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	60fb      	str	r3, [r7, #12]
 800e72e:	e036      	b.n	800e79e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e736:	f003 0301 	and.w	r3, r3, #1
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d02b      	beq.n	800e798 <ip4_route+0x78>
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e746:	089b      	lsrs	r3, r3, #2
 800e748:	f003 0301 	and.w	r3, r3, #1
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d022      	beq.n	800e798 <ip4_route+0x78>
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3304      	adds	r3, #4
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d01d      	beq.n	800e798 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	3304      	adds	r3, #4
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	405a      	eors	r2, r3
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	3308      	adds	r3, #8
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4013      	ands	r3, r2
 800e770:	2b00      	cmp	r3, #0
 800e772:	d101      	bne.n	800e778 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	e038      	b.n	800e7ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e77e:	f003 0302 	and.w	r3, r3, #2
 800e782:	2b00      	cmp	r3, #0
 800e784:	d108      	bne.n	800e798 <ip4_route+0x78>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	330c      	adds	r3, #12
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	429a      	cmp	r2, r3
 800e792:	d101      	bne.n	800e798 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	e028      	b.n	800e7ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	60fb      	str	r3, [r7, #12]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1c5      	bne.n	800e730 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e7a4:	4b15      	ldr	r3, [pc, #84]	@ (800e7fc <ip4_route+0xdc>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d01a      	beq.n	800e7e2 <ip4_route+0xc2>
 800e7ac:	4b13      	ldr	r3, [pc, #76]	@ (800e7fc <ip4_route+0xdc>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7b4:	f003 0301 	and.w	r3, r3, #1
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d012      	beq.n	800e7e2 <ip4_route+0xc2>
 800e7bc:	4b0f      	ldr	r3, [pc, #60]	@ (800e7fc <ip4_route+0xdc>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7c4:	f003 0304 	and.w	r3, r3, #4
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00a      	beq.n	800e7e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e7cc:	4b0b      	ldr	r3, [pc, #44]	@ (800e7fc <ip4_route+0xdc>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	3304      	adds	r3, #4
 800e7d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d004      	beq.n	800e7e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7e0:	d101      	bne.n	800e7e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	e001      	b.n	800e7ea <ip4_route+0xca>
  }

  return netif_default;
 800e7e6:	4b05      	ldr	r3, [pc, #20]	@ (800e7fc <ip4_route+0xdc>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	2000d004 	.word	0x2000d004
 800e7fc:	2000d008 	.word	0x2000d008

0800e800 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e80e:	f003 0301 	and.w	r3, r3, #1
 800e812:	b2db      	uxtb	r3, r3
 800e814:	2b00      	cmp	r3, #0
 800e816:	d016      	beq.n	800e846 <ip4_input_accept+0x46>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3304      	adds	r3, #4
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d011      	beq.n	800e846 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e822:	4b0b      	ldr	r3, [pc, #44]	@ (800e850 <ip4_input_accept+0x50>)
 800e824:	695a      	ldr	r2, [r3, #20]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	3304      	adds	r3, #4
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d008      	beq.n	800e842 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e830:	4b07      	ldr	r3, [pc, #28]	@ (800e850 <ip4_input_accept+0x50>)
 800e832:	695b      	ldr	r3, [r3, #20]
 800e834:	6879      	ldr	r1, [r7, #4]
 800e836:	4618      	mov	r0, r3
 800e838:	f000 f9fe 	bl	800ec38 <ip4_addr_isbroadcast_u32>
 800e83c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e842:	2301      	movs	r3, #1
 800e844:	e000      	b.n	800e848 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e846:	2300      	movs	r3, #0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	20009df0 	.word	0x20009df0

0800e854 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b086      	sub	sp, #24
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	091b      	lsrs	r3, r3, #4
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b04      	cmp	r3, #4
 800e86e:	d004      	beq.n	800e87a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f7fd fd8d 	bl	800c390 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e876:	2300      	movs	r3, #0
 800e878:	e0fd      	b.n	800ea76 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	f003 030f 	and.w	r3, r3, #15
 800e882:	b2db      	uxtb	r3, r3
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	b2db      	uxtb	r3, r3
 800e888:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	885b      	ldrh	r3, [r3, #2]
 800e88e:	b29b      	uxth	r3, r3
 800e890:	4618      	mov	r0, r3
 800e892:	f7fc f9ed 	bl	800ac70 <lwip_htons>
 800e896:	4603      	mov	r3, r0
 800e898:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	891b      	ldrh	r3, [r3, #8]
 800e89e:	89ba      	ldrh	r2, [r7, #12]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d204      	bcs.n	800e8ae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e8a4:	89bb      	ldrh	r3, [r7, #12]
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7fd fbeb 	bl	800c084 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	895b      	ldrh	r3, [r3, #10]
 800e8b2:	89fa      	ldrh	r2, [r7, #14]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d807      	bhi.n	800e8c8 <ip4_input+0x74>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	891b      	ldrh	r3, [r3, #8]
 800e8bc:	89ba      	ldrh	r2, [r7, #12]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d802      	bhi.n	800e8c8 <ip4_input+0x74>
 800e8c2:	89fb      	ldrh	r3, [r7, #14]
 800e8c4:	2b13      	cmp	r3, #19
 800e8c6:	d804      	bhi.n	800e8d2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7fd fd61 	bl	800c390 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	e0d1      	b.n	800ea76 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	4a6a      	ldr	r2, [pc, #424]	@ (800ea80 <ip4_input+0x22c>)
 800e8d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	4a68      	ldr	r2, [pc, #416]	@ (800ea80 <ip4_input+0x22c>)
 800e8e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e8e2:	4b67      	ldr	r3, [pc, #412]	@ (800ea80 <ip4_input+0x22c>)
 800e8e4:	695b      	ldr	r3, [r3, #20]
 800e8e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e8ea:	2be0      	cmp	r3, #224	@ 0xe0
 800e8ec:	d112      	bne.n	800e914 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8f4:	f003 0301 	and.w	r3, r3, #1
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d007      	beq.n	800e90e <ip4_input+0xba>
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	3304      	adds	r3, #4
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <ip4_input+0xba>
      netif = inp;
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	613b      	str	r3, [r7, #16]
 800e90c:	e02a      	b.n	800e964 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e90e:	2300      	movs	r3, #0
 800e910:	613b      	str	r3, [r7, #16]
 800e912:	e027      	b.n	800e964 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e914:	6838      	ldr	r0, [r7, #0]
 800e916:	f7ff ff73 	bl	800e800 <ip4_input_accept>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d002      	beq.n	800e926 <ip4_input+0xd2>
      netif = inp;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	613b      	str	r3, [r7, #16]
 800e924:	e01e      	b.n	800e964 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e926:	2300      	movs	r3, #0
 800e928:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e92a:	4b55      	ldr	r3, [pc, #340]	@ (800ea80 <ip4_input+0x22c>)
 800e92c:	695b      	ldr	r3, [r3, #20]
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	2b7f      	cmp	r3, #127	@ 0x7f
 800e932:	d017      	beq.n	800e964 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e934:	4b53      	ldr	r3, [pc, #332]	@ (800ea84 <ip4_input+0x230>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	613b      	str	r3, [r7, #16]
 800e93a:	e00e      	b.n	800e95a <ip4_input+0x106>
          if (netif == inp) {
 800e93c:	693a      	ldr	r2, [r7, #16]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d006      	beq.n	800e952 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e944:	6938      	ldr	r0, [r7, #16]
 800e946:	f7ff ff5b 	bl	800e800 <ip4_input_accept>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d108      	bne.n	800e962 <ip4_input+0x10e>
 800e950:	e000      	b.n	800e954 <ip4_input+0x100>
            continue;
 800e952:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	613b      	str	r3, [r7, #16]
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1ed      	bne.n	800e93c <ip4_input+0xe8>
 800e960:	e000      	b.n	800e964 <ip4_input+0x110>
            break;
 800e962:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e964:	4b46      	ldr	r3, [pc, #280]	@ (800ea80 <ip4_input+0x22c>)
 800e966:	691b      	ldr	r3, [r3, #16]
 800e968:	6839      	ldr	r1, [r7, #0]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 f964 	bl	800ec38 <ip4_addr_isbroadcast_u32>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d105      	bne.n	800e982 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e976:	4b42      	ldr	r3, [pc, #264]	@ (800ea80 <ip4_input+0x22c>)
 800e978:	691b      	ldr	r3, [r3, #16]
 800e97a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e97e:	2be0      	cmp	r3, #224	@ 0xe0
 800e980:	d104      	bne.n	800e98c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f7fd fd04 	bl	800c390 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e988:	2300      	movs	r3, #0
 800e98a:	e074      	b.n	800ea76 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d104      	bne.n	800e99c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7fd fcfc 	bl	800c390 <pbuf_free>
    return ERR_OK;
 800e998:	2300      	movs	r3, #0
 800e99a:	e06c      	b.n	800ea76 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	88db      	ldrh	r3, [r3, #6]
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800e9a8:	4013      	ands	r3, r2
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00b      	beq.n	800e9c6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 fdc6 	bl	800f540 <ip4_reass>
 800e9b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d101      	bne.n	800e9c0 <ip4_input+0x16c>
      return ERR_OK;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	e05a      	b.n	800ea76 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e9c6:	4a2e      	ldr	r2, [pc, #184]	@ (800ea80 <ip4_input+0x22c>)
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e9cc:	4a2c      	ldr	r2, [pc, #176]	@ (800ea80 <ip4_input+0x22c>)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e9d2:	4a2b      	ldr	r2, [pc, #172]	@ (800ea80 <ip4_input+0x22c>)
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	f003 030f 	and.w	r3, r3, #15
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	009b      	lsls	r3, r3, #2
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	4b25      	ldr	r3, [pc, #148]	@ (800ea80 <ip4_input+0x22c>)
 800e9ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e9ec:	89fb      	ldrh	r3, [r7, #14]
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7fd fc47 	bl	800c284 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	7a5b      	ldrb	r3, [r3, #9]
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d006      	beq.n	800ea0c <ip4_input+0x1b8>
 800e9fe:	2b11      	cmp	r3, #17
 800ea00:	d109      	bne.n	800ea16 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ea02:	6839      	ldr	r1, [r7, #0]
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7fe f975 	bl	800ccf4 <udp_input>
        break;
 800ea0a:	e021      	b.n	800ea50 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ea0c:	6839      	ldr	r1, [r7, #0]
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f7ff fcf8 	bl	800e404 <icmp_input>
        break;
 800ea14:	e01c      	b.n	800ea50 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea16:	4b1a      	ldr	r3, [pc, #104]	@ (800ea80 <ip4_input+0x22c>)
 800ea18:	695b      	ldr	r3, [r3, #20]
 800ea1a:	6939      	ldr	r1, [r7, #16]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f000 f90b 	bl	800ec38 <ip4_addr_isbroadcast_u32>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d10f      	bne.n	800ea48 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea28:	4b15      	ldr	r3, [pc, #84]	@ (800ea80 <ip4_input+0x22c>)
 800ea2a:	695b      	ldr	r3, [r3, #20]
 800ea2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea30:	2be0      	cmp	r3, #224	@ 0xe0
 800ea32:	d009      	beq.n	800ea48 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ea34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ea38:	4619      	mov	r1, r3
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f7fd fc95 	bl	800c36a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ea40:	2102      	movs	r1, #2
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f7ff fde2 	bl	800e60c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fd fca1 	bl	800c390 <pbuf_free>
        break;
 800ea4e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ea50:	4b0b      	ldr	r3, [pc, #44]	@ (800ea80 <ip4_input+0x22c>)
 800ea52:	2200      	movs	r2, #0
 800ea54:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ea56:	4b0a      	ldr	r3, [pc, #40]	@ (800ea80 <ip4_input+0x22c>)
 800ea58:	2200      	movs	r2, #0
 800ea5a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ea5c:	4b08      	ldr	r3, [pc, #32]	@ (800ea80 <ip4_input+0x22c>)
 800ea5e:	2200      	movs	r2, #0
 800ea60:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ea62:	4b07      	ldr	r3, [pc, #28]	@ (800ea80 <ip4_input+0x22c>)
 800ea64:	2200      	movs	r2, #0
 800ea66:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ea68:	4b05      	ldr	r3, [pc, #20]	@ (800ea80 <ip4_input+0x22c>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ea6e:	4b04      	ldr	r3, [pc, #16]	@ (800ea80 <ip4_input+0x22c>)
 800ea70:	2200      	movs	r2, #0
 800ea72:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	20009df0 	.word	0x20009df0
 800ea84:	2000d004 	.word	0x2000d004

0800ea88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b08a      	sub	sp, #40	@ 0x28
 800ea8c:	af04      	add	r7, sp, #16
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
 800ea94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d009      	beq.n	800eab4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d003      	beq.n	800eaae <ip4_output_if+0x26>
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d102      	bne.n	800eab4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800eaae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab0:	3304      	adds	r3, #4
 800eab2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800eab4:	78fa      	ldrb	r2, [r7, #3]
 800eab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab8:	9302      	str	r3, [sp, #8]
 800eaba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eabe:	9301      	str	r3, [sp, #4]
 800eac0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	4613      	mov	r3, r2
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	6979      	ldr	r1, [r7, #20]
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f000 f805 	bl	800eadc <ip4_output_if_src>
 800ead2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3718      	adds	r7, #24
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b088      	sub	sp, #32
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
 800eae8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	7b9b      	ldrb	r3, [r3, #14]
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d006      	beq.n	800eb00 <ip4_output_if_src+0x24>
 800eaf2:	4b4b      	ldr	r3, [pc, #300]	@ (800ec20 <ip4_output_if_src+0x144>)
 800eaf4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800eaf8:	494a      	ldr	r1, [pc, #296]	@ (800ec24 <ip4_output_if_src+0x148>)
 800eafa:	484b      	ldr	r0, [pc, #300]	@ (800ec28 <ip4_output_if_src+0x14c>)
 800eafc:	f001 fc1a 	bl	8010334 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d060      	beq.n	800ebc8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800eb06:	2314      	movs	r3, #20
 800eb08:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800eb0a:	2114      	movs	r1, #20
 800eb0c:	68f8      	ldr	r0, [r7, #12]
 800eb0e:	f7fd fba9 	bl	800c264 <pbuf_add_header>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d002      	beq.n	800eb1e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eb18:	f06f 0301 	mvn.w	r3, #1
 800eb1c:	e07c      	b.n	800ec18 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	895b      	ldrh	r3, [r3, #10]
 800eb28:	2b13      	cmp	r3, #19
 800eb2a:	d806      	bhi.n	800eb3a <ip4_output_if_src+0x5e>
 800eb2c:	4b3c      	ldr	r3, [pc, #240]	@ (800ec20 <ip4_output_if_src+0x144>)
 800eb2e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800eb32:	493e      	ldr	r1, [pc, #248]	@ (800ec2c <ip4_output_if_src+0x150>)
 800eb34:	483c      	ldr	r0, [pc, #240]	@ (800ec28 <ip4_output_if_src+0x14c>)
 800eb36:	f001 fbfd 	bl	8010334 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	78fa      	ldrb	r2, [r7, #3]
 800eb3e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800eb46:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800eb50:	8b7b      	ldrh	r3, [r7, #26]
 800eb52:	089b      	lsrs	r3, r3, #2
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800eb68:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	891b      	ldrh	r3, [r3, #8]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7fc f87e 	bl	800ac70 <lwip_htons>
 800eb74:	4603      	mov	r3, r0
 800eb76:	461a      	mov	r2, r3
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	719a      	strb	r2, [r3, #6]
 800eb82:	2200      	movs	r2, #0
 800eb84:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800eb86:	4b2a      	ldr	r3, [pc, #168]	@ (800ec30 <ip4_output_if_src+0x154>)
 800eb88:	881b      	ldrh	r3, [r3, #0]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fc f870 	bl	800ac70 <lwip_htons>
 800eb90:	4603      	mov	r3, r0
 800eb92:	461a      	mov	r2, r3
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800eb98:	4b25      	ldr	r3, [pc, #148]	@ (800ec30 <ip4_output_if_src+0x154>)
 800eb9a:	881b      	ldrh	r3, [r3, #0]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	4b23      	ldr	r3, [pc, #140]	@ (800ec30 <ip4_output_if_src+0x154>)
 800eba2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d104      	bne.n	800ebb4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ebaa:	4b22      	ldr	r3, [pc, #136]	@ (800ec34 <ip4_output_if_src+0x158>)
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	60da      	str	r2, [r3, #12]
 800ebb2:	e003      	b.n	800ebbc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	729a      	strb	r2, [r3, #10]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	72da      	strb	r2, [r3, #11]
 800ebc6:	e00f      	b.n	800ebe8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	895b      	ldrh	r3, [r3, #10]
 800ebcc:	2b13      	cmp	r3, #19
 800ebce:	d802      	bhi.n	800ebd6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ebd0:	f06f 0301 	mvn.w	r3, #1
 800ebd4:	e020      	b.n	800ec18 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	691b      	ldr	r3, [r3, #16]
 800ebe0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ebe2:	f107 0314 	add.w	r3, r7, #20
 800ebe6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00c      	beq.n	800ec0a <ip4_output_if_src+0x12e>
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	891a      	ldrh	r2, [r3, #8]
 800ebf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d906      	bls.n	800ec0a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f000 fe91 	bl	800f928 <ip4_frag>
 800ec06:	4603      	mov	r3, r0
 800ec08:	e006      	b.n	800ec18 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec0c:	695b      	ldr	r3, [r3, #20]
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	68f9      	ldr	r1, [r7, #12]
 800ec12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec14:	4798      	blx	r3
 800ec16:	4603      	mov	r3, r0
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3720      	adds	r7, #32
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	08012e7c 	.word	0x08012e7c
 800ec24:	08012eb0 	.word	0x08012eb0
 800ec28:	08012ebc 	.word	0x08012ebc
 800ec2c:	08012ee4 	.word	0x08012ee4
 800ec30:	2000d10e 	.word	0x2000d10e
 800ec34:	08013358 	.word	0x08013358

0800ec38 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec4c:	d002      	beq.n	800ec54 <ip4_addr_isbroadcast_u32+0x1c>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d101      	bne.n	800ec58 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e02a      	b.n	800ecae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ec5e:	f003 0302 	and.w	r3, r3, #2
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d101      	bne.n	800ec6a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	e021      	b.n	800ecae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d101      	bne.n	800ec7a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ec76:	2300      	movs	r3, #0
 800ec78:	e019      	b.n	800ecae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	3304      	adds	r3, #4
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	405a      	eors	r2, r3
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	3308      	adds	r3, #8
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d10d      	bne.n	800ecac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	3308      	adds	r3, #8
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	43da      	mvns	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	3308      	adds	r3, #8
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d101      	bne.n	800ecac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e000      	b.n	800ecae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ecac:	2300      	movs	r3, #0
  }
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3714      	adds	r7, #20
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b084      	sub	sp, #16
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 800ecc2:	f107 030c 	add.w	r3, r7, #12
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 f80b 	bl	800ece4 <ip4addr_aton>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	e001      	b.n	800ecdc <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 800ecd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b08a      	sub	sp, #40	@ 0x28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800ecee:	f107 030c 	add.w	r3, r7, #12
 800ecf2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800ecfc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ed00:	3301      	adds	r3, #1
 800ed02:	4a89      	ldr	r2, [pc, #548]	@ (800ef28 <ip4addr_aton+0x244>)
 800ed04:	4413      	add	r3, r2
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	f003 0304 	and.w	r3, r3, #4
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d101      	bne.n	800ed14 <ip4addr_aton+0x30>
      return 0;
 800ed10:	2300      	movs	r3, #0
 800ed12:	e105      	b.n	800ef20 <ip4addr_aton+0x23c>
    }
    val = 0;
 800ed14:	2300      	movs	r3, #0
 800ed16:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 800ed18:	230a      	movs	r3, #10
 800ed1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 800ed1e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ed22:	2b30      	cmp	r3, #48	@ 0x30
 800ed24:	d11c      	bne.n	800ed60 <ip4addr_aton+0x7c>
      c = *++cp;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	607b      	str	r3, [r7, #4]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 800ed34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ed38:	2b78      	cmp	r3, #120	@ 0x78
 800ed3a:	d003      	beq.n	800ed44 <ip4addr_aton+0x60>
 800ed3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ed40:	2b58      	cmp	r3, #88	@ 0x58
 800ed42:	d10a      	bne.n	800ed5a <ip4addr_aton+0x76>
        base = 16;
 800ed44:	2310      	movs	r3, #16
 800ed46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	607b      	str	r3, [r7, #4]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ed58:	e002      	b.n	800ed60 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 800ed5a:	2308      	movs	r3, #8
 800ed5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 800ed60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ed64:	3301      	adds	r3, #1
 800ed66:	4a70      	ldr	r2, [pc, #448]	@ (800ef28 <ip4addr_aton+0x244>)
 800ed68:	4413      	add	r3, r2
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	f003 0304 	and.w	r3, r3, #4
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d011      	beq.n	800ed98 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 800ed74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ed78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed7a:	fb03 f202 	mul.w	r2, r3, r2
 800ed7e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ed82:	4413      	add	r3, r2
 800ed84:	3b30      	subs	r3, #48	@ 0x30
 800ed86:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	607b      	str	r3, [r7, #4]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ed96:	e7e3      	b.n	800ed60 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800ed98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ed9c:	2b10      	cmp	r3, #16
 800ed9e:	d127      	bne.n	800edf0 <ip4addr_aton+0x10c>
 800eda0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800eda4:	3301      	adds	r3, #1
 800eda6:	4a60      	ldr	r2, [pc, #384]	@ (800ef28 <ip4addr_aton+0x244>)
 800eda8:	4413      	add	r3, r2
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d01d      	beq.n	800edf0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800edb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb6:	011b      	lsls	r3, r3, #4
 800edb8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800edbc:	f102 010a 	add.w	r1, r2, #10
 800edc0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800edc4:	3201      	adds	r2, #1
 800edc6:	4858      	ldr	r0, [pc, #352]	@ (800ef28 <ip4addr_aton+0x244>)
 800edc8:	4402      	add	r2, r0
 800edca:	7812      	ldrb	r2, [r2, #0]
 800edcc:	f002 0203 	and.w	r2, r2, #3
 800edd0:	2a02      	cmp	r2, #2
 800edd2:	d101      	bne.n	800edd8 <ip4addr_aton+0xf4>
 800edd4:	2261      	movs	r2, #97	@ 0x61
 800edd6:	e000      	b.n	800edda <ip4addr_aton+0xf6>
 800edd8:	2241      	movs	r2, #65	@ 0x41
 800edda:	1a8a      	subs	r2, r1, r2
 800eddc:	4313      	orrs	r3, r2
 800edde:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	3301      	adds	r3, #1
 800ede4:	607b      	str	r3, [r7, #4]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 800edee:	e7b7      	b.n	800ed60 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 800edf0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800edf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800edf6:	d114      	bne.n	800ee22 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800edf8:	f107 030c 	add.w	r3, r7, #12
 800edfc:	330c      	adds	r3, #12
 800edfe:	69fa      	ldr	r2, [r7, #28]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d301      	bcc.n	800ee08 <ip4addr_aton+0x124>
        return 0;
 800ee04:	2300      	movs	r3, #0
 800ee06:	e08b      	b.n	800ef20 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	1d1a      	adds	r2, r3, #4
 800ee0c:	61fa      	str	r2, [r7, #28]
 800ee0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee10:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	3301      	adds	r3, #1
 800ee16:	607b      	str	r3, [r7, #4]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 800ee20:	e76c      	b.n	800ecfc <ip4addr_aton+0x18>
    } else {
      break;
 800ee22:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800ee24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00b      	beq.n	800ee44 <ip4addr_aton+0x160>
 800ee2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ee30:	3301      	adds	r3, #1
 800ee32:	4a3d      	ldr	r2, [pc, #244]	@ (800ef28 <ip4addr_aton+0x244>)
 800ee34:	4413      	add	r3, r2
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	f003 0308 	and.w	r3, r3, #8
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d101      	bne.n	800ee44 <ip4addr_aton+0x160>
    return 0;
 800ee40:	2300      	movs	r3, #0
 800ee42:	e06d      	b.n	800ef20 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800ee44:	f107 030c 	add.w	r3, r7, #12
 800ee48:	69fa      	ldr	r2, [r7, #28]
 800ee4a:	1ad3      	subs	r3, r2, r3
 800ee4c:	109b      	asrs	r3, r3, #2
 800ee4e:	3301      	adds	r3, #1
 800ee50:	2b04      	cmp	r3, #4
 800ee52:	d853      	bhi.n	800eefc <ip4addr_aton+0x218>
 800ee54:	a201      	add	r2, pc, #4	@ (adr r2, 800ee5c <ip4addr_aton+0x178>)
 800ee56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee5a:	bf00      	nop
 800ee5c:	0800ee71 	.word	0x0800ee71
 800ee60:	0800ef0b 	.word	0x0800ef0b
 800ee64:	0800ee75 	.word	0x0800ee75
 800ee68:	0800ee97 	.word	0x0800ee97
 800ee6c:	0800eec5 	.word	0x0800eec5

    case 0:
      return 0;       /* initial nondigit */
 800ee70:	2300      	movs	r3, #0
 800ee72:	e055      	b.n	800ef20 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800ee74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ee7a:	d301      	bcc.n	800ee80 <ip4addr_aton+0x19c>
        return 0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	e04f      	b.n	800ef20 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2bff      	cmp	r3, #255	@ 0xff
 800ee84:	d901      	bls.n	800ee8a <ip4addr_aton+0x1a6>
        return 0;
 800ee86:	2300      	movs	r3, #0
 800ee88:	e04a      	b.n	800ef20 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	061b      	lsls	r3, r3, #24
 800ee8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee90:	4313      	orrs	r3, r2
 800ee92:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ee94:	e03a      	b.n	800ef0c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 800ee96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee9c:	d301      	bcc.n	800eea2 <ip4addr_aton+0x1be>
        return 0;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e03e      	b.n	800ef20 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2bff      	cmp	r3, #255	@ 0xff
 800eea6:	d802      	bhi.n	800eeae <ip4addr_aton+0x1ca>
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	2bff      	cmp	r3, #255	@ 0xff
 800eeac:	d901      	bls.n	800eeb2 <ip4addr_aton+0x1ce>
        return 0;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	e036      	b.n	800ef20 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	061a      	lsls	r2, r3, #24
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	041b      	lsls	r3, r3, #16
 800eeba:	4313      	orrs	r3, r2
 800eebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eebe:	4313      	orrs	r3, r2
 800eec0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eec2:	e023      	b.n	800ef0c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 800eec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec6:	2bff      	cmp	r3, #255	@ 0xff
 800eec8:	d901      	bls.n	800eece <ip4addr_aton+0x1ea>
        return 0;
 800eeca:	2300      	movs	r3, #0
 800eecc:	e028      	b.n	800ef20 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2bff      	cmp	r3, #255	@ 0xff
 800eed2:	d805      	bhi.n	800eee0 <ip4addr_aton+0x1fc>
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	2bff      	cmp	r3, #255	@ 0xff
 800eed8:	d802      	bhi.n	800eee0 <ip4addr_aton+0x1fc>
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	2bff      	cmp	r3, #255	@ 0xff
 800eede:	d901      	bls.n	800eee4 <ip4addr_aton+0x200>
        return 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	e01d      	b.n	800ef20 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	061a      	lsls	r2, r3, #24
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	041b      	lsls	r3, r3, #16
 800eeec:	431a      	orrs	r2, r3
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	021b      	lsls	r3, r3, #8
 800eef2:	4313      	orrs	r3, r2
 800eef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eef6:	4313      	orrs	r3, r2
 800eef8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eefa:	e007      	b.n	800ef0c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 800eefc:	4b0b      	ldr	r3, [pc, #44]	@ (800ef2c <ip4addr_aton+0x248>)
 800eefe:	22f9      	movs	r2, #249	@ 0xf9
 800ef00:	490b      	ldr	r1, [pc, #44]	@ (800ef30 <ip4addr_aton+0x24c>)
 800ef02:	480c      	ldr	r0, [pc, #48]	@ (800ef34 <ip4addr_aton+0x250>)
 800ef04:	f001 fa16 	bl	8010334 <iprintf>
      break;
 800ef08:	e000      	b.n	800ef0c <ip4addr_aton+0x228>
      break;
 800ef0a:	bf00      	nop
  }
  if (addr) {
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d005      	beq.n	800ef1e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800ef12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef14:	f7fb fec1 	bl	800ac9a <lwip_htonl>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800ef1e:	2301      	movs	r3, #1
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3728      	adds	r7, #40	@ 0x28
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	080133e3 	.word	0x080133e3
 800ef2c:	08012f14 	.word	0x08012f14
 800ef30:	08012f50 	.word	0x08012f50
 800ef34:	08012f5c 	.word	0x08012f5c

0800ef38 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ef42:	4b12      	ldr	r3, [pc, #72]	@ (800ef8c <ip_reass_tmr+0x54>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ef48:	e018      	b.n	800ef7c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	7fdb      	ldrb	r3, [r3, #31]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00b      	beq.n	800ef6a <ip_reass_tmr+0x32>
      r->timer--;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	7fdb      	ldrb	r3, [r3, #31]
 800ef56:	3b01      	subs	r3, #1
 800ef58:	b2da      	uxtb	r2, r3
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	60fb      	str	r3, [r7, #12]
 800ef68:	e008      	b.n	800ef7c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ef74:	68b9      	ldr	r1, [r7, #8]
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 f80a 	bl	800ef90 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1e3      	bne.n	800ef4a <ip_reass_tmr+0x12>
    }
  }
}
 800ef82:	bf00      	nop
 800ef84:	bf00      	nop
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	2000d110 	.word	0x2000d110

0800ef90 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b088      	sub	sp, #32
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ef9e:	683a      	ldr	r2, [r7, #0]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d105      	bne.n	800efb2 <ip_reass_free_complete_datagram+0x22>
 800efa6:	4b45      	ldr	r3, [pc, #276]	@ (800f0bc <ip_reass_free_complete_datagram+0x12c>)
 800efa8:	22ab      	movs	r2, #171	@ 0xab
 800efaa:	4945      	ldr	r1, [pc, #276]	@ (800f0c0 <ip_reass_free_complete_datagram+0x130>)
 800efac:	4845      	ldr	r0, [pc, #276]	@ (800f0c4 <ip_reass_free_complete_datagram+0x134>)
 800efae:	f001 f9c1 	bl	8010334 <iprintf>
  if (prev != NULL) {
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00a      	beq.n	800efce <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d005      	beq.n	800efce <ip_reass_free_complete_datagram+0x3e>
 800efc2:	4b3e      	ldr	r3, [pc, #248]	@ (800f0bc <ip_reass_free_complete_datagram+0x12c>)
 800efc4:	22ad      	movs	r2, #173	@ 0xad
 800efc6:	4940      	ldr	r1, [pc, #256]	@ (800f0c8 <ip_reass_free_complete_datagram+0x138>)
 800efc8:	483e      	ldr	r0, [pc, #248]	@ (800f0c4 <ip_reass_free_complete_datagram+0x134>)
 800efca:	f001 f9b3 	bl	8010334 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	889b      	ldrh	r3, [r3, #4]
 800efda:	b29b      	uxth	r3, r3
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d12a      	bne.n	800f036 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	6858      	ldr	r0, [r3, #4]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3308      	adds	r3, #8
 800eff6:	2214      	movs	r2, #20
 800eff8:	4619      	mov	r1, r3
 800effa:	f001 fa76 	bl	80104ea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800effe:	2101      	movs	r1, #1
 800f000:	69b8      	ldr	r0, [r7, #24]
 800f002:	f7ff fb13 	bl	800e62c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f006:	69b8      	ldr	r0, [r7, #24]
 800f008:	f7fd fa50 	bl	800c4ac <pbuf_clen>
 800f00c:	4603      	mov	r3, r0
 800f00e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f010:	8bfa      	ldrh	r2, [r7, #30]
 800f012:	8a7b      	ldrh	r3, [r7, #18]
 800f014:	4413      	add	r3, r2
 800f016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f01a:	db05      	blt.n	800f028 <ip_reass_free_complete_datagram+0x98>
 800f01c:	4b27      	ldr	r3, [pc, #156]	@ (800f0bc <ip_reass_free_complete_datagram+0x12c>)
 800f01e:	22bc      	movs	r2, #188	@ 0xbc
 800f020:	492a      	ldr	r1, [pc, #168]	@ (800f0cc <ip_reass_free_complete_datagram+0x13c>)
 800f022:	4828      	ldr	r0, [pc, #160]	@ (800f0c4 <ip_reass_free_complete_datagram+0x134>)
 800f024:	f001 f986 	bl	8010334 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f028:	8bfa      	ldrh	r2, [r7, #30]
 800f02a:	8a7b      	ldrh	r3, [r7, #18]
 800f02c:	4413      	add	r3, r2
 800f02e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f030:	69b8      	ldr	r0, [r7, #24]
 800f032:	f7fd f9ad 	bl	800c390 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f03c:	e01f      	b.n	800f07e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f7fd fa2c 	bl	800c4ac <pbuf_clen>
 800f054:	4603      	mov	r3, r0
 800f056:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f058:	8bfa      	ldrh	r2, [r7, #30]
 800f05a:	8a7b      	ldrh	r3, [r7, #18]
 800f05c:	4413      	add	r3, r2
 800f05e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f062:	db05      	blt.n	800f070 <ip_reass_free_complete_datagram+0xe0>
 800f064:	4b15      	ldr	r3, [pc, #84]	@ (800f0bc <ip_reass_free_complete_datagram+0x12c>)
 800f066:	22cc      	movs	r2, #204	@ 0xcc
 800f068:	4918      	ldr	r1, [pc, #96]	@ (800f0cc <ip_reass_free_complete_datagram+0x13c>)
 800f06a:	4816      	ldr	r0, [pc, #88]	@ (800f0c4 <ip_reass_free_complete_datagram+0x134>)
 800f06c:	f001 f962 	bl	8010334 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f070:	8bfa      	ldrh	r2, [r7, #30]
 800f072:	8a7b      	ldrh	r3, [r7, #18]
 800f074:	4413      	add	r3, r2
 800f076:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f7fd f989 	bl	800c390 <pbuf_free>
  while (p != NULL) {
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d1dc      	bne.n	800f03e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f084:	6839      	ldr	r1, [r7, #0]
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 f8c2 	bl	800f210 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f08c:	4b10      	ldr	r3, [pc, #64]	@ (800f0d0 <ip_reass_free_complete_datagram+0x140>)
 800f08e:	881b      	ldrh	r3, [r3, #0]
 800f090:	8bfa      	ldrh	r2, [r7, #30]
 800f092:	429a      	cmp	r2, r3
 800f094:	d905      	bls.n	800f0a2 <ip_reass_free_complete_datagram+0x112>
 800f096:	4b09      	ldr	r3, [pc, #36]	@ (800f0bc <ip_reass_free_complete_datagram+0x12c>)
 800f098:	22d2      	movs	r2, #210	@ 0xd2
 800f09a:	490e      	ldr	r1, [pc, #56]	@ (800f0d4 <ip_reass_free_complete_datagram+0x144>)
 800f09c:	4809      	ldr	r0, [pc, #36]	@ (800f0c4 <ip_reass_free_complete_datagram+0x134>)
 800f09e:	f001 f949 	bl	8010334 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f0a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f0d0 <ip_reass_free_complete_datagram+0x140>)
 800f0a4:	881a      	ldrh	r2, [r3, #0]
 800f0a6:	8bfb      	ldrh	r3, [r7, #30]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	4b08      	ldr	r3, [pc, #32]	@ (800f0d0 <ip_reass_free_complete_datagram+0x140>)
 800f0ae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f0b0:	8bfb      	ldrh	r3, [r7, #30]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3720      	adds	r7, #32
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	08012f84 	.word	0x08012f84
 800f0c0:	08012fc0 	.word	0x08012fc0
 800f0c4:	08012fcc 	.word	0x08012fcc
 800f0c8:	08012ff4 	.word	0x08012ff4
 800f0cc:	08013008 	.word	0x08013008
 800f0d0:	2000d114 	.word	0x2000d114
 800f0d4:	08013028 	.word	0x08013028

0800f0d8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b08a      	sub	sp, #40	@ 0x28
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f0f6:	4b28      	ldr	r3, [pc, #160]	@ (800f198 <ip_reass_remove_oldest_datagram+0xc0>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f0fc:	e030      	b.n	800f160 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f100:	695a      	ldr	r2, [r3, #20]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	429a      	cmp	r2, r3
 800f108:	d10c      	bne.n	800f124 <ip_reass_remove_oldest_datagram+0x4c>
 800f10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10c:	699a      	ldr	r2, [r3, #24]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	429a      	cmp	r2, r3
 800f114:	d106      	bne.n	800f124 <ip_reass_remove_oldest_datagram+0x4c>
 800f116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f118:	899a      	ldrh	r2, [r3, #12]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	889b      	ldrh	r3, [r3, #4]
 800f11e:	b29b      	uxth	r3, r3
 800f120:	429a      	cmp	r2, r3
 800f122:	d014      	beq.n	800f14e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	3301      	adds	r3, #1
 800f128:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f12a:	6a3b      	ldr	r3, [r7, #32]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d104      	bne.n	800f13a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f132:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	61bb      	str	r3, [r7, #24]
 800f138:	e009      	b.n	800f14e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f13c:	7fda      	ldrb	r2, [r3, #31]
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	7fdb      	ldrb	r3, [r3, #31]
 800f142:	429a      	cmp	r2, r3
 800f144:	d803      	bhi.n	800f14e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f148:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f158:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1cb      	bne.n	800f0fe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d008      	beq.n	800f17e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f16c:	69b9      	ldr	r1, [r7, #24]
 800f16e:	6a38      	ldr	r0, [r7, #32]
 800f170:	f7ff ff0e 	bl	800ef90 <ip_reass_free_complete_datagram>
 800f174:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	4413      	add	r3, r2
 800f17c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	429a      	cmp	r2, r3
 800f184:	da02      	bge.n	800f18c <ip_reass_remove_oldest_datagram+0xb4>
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	dcac      	bgt.n	800f0e6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f18c:	697b      	ldr	r3, [r7, #20]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3728      	adds	r7, #40	@ 0x28
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	2000d110 	.word	0x2000d110

0800f19c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f1a6:	2001      	movs	r0, #1
 800f1a8:	f7fc fa38 	bl	800b61c <memp_malloc>
 800f1ac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d110      	bne.n	800f1d6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f1b4:	6839      	ldr	r1, [r7, #0]
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f7ff ff8e 	bl	800f0d8 <ip_reass_remove_oldest_datagram>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	dc03      	bgt.n	800f1cc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f1c4:	2001      	movs	r0, #1
 800f1c6:	f7fc fa29 	bl	800b61c <memp_malloc>
 800f1ca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d101      	bne.n	800f1d6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	e016      	b.n	800f204 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f1d6:	2220      	movs	r2, #32
 800f1d8:	2100      	movs	r1, #0
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f001 f90f 	bl	80103fe <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	220f      	movs	r2, #15
 800f1e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f1e6:	4b09      	ldr	r3, [pc, #36]	@ (800f20c <ip_reass_enqueue_new_datagram+0x70>)
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f1ee:	4a07      	ldr	r2, [pc, #28]	@ (800f20c <ip_reass_enqueue_new_datagram+0x70>)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	3308      	adds	r3, #8
 800f1f8:	2214      	movs	r2, #20
 800f1fa:	6879      	ldr	r1, [r7, #4]
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f001 f974 	bl	80104ea <memcpy>
  return ipr;
 800f202:	68fb      	ldr	r3, [r7, #12]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	2000d110 	.word	0x2000d110

0800f210 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f21a:	4b10      	ldr	r3, [pc, #64]	@ (800f25c <ip_reass_dequeue_datagram+0x4c>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	429a      	cmp	r2, r3
 800f222:	d104      	bne.n	800f22e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a0c      	ldr	r2, [pc, #48]	@ (800f25c <ip_reass_dequeue_datagram+0x4c>)
 800f22a:	6013      	str	r3, [r2, #0]
 800f22c:	e00d      	b.n	800f24a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d106      	bne.n	800f242 <ip_reass_dequeue_datagram+0x32>
 800f234:	4b0a      	ldr	r3, [pc, #40]	@ (800f260 <ip_reass_dequeue_datagram+0x50>)
 800f236:	f240 1245 	movw	r2, #325	@ 0x145
 800f23a:	490a      	ldr	r1, [pc, #40]	@ (800f264 <ip_reass_dequeue_datagram+0x54>)
 800f23c:	480a      	ldr	r0, [pc, #40]	@ (800f268 <ip_reass_dequeue_datagram+0x58>)
 800f23e:	f001 f879 	bl	8010334 <iprintf>
    prev->next = ipr->next;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f24a:	6879      	ldr	r1, [r7, #4]
 800f24c:	2001      	movs	r0, #1
 800f24e:	f7fc fa5b 	bl	800b708 <memp_free>
}
 800f252:	bf00      	nop
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	2000d110 	.word	0x2000d110
 800f260:	08012f84 	.word	0x08012f84
 800f264:	0801304c 	.word	0x0801304c
 800f268:	08012fcc 	.word	0x08012fcc

0800f26c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b08c      	sub	sp, #48	@ 0x30
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f278:	2300      	movs	r3, #0
 800f27a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f27c:	2301      	movs	r3, #1
 800f27e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	885b      	ldrh	r3, [r3, #2]
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fb fcef 	bl	800ac70 <lwip_htons>
 800f292:	4603      	mov	r3, r0
 800f294:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	f003 030f 	and.w	r3, r3, #15
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f2a4:	7e7b      	ldrb	r3, [r7, #25]
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	8b7a      	ldrh	r2, [r7, #26]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d202      	bcs.n	800f2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b2:	e135      	b.n	800f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f2b4:	7e7b      	ldrb	r3, [r7, #25]
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	8b7a      	ldrh	r2, [r7, #26]
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	88db      	ldrh	r3, [r3, #6]
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7fb fcd3 	bl	800ac70 <lwip_htons>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	00db      	lsls	r3, r3, #3
 800f2d4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800f2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2de:	2200      	movs	r2, #0
 800f2e0:	701a      	strb	r2, [r3, #0]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	705a      	strb	r2, [r3, #1]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	709a      	strb	r2, [r3, #2]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f0:	8afa      	ldrh	r2, [r7, #22]
 800f2f2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f2f4:	8afa      	ldrh	r2, [r7, #22]
 800f2f6:	8b7b      	ldrh	r3, [r7, #26]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2fe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f302:	88db      	ldrh	r3, [r3, #6]
 800f304:	b29b      	uxth	r3, r3
 800f306:	8afa      	ldrh	r2, [r7, #22]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d902      	bls.n	800f312 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f30c:	f04f 33ff 	mov.w	r3, #4294967295
 800f310:	e106      	b.n	800f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	627b      	str	r3, [r7, #36]	@ 0x24
 800f318:	e068      	b.n	800f3ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f322:	889b      	ldrh	r3, [r3, #4]
 800f324:	b29a      	uxth	r2, r3
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	889b      	ldrh	r3, [r3, #4]
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d235      	bcs.n	800f39c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f334:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d020      	beq.n	800f37e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f33e:	889b      	ldrh	r3, [r3, #4]
 800f340:	b29a      	uxth	r2, r3
 800f342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f344:	88db      	ldrh	r3, [r3, #6]
 800f346:	b29b      	uxth	r3, r3
 800f348:	429a      	cmp	r2, r3
 800f34a:	d307      	bcc.n	800f35c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f34e:	88db      	ldrh	r3, [r3, #6]
 800f350:	b29a      	uxth	r2, r3
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	889b      	ldrh	r3, [r3, #4]
 800f356:	b29b      	uxth	r3, r3
 800f358:	429a      	cmp	r2, r3
 800f35a:	d902      	bls.n	800f362 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f35c:	f04f 33ff 	mov.w	r3, #4294967295
 800f360:	e0de      	b.n	800f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f364:	68ba      	ldr	r2, [r7, #8]
 800f366:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f36a:	88db      	ldrh	r3, [r3, #6]
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f370:	889b      	ldrh	r3, [r3, #4]
 800f372:	b29b      	uxth	r3, r3
 800f374:	429a      	cmp	r2, r3
 800f376:	d03d      	beq.n	800f3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f378:	2300      	movs	r3, #0
 800f37a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f37c:	e03a      	b.n	800f3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f380:	88db      	ldrh	r3, [r3, #6]
 800f382:	b29a      	uxth	r2, r3
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	889b      	ldrh	r3, [r3, #4]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d902      	bls.n	800f394 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f38e:	f04f 33ff 	mov.w	r3, #4294967295
 800f392:	e0c5      	b.n	800f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	605a      	str	r2, [r3, #4]
      break;
 800f39a:	e02b      	b.n	800f3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f39e:	889b      	ldrh	r3, [r3, #4]
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	889b      	ldrh	r3, [r3, #4]
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d102      	bne.n	800f3b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b0:	e0b6      	b.n	800f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b4:	889b      	ldrh	r3, [r3, #4]
 800f3b6:	b29a      	uxth	r2, r3
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	88db      	ldrh	r3, [r3, #6]
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d202      	bcs.n	800f3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c6:	e0ab      	b.n	800f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d009      	beq.n	800f3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d0:	88db      	ldrh	r3, [r3, #6]
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	889b      	ldrh	r3, [r3, #4]
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d001      	beq.n	800f3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d193      	bne.n	800f31a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f3f2:	e000      	b.n	800f3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f3f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d12d      	bne.n	800f458 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d01c      	beq.n	800f43c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f404:	88db      	ldrh	r3, [r3, #6]
 800f406:	b29a      	uxth	r2, r3
 800f408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40a:	889b      	ldrh	r3, [r3, #4]
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	429a      	cmp	r2, r3
 800f410:	d906      	bls.n	800f420 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f412:	4b45      	ldr	r3, [pc, #276]	@ (800f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f414:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800f418:	4944      	ldr	r1, [pc, #272]	@ (800f52c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f41a:	4845      	ldr	r0, [pc, #276]	@ (800f530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f41c:	f000 ff8a 	bl	8010334 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f422:	68ba      	ldr	r2, [r7, #8]
 800f424:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f428:	88db      	ldrh	r3, [r3, #6]
 800f42a:	b29a      	uxth	r2, r3
 800f42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f42e:	889b      	ldrh	r3, [r3, #4]
 800f430:	b29b      	uxth	r3, r3
 800f432:	429a      	cmp	r2, r3
 800f434:	d010      	beq.n	800f458 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	623b      	str	r3, [r7, #32]
 800f43a:	e00d      	b.n	800f458 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d006      	beq.n	800f452 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f444:	4b38      	ldr	r3, [pc, #224]	@ (800f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f446:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800f44a:	493a      	ldr	r1, [pc, #232]	@ (800f534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f44c:	4838      	ldr	r0, [pc, #224]	@ (800f530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f44e:	f000 ff71 	bl	8010334 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	68ba      	ldr	r2, [r7, #8]
 800f456:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d105      	bne.n	800f46a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	7f9b      	ldrb	r3, [r3, #30]
 800f462:	f003 0301 	and.w	r3, r3, #1
 800f466:	2b00      	cmp	r3, #0
 800f468:	d059      	beq.n	800f51e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f46a:	6a3b      	ldr	r3, [r7, #32]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d04f      	beq.n	800f510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d006      	beq.n	800f486 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	889b      	ldrh	r3, [r3, #4]
 800f480:	b29b      	uxth	r3, r3
 800f482:	2b00      	cmp	r3, #0
 800f484:	d002      	beq.n	800f48c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f486:	2300      	movs	r3, #0
 800f488:	623b      	str	r3, [r7, #32]
 800f48a:	e041      	b.n	800f510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f48e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800f490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f496:	e012      	b.n	800f4be <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800f49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a0:	88db      	ldrh	r3, [r3, #6]
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a6:	889b      	ldrh	r3, [r3, #4]
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d002      	beq.n	800f4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	623b      	str	r3, [r7, #32]
            break;
 800f4b2:	e007      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800f4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1e9      	bne.n	800f498 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f4c4:	6a3b      	ldr	r3, [r7, #32]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d022      	beq.n	800f510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d106      	bne.n	800f4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f4d2:	4b15      	ldr	r3, [pc, #84]	@ (800f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f4d4:	f240 12df 	movw	r2, #479	@ 0x1df
 800f4d8:	4917      	ldr	r1, [pc, #92]	@ (800f538 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f4da:	4815      	ldr	r0, [pc, #84]	@ (800f530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f4dc:	f000 ff2a 	bl	8010334 <iprintf>
          LWIP_ASSERT("sanity check",
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d106      	bne.n	800f4fa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f4ec:	4b0e      	ldr	r3, [pc, #56]	@ (800f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f4ee:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f4f2:	4911      	ldr	r1, [pc, #68]	@ (800f538 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f4f4:	480e      	ldr	r0, [pc, #56]	@ (800f530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f4f6:	f000 ff1d 	bl	8010334 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d006      	beq.n	800f510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f502:	4b09      	ldr	r3, [pc, #36]	@ (800f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f504:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f508:	490c      	ldr	r1, [pc, #48]	@ (800f53c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f50a:	4809      	ldr	r0, [pc, #36]	@ (800f530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f50c:	f000 ff12 	bl	8010334 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f510:	6a3b      	ldr	r3, [r7, #32]
 800f512:	2b00      	cmp	r3, #0
 800f514:	bf14      	ite	ne
 800f516:	2301      	movne	r3, #1
 800f518:	2300      	moveq	r3, #0
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	e000      	b.n	800f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	3730      	adds	r7, #48	@ 0x30
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	08012f84 	.word	0x08012f84
 800f52c:	08013068 	.word	0x08013068
 800f530:	08012fcc 	.word	0x08012fcc
 800f534:	08013088 	.word	0x08013088
 800f538:	080130c0 	.word	0x080130c0
 800f53c:	080130d0 	.word	0x080130d0

0800f540 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b08e      	sub	sp, #56	@ 0x38
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	f003 030f 	and.w	r3, r3, #15
 800f556:	b2db      	uxtb	r3, r3
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	2b14      	cmp	r3, #20
 800f55e:	f040 8171 	bne.w	800f844 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f564:	88db      	ldrh	r3, [r3, #6]
 800f566:	b29b      	uxth	r3, r3
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fb fb81 	bl	800ac70 <lwip_htons>
 800f56e:	4603      	mov	r3, r0
 800f570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f574:	b29b      	uxth	r3, r3
 800f576:	00db      	lsls	r3, r3, #3
 800f578:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f57c:	885b      	ldrh	r3, [r3, #2]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	4618      	mov	r0, r3
 800f582:	f7fb fb75 	bl	800ac70 <lwip_htons>
 800f586:	4603      	mov	r3, r0
 800f588:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	f003 030f 	and.w	r3, r3, #15
 800f592:	b2db      	uxtb	r3, r3
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800f59a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	f0c0 8150 	bcc.w	800f848 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f5a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f7fc ff79 	bl	800c4ac <pbuf_clen>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f5be:	4b8c      	ldr	r3, [pc, #560]	@ (800f7f0 <ip4_reass+0x2b0>)
 800f5c0:	881b      	ldrh	r3, [r3, #0]
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	8c3b      	ldrh	r3, [r7, #32]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	2b0a      	cmp	r3, #10
 800f5ca:	dd10      	ble.n	800f5ee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f5cc:	8c3b      	ldrh	r3, [r7, #32]
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5d2:	f7ff fd81 	bl	800f0d8 <ip_reass_remove_oldest_datagram>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 8137 	beq.w	800f84c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f5de:	4b84      	ldr	r3, [pc, #528]	@ (800f7f0 <ip4_reass+0x2b0>)
 800f5e0:	881b      	ldrh	r3, [r3, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	8c3b      	ldrh	r3, [r7, #32]
 800f5e6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f5e8:	2b0a      	cmp	r3, #10
 800f5ea:	f300 812f 	bgt.w	800f84c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f5ee:	4b81      	ldr	r3, [pc, #516]	@ (800f7f4 <ip4_reass+0x2b4>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f5f4:	e015      	b.n	800f622 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f8:	695a      	ldr	r2, [r3, #20]
 800f5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d10c      	bne.n	800f61c <ip4_reass+0xdc>
 800f602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f604:	699a      	ldr	r2, [r3, #24]
 800f606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f608:	691b      	ldr	r3, [r3, #16]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d106      	bne.n	800f61c <ip4_reass+0xdc>
 800f60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f610:	899a      	ldrh	r2, [r3, #12]
 800f612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f614:	889b      	ldrh	r3, [r3, #4]
 800f616:	b29b      	uxth	r3, r3
 800f618:	429a      	cmp	r2, r3
 800f61a:	d006      	beq.n	800f62a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	633b      	str	r3, [r7, #48]	@ 0x30
 800f622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1e6      	bne.n	800f5f6 <ip4_reass+0xb6>
 800f628:	e000      	b.n	800f62c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f62a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d109      	bne.n	800f646 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f632:	8c3b      	ldrh	r3, [r7, #32]
 800f634:	4619      	mov	r1, r3
 800f636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f638:	f7ff fdb0 	bl	800f19c <ip_reass_enqueue_new_datagram>
 800f63c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f640:	2b00      	cmp	r3, #0
 800f642:	d11c      	bne.n	800f67e <ip4_reass+0x13e>
      goto nullreturn;
 800f644:	e105      	b.n	800f852 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f648:	88db      	ldrh	r3, [r3, #6]
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fb fb0f 	bl	800ac70 <lwip_htons>
 800f652:	4603      	mov	r3, r0
 800f654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d110      	bne.n	800f67e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f65e:	89db      	ldrh	r3, [r3, #14]
 800f660:	4618      	mov	r0, r3
 800f662:	f7fb fb05 	bl	800ac70 <lwip_htons>
 800f666:	4603      	mov	r3, r0
 800f668:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d006      	beq.n	800f67e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f672:	3308      	adds	r3, #8
 800f674:	2214      	movs	r2, #20
 800f676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f678:	4618      	mov	r0, r3
 800f67a:	f000 ff36 	bl	80104ea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f680:	88db      	ldrh	r3, [r3, #6]
 800f682:	b29b      	uxth	r3, r3
 800f684:	f003 0320 	and.w	r3, r3, #32
 800f688:	2b00      	cmp	r3, #0
 800f68a:	bf0c      	ite	eq
 800f68c:	2301      	moveq	r3, #1
 800f68e:	2300      	movne	r3, #0
 800f690:	b2db      	uxtb	r3, r3
 800f692:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f694:	69fb      	ldr	r3, [r7, #28]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00e      	beq.n	800f6b8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f69a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f69c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f69e:	4413      	add	r3, r2
 800f6a0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f6a2:	8b7a      	ldrh	r2, [r7, #26]
 800f6a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	f0c0 80a0 	bcc.w	800f7ec <ip4_reass+0x2ac>
 800f6ac:	8b7b      	ldrh	r3, [r7, #26]
 800f6ae:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	f200 809a 	bhi.w	800f7ec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f6b8:	69fa      	ldr	r2, [r7, #28]
 800f6ba:	6879      	ldr	r1, [r7, #4]
 800f6bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6be:	f7ff fdd5 	bl	800f26c <ip_reass_chain_frag_into_datagram_and_validate>
 800f6c2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ca:	f000 809b 	beq.w	800f804 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f6ce:	4b48      	ldr	r3, [pc, #288]	@ (800f7f0 <ip4_reass+0x2b0>)
 800f6d0:	881a      	ldrh	r2, [r3, #0]
 800f6d2:	8c3b      	ldrh	r3, [r7, #32]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	4b45      	ldr	r3, [pc, #276]	@ (800f7f0 <ip4_reass+0x2b0>)
 800f6da:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00d      	beq.n	800f6fe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f6e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f6e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f6e6:	4413      	add	r3, r2
 800f6e8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ec:	8a7a      	ldrh	r2, [r7, #18]
 800f6ee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f2:	7f9b      	ldrb	r3, [r3, #30]
 800f6f4:	f043 0301 	orr.w	r3, r3, #1
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6fc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	2b01      	cmp	r3, #1
 800f702:	d171      	bne.n	800f7e8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f706:	8b9b      	ldrh	r3, [r3, #28]
 800f708:	3314      	adds	r3, #20
 800f70a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f720:	3308      	adds	r3, #8
 800f722:	2214      	movs	r2, #20
 800f724:	4619      	mov	r1, r3
 800f726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f728:	f000 fedf 	bl	80104ea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f72c:	8a3b      	ldrh	r3, [r7, #16]
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fb fa9e 	bl	800ac70 <lwip_htons>
 800f734:	4603      	mov	r3, r0
 800f736:	461a      	mov	r2, r3
 800f738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f73a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f73e:	2200      	movs	r2, #0
 800f740:	719a      	strb	r2, [r3, #6]
 800f742:	2200      	movs	r2, #0
 800f744:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f748:	2200      	movs	r2, #0
 800f74a:	729a      	strb	r2, [r3, #10]
 800f74c:	2200      	movs	r2, #0
 800f74e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f756:	e00d      	b.n	800f774 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f75e:	2114      	movs	r1, #20
 800f760:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f762:	f7fc fd8f 	bl	800c284 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f766:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7fc fedf 	bl	800c52c <pbuf_cat>
      r = iprh->next_pbuf;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800f774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1ee      	bne.n	800f758 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f77a:	4b1e      	ldr	r3, [pc, #120]	@ (800f7f4 <ip4_reass+0x2b4>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f780:	429a      	cmp	r2, r3
 800f782:	d102      	bne.n	800f78a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f784:	2300      	movs	r3, #0
 800f786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f788:	e010      	b.n	800f7ac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f78a:	4b1a      	ldr	r3, [pc, #104]	@ (800f7f4 <ip4_reass+0x2b4>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f790:	e007      	b.n	800f7a2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f798:	429a      	cmp	r2, r3
 800f79a:	d006      	beq.n	800f7aa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1f4      	bne.n	800f792 <ip4_reass+0x252>
 800f7a8:	e000      	b.n	800f7ac <ip4_reass+0x26c>
          break;
 800f7aa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f7ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f7ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f7b0:	f7ff fd2e 	bl	800f210 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f7fc fe79 	bl	800c4ac <pbuf_clen>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f7be:	4b0c      	ldr	r3, [pc, #48]	@ (800f7f0 <ip4_reass+0x2b0>)
 800f7c0:	881b      	ldrh	r3, [r3, #0]
 800f7c2:	8c3a      	ldrh	r2, [r7, #32]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d906      	bls.n	800f7d6 <ip4_reass+0x296>
 800f7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800f7f8 <ip4_reass+0x2b8>)
 800f7ca:	f240 229b 	movw	r2, #667	@ 0x29b
 800f7ce:	490b      	ldr	r1, [pc, #44]	@ (800f7fc <ip4_reass+0x2bc>)
 800f7d0:	480b      	ldr	r0, [pc, #44]	@ (800f800 <ip4_reass+0x2c0>)
 800f7d2:	f000 fdaf 	bl	8010334 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f7d6:	4b06      	ldr	r3, [pc, #24]	@ (800f7f0 <ip4_reass+0x2b0>)
 800f7d8:	881a      	ldrh	r2, [r3, #0]
 800f7da:	8c3b      	ldrh	r3, [r7, #32]
 800f7dc:	1ad3      	subs	r3, r2, r3
 800f7de:	b29a      	uxth	r2, r3
 800f7e0:	4b03      	ldr	r3, [pc, #12]	@ (800f7f0 <ip4_reass+0x2b0>)
 800f7e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	e038      	b.n	800f85a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	e036      	b.n	800f85a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f7ec:	bf00      	nop
 800f7ee:	e00a      	b.n	800f806 <ip4_reass+0x2c6>
 800f7f0:	2000d114 	.word	0x2000d114
 800f7f4:	2000d110 	.word	0x2000d110
 800f7f8:	08012f84 	.word	0x08012f84
 800f7fc:	080130f4 	.word	0x080130f4
 800f800:	08012fcc 	.word	0x08012fcc
    goto nullreturn_ipr;
 800f804:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d106      	bne.n	800f81a <ip4_reass+0x2da>
 800f80c:	4b15      	ldr	r3, [pc, #84]	@ (800f864 <ip4_reass+0x324>)
 800f80e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800f812:	4915      	ldr	r1, [pc, #84]	@ (800f868 <ip4_reass+0x328>)
 800f814:	4815      	ldr	r0, [pc, #84]	@ (800f86c <ip4_reass+0x32c>)
 800f816:	f000 fd8d 	bl	8010334 <iprintf>
  if (ipr->p == NULL) {
 800f81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d116      	bne.n	800f850 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f822:	4b13      	ldr	r3, [pc, #76]	@ (800f870 <ip4_reass+0x330>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f828:	429a      	cmp	r2, r3
 800f82a:	d006      	beq.n	800f83a <ip4_reass+0x2fa>
 800f82c:	4b0d      	ldr	r3, [pc, #52]	@ (800f864 <ip4_reass+0x324>)
 800f82e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f832:	4910      	ldr	r1, [pc, #64]	@ (800f874 <ip4_reass+0x334>)
 800f834:	480d      	ldr	r0, [pc, #52]	@ (800f86c <ip4_reass+0x32c>)
 800f836:	f000 fd7d 	bl	8010334 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f83a:	2100      	movs	r1, #0
 800f83c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f83e:	f7ff fce7 	bl	800f210 <ip_reass_dequeue_datagram>
 800f842:	e006      	b.n	800f852 <ip4_reass+0x312>
    goto nullreturn;
 800f844:	bf00      	nop
 800f846:	e004      	b.n	800f852 <ip4_reass+0x312>
    goto nullreturn;
 800f848:	bf00      	nop
 800f84a:	e002      	b.n	800f852 <ip4_reass+0x312>
      goto nullreturn;
 800f84c:	bf00      	nop
 800f84e:	e000      	b.n	800f852 <ip4_reass+0x312>
  }

nullreturn:
 800f850:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7fc fd9c 	bl	800c390 <pbuf_free>
  return NULL;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3738      	adds	r7, #56	@ 0x38
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	08012f84 	.word	0x08012f84
 800f868:	08013110 	.word	0x08013110
 800f86c:	08012fcc 	.word	0x08012fcc
 800f870:	2000d110 	.word	0x2000d110
 800f874:	0801311c 	.word	0x0801311c

0800f878 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f87c:	2002      	movs	r0, #2
 800f87e:	f7fb fecd 	bl	800b61c <memp_malloc>
 800f882:	4603      	mov	r3, r0
}
 800f884:	4618      	mov	r0, r3
 800f886:	bd80      	pop	{r7, pc}

0800f888 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d106      	bne.n	800f8a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f896:	4b07      	ldr	r3, [pc, #28]	@ (800f8b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f898:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800f89c:	4906      	ldr	r1, [pc, #24]	@ (800f8b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f89e:	4807      	ldr	r0, [pc, #28]	@ (800f8bc <ip_frag_free_pbuf_custom_ref+0x34>)
 800f8a0:	f000 fd48 	bl	8010334 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f8a4:	6879      	ldr	r1, [r7, #4]
 800f8a6:	2002      	movs	r0, #2
 800f8a8:	f7fb ff2e 	bl	800b708 <memp_free>
}
 800f8ac:	bf00      	nop
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	08012f84 	.word	0x08012f84
 800f8b8:	0801313c 	.word	0x0801313c
 800f8bc:	08012fcc 	.word	0x08012fcc

0800f8c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d106      	bne.n	800f8e0 <ipfrag_free_pbuf_custom+0x20>
 800f8d2:	4b11      	ldr	r3, [pc, #68]	@ (800f918 <ipfrag_free_pbuf_custom+0x58>)
 800f8d4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800f8d8:	4910      	ldr	r1, [pc, #64]	@ (800f91c <ipfrag_free_pbuf_custom+0x5c>)
 800f8da:	4811      	ldr	r0, [pc, #68]	@ (800f920 <ipfrag_free_pbuf_custom+0x60>)
 800f8dc:	f000 fd2a 	bl	8010334 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d006      	beq.n	800f8f6 <ipfrag_free_pbuf_custom+0x36>
 800f8e8:	4b0b      	ldr	r3, [pc, #44]	@ (800f918 <ipfrag_free_pbuf_custom+0x58>)
 800f8ea:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800f8ee:	490d      	ldr	r1, [pc, #52]	@ (800f924 <ipfrag_free_pbuf_custom+0x64>)
 800f8f0:	480b      	ldr	r0, [pc, #44]	@ (800f920 <ipfrag_free_pbuf_custom+0x60>)
 800f8f2:	f000 fd1f 	bl	8010334 <iprintf>
  if (pcr->original != NULL) {
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	695b      	ldr	r3, [r3, #20]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d004      	beq.n	800f908 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	695b      	ldr	r3, [r3, #20]
 800f902:	4618      	mov	r0, r3
 800f904:	f7fc fd44 	bl	800c390 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	f7ff ffbd 	bl	800f888 <ip_frag_free_pbuf_custom_ref>
}
 800f90e:	bf00      	nop
 800f910:	3710      	adds	r7, #16
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	08012f84 	.word	0x08012f84
 800f91c:	08013148 	.word	0x08013148
 800f920:	08012fcc 	.word	0x08012fcc
 800f924:	08013154 	.word	0x08013154

0800f928 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b094      	sub	sp, #80	@ 0x50
 800f92c:	af02      	add	r7, sp, #8
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f934:	2300      	movs	r3, #0
 800f936:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f93e:	3b14      	subs	r3, #20
 800f940:	2b00      	cmp	r3, #0
 800f942:	da00      	bge.n	800f946 <ip4_frag+0x1e>
 800f944:	3307      	adds	r3, #7
 800f946:	10db      	asrs	r3, r3, #3
 800f948:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f94a:	2314      	movs	r3, #20
 800f94c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800f954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f956:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	f003 030f 	and.w	r3, r3, #15
 800f960:	b2db      	uxtb	r3, r3
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b14      	cmp	r3, #20
 800f968:	d002      	beq.n	800f970 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f96a:	f06f 0305 	mvn.w	r3, #5
 800f96e:	e110      	b.n	800fb92 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	895b      	ldrh	r3, [r3, #10]
 800f974:	2b13      	cmp	r3, #19
 800f976:	d809      	bhi.n	800f98c <ip4_frag+0x64>
 800f978:	4b88      	ldr	r3, [pc, #544]	@ (800fb9c <ip4_frag+0x274>)
 800f97a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f97e:	4988      	ldr	r1, [pc, #544]	@ (800fba0 <ip4_frag+0x278>)
 800f980:	4888      	ldr	r0, [pc, #544]	@ (800fba4 <ip4_frag+0x27c>)
 800f982:	f000 fcd7 	bl	8010334 <iprintf>
 800f986:	f06f 0305 	mvn.w	r3, #5
 800f98a:	e102      	b.n	800fb92 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f98e:	88db      	ldrh	r3, [r3, #6]
 800f990:	b29b      	uxth	r3, r3
 800f992:	4618      	mov	r0, r3
 800f994:	f7fb f96c 	bl	800ac70 <lwip_htons>
 800f998:	4603      	mov	r3, r0
 800f99a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800f99c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f99e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f9a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f9a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	891b      	ldrh	r3, [r3, #8]
 800f9b2:	3b14      	subs	r3, #20
 800f9b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800f9b8:	e0e1      	b.n	800fb7e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f9ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	bf28      	it	cs
 800f9c8:	4613      	movcs	r3, r2
 800f9ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f9cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f9d0:	2114      	movs	r1, #20
 800f9d2:	200e      	movs	r0, #14
 800f9d4:	f7fc f9fa 	bl	800bdcc <pbuf_alloc>
 800f9d8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800f9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	f000 80d5 	beq.w	800fb8c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e4:	895b      	ldrh	r3, [r3, #10]
 800f9e6:	2b13      	cmp	r3, #19
 800f9e8:	d806      	bhi.n	800f9f8 <ip4_frag+0xd0>
 800f9ea:	4b6c      	ldr	r3, [pc, #432]	@ (800fb9c <ip4_frag+0x274>)
 800f9ec:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800f9f0:	496d      	ldr	r1, [pc, #436]	@ (800fba8 <ip4_frag+0x280>)
 800f9f2:	486c      	ldr	r0, [pc, #432]	@ (800fba4 <ip4_frag+0x27c>)
 800f9f4:	f000 fc9e 	bl	8010334 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	2214      	movs	r2, #20
 800f9fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fa00:	4618      	mov	r0, r3
 800fa02:	f000 fd72 	bl	80104ea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800fa0c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fa0e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800fa12:	e064      	b.n	800fade <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	895a      	ldrh	r2, [r3, #10]
 800fa18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fa1a:	1ad3      	subs	r3, r2, r3
 800fa1c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	895b      	ldrh	r3, [r3, #10]
 800fa22:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d906      	bls.n	800fa36 <ip4_frag+0x10e>
 800fa28:	4b5c      	ldr	r3, [pc, #368]	@ (800fb9c <ip4_frag+0x274>)
 800fa2a:	f240 322d 	movw	r2, #813	@ 0x32d
 800fa2e:	495f      	ldr	r1, [pc, #380]	@ (800fbac <ip4_frag+0x284>)
 800fa30:	485c      	ldr	r0, [pc, #368]	@ (800fba4 <ip4_frag+0x27c>)
 800fa32:	f000 fc7f 	bl	8010334 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fa36:	8bfa      	ldrh	r2, [r7, #30]
 800fa38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	bf28      	it	cs
 800fa40:	4613      	movcs	r3, r2
 800fa42:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fa46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d105      	bne.n	800fa5a <ip4_frag+0x132>
        poff = 0;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	60fb      	str	r3, [r7, #12]
        continue;
 800fa58:	e041      	b.n	800fade <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fa5a:	f7ff ff0d 	bl	800f878 <ip_frag_alloc_pbuf_custom_ref>
 800fa5e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d103      	bne.n	800fa6e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fa66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa68:	f7fc fc92 	bl	800c390 <pbuf_free>
        goto memerr;
 800fa6c:	e08f      	b.n	800fb8e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fa6e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fa74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fa76:	4413      	add	r3, r2
 800fa78:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800fa7c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800fa80:	9201      	str	r2, [sp, #4]
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	4603      	mov	r3, r0
 800fa86:	2241      	movs	r2, #65	@ 0x41
 800fa88:	2000      	movs	r0, #0
 800fa8a:	f7fc fac7 	bl	800c01c <pbuf_alloced_custom>
 800fa8e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d106      	bne.n	800faa4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fa96:	69b8      	ldr	r0, [r7, #24]
 800fa98:	f7ff fef6 	bl	800f888 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fa9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa9e:	f7fc fc77 	bl	800c390 <pbuf_free>
        goto memerr;
 800faa2:	e074      	b.n	800fb8e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800faa4:	68f8      	ldr	r0, [r7, #12]
 800faa6:	f7fc fd19 	bl	800c4dc <pbuf_ref>
      pcr->original = p;
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	4a3f      	ldr	r2, [pc, #252]	@ (800fbb0 <ip4_frag+0x288>)
 800fab4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fab6:	6979      	ldr	r1, [r7, #20]
 800fab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800faba:	f7fc fd37 	bl	800c52c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fabe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800fac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800facc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d004      	beq.n	800fade <ip4_frag+0x1b6>
        poff = 0;
 800fad4:	2300      	movs	r3, #0
 800fad6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fade:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d196      	bne.n	800fa14 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fae6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800fae8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800faec:	4413      	add	r3, r2
 800faee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800faf4:	f1a3 0213 	sub.w	r2, r3, #19
 800faf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fafc:	429a      	cmp	r2, r3
 800fafe:	bfcc      	ite	gt
 800fb00:	2301      	movgt	r3, #1
 800fb02:	2300      	movle	r3, #0
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fb08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800fb0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb10:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800fb12:	6a3b      	ldr	r3, [r7, #32]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d002      	beq.n	800fb1e <ip4_frag+0x1f6>
 800fb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d003      	beq.n	800fb26 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fb1e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fb20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fb24:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fb26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fb f8a1 	bl	800ac70 <lwip_htons>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	461a      	mov	r2, r3
 800fb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb34:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fb36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fb38:	3314      	adds	r3, #20
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fb f897 	bl	800ac70 <lwip_htons>
 800fb42:	4603      	mov	r3, r0
 800fb44:	461a      	mov	r2, r3
 800fb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb48:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	729a      	strb	r2, [r3, #10]
 800fb50:	2200      	movs	r2, #0
 800fb52:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	695b      	ldr	r3, [r3, #20]
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fb5c:	68b8      	ldr	r0, [r7, #8]
 800fb5e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fb60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fb62:	f7fc fc15 	bl	800c390 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fb66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fb6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fb6c:	1ad3      	subs	r3, r2, r3
 800fb6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800fb72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800fb76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fb78:	4413      	add	r3, r2
 800fb7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800fb7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	f47f af19 	bne.w	800f9ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	e002      	b.n	800fb92 <ip4_frag+0x26a>
      goto memerr;
 800fb8c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fb8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3748      	adds	r7, #72	@ 0x48
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	08012f84 	.word	0x08012f84
 800fba0:	08013160 	.word	0x08013160
 800fba4:	08012fcc 	.word	0x08012fcc
 800fba8:	0801317c 	.word	0x0801317c
 800fbac:	0801319c 	.word	0x0801319c
 800fbb0:	0800f8c1 	.word	0x0800f8c1

0800fbb4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b086      	sub	sp, #24
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fbbe:	230e      	movs	r3, #14
 800fbc0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	895b      	ldrh	r3, [r3, #10]
 800fbc6:	2b0e      	cmp	r3, #14
 800fbc8:	d96e      	bls.n	800fca8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	7bdb      	ldrb	r3, [r3, #15]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d106      	bne.n	800fbe0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fbd8:	3301      	adds	r3, #1
 800fbda:	b2da      	uxtb	r2, r3
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	7b1a      	ldrb	r2, [r3, #12]
 800fbea:	7b5b      	ldrb	r3, [r3, #13]
 800fbec:	021b      	lsls	r3, r3, #8
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	f003 0301 	and.w	r3, r3, #1
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d023      	beq.n	800fc46 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d10f      	bne.n	800fc26 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	785b      	ldrb	r3, [r3, #1]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d11b      	bne.n	800fc46 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fc12:	2b5e      	cmp	r3, #94	@ 0x5e
 800fc14:	d117      	bne.n	800fc46 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	7b5b      	ldrb	r3, [r3, #13]
 800fc1a:	f043 0310 	orr.w	r3, r3, #16
 800fc1e:	b2da      	uxtb	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	735a      	strb	r2, [r3, #13]
 800fc24:	e00f      	b.n	800fc46 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	2206      	movs	r2, #6
 800fc2a:	4928      	ldr	r1, [pc, #160]	@ (800fccc <ethernet_input+0x118>)
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f000 fbd6 	bl	80103de <memcmp>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d106      	bne.n	800fc46 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	7b5b      	ldrb	r3, [r3, #13]
 800fc3c:	f043 0308 	orr.w	r3, r3, #8
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fc46:	89fb      	ldrh	r3, [r7, #14]
 800fc48:	2b08      	cmp	r3, #8
 800fc4a:	d003      	beq.n	800fc54 <ethernet_input+0xa0>
 800fc4c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800fc50:	d014      	beq.n	800fc7c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fc52:	e032      	b.n	800fcba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc5a:	f003 0308 	and.w	r3, r3, #8
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d024      	beq.n	800fcac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fc62:	8afb      	ldrh	r3, [r7, #22]
 800fc64:	4619      	mov	r1, r3
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f7fc fb0c 	bl	800c284 <pbuf_remove_header>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d11e      	bne.n	800fcb0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fc72:	6839      	ldr	r1, [r7, #0]
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7fe fded 	bl	800e854 <ip4_input>
      break;
 800fc7a:	e013      	b.n	800fca4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc82:	f003 0308 	and.w	r3, r3, #8
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d014      	beq.n	800fcb4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fc8a:	8afb      	ldrh	r3, [r7, #22]
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7fc faf8 	bl	800c284 <pbuf_remove_header>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d10e      	bne.n	800fcb8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fc9a:	6839      	ldr	r1, [r7, #0]
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7fd ff8d 	bl	800dbbc <etharp_input>
      break;
 800fca2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fca4:	2300      	movs	r3, #0
 800fca6:	e00c      	b.n	800fcc2 <ethernet_input+0x10e>
    goto free_and_return;
 800fca8:	bf00      	nop
 800fcaa:	e006      	b.n	800fcba <ethernet_input+0x106>
        goto free_and_return;
 800fcac:	bf00      	nop
 800fcae:	e004      	b.n	800fcba <ethernet_input+0x106>
        goto free_and_return;
 800fcb0:	bf00      	nop
 800fcb2:	e002      	b.n	800fcba <ethernet_input+0x106>
        goto free_and_return;
 800fcb4:	bf00      	nop
 800fcb6:	e000      	b.n	800fcba <ethernet_input+0x106>
        goto free_and_return;
 800fcb8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f7fc fb68 	bl	800c390 <pbuf_free>
  return ERR_OK;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3718      	adds	r7, #24
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	0801335c 	.word	0x0801335c

0800fcd0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b086      	sub	sp, #24
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
 800fcdc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fcde:	8c3b      	ldrh	r3, [r7, #32]
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7fa ffc5 	bl	800ac70 <lwip_htons>
 800fce6:	4603      	mov	r3, r0
 800fce8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fcea:	210e      	movs	r1, #14
 800fcec:	68b8      	ldr	r0, [r7, #8]
 800fcee:	f7fc fab9 	bl	800c264 <pbuf_add_header>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d125      	bne.n	800fd44 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	8afa      	ldrh	r2, [r7, #22]
 800fd02:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	2206      	movs	r2, #6
 800fd08:	6839      	ldr	r1, [r7, #0]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 fbed 	bl	80104ea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	3306      	adds	r3, #6
 800fd14:	2206      	movs	r2, #6
 800fd16:	6879      	ldr	r1, [r7, #4]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f000 fbe6 	bl	80104ea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fd24:	2b06      	cmp	r3, #6
 800fd26:	d006      	beq.n	800fd36 <ethernet_output+0x66>
 800fd28:	4b0a      	ldr	r3, [pc, #40]	@ (800fd54 <ethernet_output+0x84>)
 800fd2a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800fd2e:	490a      	ldr	r1, [pc, #40]	@ (800fd58 <ethernet_output+0x88>)
 800fd30:	480a      	ldr	r0, [pc, #40]	@ (800fd5c <ethernet_output+0x8c>)
 800fd32:	f000 faff 	bl	8010334 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	699b      	ldr	r3, [r3, #24]
 800fd3a:	68b9      	ldr	r1, [r7, #8]
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	4798      	blx	r3
 800fd40:	4603      	mov	r3, r0
 800fd42:	e002      	b.n	800fd4a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fd44:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fd46:	f06f 0301 	mvn.w	r3, #1
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3718      	adds	r7, #24
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	080131ac 	.word	0x080131ac
 800fd58:	080131e4 	.word	0x080131e4
 800fd5c:	08013218 	.word	0x08013218

0800fd60 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b086      	sub	sp, #24
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	60bb      	str	r3, [r7, #8]
 800fd6e:	2304      	movs	r3, #4
 800fd70:	60fb      	str	r3, [r7, #12]
 800fd72:	2300      	movs	r3, #0
 800fd74:	613b      	str	r3, [r7, #16]
 800fd76:	2300      	movs	r3, #0
 800fd78:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800fd7a:	f107 0308 	add.w	r3, r7, #8
 800fd7e:	2100      	movs	r1, #0
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7f6 fbf0 	bl	8006566 <osMessageCreate>
 800fd86:	4602      	mov	r2, r0
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d102      	bne.n	800fd9a <sys_mbox_new+0x3a>
    return ERR_MEM;
 800fd94:	f04f 33ff 	mov.w	r3, #4294967295
 800fd98:	e000      	b.n	800fd9c <sys_mbox_new+0x3c>

  return ERR_OK;
 800fd9a:	2300      	movs	r3, #0
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3718      	adds	r7, #24
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7f6 fcb5 	bl	8006720 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7f6 fcc6 	bl	800674c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800fdc0:	bf00      	nop
 800fdc2:	3708      	adds	r7, #8
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6839      	ldr	r1, [r7, #0]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7f6 fbec 	bl	80065b8 <osMessagePut>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d102      	bne.n	800fdec <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800fde6:	2300      	movs	r3, #0
 800fde8:	73fb      	strb	r3, [r7, #15]
 800fdea:	e001      	b.n	800fdf0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800fdec:	23ff      	movs	r3, #255	@ 0xff
 800fdee:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800fdf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3710      	adds	r7, #16
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b08c      	sub	sp, #48	@ 0x30
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	61f8      	str	r0, [r7, #28]
 800fe04:	61b9      	str	r1, [r7, #24]
 800fe06:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800fe08:	f7f6 f9cb 	bl	80061a2 <osKernelSysTick>
 800fe0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d017      	beq.n	800fe44 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	6819      	ldr	r1, [r3, #0]
 800fe18:	f107 0320 	add.w	r3, r7, #32
 800fe1c:	697a      	ldr	r2, [r7, #20]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7f6 fc0a 	bl	8006638 <osMessageGet>

    if(event.status == osEventMessage)
 800fe24:	6a3b      	ldr	r3, [r7, #32]
 800fe26:	2b10      	cmp	r3, #16
 800fe28:	d109      	bne.n	800fe3e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800fe2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800fe32:	f7f6 f9b6 	bl	80061a2 <osKernelSysTick>
 800fe36:	4602      	mov	r2, r0
 800fe38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe3a:	1ad3      	subs	r3, r2, r3
 800fe3c:	e019      	b.n	800fe72 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800fe3e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe42:	e016      	b.n	800fe72 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	6819      	ldr	r1, [r3, #0]
 800fe48:	463b      	mov	r3, r7
 800fe4a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f6 fbf2 	bl	8006638 <osMessageGet>
 800fe54:	f107 0320 	add.w	r3, r7, #32
 800fe58:	463a      	mov	r2, r7
 800fe5a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800fe60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe62:	461a      	mov	r2, r3
 800fe64:	69bb      	ldr	r3, [r7, #24]
 800fe66:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 800fe68:	f7f6 f99b 	bl	80061a2 <osKernelSysTick>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe70:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3730      	adds	r7, #48	@ 0x30
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800fe7a:	b580      	push	{r7, lr}
 800fe7c:	b086      	sub	sp, #24
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
 800fe82:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6819      	ldr	r1, [r3, #0]
 800fe88:	f107 030c 	add.w	r3, r7, #12
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7f6 fbd2 	bl	8006638 <osMessageGet>

  if(event.status == osEventMessage)
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2b10      	cmp	r3, #16
 800fe98:	d105      	bne.n	800fea6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800fea2:	2300      	movs	r3, #0
 800fea4:	e001      	b.n	800feaa <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800fea6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3718      	adds	r7, #24
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}

0800feb2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800feb2:	b480      	push	{r7}
 800feb4:	b083      	sub	sp, #12
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d101      	bne.n	800fec6 <sys_mbox_valid+0x14>
    return 0;
 800fec2:	2300      	movs	r3, #0
 800fec4:	e000      	b.n	800fec8 <sys_mbox_valid+0x16>
  else
    return 1;
 800fec6:	2301      	movs	r3, #1
}
 800fec8:	4618      	mov	r0, r3
 800feca:	370c      	adds	r7, #12
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	601a      	str	r2, [r3, #0]
}
 800fee2:	bf00      	nop
 800fee4:	370c      	adds	r7, #12
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr

0800feee <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	b084      	sub	sp, #16
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	460b      	mov	r3, r1
 800fef8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800fefa:	2300      	movs	r3, #0
 800fefc:	60bb      	str	r3, [r7, #8]
 800fefe:	2300      	movs	r3, #0
 800ff00:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800ff02:	f107 0308 	add.w	r3, r7, #8
 800ff06:	2101      	movs	r1, #1
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7f6 fa63 	bl	80063d4 <osSemaphoreCreate>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d102      	bne.n	800ff22 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800ff1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff20:	e009      	b.n	800ff36 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 800ff22:	78fb      	ldrb	r3, [r7, #3]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d105      	bne.n	800ff34 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7f6 fa82 	bl	8006438 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <sys_sem_signal>:
}

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800ff3e:	b580      	push	{r7, lr}
 800ff40:	b082      	sub	sp, #8
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7f6 fac2 	bl	80064d4 <osSemaphoreRelease>
}
 800ff50:	bf00      	nop
 800ff52:	3708      	adds	r7, #8
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7f6 faeb 	bl	8006540 <osSemaphoreDelete>
}
 800ff6a:	bf00      	nop
 800ff6c:	3708      	adds	r7, #8
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}

0800ff72 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 800ff72:	b480      	push	{r7}
 800ff74:	b083      	sub	sp, #12
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d101      	bne.n	800ff86 <sys_sem_valid+0x14>
    return 0;
 800ff82:	2300      	movs	r3, #0
 800ff84:	e000      	b.n	800ff88 <sys_sem_valid+0x16>
  else
    return 1;
 800ff86:	2301      	movs	r3, #1
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	601a      	str	r2, [r3, #0]
}
 800ffa2:	bf00      	nop
 800ffa4:	370c      	adds	r7, #12
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
	...

0800ffb0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800ffb4:	4803      	ldr	r0, [pc, #12]	@ (800ffc4 <sys_init+0x14>)
 800ffb6:	f7f6 f970 	bl	800629a <osMutexCreate>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	4a02      	ldr	r2, [pc, #8]	@ (800ffc8 <sys_init+0x18>)
 800ffbe:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800ffc0:	bf00      	nop
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	0801336c 	.word	0x0801336c
 800ffc8:	2000d11c 	.word	0x2000d11c

0800ffcc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	60bb      	str	r3, [r7, #8]
 800ffd8:	2300      	movs	r3, #0
 800ffda:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800ffdc:	f107 0308 	add.w	r3, r7, #8
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7f6 f95a 	bl	800629a <osMutexCreate>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d102      	bne.n	800fffa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800fff4:	f04f 33ff 	mov.w	r3, #4294967295
 800fff8:	e000      	b.n	800fffc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3710      	adds	r7, #16
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	f04f 31ff 	mov.w	r1, #4294967295
 8010014:	4618      	mov	r0, r3
 8010016:	f7f6 f959 	bl	80062cc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801001a:	bf00      	nop
 801001c:	3708      	adds	r7, #8
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8010022:	b580      	push	{r7, lr}
 8010024:	b082      	sub	sp, #8
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4618      	mov	r0, r3
 8010030:	f7f6 f99a 	bl	8006368 <osMutexRelease>
}
 8010034:	bf00      	nop
 8010036:	3708      	adds	r7, #8
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b08c      	sub	sp, #48	@ 0x30
 8010040:	af00      	add	r7, sp, #0
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	607a      	str	r2, [r7, #4]
 8010048:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801004a:	f107 0314 	add.w	r3, r7, #20
 801004e:	2200      	movs	r2, #0
 8010050:	601a      	str	r2, [r3, #0]
 8010052:	605a      	str	r2, [r3, #4]
 8010054:	609a      	str	r2, [r3, #8]
 8010056:	60da      	str	r2, [r3, #12]
 8010058:	611a      	str	r2, [r3, #16]
 801005a:	615a      	str	r2, [r3, #20]
 801005c:	619a      	str	r2, [r3, #24]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	617b      	str	r3, [r7, #20]
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	61bb      	str	r3, [r7, #24]
 8010066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010068:	b21b      	sxth	r3, r3
 801006a:	83bb      	strh	r3, [r7, #28]
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8010070:	f107 0314 	add.w	r3, r7, #20
 8010074:	6879      	ldr	r1, [r7, #4]
 8010076:	4618      	mov	r0, r3
 8010078:	f7f6 f8a3 	bl	80061c2 <osThreadCreate>
 801007c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801007e:	4618      	mov	r0, r3
 8010080:	3730      	adds	r7, #48	@ 0x30
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
	...

08010088 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801008c:	4b04      	ldr	r3, [pc, #16]	@ (80100a0 <sys_arch_protect+0x18>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f04f 31ff 	mov.w	r1, #4294967295
 8010094:	4618      	mov	r0, r3
 8010096:	f7f6 f919 	bl	80062cc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801009a:	2301      	movs	r3, #1
}
 801009c:	4618      	mov	r0, r3
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	2000d11c 	.word	0x2000d11c

080100a4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80100ac:	4b04      	ldr	r3, [pc, #16]	@ (80100c0 <sys_arch_unprotect+0x1c>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7f6 f959 	bl	8006368 <osMutexRelease>
}
 80100b6:	bf00      	nop
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	2000d11c 	.word	0x2000d11c

080100c4 <Robomaster_RxCAN>:
	Robomaster->MotorTemperature = 0;
	// Update Check
	Robomaster->Event = 0;
}

void Robomaster_RxCAN(RobomasterTypedef *Robomaster, uint8_t *RxData) {
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
	// Current angle
	Robomaster->Angle = RxData[0] >> 8 | RxData[1];
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	121b      	asrs	r3, r3, #8
 80100d4:	b21a      	sxth	r2, r3
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	3301      	adds	r3, #1
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	b21b      	sxth	r3, r3
 80100de:	4313      	orrs	r3, r2
 80100e0:	b21a      	sxth	r2, r3
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	805a      	strh	r2, [r3, #2]
	// Current angular velocity
	Robomaster->AngularVelocity = RxData[2] >> 8 | RxData[3];
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	3302      	adds	r3, #2
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	121b      	asrs	r3, r3, #8
 80100ee:	b21a      	sxth	r2, r3
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	3303      	adds	r3, #3
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	b21b      	sxth	r3, r3
 80100f8:	4313      	orrs	r3, r2
 80100fa:	b21a      	sxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	809a      	strh	r2, [r3, #4]
	// Input torque feedback
	Robomaster->FeedbackTorque = RxData[4] >> 8 | RxData[5];
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	3304      	adds	r3, #4
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	121b      	asrs	r3, r3, #8
 8010108:	b21a      	sxth	r2, r3
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	3305      	adds	r3, #5
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	b21b      	sxth	r3, r3
 8010112:	4313      	orrs	r3, r2
 8010114:	b21a      	sxth	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	80da      	strh	r2, [r3, #6]
	// Motor temperature
	Robomaster->MotorTemperature = RxData[6];
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	799a      	ldrb	r2, [r3, #6]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	721a      	strb	r2, [r3, #8]
	// Update Check
	Robomaster->Event = 1;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2201      	movs	r2, #1
 8010126:	60da      	str	r2, [r3, #12]
}
 8010128:	bf00      	nop
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <rand>:
 8010134:	4b16      	ldr	r3, [pc, #88]	@ (8010190 <rand+0x5c>)
 8010136:	b510      	push	{r4, lr}
 8010138:	681c      	ldr	r4, [r3, #0]
 801013a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801013c:	b9b3      	cbnz	r3, 801016c <rand+0x38>
 801013e:	2018      	movs	r0, #24
 8010140:	f000 fa00 	bl	8010544 <malloc>
 8010144:	4602      	mov	r2, r0
 8010146:	6320      	str	r0, [r4, #48]	@ 0x30
 8010148:	b920      	cbnz	r0, 8010154 <rand+0x20>
 801014a:	4b12      	ldr	r3, [pc, #72]	@ (8010194 <rand+0x60>)
 801014c:	4812      	ldr	r0, [pc, #72]	@ (8010198 <rand+0x64>)
 801014e:	2152      	movs	r1, #82	@ 0x52
 8010150:	f000 f9da 	bl	8010508 <__assert_func>
 8010154:	4911      	ldr	r1, [pc, #68]	@ (801019c <rand+0x68>)
 8010156:	4b12      	ldr	r3, [pc, #72]	@ (80101a0 <rand+0x6c>)
 8010158:	e9c0 1300 	strd	r1, r3, [r0]
 801015c:	4b11      	ldr	r3, [pc, #68]	@ (80101a4 <rand+0x70>)
 801015e:	6083      	str	r3, [r0, #8]
 8010160:	230b      	movs	r3, #11
 8010162:	8183      	strh	r3, [r0, #12]
 8010164:	2100      	movs	r1, #0
 8010166:	2001      	movs	r0, #1
 8010168:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801016c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801016e:	480e      	ldr	r0, [pc, #56]	@ (80101a8 <rand+0x74>)
 8010170:	690b      	ldr	r3, [r1, #16]
 8010172:	694c      	ldr	r4, [r1, #20]
 8010174:	4a0d      	ldr	r2, [pc, #52]	@ (80101ac <rand+0x78>)
 8010176:	4358      	muls	r0, r3
 8010178:	fb02 0004 	mla	r0, r2, r4, r0
 801017c:	fba3 3202 	umull	r3, r2, r3, r2
 8010180:	3301      	adds	r3, #1
 8010182:	eb40 0002 	adc.w	r0, r0, r2
 8010186:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801018a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801018e:	bd10      	pop	{r4, pc}
 8010190:	20000034 	.word	0x20000034
 8010194:	08013374 	.word	0x08013374
 8010198:	0801338b 	.word	0x0801338b
 801019c:	abcd330e 	.word	0xabcd330e
 80101a0:	e66d1234 	.word	0xe66d1234
 80101a4:	0005deec 	.word	0x0005deec
 80101a8:	5851f42d 	.word	0x5851f42d
 80101ac:	4c957f2d 	.word	0x4c957f2d

080101b0 <std>:
 80101b0:	2300      	movs	r3, #0
 80101b2:	b510      	push	{r4, lr}
 80101b4:	4604      	mov	r4, r0
 80101b6:	e9c0 3300 	strd	r3, r3, [r0]
 80101ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101be:	6083      	str	r3, [r0, #8]
 80101c0:	8181      	strh	r1, [r0, #12]
 80101c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80101c4:	81c2      	strh	r2, [r0, #14]
 80101c6:	6183      	str	r3, [r0, #24]
 80101c8:	4619      	mov	r1, r3
 80101ca:	2208      	movs	r2, #8
 80101cc:	305c      	adds	r0, #92	@ 0x5c
 80101ce:	f000 f916 	bl	80103fe <memset>
 80101d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010208 <std+0x58>)
 80101d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80101d6:	4b0d      	ldr	r3, [pc, #52]	@ (801020c <std+0x5c>)
 80101d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80101da:	4b0d      	ldr	r3, [pc, #52]	@ (8010210 <std+0x60>)
 80101dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80101de:	4b0d      	ldr	r3, [pc, #52]	@ (8010214 <std+0x64>)
 80101e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80101e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010218 <std+0x68>)
 80101e4:	6224      	str	r4, [r4, #32]
 80101e6:	429c      	cmp	r4, r3
 80101e8:	d006      	beq.n	80101f8 <std+0x48>
 80101ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80101ee:	4294      	cmp	r4, r2
 80101f0:	d002      	beq.n	80101f8 <std+0x48>
 80101f2:	33d0      	adds	r3, #208	@ 0xd0
 80101f4:	429c      	cmp	r4, r3
 80101f6:	d105      	bne.n	8010204 <std+0x54>
 80101f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80101fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010200:	f000 b970 	b.w	80104e4 <__retarget_lock_init_recursive>
 8010204:	bd10      	pop	{r4, pc}
 8010206:	bf00      	nop
 8010208:	08010359 	.word	0x08010359
 801020c:	0801037b 	.word	0x0801037b
 8010210:	080103b3 	.word	0x080103b3
 8010214:	080103d7 	.word	0x080103d7
 8010218:	2000d120 	.word	0x2000d120

0801021c <stdio_exit_handler>:
 801021c:	4a02      	ldr	r2, [pc, #8]	@ (8010228 <stdio_exit_handler+0xc>)
 801021e:	4903      	ldr	r1, [pc, #12]	@ (801022c <stdio_exit_handler+0x10>)
 8010220:	4803      	ldr	r0, [pc, #12]	@ (8010230 <stdio_exit_handler+0x14>)
 8010222:	f000 b869 	b.w	80102f8 <_fwalk_sglue>
 8010226:	bf00      	nop
 8010228:	20000028 	.word	0x20000028
 801022c:	08010d59 	.word	0x08010d59
 8010230:	20000038 	.word	0x20000038

08010234 <cleanup_stdio>:
 8010234:	6841      	ldr	r1, [r0, #4]
 8010236:	4b0c      	ldr	r3, [pc, #48]	@ (8010268 <cleanup_stdio+0x34>)
 8010238:	4299      	cmp	r1, r3
 801023a:	b510      	push	{r4, lr}
 801023c:	4604      	mov	r4, r0
 801023e:	d001      	beq.n	8010244 <cleanup_stdio+0x10>
 8010240:	f000 fd8a 	bl	8010d58 <_fflush_r>
 8010244:	68a1      	ldr	r1, [r4, #8]
 8010246:	4b09      	ldr	r3, [pc, #36]	@ (801026c <cleanup_stdio+0x38>)
 8010248:	4299      	cmp	r1, r3
 801024a:	d002      	beq.n	8010252 <cleanup_stdio+0x1e>
 801024c:	4620      	mov	r0, r4
 801024e:	f000 fd83 	bl	8010d58 <_fflush_r>
 8010252:	68e1      	ldr	r1, [r4, #12]
 8010254:	4b06      	ldr	r3, [pc, #24]	@ (8010270 <cleanup_stdio+0x3c>)
 8010256:	4299      	cmp	r1, r3
 8010258:	d004      	beq.n	8010264 <cleanup_stdio+0x30>
 801025a:	4620      	mov	r0, r4
 801025c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010260:	f000 bd7a 	b.w	8010d58 <_fflush_r>
 8010264:	bd10      	pop	{r4, pc}
 8010266:	bf00      	nop
 8010268:	2000d120 	.word	0x2000d120
 801026c:	2000d188 	.word	0x2000d188
 8010270:	2000d1f0 	.word	0x2000d1f0

08010274 <global_stdio_init.part.0>:
 8010274:	b510      	push	{r4, lr}
 8010276:	4b0b      	ldr	r3, [pc, #44]	@ (80102a4 <global_stdio_init.part.0+0x30>)
 8010278:	4c0b      	ldr	r4, [pc, #44]	@ (80102a8 <global_stdio_init.part.0+0x34>)
 801027a:	4a0c      	ldr	r2, [pc, #48]	@ (80102ac <global_stdio_init.part.0+0x38>)
 801027c:	601a      	str	r2, [r3, #0]
 801027e:	4620      	mov	r0, r4
 8010280:	2200      	movs	r2, #0
 8010282:	2104      	movs	r1, #4
 8010284:	f7ff ff94 	bl	80101b0 <std>
 8010288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801028c:	2201      	movs	r2, #1
 801028e:	2109      	movs	r1, #9
 8010290:	f7ff ff8e 	bl	80101b0 <std>
 8010294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010298:	2202      	movs	r2, #2
 801029a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801029e:	2112      	movs	r1, #18
 80102a0:	f7ff bf86 	b.w	80101b0 <std>
 80102a4:	2000d258 	.word	0x2000d258
 80102a8:	2000d120 	.word	0x2000d120
 80102ac:	0801021d 	.word	0x0801021d

080102b0 <__sfp_lock_acquire>:
 80102b0:	4801      	ldr	r0, [pc, #4]	@ (80102b8 <__sfp_lock_acquire+0x8>)
 80102b2:	f000 b918 	b.w	80104e6 <__retarget_lock_acquire_recursive>
 80102b6:	bf00      	nop
 80102b8:	2000d25d 	.word	0x2000d25d

080102bc <__sfp_lock_release>:
 80102bc:	4801      	ldr	r0, [pc, #4]	@ (80102c4 <__sfp_lock_release+0x8>)
 80102be:	f000 b913 	b.w	80104e8 <__retarget_lock_release_recursive>
 80102c2:	bf00      	nop
 80102c4:	2000d25d 	.word	0x2000d25d

080102c8 <__sinit>:
 80102c8:	b510      	push	{r4, lr}
 80102ca:	4604      	mov	r4, r0
 80102cc:	f7ff fff0 	bl	80102b0 <__sfp_lock_acquire>
 80102d0:	6a23      	ldr	r3, [r4, #32]
 80102d2:	b11b      	cbz	r3, 80102dc <__sinit+0x14>
 80102d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102d8:	f7ff bff0 	b.w	80102bc <__sfp_lock_release>
 80102dc:	4b04      	ldr	r3, [pc, #16]	@ (80102f0 <__sinit+0x28>)
 80102de:	6223      	str	r3, [r4, #32]
 80102e0:	4b04      	ldr	r3, [pc, #16]	@ (80102f4 <__sinit+0x2c>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d1f5      	bne.n	80102d4 <__sinit+0xc>
 80102e8:	f7ff ffc4 	bl	8010274 <global_stdio_init.part.0>
 80102ec:	e7f2      	b.n	80102d4 <__sinit+0xc>
 80102ee:	bf00      	nop
 80102f0:	08010235 	.word	0x08010235
 80102f4:	2000d258 	.word	0x2000d258

080102f8 <_fwalk_sglue>:
 80102f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102fc:	4607      	mov	r7, r0
 80102fe:	4688      	mov	r8, r1
 8010300:	4614      	mov	r4, r2
 8010302:	2600      	movs	r6, #0
 8010304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010308:	f1b9 0901 	subs.w	r9, r9, #1
 801030c:	d505      	bpl.n	801031a <_fwalk_sglue+0x22>
 801030e:	6824      	ldr	r4, [r4, #0]
 8010310:	2c00      	cmp	r4, #0
 8010312:	d1f7      	bne.n	8010304 <_fwalk_sglue+0xc>
 8010314:	4630      	mov	r0, r6
 8010316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801031a:	89ab      	ldrh	r3, [r5, #12]
 801031c:	2b01      	cmp	r3, #1
 801031e:	d907      	bls.n	8010330 <_fwalk_sglue+0x38>
 8010320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010324:	3301      	adds	r3, #1
 8010326:	d003      	beq.n	8010330 <_fwalk_sglue+0x38>
 8010328:	4629      	mov	r1, r5
 801032a:	4638      	mov	r0, r7
 801032c:	47c0      	blx	r8
 801032e:	4306      	orrs	r6, r0
 8010330:	3568      	adds	r5, #104	@ 0x68
 8010332:	e7e9      	b.n	8010308 <_fwalk_sglue+0x10>

08010334 <iprintf>:
 8010334:	b40f      	push	{r0, r1, r2, r3}
 8010336:	b507      	push	{r0, r1, r2, lr}
 8010338:	4906      	ldr	r1, [pc, #24]	@ (8010354 <iprintf+0x20>)
 801033a:	ab04      	add	r3, sp, #16
 801033c:	6808      	ldr	r0, [r1, #0]
 801033e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010342:	6881      	ldr	r1, [r0, #8]
 8010344:	9301      	str	r3, [sp, #4]
 8010346:	f000 f9dd 	bl	8010704 <_vfiprintf_r>
 801034a:	b003      	add	sp, #12
 801034c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010350:	b004      	add	sp, #16
 8010352:	4770      	bx	lr
 8010354:	20000034 	.word	0x20000034

08010358 <__sread>:
 8010358:	b510      	push	{r4, lr}
 801035a:	460c      	mov	r4, r1
 801035c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010360:	f000 f878 	bl	8010454 <_read_r>
 8010364:	2800      	cmp	r0, #0
 8010366:	bfab      	itete	ge
 8010368:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801036a:	89a3      	ldrhlt	r3, [r4, #12]
 801036c:	181b      	addge	r3, r3, r0
 801036e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010372:	bfac      	ite	ge
 8010374:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010376:	81a3      	strhlt	r3, [r4, #12]
 8010378:	bd10      	pop	{r4, pc}

0801037a <__swrite>:
 801037a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037e:	461f      	mov	r7, r3
 8010380:	898b      	ldrh	r3, [r1, #12]
 8010382:	05db      	lsls	r3, r3, #23
 8010384:	4605      	mov	r5, r0
 8010386:	460c      	mov	r4, r1
 8010388:	4616      	mov	r6, r2
 801038a:	d505      	bpl.n	8010398 <__swrite+0x1e>
 801038c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010390:	2302      	movs	r3, #2
 8010392:	2200      	movs	r2, #0
 8010394:	f000 f84c 	bl	8010430 <_lseek_r>
 8010398:	89a3      	ldrh	r3, [r4, #12]
 801039a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801039e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80103a2:	81a3      	strh	r3, [r4, #12]
 80103a4:	4632      	mov	r2, r6
 80103a6:	463b      	mov	r3, r7
 80103a8:	4628      	mov	r0, r5
 80103aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103ae:	f000 b863 	b.w	8010478 <_write_r>

080103b2 <__sseek>:
 80103b2:	b510      	push	{r4, lr}
 80103b4:	460c      	mov	r4, r1
 80103b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103ba:	f000 f839 	bl	8010430 <_lseek_r>
 80103be:	1c43      	adds	r3, r0, #1
 80103c0:	89a3      	ldrh	r3, [r4, #12]
 80103c2:	bf15      	itete	ne
 80103c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80103c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80103ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80103ce:	81a3      	strheq	r3, [r4, #12]
 80103d0:	bf18      	it	ne
 80103d2:	81a3      	strhne	r3, [r4, #12]
 80103d4:	bd10      	pop	{r4, pc}

080103d6 <__sclose>:
 80103d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103da:	f000 b819 	b.w	8010410 <_close_r>

080103de <memcmp>:
 80103de:	b510      	push	{r4, lr}
 80103e0:	3901      	subs	r1, #1
 80103e2:	4402      	add	r2, r0
 80103e4:	4290      	cmp	r0, r2
 80103e6:	d101      	bne.n	80103ec <memcmp+0xe>
 80103e8:	2000      	movs	r0, #0
 80103ea:	e005      	b.n	80103f8 <memcmp+0x1a>
 80103ec:	7803      	ldrb	r3, [r0, #0]
 80103ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80103f2:	42a3      	cmp	r3, r4
 80103f4:	d001      	beq.n	80103fa <memcmp+0x1c>
 80103f6:	1b18      	subs	r0, r3, r4
 80103f8:	bd10      	pop	{r4, pc}
 80103fa:	3001      	adds	r0, #1
 80103fc:	e7f2      	b.n	80103e4 <memcmp+0x6>

080103fe <memset>:
 80103fe:	4402      	add	r2, r0
 8010400:	4603      	mov	r3, r0
 8010402:	4293      	cmp	r3, r2
 8010404:	d100      	bne.n	8010408 <memset+0xa>
 8010406:	4770      	bx	lr
 8010408:	f803 1b01 	strb.w	r1, [r3], #1
 801040c:	e7f9      	b.n	8010402 <memset+0x4>
	...

08010410 <_close_r>:
 8010410:	b538      	push	{r3, r4, r5, lr}
 8010412:	4d06      	ldr	r5, [pc, #24]	@ (801042c <_close_r+0x1c>)
 8010414:	2300      	movs	r3, #0
 8010416:	4604      	mov	r4, r0
 8010418:	4608      	mov	r0, r1
 801041a:	602b      	str	r3, [r5, #0]
 801041c:	f7f1 fa2a 	bl	8001874 <_close>
 8010420:	1c43      	adds	r3, r0, #1
 8010422:	d102      	bne.n	801042a <_close_r+0x1a>
 8010424:	682b      	ldr	r3, [r5, #0]
 8010426:	b103      	cbz	r3, 801042a <_close_r+0x1a>
 8010428:	6023      	str	r3, [r4, #0]
 801042a:	bd38      	pop	{r3, r4, r5, pc}
 801042c:	2000d118 	.word	0x2000d118

08010430 <_lseek_r>:
 8010430:	b538      	push	{r3, r4, r5, lr}
 8010432:	4d07      	ldr	r5, [pc, #28]	@ (8010450 <_lseek_r+0x20>)
 8010434:	4604      	mov	r4, r0
 8010436:	4608      	mov	r0, r1
 8010438:	4611      	mov	r1, r2
 801043a:	2200      	movs	r2, #0
 801043c:	602a      	str	r2, [r5, #0]
 801043e:	461a      	mov	r2, r3
 8010440:	f7f1 fa3f 	bl	80018c2 <_lseek>
 8010444:	1c43      	adds	r3, r0, #1
 8010446:	d102      	bne.n	801044e <_lseek_r+0x1e>
 8010448:	682b      	ldr	r3, [r5, #0]
 801044a:	b103      	cbz	r3, 801044e <_lseek_r+0x1e>
 801044c:	6023      	str	r3, [r4, #0]
 801044e:	bd38      	pop	{r3, r4, r5, pc}
 8010450:	2000d118 	.word	0x2000d118

08010454 <_read_r>:
 8010454:	b538      	push	{r3, r4, r5, lr}
 8010456:	4d07      	ldr	r5, [pc, #28]	@ (8010474 <_read_r+0x20>)
 8010458:	4604      	mov	r4, r0
 801045a:	4608      	mov	r0, r1
 801045c:	4611      	mov	r1, r2
 801045e:	2200      	movs	r2, #0
 8010460:	602a      	str	r2, [r5, #0]
 8010462:	461a      	mov	r2, r3
 8010464:	f7f1 f9cd 	bl	8001802 <_read>
 8010468:	1c43      	adds	r3, r0, #1
 801046a:	d102      	bne.n	8010472 <_read_r+0x1e>
 801046c:	682b      	ldr	r3, [r5, #0]
 801046e:	b103      	cbz	r3, 8010472 <_read_r+0x1e>
 8010470:	6023      	str	r3, [r4, #0]
 8010472:	bd38      	pop	{r3, r4, r5, pc}
 8010474:	2000d118 	.word	0x2000d118

08010478 <_write_r>:
 8010478:	b538      	push	{r3, r4, r5, lr}
 801047a:	4d07      	ldr	r5, [pc, #28]	@ (8010498 <_write_r+0x20>)
 801047c:	4604      	mov	r4, r0
 801047e:	4608      	mov	r0, r1
 8010480:	4611      	mov	r1, r2
 8010482:	2200      	movs	r2, #0
 8010484:	602a      	str	r2, [r5, #0]
 8010486:	461a      	mov	r2, r3
 8010488:	f7f1 f9d8 	bl	800183c <_write>
 801048c:	1c43      	adds	r3, r0, #1
 801048e:	d102      	bne.n	8010496 <_write_r+0x1e>
 8010490:	682b      	ldr	r3, [r5, #0]
 8010492:	b103      	cbz	r3, 8010496 <_write_r+0x1e>
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	bd38      	pop	{r3, r4, r5, pc}
 8010498:	2000d118 	.word	0x2000d118

0801049c <__libc_init_array>:
 801049c:	b570      	push	{r4, r5, r6, lr}
 801049e:	4d0d      	ldr	r5, [pc, #52]	@ (80104d4 <__libc_init_array+0x38>)
 80104a0:	4c0d      	ldr	r4, [pc, #52]	@ (80104d8 <__libc_init_array+0x3c>)
 80104a2:	1b64      	subs	r4, r4, r5
 80104a4:	10a4      	asrs	r4, r4, #2
 80104a6:	2600      	movs	r6, #0
 80104a8:	42a6      	cmp	r6, r4
 80104aa:	d109      	bne.n	80104c0 <__libc_init_array+0x24>
 80104ac:	4d0b      	ldr	r5, [pc, #44]	@ (80104dc <__libc_init_array+0x40>)
 80104ae:	4c0c      	ldr	r4, [pc, #48]	@ (80104e0 <__libc_init_array+0x44>)
 80104b0:	f000 fe4a 	bl	8011148 <_init>
 80104b4:	1b64      	subs	r4, r4, r5
 80104b6:	10a4      	asrs	r4, r4, #2
 80104b8:	2600      	movs	r6, #0
 80104ba:	42a6      	cmp	r6, r4
 80104bc:	d105      	bne.n	80104ca <__libc_init_array+0x2e>
 80104be:	bd70      	pop	{r4, r5, r6, pc}
 80104c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80104c4:	4798      	blx	r3
 80104c6:	3601      	adds	r6, #1
 80104c8:	e7ee      	b.n	80104a8 <__libc_init_array+0xc>
 80104ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80104ce:	4798      	blx	r3
 80104d0:	3601      	adds	r6, #1
 80104d2:	e7f2      	b.n	80104ba <__libc_init_array+0x1e>
 80104d4:	0801355c 	.word	0x0801355c
 80104d8:	0801355c 	.word	0x0801355c
 80104dc:	0801355c 	.word	0x0801355c
 80104e0:	08013560 	.word	0x08013560

080104e4 <__retarget_lock_init_recursive>:
 80104e4:	4770      	bx	lr

080104e6 <__retarget_lock_acquire_recursive>:
 80104e6:	4770      	bx	lr

080104e8 <__retarget_lock_release_recursive>:
 80104e8:	4770      	bx	lr

080104ea <memcpy>:
 80104ea:	440a      	add	r2, r1
 80104ec:	4291      	cmp	r1, r2
 80104ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80104f2:	d100      	bne.n	80104f6 <memcpy+0xc>
 80104f4:	4770      	bx	lr
 80104f6:	b510      	push	{r4, lr}
 80104f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010500:	4291      	cmp	r1, r2
 8010502:	d1f9      	bne.n	80104f8 <memcpy+0xe>
 8010504:	bd10      	pop	{r4, pc}
	...

08010508 <__assert_func>:
 8010508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801050a:	4614      	mov	r4, r2
 801050c:	461a      	mov	r2, r3
 801050e:	4b09      	ldr	r3, [pc, #36]	@ (8010534 <__assert_func+0x2c>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4605      	mov	r5, r0
 8010514:	68d8      	ldr	r0, [r3, #12]
 8010516:	b954      	cbnz	r4, 801052e <__assert_func+0x26>
 8010518:	4b07      	ldr	r3, [pc, #28]	@ (8010538 <__assert_func+0x30>)
 801051a:	461c      	mov	r4, r3
 801051c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010520:	9100      	str	r1, [sp, #0]
 8010522:	462b      	mov	r3, r5
 8010524:	4905      	ldr	r1, [pc, #20]	@ (801053c <__assert_func+0x34>)
 8010526:	f000 fc3f 	bl	8010da8 <fiprintf>
 801052a:	f000 fcf3 	bl	8010f14 <abort>
 801052e:	4b04      	ldr	r3, [pc, #16]	@ (8010540 <__assert_func+0x38>)
 8010530:	e7f4      	b.n	801051c <__assert_func+0x14>
 8010532:	bf00      	nop
 8010534:	20000034 	.word	0x20000034
 8010538:	0801351f 	.word	0x0801351f
 801053c:	080134f1 	.word	0x080134f1
 8010540:	080134e4 	.word	0x080134e4

08010544 <malloc>:
 8010544:	4b02      	ldr	r3, [pc, #8]	@ (8010550 <malloc+0xc>)
 8010546:	4601      	mov	r1, r0
 8010548:	6818      	ldr	r0, [r3, #0]
 801054a:	f000 b825 	b.w	8010598 <_malloc_r>
 801054e:	bf00      	nop
 8010550:	20000034 	.word	0x20000034

08010554 <sbrk_aligned>:
 8010554:	b570      	push	{r4, r5, r6, lr}
 8010556:	4e0f      	ldr	r6, [pc, #60]	@ (8010594 <sbrk_aligned+0x40>)
 8010558:	460c      	mov	r4, r1
 801055a:	6831      	ldr	r1, [r6, #0]
 801055c:	4605      	mov	r5, r0
 801055e:	b911      	cbnz	r1, 8010566 <sbrk_aligned+0x12>
 8010560:	f000 fcc8 	bl	8010ef4 <_sbrk_r>
 8010564:	6030      	str	r0, [r6, #0]
 8010566:	4621      	mov	r1, r4
 8010568:	4628      	mov	r0, r5
 801056a:	f000 fcc3 	bl	8010ef4 <_sbrk_r>
 801056e:	1c43      	adds	r3, r0, #1
 8010570:	d103      	bne.n	801057a <sbrk_aligned+0x26>
 8010572:	f04f 34ff 	mov.w	r4, #4294967295
 8010576:	4620      	mov	r0, r4
 8010578:	bd70      	pop	{r4, r5, r6, pc}
 801057a:	1cc4      	adds	r4, r0, #3
 801057c:	f024 0403 	bic.w	r4, r4, #3
 8010580:	42a0      	cmp	r0, r4
 8010582:	d0f8      	beq.n	8010576 <sbrk_aligned+0x22>
 8010584:	1a21      	subs	r1, r4, r0
 8010586:	4628      	mov	r0, r5
 8010588:	f000 fcb4 	bl	8010ef4 <_sbrk_r>
 801058c:	3001      	adds	r0, #1
 801058e:	d1f2      	bne.n	8010576 <sbrk_aligned+0x22>
 8010590:	e7ef      	b.n	8010572 <sbrk_aligned+0x1e>
 8010592:	bf00      	nop
 8010594:	2000d260 	.word	0x2000d260

08010598 <_malloc_r>:
 8010598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801059c:	1ccd      	adds	r5, r1, #3
 801059e:	f025 0503 	bic.w	r5, r5, #3
 80105a2:	3508      	adds	r5, #8
 80105a4:	2d0c      	cmp	r5, #12
 80105a6:	bf38      	it	cc
 80105a8:	250c      	movcc	r5, #12
 80105aa:	2d00      	cmp	r5, #0
 80105ac:	4606      	mov	r6, r0
 80105ae:	db01      	blt.n	80105b4 <_malloc_r+0x1c>
 80105b0:	42a9      	cmp	r1, r5
 80105b2:	d904      	bls.n	80105be <_malloc_r+0x26>
 80105b4:	230c      	movs	r3, #12
 80105b6:	6033      	str	r3, [r6, #0]
 80105b8:	2000      	movs	r0, #0
 80105ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010694 <_malloc_r+0xfc>
 80105c2:	f000 f869 	bl	8010698 <__malloc_lock>
 80105c6:	f8d8 3000 	ldr.w	r3, [r8]
 80105ca:	461c      	mov	r4, r3
 80105cc:	bb44      	cbnz	r4, 8010620 <_malloc_r+0x88>
 80105ce:	4629      	mov	r1, r5
 80105d0:	4630      	mov	r0, r6
 80105d2:	f7ff ffbf 	bl	8010554 <sbrk_aligned>
 80105d6:	1c43      	adds	r3, r0, #1
 80105d8:	4604      	mov	r4, r0
 80105da:	d158      	bne.n	801068e <_malloc_r+0xf6>
 80105dc:	f8d8 4000 	ldr.w	r4, [r8]
 80105e0:	4627      	mov	r7, r4
 80105e2:	2f00      	cmp	r7, #0
 80105e4:	d143      	bne.n	801066e <_malloc_r+0xd6>
 80105e6:	2c00      	cmp	r4, #0
 80105e8:	d04b      	beq.n	8010682 <_malloc_r+0xea>
 80105ea:	6823      	ldr	r3, [r4, #0]
 80105ec:	4639      	mov	r1, r7
 80105ee:	4630      	mov	r0, r6
 80105f0:	eb04 0903 	add.w	r9, r4, r3
 80105f4:	f000 fc7e 	bl	8010ef4 <_sbrk_r>
 80105f8:	4581      	cmp	r9, r0
 80105fa:	d142      	bne.n	8010682 <_malloc_r+0xea>
 80105fc:	6821      	ldr	r1, [r4, #0]
 80105fe:	1a6d      	subs	r5, r5, r1
 8010600:	4629      	mov	r1, r5
 8010602:	4630      	mov	r0, r6
 8010604:	f7ff ffa6 	bl	8010554 <sbrk_aligned>
 8010608:	3001      	adds	r0, #1
 801060a:	d03a      	beq.n	8010682 <_malloc_r+0xea>
 801060c:	6823      	ldr	r3, [r4, #0]
 801060e:	442b      	add	r3, r5
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	f8d8 3000 	ldr.w	r3, [r8]
 8010616:	685a      	ldr	r2, [r3, #4]
 8010618:	bb62      	cbnz	r2, 8010674 <_malloc_r+0xdc>
 801061a:	f8c8 7000 	str.w	r7, [r8]
 801061e:	e00f      	b.n	8010640 <_malloc_r+0xa8>
 8010620:	6822      	ldr	r2, [r4, #0]
 8010622:	1b52      	subs	r2, r2, r5
 8010624:	d420      	bmi.n	8010668 <_malloc_r+0xd0>
 8010626:	2a0b      	cmp	r2, #11
 8010628:	d917      	bls.n	801065a <_malloc_r+0xc2>
 801062a:	1961      	adds	r1, r4, r5
 801062c:	42a3      	cmp	r3, r4
 801062e:	6025      	str	r5, [r4, #0]
 8010630:	bf18      	it	ne
 8010632:	6059      	strne	r1, [r3, #4]
 8010634:	6863      	ldr	r3, [r4, #4]
 8010636:	bf08      	it	eq
 8010638:	f8c8 1000 	streq.w	r1, [r8]
 801063c:	5162      	str	r2, [r4, r5]
 801063e:	604b      	str	r3, [r1, #4]
 8010640:	4630      	mov	r0, r6
 8010642:	f000 f82f 	bl	80106a4 <__malloc_unlock>
 8010646:	f104 000b 	add.w	r0, r4, #11
 801064a:	1d23      	adds	r3, r4, #4
 801064c:	f020 0007 	bic.w	r0, r0, #7
 8010650:	1ac2      	subs	r2, r0, r3
 8010652:	bf1c      	itt	ne
 8010654:	1a1b      	subne	r3, r3, r0
 8010656:	50a3      	strne	r3, [r4, r2]
 8010658:	e7af      	b.n	80105ba <_malloc_r+0x22>
 801065a:	6862      	ldr	r2, [r4, #4]
 801065c:	42a3      	cmp	r3, r4
 801065e:	bf0c      	ite	eq
 8010660:	f8c8 2000 	streq.w	r2, [r8]
 8010664:	605a      	strne	r2, [r3, #4]
 8010666:	e7eb      	b.n	8010640 <_malloc_r+0xa8>
 8010668:	4623      	mov	r3, r4
 801066a:	6864      	ldr	r4, [r4, #4]
 801066c:	e7ae      	b.n	80105cc <_malloc_r+0x34>
 801066e:	463c      	mov	r4, r7
 8010670:	687f      	ldr	r7, [r7, #4]
 8010672:	e7b6      	b.n	80105e2 <_malloc_r+0x4a>
 8010674:	461a      	mov	r2, r3
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	42a3      	cmp	r3, r4
 801067a:	d1fb      	bne.n	8010674 <_malloc_r+0xdc>
 801067c:	2300      	movs	r3, #0
 801067e:	6053      	str	r3, [r2, #4]
 8010680:	e7de      	b.n	8010640 <_malloc_r+0xa8>
 8010682:	230c      	movs	r3, #12
 8010684:	6033      	str	r3, [r6, #0]
 8010686:	4630      	mov	r0, r6
 8010688:	f000 f80c 	bl	80106a4 <__malloc_unlock>
 801068c:	e794      	b.n	80105b8 <_malloc_r+0x20>
 801068e:	6005      	str	r5, [r0, #0]
 8010690:	e7d6      	b.n	8010640 <_malloc_r+0xa8>
 8010692:	bf00      	nop
 8010694:	2000d264 	.word	0x2000d264

08010698 <__malloc_lock>:
 8010698:	4801      	ldr	r0, [pc, #4]	@ (80106a0 <__malloc_lock+0x8>)
 801069a:	f7ff bf24 	b.w	80104e6 <__retarget_lock_acquire_recursive>
 801069e:	bf00      	nop
 80106a0:	2000d25c 	.word	0x2000d25c

080106a4 <__malloc_unlock>:
 80106a4:	4801      	ldr	r0, [pc, #4]	@ (80106ac <__malloc_unlock+0x8>)
 80106a6:	f7ff bf1f 	b.w	80104e8 <__retarget_lock_release_recursive>
 80106aa:	bf00      	nop
 80106ac:	2000d25c 	.word	0x2000d25c

080106b0 <__sfputc_r>:
 80106b0:	6893      	ldr	r3, [r2, #8]
 80106b2:	3b01      	subs	r3, #1
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	b410      	push	{r4}
 80106b8:	6093      	str	r3, [r2, #8]
 80106ba:	da08      	bge.n	80106ce <__sfputc_r+0x1e>
 80106bc:	6994      	ldr	r4, [r2, #24]
 80106be:	42a3      	cmp	r3, r4
 80106c0:	db01      	blt.n	80106c6 <__sfputc_r+0x16>
 80106c2:	290a      	cmp	r1, #10
 80106c4:	d103      	bne.n	80106ce <__sfputc_r+0x1e>
 80106c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106ca:	f000 bb7f 	b.w	8010dcc <__swbuf_r>
 80106ce:	6813      	ldr	r3, [r2, #0]
 80106d0:	1c58      	adds	r0, r3, #1
 80106d2:	6010      	str	r0, [r2, #0]
 80106d4:	7019      	strb	r1, [r3, #0]
 80106d6:	4608      	mov	r0, r1
 80106d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106dc:	4770      	bx	lr

080106de <__sfputs_r>:
 80106de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e0:	4606      	mov	r6, r0
 80106e2:	460f      	mov	r7, r1
 80106e4:	4614      	mov	r4, r2
 80106e6:	18d5      	adds	r5, r2, r3
 80106e8:	42ac      	cmp	r4, r5
 80106ea:	d101      	bne.n	80106f0 <__sfputs_r+0x12>
 80106ec:	2000      	movs	r0, #0
 80106ee:	e007      	b.n	8010700 <__sfputs_r+0x22>
 80106f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106f4:	463a      	mov	r2, r7
 80106f6:	4630      	mov	r0, r6
 80106f8:	f7ff ffda 	bl	80106b0 <__sfputc_r>
 80106fc:	1c43      	adds	r3, r0, #1
 80106fe:	d1f3      	bne.n	80106e8 <__sfputs_r+0xa>
 8010700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010704 <_vfiprintf_r>:
 8010704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010708:	460d      	mov	r5, r1
 801070a:	b09d      	sub	sp, #116	@ 0x74
 801070c:	4614      	mov	r4, r2
 801070e:	4698      	mov	r8, r3
 8010710:	4606      	mov	r6, r0
 8010712:	b118      	cbz	r0, 801071c <_vfiprintf_r+0x18>
 8010714:	6a03      	ldr	r3, [r0, #32]
 8010716:	b90b      	cbnz	r3, 801071c <_vfiprintf_r+0x18>
 8010718:	f7ff fdd6 	bl	80102c8 <__sinit>
 801071c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801071e:	07d9      	lsls	r1, r3, #31
 8010720:	d405      	bmi.n	801072e <_vfiprintf_r+0x2a>
 8010722:	89ab      	ldrh	r3, [r5, #12]
 8010724:	059a      	lsls	r2, r3, #22
 8010726:	d402      	bmi.n	801072e <_vfiprintf_r+0x2a>
 8010728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801072a:	f7ff fedc 	bl	80104e6 <__retarget_lock_acquire_recursive>
 801072e:	89ab      	ldrh	r3, [r5, #12]
 8010730:	071b      	lsls	r3, r3, #28
 8010732:	d501      	bpl.n	8010738 <_vfiprintf_r+0x34>
 8010734:	692b      	ldr	r3, [r5, #16]
 8010736:	b99b      	cbnz	r3, 8010760 <_vfiprintf_r+0x5c>
 8010738:	4629      	mov	r1, r5
 801073a:	4630      	mov	r0, r6
 801073c:	f000 fb84 	bl	8010e48 <__swsetup_r>
 8010740:	b170      	cbz	r0, 8010760 <_vfiprintf_r+0x5c>
 8010742:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010744:	07dc      	lsls	r4, r3, #31
 8010746:	d504      	bpl.n	8010752 <_vfiprintf_r+0x4e>
 8010748:	f04f 30ff 	mov.w	r0, #4294967295
 801074c:	b01d      	add	sp, #116	@ 0x74
 801074e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010752:	89ab      	ldrh	r3, [r5, #12]
 8010754:	0598      	lsls	r0, r3, #22
 8010756:	d4f7      	bmi.n	8010748 <_vfiprintf_r+0x44>
 8010758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801075a:	f7ff fec5 	bl	80104e8 <__retarget_lock_release_recursive>
 801075e:	e7f3      	b.n	8010748 <_vfiprintf_r+0x44>
 8010760:	2300      	movs	r3, #0
 8010762:	9309      	str	r3, [sp, #36]	@ 0x24
 8010764:	2320      	movs	r3, #32
 8010766:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801076a:	f8cd 800c 	str.w	r8, [sp, #12]
 801076e:	2330      	movs	r3, #48	@ 0x30
 8010770:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010920 <_vfiprintf_r+0x21c>
 8010774:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010778:	f04f 0901 	mov.w	r9, #1
 801077c:	4623      	mov	r3, r4
 801077e:	469a      	mov	sl, r3
 8010780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010784:	b10a      	cbz	r2, 801078a <_vfiprintf_r+0x86>
 8010786:	2a25      	cmp	r2, #37	@ 0x25
 8010788:	d1f9      	bne.n	801077e <_vfiprintf_r+0x7a>
 801078a:	ebba 0b04 	subs.w	fp, sl, r4
 801078e:	d00b      	beq.n	80107a8 <_vfiprintf_r+0xa4>
 8010790:	465b      	mov	r3, fp
 8010792:	4622      	mov	r2, r4
 8010794:	4629      	mov	r1, r5
 8010796:	4630      	mov	r0, r6
 8010798:	f7ff ffa1 	bl	80106de <__sfputs_r>
 801079c:	3001      	adds	r0, #1
 801079e:	f000 80a7 	beq.w	80108f0 <_vfiprintf_r+0x1ec>
 80107a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107a4:	445a      	add	r2, fp
 80107a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80107a8:	f89a 3000 	ldrb.w	r3, [sl]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f000 809f 	beq.w	80108f0 <_vfiprintf_r+0x1ec>
 80107b2:	2300      	movs	r3, #0
 80107b4:	f04f 32ff 	mov.w	r2, #4294967295
 80107b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107bc:	f10a 0a01 	add.w	sl, sl, #1
 80107c0:	9304      	str	r3, [sp, #16]
 80107c2:	9307      	str	r3, [sp, #28]
 80107c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80107c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80107ca:	4654      	mov	r4, sl
 80107cc:	2205      	movs	r2, #5
 80107ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107d2:	4853      	ldr	r0, [pc, #332]	@ (8010920 <_vfiprintf_r+0x21c>)
 80107d4:	f7ef fd34 	bl	8000240 <memchr>
 80107d8:	9a04      	ldr	r2, [sp, #16]
 80107da:	b9d8      	cbnz	r0, 8010814 <_vfiprintf_r+0x110>
 80107dc:	06d1      	lsls	r1, r2, #27
 80107de:	bf44      	itt	mi
 80107e0:	2320      	movmi	r3, #32
 80107e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107e6:	0713      	lsls	r3, r2, #28
 80107e8:	bf44      	itt	mi
 80107ea:	232b      	movmi	r3, #43	@ 0x2b
 80107ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107f0:	f89a 3000 	ldrb.w	r3, [sl]
 80107f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80107f6:	d015      	beq.n	8010824 <_vfiprintf_r+0x120>
 80107f8:	9a07      	ldr	r2, [sp, #28]
 80107fa:	4654      	mov	r4, sl
 80107fc:	2000      	movs	r0, #0
 80107fe:	f04f 0c0a 	mov.w	ip, #10
 8010802:	4621      	mov	r1, r4
 8010804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010808:	3b30      	subs	r3, #48	@ 0x30
 801080a:	2b09      	cmp	r3, #9
 801080c:	d94b      	bls.n	80108a6 <_vfiprintf_r+0x1a2>
 801080e:	b1b0      	cbz	r0, 801083e <_vfiprintf_r+0x13a>
 8010810:	9207      	str	r2, [sp, #28]
 8010812:	e014      	b.n	801083e <_vfiprintf_r+0x13a>
 8010814:	eba0 0308 	sub.w	r3, r0, r8
 8010818:	fa09 f303 	lsl.w	r3, r9, r3
 801081c:	4313      	orrs	r3, r2
 801081e:	9304      	str	r3, [sp, #16]
 8010820:	46a2      	mov	sl, r4
 8010822:	e7d2      	b.n	80107ca <_vfiprintf_r+0xc6>
 8010824:	9b03      	ldr	r3, [sp, #12]
 8010826:	1d19      	adds	r1, r3, #4
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	9103      	str	r1, [sp, #12]
 801082c:	2b00      	cmp	r3, #0
 801082e:	bfbb      	ittet	lt
 8010830:	425b      	neglt	r3, r3
 8010832:	f042 0202 	orrlt.w	r2, r2, #2
 8010836:	9307      	strge	r3, [sp, #28]
 8010838:	9307      	strlt	r3, [sp, #28]
 801083a:	bfb8      	it	lt
 801083c:	9204      	strlt	r2, [sp, #16]
 801083e:	7823      	ldrb	r3, [r4, #0]
 8010840:	2b2e      	cmp	r3, #46	@ 0x2e
 8010842:	d10a      	bne.n	801085a <_vfiprintf_r+0x156>
 8010844:	7863      	ldrb	r3, [r4, #1]
 8010846:	2b2a      	cmp	r3, #42	@ 0x2a
 8010848:	d132      	bne.n	80108b0 <_vfiprintf_r+0x1ac>
 801084a:	9b03      	ldr	r3, [sp, #12]
 801084c:	1d1a      	adds	r2, r3, #4
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	9203      	str	r2, [sp, #12]
 8010852:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010856:	3402      	adds	r4, #2
 8010858:	9305      	str	r3, [sp, #20]
 801085a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010930 <_vfiprintf_r+0x22c>
 801085e:	7821      	ldrb	r1, [r4, #0]
 8010860:	2203      	movs	r2, #3
 8010862:	4650      	mov	r0, sl
 8010864:	f7ef fcec 	bl	8000240 <memchr>
 8010868:	b138      	cbz	r0, 801087a <_vfiprintf_r+0x176>
 801086a:	9b04      	ldr	r3, [sp, #16]
 801086c:	eba0 000a 	sub.w	r0, r0, sl
 8010870:	2240      	movs	r2, #64	@ 0x40
 8010872:	4082      	lsls	r2, r0
 8010874:	4313      	orrs	r3, r2
 8010876:	3401      	adds	r4, #1
 8010878:	9304      	str	r3, [sp, #16]
 801087a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801087e:	4829      	ldr	r0, [pc, #164]	@ (8010924 <_vfiprintf_r+0x220>)
 8010880:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010884:	2206      	movs	r2, #6
 8010886:	f7ef fcdb 	bl	8000240 <memchr>
 801088a:	2800      	cmp	r0, #0
 801088c:	d03f      	beq.n	801090e <_vfiprintf_r+0x20a>
 801088e:	4b26      	ldr	r3, [pc, #152]	@ (8010928 <_vfiprintf_r+0x224>)
 8010890:	bb1b      	cbnz	r3, 80108da <_vfiprintf_r+0x1d6>
 8010892:	9b03      	ldr	r3, [sp, #12]
 8010894:	3307      	adds	r3, #7
 8010896:	f023 0307 	bic.w	r3, r3, #7
 801089a:	3308      	adds	r3, #8
 801089c:	9303      	str	r3, [sp, #12]
 801089e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108a0:	443b      	add	r3, r7
 80108a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80108a4:	e76a      	b.n	801077c <_vfiprintf_r+0x78>
 80108a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80108aa:	460c      	mov	r4, r1
 80108ac:	2001      	movs	r0, #1
 80108ae:	e7a8      	b.n	8010802 <_vfiprintf_r+0xfe>
 80108b0:	2300      	movs	r3, #0
 80108b2:	3401      	adds	r4, #1
 80108b4:	9305      	str	r3, [sp, #20]
 80108b6:	4619      	mov	r1, r3
 80108b8:	f04f 0c0a 	mov.w	ip, #10
 80108bc:	4620      	mov	r0, r4
 80108be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108c2:	3a30      	subs	r2, #48	@ 0x30
 80108c4:	2a09      	cmp	r2, #9
 80108c6:	d903      	bls.n	80108d0 <_vfiprintf_r+0x1cc>
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d0c6      	beq.n	801085a <_vfiprintf_r+0x156>
 80108cc:	9105      	str	r1, [sp, #20]
 80108ce:	e7c4      	b.n	801085a <_vfiprintf_r+0x156>
 80108d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80108d4:	4604      	mov	r4, r0
 80108d6:	2301      	movs	r3, #1
 80108d8:	e7f0      	b.n	80108bc <_vfiprintf_r+0x1b8>
 80108da:	ab03      	add	r3, sp, #12
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	462a      	mov	r2, r5
 80108e0:	4b12      	ldr	r3, [pc, #72]	@ (801092c <_vfiprintf_r+0x228>)
 80108e2:	a904      	add	r1, sp, #16
 80108e4:	4630      	mov	r0, r6
 80108e6:	f3af 8000 	nop.w
 80108ea:	4607      	mov	r7, r0
 80108ec:	1c78      	adds	r0, r7, #1
 80108ee:	d1d6      	bne.n	801089e <_vfiprintf_r+0x19a>
 80108f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108f2:	07d9      	lsls	r1, r3, #31
 80108f4:	d405      	bmi.n	8010902 <_vfiprintf_r+0x1fe>
 80108f6:	89ab      	ldrh	r3, [r5, #12]
 80108f8:	059a      	lsls	r2, r3, #22
 80108fa:	d402      	bmi.n	8010902 <_vfiprintf_r+0x1fe>
 80108fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108fe:	f7ff fdf3 	bl	80104e8 <__retarget_lock_release_recursive>
 8010902:	89ab      	ldrh	r3, [r5, #12]
 8010904:	065b      	lsls	r3, r3, #25
 8010906:	f53f af1f 	bmi.w	8010748 <_vfiprintf_r+0x44>
 801090a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801090c:	e71e      	b.n	801074c <_vfiprintf_r+0x48>
 801090e:	ab03      	add	r3, sp, #12
 8010910:	9300      	str	r3, [sp, #0]
 8010912:	462a      	mov	r2, r5
 8010914:	4b05      	ldr	r3, [pc, #20]	@ (801092c <_vfiprintf_r+0x228>)
 8010916:	a904      	add	r1, sp, #16
 8010918:	4630      	mov	r0, r6
 801091a:	f000 f879 	bl	8010a10 <_printf_i>
 801091e:	e7e4      	b.n	80108ea <_vfiprintf_r+0x1e6>
 8010920:	08013520 	.word	0x08013520
 8010924:	0801352a 	.word	0x0801352a
 8010928:	00000000 	.word	0x00000000
 801092c:	080106df 	.word	0x080106df
 8010930:	08013526 	.word	0x08013526

08010934 <_printf_common>:
 8010934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010938:	4616      	mov	r6, r2
 801093a:	4698      	mov	r8, r3
 801093c:	688a      	ldr	r2, [r1, #8]
 801093e:	690b      	ldr	r3, [r1, #16]
 8010940:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010944:	4293      	cmp	r3, r2
 8010946:	bfb8      	it	lt
 8010948:	4613      	movlt	r3, r2
 801094a:	6033      	str	r3, [r6, #0]
 801094c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010950:	4607      	mov	r7, r0
 8010952:	460c      	mov	r4, r1
 8010954:	b10a      	cbz	r2, 801095a <_printf_common+0x26>
 8010956:	3301      	adds	r3, #1
 8010958:	6033      	str	r3, [r6, #0]
 801095a:	6823      	ldr	r3, [r4, #0]
 801095c:	0699      	lsls	r1, r3, #26
 801095e:	bf42      	ittt	mi
 8010960:	6833      	ldrmi	r3, [r6, #0]
 8010962:	3302      	addmi	r3, #2
 8010964:	6033      	strmi	r3, [r6, #0]
 8010966:	6825      	ldr	r5, [r4, #0]
 8010968:	f015 0506 	ands.w	r5, r5, #6
 801096c:	d106      	bne.n	801097c <_printf_common+0x48>
 801096e:	f104 0a19 	add.w	sl, r4, #25
 8010972:	68e3      	ldr	r3, [r4, #12]
 8010974:	6832      	ldr	r2, [r6, #0]
 8010976:	1a9b      	subs	r3, r3, r2
 8010978:	42ab      	cmp	r3, r5
 801097a:	dc26      	bgt.n	80109ca <_printf_common+0x96>
 801097c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010980:	6822      	ldr	r2, [r4, #0]
 8010982:	3b00      	subs	r3, #0
 8010984:	bf18      	it	ne
 8010986:	2301      	movne	r3, #1
 8010988:	0692      	lsls	r2, r2, #26
 801098a:	d42b      	bmi.n	80109e4 <_printf_common+0xb0>
 801098c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010990:	4641      	mov	r1, r8
 8010992:	4638      	mov	r0, r7
 8010994:	47c8      	blx	r9
 8010996:	3001      	adds	r0, #1
 8010998:	d01e      	beq.n	80109d8 <_printf_common+0xa4>
 801099a:	6823      	ldr	r3, [r4, #0]
 801099c:	6922      	ldr	r2, [r4, #16]
 801099e:	f003 0306 	and.w	r3, r3, #6
 80109a2:	2b04      	cmp	r3, #4
 80109a4:	bf02      	ittt	eq
 80109a6:	68e5      	ldreq	r5, [r4, #12]
 80109a8:	6833      	ldreq	r3, [r6, #0]
 80109aa:	1aed      	subeq	r5, r5, r3
 80109ac:	68a3      	ldr	r3, [r4, #8]
 80109ae:	bf0c      	ite	eq
 80109b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109b4:	2500      	movne	r5, #0
 80109b6:	4293      	cmp	r3, r2
 80109b8:	bfc4      	itt	gt
 80109ba:	1a9b      	subgt	r3, r3, r2
 80109bc:	18ed      	addgt	r5, r5, r3
 80109be:	2600      	movs	r6, #0
 80109c0:	341a      	adds	r4, #26
 80109c2:	42b5      	cmp	r5, r6
 80109c4:	d11a      	bne.n	80109fc <_printf_common+0xc8>
 80109c6:	2000      	movs	r0, #0
 80109c8:	e008      	b.n	80109dc <_printf_common+0xa8>
 80109ca:	2301      	movs	r3, #1
 80109cc:	4652      	mov	r2, sl
 80109ce:	4641      	mov	r1, r8
 80109d0:	4638      	mov	r0, r7
 80109d2:	47c8      	blx	r9
 80109d4:	3001      	adds	r0, #1
 80109d6:	d103      	bne.n	80109e0 <_printf_common+0xac>
 80109d8:	f04f 30ff 	mov.w	r0, #4294967295
 80109dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109e0:	3501      	adds	r5, #1
 80109e2:	e7c6      	b.n	8010972 <_printf_common+0x3e>
 80109e4:	18e1      	adds	r1, r4, r3
 80109e6:	1c5a      	adds	r2, r3, #1
 80109e8:	2030      	movs	r0, #48	@ 0x30
 80109ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80109ee:	4422      	add	r2, r4
 80109f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80109f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80109f8:	3302      	adds	r3, #2
 80109fa:	e7c7      	b.n	801098c <_printf_common+0x58>
 80109fc:	2301      	movs	r3, #1
 80109fe:	4622      	mov	r2, r4
 8010a00:	4641      	mov	r1, r8
 8010a02:	4638      	mov	r0, r7
 8010a04:	47c8      	blx	r9
 8010a06:	3001      	adds	r0, #1
 8010a08:	d0e6      	beq.n	80109d8 <_printf_common+0xa4>
 8010a0a:	3601      	adds	r6, #1
 8010a0c:	e7d9      	b.n	80109c2 <_printf_common+0x8e>
	...

08010a10 <_printf_i>:
 8010a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	7e0f      	ldrb	r7, [r1, #24]
 8010a16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010a18:	2f78      	cmp	r7, #120	@ 0x78
 8010a1a:	4691      	mov	r9, r2
 8010a1c:	4680      	mov	r8, r0
 8010a1e:	460c      	mov	r4, r1
 8010a20:	469a      	mov	sl, r3
 8010a22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010a26:	d807      	bhi.n	8010a38 <_printf_i+0x28>
 8010a28:	2f62      	cmp	r7, #98	@ 0x62
 8010a2a:	d80a      	bhi.n	8010a42 <_printf_i+0x32>
 8010a2c:	2f00      	cmp	r7, #0
 8010a2e:	f000 80d2 	beq.w	8010bd6 <_printf_i+0x1c6>
 8010a32:	2f58      	cmp	r7, #88	@ 0x58
 8010a34:	f000 80b9 	beq.w	8010baa <_printf_i+0x19a>
 8010a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010a40:	e03a      	b.n	8010ab8 <_printf_i+0xa8>
 8010a42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010a46:	2b15      	cmp	r3, #21
 8010a48:	d8f6      	bhi.n	8010a38 <_printf_i+0x28>
 8010a4a:	a101      	add	r1, pc, #4	@ (adr r1, 8010a50 <_printf_i+0x40>)
 8010a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a50:	08010aa9 	.word	0x08010aa9
 8010a54:	08010abd 	.word	0x08010abd
 8010a58:	08010a39 	.word	0x08010a39
 8010a5c:	08010a39 	.word	0x08010a39
 8010a60:	08010a39 	.word	0x08010a39
 8010a64:	08010a39 	.word	0x08010a39
 8010a68:	08010abd 	.word	0x08010abd
 8010a6c:	08010a39 	.word	0x08010a39
 8010a70:	08010a39 	.word	0x08010a39
 8010a74:	08010a39 	.word	0x08010a39
 8010a78:	08010a39 	.word	0x08010a39
 8010a7c:	08010bbd 	.word	0x08010bbd
 8010a80:	08010ae7 	.word	0x08010ae7
 8010a84:	08010b77 	.word	0x08010b77
 8010a88:	08010a39 	.word	0x08010a39
 8010a8c:	08010a39 	.word	0x08010a39
 8010a90:	08010bdf 	.word	0x08010bdf
 8010a94:	08010a39 	.word	0x08010a39
 8010a98:	08010ae7 	.word	0x08010ae7
 8010a9c:	08010a39 	.word	0x08010a39
 8010aa0:	08010a39 	.word	0x08010a39
 8010aa4:	08010b7f 	.word	0x08010b7f
 8010aa8:	6833      	ldr	r3, [r6, #0]
 8010aaa:	1d1a      	adds	r2, r3, #4
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	6032      	str	r2, [r6, #0]
 8010ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ab4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e09d      	b.n	8010bf8 <_printf_i+0x1e8>
 8010abc:	6833      	ldr	r3, [r6, #0]
 8010abe:	6820      	ldr	r0, [r4, #0]
 8010ac0:	1d19      	adds	r1, r3, #4
 8010ac2:	6031      	str	r1, [r6, #0]
 8010ac4:	0606      	lsls	r6, r0, #24
 8010ac6:	d501      	bpl.n	8010acc <_printf_i+0xbc>
 8010ac8:	681d      	ldr	r5, [r3, #0]
 8010aca:	e003      	b.n	8010ad4 <_printf_i+0xc4>
 8010acc:	0645      	lsls	r5, r0, #25
 8010ace:	d5fb      	bpl.n	8010ac8 <_printf_i+0xb8>
 8010ad0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010ad4:	2d00      	cmp	r5, #0
 8010ad6:	da03      	bge.n	8010ae0 <_printf_i+0xd0>
 8010ad8:	232d      	movs	r3, #45	@ 0x2d
 8010ada:	426d      	negs	r5, r5
 8010adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ae0:	4859      	ldr	r0, [pc, #356]	@ (8010c48 <_printf_i+0x238>)
 8010ae2:	230a      	movs	r3, #10
 8010ae4:	e011      	b.n	8010b0a <_printf_i+0xfa>
 8010ae6:	6821      	ldr	r1, [r4, #0]
 8010ae8:	6833      	ldr	r3, [r6, #0]
 8010aea:	0608      	lsls	r0, r1, #24
 8010aec:	f853 5b04 	ldr.w	r5, [r3], #4
 8010af0:	d402      	bmi.n	8010af8 <_printf_i+0xe8>
 8010af2:	0649      	lsls	r1, r1, #25
 8010af4:	bf48      	it	mi
 8010af6:	b2ad      	uxthmi	r5, r5
 8010af8:	2f6f      	cmp	r7, #111	@ 0x6f
 8010afa:	4853      	ldr	r0, [pc, #332]	@ (8010c48 <_printf_i+0x238>)
 8010afc:	6033      	str	r3, [r6, #0]
 8010afe:	bf14      	ite	ne
 8010b00:	230a      	movne	r3, #10
 8010b02:	2308      	moveq	r3, #8
 8010b04:	2100      	movs	r1, #0
 8010b06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010b0a:	6866      	ldr	r6, [r4, #4]
 8010b0c:	60a6      	str	r6, [r4, #8]
 8010b0e:	2e00      	cmp	r6, #0
 8010b10:	bfa2      	ittt	ge
 8010b12:	6821      	ldrge	r1, [r4, #0]
 8010b14:	f021 0104 	bicge.w	r1, r1, #4
 8010b18:	6021      	strge	r1, [r4, #0]
 8010b1a:	b90d      	cbnz	r5, 8010b20 <_printf_i+0x110>
 8010b1c:	2e00      	cmp	r6, #0
 8010b1e:	d04b      	beq.n	8010bb8 <_printf_i+0x1a8>
 8010b20:	4616      	mov	r6, r2
 8010b22:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b26:	fb03 5711 	mls	r7, r3, r1, r5
 8010b2a:	5dc7      	ldrb	r7, [r0, r7]
 8010b2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b30:	462f      	mov	r7, r5
 8010b32:	42bb      	cmp	r3, r7
 8010b34:	460d      	mov	r5, r1
 8010b36:	d9f4      	bls.n	8010b22 <_printf_i+0x112>
 8010b38:	2b08      	cmp	r3, #8
 8010b3a:	d10b      	bne.n	8010b54 <_printf_i+0x144>
 8010b3c:	6823      	ldr	r3, [r4, #0]
 8010b3e:	07df      	lsls	r7, r3, #31
 8010b40:	d508      	bpl.n	8010b54 <_printf_i+0x144>
 8010b42:	6923      	ldr	r3, [r4, #16]
 8010b44:	6861      	ldr	r1, [r4, #4]
 8010b46:	4299      	cmp	r1, r3
 8010b48:	bfde      	ittt	le
 8010b4a:	2330      	movle	r3, #48	@ 0x30
 8010b4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010b54:	1b92      	subs	r2, r2, r6
 8010b56:	6122      	str	r2, [r4, #16]
 8010b58:	f8cd a000 	str.w	sl, [sp]
 8010b5c:	464b      	mov	r3, r9
 8010b5e:	aa03      	add	r2, sp, #12
 8010b60:	4621      	mov	r1, r4
 8010b62:	4640      	mov	r0, r8
 8010b64:	f7ff fee6 	bl	8010934 <_printf_common>
 8010b68:	3001      	adds	r0, #1
 8010b6a:	d14a      	bne.n	8010c02 <_printf_i+0x1f2>
 8010b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b70:	b004      	add	sp, #16
 8010b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b76:	6823      	ldr	r3, [r4, #0]
 8010b78:	f043 0320 	orr.w	r3, r3, #32
 8010b7c:	6023      	str	r3, [r4, #0]
 8010b7e:	4833      	ldr	r0, [pc, #204]	@ (8010c4c <_printf_i+0x23c>)
 8010b80:	2778      	movs	r7, #120	@ 0x78
 8010b82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010b86:	6823      	ldr	r3, [r4, #0]
 8010b88:	6831      	ldr	r1, [r6, #0]
 8010b8a:	061f      	lsls	r7, r3, #24
 8010b8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010b90:	d402      	bmi.n	8010b98 <_printf_i+0x188>
 8010b92:	065f      	lsls	r7, r3, #25
 8010b94:	bf48      	it	mi
 8010b96:	b2ad      	uxthmi	r5, r5
 8010b98:	6031      	str	r1, [r6, #0]
 8010b9a:	07d9      	lsls	r1, r3, #31
 8010b9c:	bf44      	itt	mi
 8010b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8010ba2:	6023      	strmi	r3, [r4, #0]
 8010ba4:	b11d      	cbz	r5, 8010bae <_printf_i+0x19e>
 8010ba6:	2310      	movs	r3, #16
 8010ba8:	e7ac      	b.n	8010b04 <_printf_i+0xf4>
 8010baa:	4827      	ldr	r0, [pc, #156]	@ (8010c48 <_printf_i+0x238>)
 8010bac:	e7e9      	b.n	8010b82 <_printf_i+0x172>
 8010bae:	6823      	ldr	r3, [r4, #0]
 8010bb0:	f023 0320 	bic.w	r3, r3, #32
 8010bb4:	6023      	str	r3, [r4, #0]
 8010bb6:	e7f6      	b.n	8010ba6 <_printf_i+0x196>
 8010bb8:	4616      	mov	r6, r2
 8010bba:	e7bd      	b.n	8010b38 <_printf_i+0x128>
 8010bbc:	6833      	ldr	r3, [r6, #0]
 8010bbe:	6825      	ldr	r5, [r4, #0]
 8010bc0:	6961      	ldr	r1, [r4, #20]
 8010bc2:	1d18      	adds	r0, r3, #4
 8010bc4:	6030      	str	r0, [r6, #0]
 8010bc6:	062e      	lsls	r6, r5, #24
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	d501      	bpl.n	8010bd0 <_printf_i+0x1c0>
 8010bcc:	6019      	str	r1, [r3, #0]
 8010bce:	e002      	b.n	8010bd6 <_printf_i+0x1c6>
 8010bd0:	0668      	lsls	r0, r5, #25
 8010bd2:	d5fb      	bpl.n	8010bcc <_printf_i+0x1bc>
 8010bd4:	8019      	strh	r1, [r3, #0]
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	6123      	str	r3, [r4, #16]
 8010bda:	4616      	mov	r6, r2
 8010bdc:	e7bc      	b.n	8010b58 <_printf_i+0x148>
 8010bde:	6833      	ldr	r3, [r6, #0]
 8010be0:	1d1a      	adds	r2, r3, #4
 8010be2:	6032      	str	r2, [r6, #0]
 8010be4:	681e      	ldr	r6, [r3, #0]
 8010be6:	6862      	ldr	r2, [r4, #4]
 8010be8:	2100      	movs	r1, #0
 8010bea:	4630      	mov	r0, r6
 8010bec:	f7ef fb28 	bl	8000240 <memchr>
 8010bf0:	b108      	cbz	r0, 8010bf6 <_printf_i+0x1e6>
 8010bf2:	1b80      	subs	r0, r0, r6
 8010bf4:	6060      	str	r0, [r4, #4]
 8010bf6:	6863      	ldr	r3, [r4, #4]
 8010bf8:	6123      	str	r3, [r4, #16]
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c00:	e7aa      	b.n	8010b58 <_printf_i+0x148>
 8010c02:	6923      	ldr	r3, [r4, #16]
 8010c04:	4632      	mov	r2, r6
 8010c06:	4649      	mov	r1, r9
 8010c08:	4640      	mov	r0, r8
 8010c0a:	47d0      	blx	sl
 8010c0c:	3001      	adds	r0, #1
 8010c0e:	d0ad      	beq.n	8010b6c <_printf_i+0x15c>
 8010c10:	6823      	ldr	r3, [r4, #0]
 8010c12:	079b      	lsls	r3, r3, #30
 8010c14:	d413      	bmi.n	8010c3e <_printf_i+0x22e>
 8010c16:	68e0      	ldr	r0, [r4, #12]
 8010c18:	9b03      	ldr	r3, [sp, #12]
 8010c1a:	4298      	cmp	r0, r3
 8010c1c:	bfb8      	it	lt
 8010c1e:	4618      	movlt	r0, r3
 8010c20:	e7a6      	b.n	8010b70 <_printf_i+0x160>
 8010c22:	2301      	movs	r3, #1
 8010c24:	4632      	mov	r2, r6
 8010c26:	4649      	mov	r1, r9
 8010c28:	4640      	mov	r0, r8
 8010c2a:	47d0      	blx	sl
 8010c2c:	3001      	adds	r0, #1
 8010c2e:	d09d      	beq.n	8010b6c <_printf_i+0x15c>
 8010c30:	3501      	adds	r5, #1
 8010c32:	68e3      	ldr	r3, [r4, #12]
 8010c34:	9903      	ldr	r1, [sp, #12]
 8010c36:	1a5b      	subs	r3, r3, r1
 8010c38:	42ab      	cmp	r3, r5
 8010c3a:	dcf2      	bgt.n	8010c22 <_printf_i+0x212>
 8010c3c:	e7eb      	b.n	8010c16 <_printf_i+0x206>
 8010c3e:	2500      	movs	r5, #0
 8010c40:	f104 0619 	add.w	r6, r4, #25
 8010c44:	e7f5      	b.n	8010c32 <_printf_i+0x222>
 8010c46:	bf00      	nop
 8010c48:	08013531 	.word	0x08013531
 8010c4c:	08013542 	.word	0x08013542

08010c50 <__sflush_r>:
 8010c50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c58:	0716      	lsls	r6, r2, #28
 8010c5a:	4605      	mov	r5, r0
 8010c5c:	460c      	mov	r4, r1
 8010c5e:	d454      	bmi.n	8010d0a <__sflush_r+0xba>
 8010c60:	684b      	ldr	r3, [r1, #4]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	dc02      	bgt.n	8010c6c <__sflush_r+0x1c>
 8010c66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	dd48      	ble.n	8010cfe <__sflush_r+0xae>
 8010c6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c6e:	2e00      	cmp	r6, #0
 8010c70:	d045      	beq.n	8010cfe <__sflush_r+0xae>
 8010c72:	2300      	movs	r3, #0
 8010c74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010c78:	682f      	ldr	r7, [r5, #0]
 8010c7a:	6a21      	ldr	r1, [r4, #32]
 8010c7c:	602b      	str	r3, [r5, #0]
 8010c7e:	d030      	beq.n	8010ce2 <__sflush_r+0x92>
 8010c80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010c82:	89a3      	ldrh	r3, [r4, #12]
 8010c84:	0759      	lsls	r1, r3, #29
 8010c86:	d505      	bpl.n	8010c94 <__sflush_r+0x44>
 8010c88:	6863      	ldr	r3, [r4, #4]
 8010c8a:	1ad2      	subs	r2, r2, r3
 8010c8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c8e:	b10b      	cbz	r3, 8010c94 <__sflush_r+0x44>
 8010c90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c92:	1ad2      	subs	r2, r2, r3
 8010c94:	2300      	movs	r3, #0
 8010c96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c98:	6a21      	ldr	r1, [r4, #32]
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	47b0      	blx	r6
 8010c9e:	1c43      	adds	r3, r0, #1
 8010ca0:	89a3      	ldrh	r3, [r4, #12]
 8010ca2:	d106      	bne.n	8010cb2 <__sflush_r+0x62>
 8010ca4:	6829      	ldr	r1, [r5, #0]
 8010ca6:	291d      	cmp	r1, #29
 8010ca8:	d82b      	bhi.n	8010d02 <__sflush_r+0xb2>
 8010caa:	4a2a      	ldr	r2, [pc, #168]	@ (8010d54 <__sflush_r+0x104>)
 8010cac:	410a      	asrs	r2, r1
 8010cae:	07d6      	lsls	r6, r2, #31
 8010cb0:	d427      	bmi.n	8010d02 <__sflush_r+0xb2>
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	6062      	str	r2, [r4, #4]
 8010cb6:	04d9      	lsls	r1, r3, #19
 8010cb8:	6922      	ldr	r2, [r4, #16]
 8010cba:	6022      	str	r2, [r4, #0]
 8010cbc:	d504      	bpl.n	8010cc8 <__sflush_r+0x78>
 8010cbe:	1c42      	adds	r2, r0, #1
 8010cc0:	d101      	bne.n	8010cc6 <__sflush_r+0x76>
 8010cc2:	682b      	ldr	r3, [r5, #0]
 8010cc4:	b903      	cbnz	r3, 8010cc8 <__sflush_r+0x78>
 8010cc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8010cc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010cca:	602f      	str	r7, [r5, #0]
 8010ccc:	b1b9      	cbz	r1, 8010cfe <__sflush_r+0xae>
 8010cce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cd2:	4299      	cmp	r1, r3
 8010cd4:	d002      	beq.n	8010cdc <__sflush_r+0x8c>
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	f000 f924 	bl	8010f24 <_free_r>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ce0:	e00d      	b.n	8010cfe <__sflush_r+0xae>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	47b0      	blx	r6
 8010ce8:	4602      	mov	r2, r0
 8010cea:	1c50      	adds	r0, r2, #1
 8010cec:	d1c9      	bne.n	8010c82 <__sflush_r+0x32>
 8010cee:	682b      	ldr	r3, [r5, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d0c6      	beq.n	8010c82 <__sflush_r+0x32>
 8010cf4:	2b1d      	cmp	r3, #29
 8010cf6:	d001      	beq.n	8010cfc <__sflush_r+0xac>
 8010cf8:	2b16      	cmp	r3, #22
 8010cfa:	d11e      	bne.n	8010d3a <__sflush_r+0xea>
 8010cfc:	602f      	str	r7, [r5, #0]
 8010cfe:	2000      	movs	r0, #0
 8010d00:	e022      	b.n	8010d48 <__sflush_r+0xf8>
 8010d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d06:	b21b      	sxth	r3, r3
 8010d08:	e01b      	b.n	8010d42 <__sflush_r+0xf2>
 8010d0a:	690f      	ldr	r7, [r1, #16]
 8010d0c:	2f00      	cmp	r7, #0
 8010d0e:	d0f6      	beq.n	8010cfe <__sflush_r+0xae>
 8010d10:	0793      	lsls	r3, r2, #30
 8010d12:	680e      	ldr	r6, [r1, #0]
 8010d14:	bf08      	it	eq
 8010d16:	694b      	ldreq	r3, [r1, #20]
 8010d18:	600f      	str	r7, [r1, #0]
 8010d1a:	bf18      	it	ne
 8010d1c:	2300      	movne	r3, #0
 8010d1e:	eba6 0807 	sub.w	r8, r6, r7
 8010d22:	608b      	str	r3, [r1, #8]
 8010d24:	f1b8 0f00 	cmp.w	r8, #0
 8010d28:	dde9      	ble.n	8010cfe <__sflush_r+0xae>
 8010d2a:	6a21      	ldr	r1, [r4, #32]
 8010d2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010d2e:	4643      	mov	r3, r8
 8010d30:	463a      	mov	r2, r7
 8010d32:	4628      	mov	r0, r5
 8010d34:	47b0      	blx	r6
 8010d36:	2800      	cmp	r0, #0
 8010d38:	dc08      	bgt.n	8010d4c <__sflush_r+0xfc>
 8010d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d42:	81a3      	strh	r3, [r4, #12]
 8010d44:	f04f 30ff 	mov.w	r0, #4294967295
 8010d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4c:	4407      	add	r7, r0
 8010d4e:	eba8 0800 	sub.w	r8, r8, r0
 8010d52:	e7e7      	b.n	8010d24 <__sflush_r+0xd4>
 8010d54:	dfbffffe 	.word	0xdfbffffe

08010d58 <_fflush_r>:
 8010d58:	b538      	push	{r3, r4, r5, lr}
 8010d5a:	690b      	ldr	r3, [r1, #16]
 8010d5c:	4605      	mov	r5, r0
 8010d5e:	460c      	mov	r4, r1
 8010d60:	b913      	cbnz	r3, 8010d68 <_fflush_r+0x10>
 8010d62:	2500      	movs	r5, #0
 8010d64:	4628      	mov	r0, r5
 8010d66:	bd38      	pop	{r3, r4, r5, pc}
 8010d68:	b118      	cbz	r0, 8010d72 <_fflush_r+0x1a>
 8010d6a:	6a03      	ldr	r3, [r0, #32]
 8010d6c:	b90b      	cbnz	r3, 8010d72 <_fflush_r+0x1a>
 8010d6e:	f7ff faab 	bl	80102c8 <__sinit>
 8010d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d0f3      	beq.n	8010d62 <_fflush_r+0xa>
 8010d7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010d7c:	07d0      	lsls	r0, r2, #31
 8010d7e:	d404      	bmi.n	8010d8a <_fflush_r+0x32>
 8010d80:	0599      	lsls	r1, r3, #22
 8010d82:	d402      	bmi.n	8010d8a <_fflush_r+0x32>
 8010d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d86:	f7ff fbae 	bl	80104e6 <__retarget_lock_acquire_recursive>
 8010d8a:	4628      	mov	r0, r5
 8010d8c:	4621      	mov	r1, r4
 8010d8e:	f7ff ff5f 	bl	8010c50 <__sflush_r>
 8010d92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d94:	07da      	lsls	r2, r3, #31
 8010d96:	4605      	mov	r5, r0
 8010d98:	d4e4      	bmi.n	8010d64 <_fflush_r+0xc>
 8010d9a:	89a3      	ldrh	r3, [r4, #12]
 8010d9c:	059b      	lsls	r3, r3, #22
 8010d9e:	d4e1      	bmi.n	8010d64 <_fflush_r+0xc>
 8010da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010da2:	f7ff fba1 	bl	80104e8 <__retarget_lock_release_recursive>
 8010da6:	e7dd      	b.n	8010d64 <_fflush_r+0xc>

08010da8 <fiprintf>:
 8010da8:	b40e      	push	{r1, r2, r3}
 8010daa:	b503      	push	{r0, r1, lr}
 8010dac:	4601      	mov	r1, r0
 8010dae:	ab03      	add	r3, sp, #12
 8010db0:	4805      	ldr	r0, [pc, #20]	@ (8010dc8 <fiprintf+0x20>)
 8010db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010db6:	6800      	ldr	r0, [r0, #0]
 8010db8:	9301      	str	r3, [sp, #4]
 8010dba:	f7ff fca3 	bl	8010704 <_vfiprintf_r>
 8010dbe:	b002      	add	sp, #8
 8010dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dc4:	b003      	add	sp, #12
 8010dc6:	4770      	bx	lr
 8010dc8:	20000034 	.word	0x20000034

08010dcc <__swbuf_r>:
 8010dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dce:	460e      	mov	r6, r1
 8010dd0:	4614      	mov	r4, r2
 8010dd2:	4605      	mov	r5, r0
 8010dd4:	b118      	cbz	r0, 8010dde <__swbuf_r+0x12>
 8010dd6:	6a03      	ldr	r3, [r0, #32]
 8010dd8:	b90b      	cbnz	r3, 8010dde <__swbuf_r+0x12>
 8010dda:	f7ff fa75 	bl	80102c8 <__sinit>
 8010dde:	69a3      	ldr	r3, [r4, #24]
 8010de0:	60a3      	str	r3, [r4, #8]
 8010de2:	89a3      	ldrh	r3, [r4, #12]
 8010de4:	071a      	lsls	r2, r3, #28
 8010de6:	d501      	bpl.n	8010dec <__swbuf_r+0x20>
 8010de8:	6923      	ldr	r3, [r4, #16]
 8010dea:	b943      	cbnz	r3, 8010dfe <__swbuf_r+0x32>
 8010dec:	4621      	mov	r1, r4
 8010dee:	4628      	mov	r0, r5
 8010df0:	f000 f82a 	bl	8010e48 <__swsetup_r>
 8010df4:	b118      	cbz	r0, 8010dfe <__swbuf_r+0x32>
 8010df6:	f04f 37ff 	mov.w	r7, #4294967295
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dfe:	6823      	ldr	r3, [r4, #0]
 8010e00:	6922      	ldr	r2, [r4, #16]
 8010e02:	1a98      	subs	r0, r3, r2
 8010e04:	6963      	ldr	r3, [r4, #20]
 8010e06:	b2f6      	uxtb	r6, r6
 8010e08:	4283      	cmp	r3, r0
 8010e0a:	4637      	mov	r7, r6
 8010e0c:	dc05      	bgt.n	8010e1a <__swbuf_r+0x4e>
 8010e0e:	4621      	mov	r1, r4
 8010e10:	4628      	mov	r0, r5
 8010e12:	f7ff ffa1 	bl	8010d58 <_fflush_r>
 8010e16:	2800      	cmp	r0, #0
 8010e18:	d1ed      	bne.n	8010df6 <__swbuf_r+0x2a>
 8010e1a:	68a3      	ldr	r3, [r4, #8]
 8010e1c:	3b01      	subs	r3, #1
 8010e1e:	60a3      	str	r3, [r4, #8]
 8010e20:	6823      	ldr	r3, [r4, #0]
 8010e22:	1c5a      	adds	r2, r3, #1
 8010e24:	6022      	str	r2, [r4, #0]
 8010e26:	701e      	strb	r6, [r3, #0]
 8010e28:	6962      	ldr	r2, [r4, #20]
 8010e2a:	1c43      	adds	r3, r0, #1
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d004      	beq.n	8010e3a <__swbuf_r+0x6e>
 8010e30:	89a3      	ldrh	r3, [r4, #12]
 8010e32:	07db      	lsls	r3, r3, #31
 8010e34:	d5e1      	bpl.n	8010dfa <__swbuf_r+0x2e>
 8010e36:	2e0a      	cmp	r6, #10
 8010e38:	d1df      	bne.n	8010dfa <__swbuf_r+0x2e>
 8010e3a:	4621      	mov	r1, r4
 8010e3c:	4628      	mov	r0, r5
 8010e3e:	f7ff ff8b 	bl	8010d58 <_fflush_r>
 8010e42:	2800      	cmp	r0, #0
 8010e44:	d0d9      	beq.n	8010dfa <__swbuf_r+0x2e>
 8010e46:	e7d6      	b.n	8010df6 <__swbuf_r+0x2a>

08010e48 <__swsetup_r>:
 8010e48:	b538      	push	{r3, r4, r5, lr}
 8010e4a:	4b29      	ldr	r3, [pc, #164]	@ (8010ef0 <__swsetup_r+0xa8>)
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	6818      	ldr	r0, [r3, #0]
 8010e50:	460c      	mov	r4, r1
 8010e52:	b118      	cbz	r0, 8010e5c <__swsetup_r+0x14>
 8010e54:	6a03      	ldr	r3, [r0, #32]
 8010e56:	b90b      	cbnz	r3, 8010e5c <__swsetup_r+0x14>
 8010e58:	f7ff fa36 	bl	80102c8 <__sinit>
 8010e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e60:	0719      	lsls	r1, r3, #28
 8010e62:	d422      	bmi.n	8010eaa <__swsetup_r+0x62>
 8010e64:	06da      	lsls	r2, r3, #27
 8010e66:	d407      	bmi.n	8010e78 <__swsetup_r+0x30>
 8010e68:	2209      	movs	r2, #9
 8010e6a:	602a      	str	r2, [r5, #0]
 8010e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e70:	81a3      	strh	r3, [r4, #12]
 8010e72:	f04f 30ff 	mov.w	r0, #4294967295
 8010e76:	e033      	b.n	8010ee0 <__swsetup_r+0x98>
 8010e78:	0758      	lsls	r0, r3, #29
 8010e7a:	d512      	bpl.n	8010ea2 <__swsetup_r+0x5a>
 8010e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e7e:	b141      	cbz	r1, 8010e92 <__swsetup_r+0x4a>
 8010e80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e84:	4299      	cmp	r1, r3
 8010e86:	d002      	beq.n	8010e8e <__swsetup_r+0x46>
 8010e88:	4628      	mov	r0, r5
 8010e8a:	f000 f84b 	bl	8010f24 <_free_r>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e92:	89a3      	ldrh	r3, [r4, #12]
 8010e94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e98:	81a3      	strh	r3, [r4, #12]
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	6063      	str	r3, [r4, #4]
 8010e9e:	6923      	ldr	r3, [r4, #16]
 8010ea0:	6023      	str	r3, [r4, #0]
 8010ea2:	89a3      	ldrh	r3, [r4, #12]
 8010ea4:	f043 0308 	orr.w	r3, r3, #8
 8010ea8:	81a3      	strh	r3, [r4, #12]
 8010eaa:	6923      	ldr	r3, [r4, #16]
 8010eac:	b94b      	cbnz	r3, 8010ec2 <__swsetup_r+0x7a>
 8010eae:	89a3      	ldrh	r3, [r4, #12]
 8010eb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010eb8:	d003      	beq.n	8010ec2 <__swsetup_r+0x7a>
 8010eba:	4621      	mov	r1, r4
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	f000 f8a1 	bl	8011004 <__smakebuf_r>
 8010ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ec6:	f013 0201 	ands.w	r2, r3, #1
 8010eca:	d00a      	beq.n	8010ee2 <__swsetup_r+0x9a>
 8010ecc:	2200      	movs	r2, #0
 8010ece:	60a2      	str	r2, [r4, #8]
 8010ed0:	6962      	ldr	r2, [r4, #20]
 8010ed2:	4252      	negs	r2, r2
 8010ed4:	61a2      	str	r2, [r4, #24]
 8010ed6:	6922      	ldr	r2, [r4, #16]
 8010ed8:	b942      	cbnz	r2, 8010eec <__swsetup_r+0xa4>
 8010eda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010ede:	d1c5      	bne.n	8010e6c <__swsetup_r+0x24>
 8010ee0:	bd38      	pop	{r3, r4, r5, pc}
 8010ee2:	0799      	lsls	r1, r3, #30
 8010ee4:	bf58      	it	pl
 8010ee6:	6962      	ldrpl	r2, [r4, #20]
 8010ee8:	60a2      	str	r2, [r4, #8]
 8010eea:	e7f4      	b.n	8010ed6 <__swsetup_r+0x8e>
 8010eec:	2000      	movs	r0, #0
 8010eee:	e7f7      	b.n	8010ee0 <__swsetup_r+0x98>
 8010ef0:	20000034 	.word	0x20000034

08010ef4 <_sbrk_r>:
 8010ef4:	b538      	push	{r3, r4, r5, lr}
 8010ef6:	4d06      	ldr	r5, [pc, #24]	@ (8010f10 <_sbrk_r+0x1c>)
 8010ef8:	2300      	movs	r3, #0
 8010efa:	4604      	mov	r4, r0
 8010efc:	4608      	mov	r0, r1
 8010efe:	602b      	str	r3, [r5, #0]
 8010f00:	f7f0 fcec 	bl	80018dc <_sbrk>
 8010f04:	1c43      	adds	r3, r0, #1
 8010f06:	d102      	bne.n	8010f0e <_sbrk_r+0x1a>
 8010f08:	682b      	ldr	r3, [r5, #0]
 8010f0a:	b103      	cbz	r3, 8010f0e <_sbrk_r+0x1a>
 8010f0c:	6023      	str	r3, [r4, #0]
 8010f0e:	bd38      	pop	{r3, r4, r5, pc}
 8010f10:	2000d118 	.word	0x2000d118

08010f14 <abort>:
 8010f14:	b508      	push	{r3, lr}
 8010f16:	2006      	movs	r0, #6
 8010f18:	f000 f8d8 	bl	80110cc <raise>
 8010f1c:	2001      	movs	r0, #1
 8010f1e:	f7f0 fc65 	bl	80017ec <_exit>
	...

08010f24 <_free_r>:
 8010f24:	b538      	push	{r3, r4, r5, lr}
 8010f26:	4605      	mov	r5, r0
 8010f28:	2900      	cmp	r1, #0
 8010f2a:	d041      	beq.n	8010fb0 <_free_r+0x8c>
 8010f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f30:	1f0c      	subs	r4, r1, #4
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	bfb8      	it	lt
 8010f36:	18e4      	addlt	r4, r4, r3
 8010f38:	f7ff fbae 	bl	8010698 <__malloc_lock>
 8010f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8010fb4 <_free_r+0x90>)
 8010f3e:	6813      	ldr	r3, [r2, #0]
 8010f40:	b933      	cbnz	r3, 8010f50 <_free_r+0x2c>
 8010f42:	6063      	str	r3, [r4, #4]
 8010f44:	6014      	str	r4, [r2, #0]
 8010f46:	4628      	mov	r0, r5
 8010f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f4c:	f7ff bbaa 	b.w	80106a4 <__malloc_unlock>
 8010f50:	42a3      	cmp	r3, r4
 8010f52:	d908      	bls.n	8010f66 <_free_r+0x42>
 8010f54:	6820      	ldr	r0, [r4, #0]
 8010f56:	1821      	adds	r1, r4, r0
 8010f58:	428b      	cmp	r3, r1
 8010f5a:	bf01      	itttt	eq
 8010f5c:	6819      	ldreq	r1, [r3, #0]
 8010f5e:	685b      	ldreq	r3, [r3, #4]
 8010f60:	1809      	addeq	r1, r1, r0
 8010f62:	6021      	streq	r1, [r4, #0]
 8010f64:	e7ed      	b.n	8010f42 <_free_r+0x1e>
 8010f66:	461a      	mov	r2, r3
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	b10b      	cbz	r3, 8010f70 <_free_r+0x4c>
 8010f6c:	42a3      	cmp	r3, r4
 8010f6e:	d9fa      	bls.n	8010f66 <_free_r+0x42>
 8010f70:	6811      	ldr	r1, [r2, #0]
 8010f72:	1850      	adds	r0, r2, r1
 8010f74:	42a0      	cmp	r0, r4
 8010f76:	d10b      	bne.n	8010f90 <_free_r+0x6c>
 8010f78:	6820      	ldr	r0, [r4, #0]
 8010f7a:	4401      	add	r1, r0
 8010f7c:	1850      	adds	r0, r2, r1
 8010f7e:	4283      	cmp	r3, r0
 8010f80:	6011      	str	r1, [r2, #0]
 8010f82:	d1e0      	bne.n	8010f46 <_free_r+0x22>
 8010f84:	6818      	ldr	r0, [r3, #0]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	6053      	str	r3, [r2, #4]
 8010f8a:	4408      	add	r0, r1
 8010f8c:	6010      	str	r0, [r2, #0]
 8010f8e:	e7da      	b.n	8010f46 <_free_r+0x22>
 8010f90:	d902      	bls.n	8010f98 <_free_r+0x74>
 8010f92:	230c      	movs	r3, #12
 8010f94:	602b      	str	r3, [r5, #0]
 8010f96:	e7d6      	b.n	8010f46 <_free_r+0x22>
 8010f98:	6820      	ldr	r0, [r4, #0]
 8010f9a:	1821      	adds	r1, r4, r0
 8010f9c:	428b      	cmp	r3, r1
 8010f9e:	bf04      	itt	eq
 8010fa0:	6819      	ldreq	r1, [r3, #0]
 8010fa2:	685b      	ldreq	r3, [r3, #4]
 8010fa4:	6063      	str	r3, [r4, #4]
 8010fa6:	bf04      	itt	eq
 8010fa8:	1809      	addeq	r1, r1, r0
 8010faa:	6021      	streq	r1, [r4, #0]
 8010fac:	6054      	str	r4, [r2, #4]
 8010fae:	e7ca      	b.n	8010f46 <_free_r+0x22>
 8010fb0:	bd38      	pop	{r3, r4, r5, pc}
 8010fb2:	bf00      	nop
 8010fb4:	2000d264 	.word	0x2000d264

08010fb8 <__swhatbuf_r>:
 8010fb8:	b570      	push	{r4, r5, r6, lr}
 8010fba:	460c      	mov	r4, r1
 8010fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc0:	2900      	cmp	r1, #0
 8010fc2:	b096      	sub	sp, #88	@ 0x58
 8010fc4:	4615      	mov	r5, r2
 8010fc6:	461e      	mov	r6, r3
 8010fc8:	da0d      	bge.n	8010fe6 <__swhatbuf_r+0x2e>
 8010fca:	89a3      	ldrh	r3, [r4, #12]
 8010fcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010fd0:	f04f 0100 	mov.w	r1, #0
 8010fd4:	bf14      	ite	ne
 8010fd6:	2340      	movne	r3, #64	@ 0x40
 8010fd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010fdc:	2000      	movs	r0, #0
 8010fde:	6031      	str	r1, [r6, #0]
 8010fe0:	602b      	str	r3, [r5, #0]
 8010fe2:	b016      	add	sp, #88	@ 0x58
 8010fe4:	bd70      	pop	{r4, r5, r6, pc}
 8010fe6:	466a      	mov	r2, sp
 8010fe8:	f000 f878 	bl	80110dc <_fstat_r>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	dbec      	blt.n	8010fca <__swhatbuf_r+0x12>
 8010ff0:	9901      	ldr	r1, [sp, #4]
 8010ff2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010ff6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010ffa:	4259      	negs	r1, r3
 8010ffc:	4159      	adcs	r1, r3
 8010ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011002:	e7eb      	b.n	8010fdc <__swhatbuf_r+0x24>

08011004 <__smakebuf_r>:
 8011004:	898b      	ldrh	r3, [r1, #12]
 8011006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011008:	079d      	lsls	r5, r3, #30
 801100a:	4606      	mov	r6, r0
 801100c:	460c      	mov	r4, r1
 801100e:	d507      	bpl.n	8011020 <__smakebuf_r+0x1c>
 8011010:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	6123      	str	r3, [r4, #16]
 8011018:	2301      	movs	r3, #1
 801101a:	6163      	str	r3, [r4, #20]
 801101c:	b003      	add	sp, #12
 801101e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011020:	ab01      	add	r3, sp, #4
 8011022:	466a      	mov	r2, sp
 8011024:	f7ff ffc8 	bl	8010fb8 <__swhatbuf_r>
 8011028:	9f00      	ldr	r7, [sp, #0]
 801102a:	4605      	mov	r5, r0
 801102c:	4639      	mov	r1, r7
 801102e:	4630      	mov	r0, r6
 8011030:	f7ff fab2 	bl	8010598 <_malloc_r>
 8011034:	b948      	cbnz	r0, 801104a <__smakebuf_r+0x46>
 8011036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801103a:	059a      	lsls	r2, r3, #22
 801103c:	d4ee      	bmi.n	801101c <__smakebuf_r+0x18>
 801103e:	f023 0303 	bic.w	r3, r3, #3
 8011042:	f043 0302 	orr.w	r3, r3, #2
 8011046:	81a3      	strh	r3, [r4, #12]
 8011048:	e7e2      	b.n	8011010 <__smakebuf_r+0xc>
 801104a:	89a3      	ldrh	r3, [r4, #12]
 801104c:	6020      	str	r0, [r4, #0]
 801104e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011052:	81a3      	strh	r3, [r4, #12]
 8011054:	9b01      	ldr	r3, [sp, #4]
 8011056:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801105a:	b15b      	cbz	r3, 8011074 <__smakebuf_r+0x70>
 801105c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011060:	4630      	mov	r0, r6
 8011062:	f000 f84d 	bl	8011100 <_isatty_r>
 8011066:	b128      	cbz	r0, 8011074 <__smakebuf_r+0x70>
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	f023 0303 	bic.w	r3, r3, #3
 801106e:	f043 0301 	orr.w	r3, r3, #1
 8011072:	81a3      	strh	r3, [r4, #12]
 8011074:	89a3      	ldrh	r3, [r4, #12]
 8011076:	431d      	orrs	r5, r3
 8011078:	81a5      	strh	r5, [r4, #12]
 801107a:	e7cf      	b.n	801101c <__smakebuf_r+0x18>

0801107c <_raise_r>:
 801107c:	291f      	cmp	r1, #31
 801107e:	b538      	push	{r3, r4, r5, lr}
 8011080:	4605      	mov	r5, r0
 8011082:	460c      	mov	r4, r1
 8011084:	d904      	bls.n	8011090 <_raise_r+0x14>
 8011086:	2316      	movs	r3, #22
 8011088:	6003      	str	r3, [r0, #0]
 801108a:	f04f 30ff 	mov.w	r0, #4294967295
 801108e:	bd38      	pop	{r3, r4, r5, pc}
 8011090:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011092:	b112      	cbz	r2, 801109a <_raise_r+0x1e>
 8011094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011098:	b94b      	cbnz	r3, 80110ae <_raise_r+0x32>
 801109a:	4628      	mov	r0, r5
 801109c:	f000 f852 	bl	8011144 <_getpid_r>
 80110a0:	4622      	mov	r2, r4
 80110a2:	4601      	mov	r1, r0
 80110a4:	4628      	mov	r0, r5
 80110a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110aa:	f000 b839 	b.w	8011120 <_kill_r>
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d00a      	beq.n	80110c8 <_raise_r+0x4c>
 80110b2:	1c59      	adds	r1, r3, #1
 80110b4:	d103      	bne.n	80110be <_raise_r+0x42>
 80110b6:	2316      	movs	r3, #22
 80110b8:	6003      	str	r3, [r0, #0]
 80110ba:	2001      	movs	r0, #1
 80110bc:	e7e7      	b.n	801108e <_raise_r+0x12>
 80110be:	2100      	movs	r1, #0
 80110c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80110c4:	4620      	mov	r0, r4
 80110c6:	4798      	blx	r3
 80110c8:	2000      	movs	r0, #0
 80110ca:	e7e0      	b.n	801108e <_raise_r+0x12>

080110cc <raise>:
 80110cc:	4b02      	ldr	r3, [pc, #8]	@ (80110d8 <raise+0xc>)
 80110ce:	4601      	mov	r1, r0
 80110d0:	6818      	ldr	r0, [r3, #0]
 80110d2:	f7ff bfd3 	b.w	801107c <_raise_r>
 80110d6:	bf00      	nop
 80110d8:	20000034 	.word	0x20000034

080110dc <_fstat_r>:
 80110dc:	b538      	push	{r3, r4, r5, lr}
 80110de:	4d07      	ldr	r5, [pc, #28]	@ (80110fc <_fstat_r+0x20>)
 80110e0:	2300      	movs	r3, #0
 80110e2:	4604      	mov	r4, r0
 80110e4:	4608      	mov	r0, r1
 80110e6:	4611      	mov	r1, r2
 80110e8:	602b      	str	r3, [r5, #0]
 80110ea:	f7f0 fbcf 	bl	800188c <_fstat>
 80110ee:	1c43      	adds	r3, r0, #1
 80110f0:	d102      	bne.n	80110f8 <_fstat_r+0x1c>
 80110f2:	682b      	ldr	r3, [r5, #0]
 80110f4:	b103      	cbz	r3, 80110f8 <_fstat_r+0x1c>
 80110f6:	6023      	str	r3, [r4, #0]
 80110f8:	bd38      	pop	{r3, r4, r5, pc}
 80110fa:	bf00      	nop
 80110fc:	2000d118 	.word	0x2000d118

08011100 <_isatty_r>:
 8011100:	b538      	push	{r3, r4, r5, lr}
 8011102:	4d06      	ldr	r5, [pc, #24]	@ (801111c <_isatty_r+0x1c>)
 8011104:	2300      	movs	r3, #0
 8011106:	4604      	mov	r4, r0
 8011108:	4608      	mov	r0, r1
 801110a:	602b      	str	r3, [r5, #0]
 801110c:	f7f0 fbce 	bl	80018ac <_isatty>
 8011110:	1c43      	adds	r3, r0, #1
 8011112:	d102      	bne.n	801111a <_isatty_r+0x1a>
 8011114:	682b      	ldr	r3, [r5, #0]
 8011116:	b103      	cbz	r3, 801111a <_isatty_r+0x1a>
 8011118:	6023      	str	r3, [r4, #0]
 801111a:	bd38      	pop	{r3, r4, r5, pc}
 801111c:	2000d118 	.word	0x2000d118

08011120 <_kill_r>:
 8011120:	b538      	push	{r3, r4, r5, lr}
 8011122:	4d07      	ldr	r5, [pc, #28]	@ (8011140 <_kill_r+0x20>)
 8011124:	2300      	movs	r3, #0
 8011126:	4604      	mov	r4, r0
 8011128:	4608      	mov	r0, r1
 801112a:	4611      	mov	r1, r2
 801112c:	602b      	str	r3, [r5, #0]
 801112e:	f7f0 fb4b 	bl	80017c8 <_kill>
 8011132:	1c43      	adds	r3, r0, #1
 8011134:	d102      	bne.n	801113c <_kill_r+0x1c>
 8011136:	682b      	ldr	r3, [r5, #0]
 8011138:	b103      	cbz	r3, 801113c <_kill_r+0x1c>
 801113a:	6023      	str	r3, [r4, #0]
 801113c:	bd38      	pop	{r3, r4, r5, pc}
 801113e:	bf00      	nop
 8011140:	2000d118 	.word	0x2000d118

08011144 <_getpid_r>:
 8011144:	f7f0 bb38 	b.w	80017b8 <_getpid>

08011148 <_init>:
 8011148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801114a:	bf00      	nop
 801114c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801114e:	bc08      	pop	{r3}
 8011150:	469e      	mov	lr, r3
 8011152:	4770      	bx	lr

08011154 <_fini>:
 8011154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011156:	bf00      	nop
 8011158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801115a:	bc08      	pop	{r3}
 801115c:	469e      	mov	lr, r3
 801115e:	4770      	bx	lr
