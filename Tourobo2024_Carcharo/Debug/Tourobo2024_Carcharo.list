
Tourobo2024_Carcharo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010640  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023f4  08010840  08010840  00011840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c34  08012c34  000141cc  2**0
                  CONTENTS
  4 .ARM          00000008  08012c34  08012c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c3c  08012c3c  000141cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c3c  08012c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012c40  08012c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08012c44  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08012cd0  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08012d70  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d01c  200001cc  08012e10  000141cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000d1e8  08012e10  000141e8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000141cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028f9a  00000000  00000000  000141fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000700d  00000000  00000000  0003d194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020b8  00000000  00000000  000441a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001926  00000000  00000000  00046260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038deb  00000000  00000000  00047b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003327b  00000000  00000000  00080971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011c238  00000000  00000000  000b3bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001cfe24  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e3c  00000000  00000000  001cfe68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000089  00000000  00000000  001d8ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001cc 	.word	0x200001cc
 800021c:	00000000 	.word	0x00000000
 8000220:	08010828 	.word	0x08010828

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d0 	.word	0x200001d0
 800023c:	08010828 	.word	0x08010828

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <vApplicationGetIdleTaskMemory+0x2c>)
 80005e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <vApplicationGetIdleTaskMemory+0x30>)
 80005e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ee:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	200001e8 	.word	0x200001e8
 8000600:	2000023c 	.word	0x2000023c
 8000604:	00000000 	.word	0x00000000

08000608 <HAL_CAN_RxFifo0MsgPendingCallback>:
float Kd = 0.00;
float f_i = 0.5f;	//for feedforwared
float f_j = 0.1f;	//for feedforwared

// CAN受信コールバック関数
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b09c      	sub	sp, #112	@ 0x70
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan2) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4aa1      	ldr	r2, [pc, #644]	@ (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 823c 	bne.w	8000a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x48a>
		CAN_RxHeaderTypeDef RxHeader;
		uint8_t RxData[8];
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800061a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800061e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000622:	2100      	movs	r1, #0
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f001 fd00 	bl	800202a <HAL_CAN_GetRxMessage>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	f040 8230 	bne.w	8000a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x48a>
			switch(RxHeader.StdId & 0x7F0) {
 8000632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000634:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8000638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800063c:	f000 8224 	beq.w	8000a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x480>
 8000640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000644:	f200 8222 	bhi.w	8000a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x484>
 8000648:	2b80      	cmp	r3, #128	@ 0x80
 800064a:	d004      	beq.n	8000656 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
 800064c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000650:	f000 81d5 	beq.w	80009fe <HAL_CAN_RxFifo0MsgPendingCallback+0x3f6>
				Ki = 0.005 * (float)adcVal[1] / 256;
				// D Gain
				Kd = 0.01 * (float)adcVal[2] / 256;
				break;
			default:
				break;
 8000654:	e21a      	b.n	8000a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x484>
				id = RxHeader.StdId - 0x080;
 8000656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000658:	3b80      	subs	r3, #128	@ 0x80
 800065a:	4a90      	ldr	r2, [pc, #576]	@ (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 800065c:	6013      	str	r3, [r2, #0]
				dlc = RxHeader.DLC;
 800065e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000660:	4a8f      	ldr	r2, [pc, #572]	@ (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000662:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 4; i++) {
 8000664:	2300      	movs	r3, #0
 8000666:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000668:	e052      	b.n	8000710 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
					memcpy(&temp, &RxData[2 * i], sizeof(int16_t));
 800066a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000672:	4413      	add	r3, r2
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	b29b      	uxth	r3, r3
 8000678:	867b      	strh	r3, [r7, #50]	@ 0x32
					Robomaster[i].EncoderAngularVelocity = (float)temp / 100.0;
 800067a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800067e:	ee07 3a90 	vmov	s15, r3
 8000682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000686:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80008a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>
 800068a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800068e:	4986      	ldr	r1, [pc, #536]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000690:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000692:	4613      	mov	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	440b      	add	r3, r1
 800069c:	3310      	adds	r3, #16
 800069e:	edc3 7a00 	vstr	s15, [r3]
					angle[i] += Robomaster[i].EncoderAngularVelocity * 360 / 60 * 0.01;
 80006a2:	4a82      	ldr	r2, [pc, #520]	@ (80008ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80006a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	edd3 7a00 	vldr	s15, [r3]
 80006ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80006b2:	497d      	ldr	r1, [pc, #500]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80006b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	440b      	add	r3, r1
 80006c0:	3310      	adds	r3, #16
 80006c2:	edd3 7a00 	vldr	s15, [r3]
 80006c6:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80008b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>
 80006ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006ce:	eddf 5a79 	vldr	s11, [pc, #484]	@ 80008b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>
 80006d2:	eec7 7a25 	vdiv.f32	s15, s14, s11
 80006d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006da:	ed9f 5b6d 	vldr	d5, [pc, #436]	@ 8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>
 80006de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80006e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006ea:	4a70      	ldr	r2, [pc, #448]	@ (80008ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80006ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	edc3 7a00 	vstr	s15, [r3]
					Robomaster[i].Event = 1;
 80006f6:	496c      	ldr	r1, [pc, #432]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80006f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80006fa:	4613      	mov	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	440b      	add	r3, r1
 8000704:	330c      	adds	r3, #12
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 4; i++) {
 800070a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800070c:	3301      	adds	r3, #1
 800070e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000712:	2b03      	cmp	r3, #3
 8000714:	dda9      	ble.n	800066a <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
				for (int i = 0; i < 4; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800071a:	e11f      	b.n	800095c <HAL_CAN_RxFifo0MsgPendingCallback+0x354>
					if (Robomaster[i].Event == 1) {
 800071c:	4962      	ldr	r1, [pc, #392]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 800071e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	440b      	add	r3, r1
 800072a:	330c      	adds	r3, #12
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b01      	cmp	r3, #1
 8000730:	f040 8111 	bne.w	8000956 <HAL_CAN_RxFifo0MsgPendingCallback+0x34e>
						Robomaster[i].Event = 0;
 8000734:	495c      	ldr	r1, [pc, #368]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000736:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000738:	4613      	mov	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	440b      	add	r3, r1
 8000742:	330c      	adds	r3, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
						Robomaster[i].AngularVelocityError = Robomaster[i].TargetAngularVelocity - Robomaster[i].EncoderAngularVelocity;
 8000748:	4957      	ldr	r1, [pc, #348]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 800074a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	440b      	add	r3, r1
 8000756:	3314      	adds	r3, #20
 8000758:	ed93 7a00 	vldr	s14, [r3]
 800075c:	4952      	ldr	r1, [pc, #328]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 800075e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	440b      	add	r3, r1
 800076a:	3310      	adds	r3, #16
 800076c:	edd3 7a00 	vldr	s15, [r3]
 8000770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000774:	494c      	ldr	r1, [pc, #304]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000776:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000778:	4613      	mov	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	440b      	add	r3, r1
 8000782:	331c      	adds	r3, #28
 8000784:	edc3 7a00 	vstr	s15, [r3]
						Robomaster[i].Integral += (Robomaster[i].PreAngularVelocityError + Robomaster[i].AngularVelocityError) * 1.0 / 2.0;
 8000788:	4947      	ldr	r1, [pc, #284]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 800078a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	440b      	add	r3, r1
 8000796:	3324      	adds	r3, #36	@ 0x24
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007a0:	4941      	ldr	r1, [pc, #260]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80007a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	440b      	add	r3, r1
 80007ae:	3320      	adds	r3, #32
 80007b0:	ed93 7a00 	vldr	s14, [r3]
 80007b4:	493c      	ldr	r1, [pc, #240]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80007b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	440b      	add	r3, r1
 80007c2:	331c      	adds	r3, #28
 80007c4:	edd3 7a00 	vldr	s15, [r3]
 80007c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007cc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007d0:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 80007d4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80007d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007e0:	4931      	ldr	r1, [pc, #196]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80007e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	440b      	add	r3, r1
 80007ee:	3324      	adds	r3, #36	@ 0x24
 80007f0:	edc3 7a00 	vstr	s15, [r3]
						float control_val = Kp * Robomaster[i].AngularVelocityError + Ki * Robomaster[i].Integral + Kd * (Robomaster[i].AngularVelocityError - Robomaster[i].PreAngularVelocityError);
 80007f4:	492c      	ldr	r1, [pc, #176]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80007f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	331c      	adds	r3, #28
 8000804:	ed93 7a00 	vldr	s14, [r3]
 8000808:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 800080a:	edd3 7a00 	vldr	s15, [r3]
 800080e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000812:	4925      	ldr	r1, [pc, #148]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000814:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3324      	adds	r3, #36	@ 0x24
 8000822:	edd3 6a00 	vldr	s13, [r3]
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000828:	edd3 7a00 	vldr	s15, [r3]
 800082c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000834:	491c      	ldr	r1, [pc, #112]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000836:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	440b      	add	r3, r1
 8000842:	331c      	adds	r3, #28
 8000844:	edd3 6a00 	vldr	s13, [r3]
 8000848:	4917      	ldr	r1, [pc, #92]	@ (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 800084a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800084c:	4613      	mov	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	440b      	add	r3, r1
 8000856:	3320      	adds	r3, #32
 8000858:	edd3 7a00 	vldr	s15, [r3]
 800085c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000860:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000862:	edd3 7a00 	vldr	s15, [r3]
 8000866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800086a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800086e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
						if(control_val > 16383) {
 8000872:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000876:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80008c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>
 800087a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800087e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000882:	dd25      	ble.n	80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>
								control_val = 16383;
 8000884:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000886:	667b      	str	r3, [r7, #100]	@ 0x64
 8000888:	e02d      	b.n	80008e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x2de>
 800088a:	bf00      	nop
 800088c:	f3af 8000 	nop.w
 8000890:	47ae147b 	.word	0x47ae147b
 8000894:	3f847ae1 	.word	0x3f847ae1
 8000898:	2000123c 	.word	0x2000123c
 800089c:	20001290 	.word	0x20001290
 80008a0:	20001294 	.word	0x20001294
 80008a4:	42c80000 	.word	0x42c80000
 80008a8:	200013b0 	.word	0x200013b0
 80008ac:	200013a0 	.word	0x200013a0
 80008b0:	43b40000 	.word	0x43b40000
 80008b4:	42700000 	.word	0x42700000
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000004 	.word	0x20000004
 80008c0:	20001450 	.word	0x20001450
 80008c4:	467ffc00 	.word	0x467ffc00
 80008c8:	467ffc00 	.word	0x467ffc00
 80008cc:	c67ffc00 	.word	0xc67ffc00
						} else if(control_val < -16383) {
 80008d0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80008d4:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80008cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>
 80008d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008e0:	d501      	bpl.n	80008e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x2de>
								control_val = -16383;
 80008e2:	4b77      	ldr	r3, [pc, #476]	@ (8000ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b8>)
 80008e4:	667b      	str	r3, [r7, #100]	@ 0x64
						Robomaster[i].TargetTorque = -1 * (int16_t)control_val;
 80008e6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80008ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ee:	ee17 3a90 	vmov	r3, s15
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	425b      	negs	r3, r3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b218      	sxth	r0, r3
 80008fc:	4971      	ldr	r1, [pc, #452]	@ (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80008fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000900:	4613      	mov	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	440b      	add	r3, r1
 800090a:	4602      	mov	r2, r0
 800090c:	801a      	strh	r2, [r3, #0]
						Robomaster[i].PreTargetAngularVelocity = Robomaster[i].TargetAngularVelocity;
 800090e:	496d      	ldr	r1, [pc, #436]	@ (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 8000910:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	440b      	add	r3, r1
 800091c:	3314      	adds	r3, #20
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	4868      	ldr	r0, [pc, #416]	@ (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 8000922:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000924:	4613      	mov	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4403      	add	r3, r0
 800092e:	3318      	adds	r3, #24
 8000930:	6019      	str	r1, [r3, #0]
						Robomaster[i].PreAngularVelocityError = Robomaster[i].AngularVelocityError;
 8000932:	4964      	ldr	r1, [pc, #400]	@ (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 8000934:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	440b      	add	r3, r1
 8000940:	331c      	adds	r3, #28
 8000942:	6819      	ldr	r1, [r3, #0]
 8000944:	485f      	ldr	r0, [pc, #380]	@ (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 8000946:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	4403      	add	r3, r0
 8000952:	3320      	adds	r3, #32
 8000954:	6019      	str	r1, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8000956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000958:	3301      	adds	r3, #1
 800095a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800095c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800095e:	2b03      	cmp	r3, #3
 8000960:	f77f aedc 	ble.w	800071c <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
				if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2)) {
 8000964:	4858      	ldr	r0, [pc, #352]	@ (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 8000966:	f001 fb2b 	bl	8001fc0 <HAL_CAN_GetTxMailboxesFreeLevel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 808f 	beq.w	8000a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
					TxHeader.StdId = 0x200;
 8000972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000976:	61bb      	str	r3, [r7, #24]
					TxHeader.IDE = CAN_ID_STD;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
					TxHeader.RTR = CAN_RTR_DATA;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
					TxHeader.DLC = 8;
 8000980:	2308      	movs	r3, #8
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
					TxHeader.TransmitGlobalTime = DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
					uint8_t TxData[8] = { 0 };
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
					for (int i = 0; i < 4; i++) {
 8000992:	2300      	movs	r3, #0
 8000994:	663b      	str	r3, [r7, #96]	@ 0x60
 8000996:	e025      	b.n	80009e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3dc>
						TxData[2 * i] = Robomaster[i].TargetTorque >> 8;
 8000998:	494a      	ldr	r1, [pc, #296]	@ (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 800099a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800099c:	4613      	mov	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	440b      	add	r3, r1
 80009a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009aa:	121b      	asrs	r3, r3, #8
 80009ac:	b21a      	sxth	r2, r3
 80009ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	3370      	adds	r3, #112	@ 0x70
 80009b6:	443b      	add	r3, r7
 80009b8:	f803 2c60 	strb.w	r2, [r3, #-96]
						TxData[2 * i + 1] = Robomaster[i].TargetTorque & 0x00FF;
 80009bc:	4941      	ldr	r1, [pc, #260]	@ (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80009be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	440b      	add	r3, r1
 80009ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	3370      	adds	r3, #112	@ 0x70
 80009d8:	443b      	add	r3, r7
 80009da:	f803 2c60 	strb.w	r2, [r3, #-96]
					for (int i = 0; i < 4; i++) {
 80009de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80009e0:	3301      	adds	r3, #1
 80009e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80009e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	ddd6      	ble.n	8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0x390>
					HAL_CAN_AddTxMessage(&hcan2, &TxHeader, &TxData, &TxMailbox);
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	f107 0210 	add.w	r2, r7, #16
 80009f2:	f107 0118 	add.w	r1, r7, #24
 80009f6:	4834      	ldr	r0, [pc, #208]	@ (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 80009f8:	f001 fa12 	bl	8001e20 <HAL_CAN_AddTxMessage>
				break;
 80009fc:	e048      	b.n	8000a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
				memcpy(adcVal, RxData, 3 * sizeof(int16_t));
 80009fe:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000a02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a06:	2206      	movs	r2, #6
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f00f f8de 	bl	800fbca <memcpy>
				Kp = 40.0 * (float)adcVal[0] / 256;
 8000a0e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a1c:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>
 8000a20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a24:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a0>
 8000a28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a30:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c4>)
 8000a32:	edc3 7a00 	vstr	s15, [r3]
				Ki = 0.005 * (float)adcVal[1] / 256;
 8000a36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a44:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>
 8000a48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a4c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8000aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a0>
 8000a50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 8000a5a:	edc3 7a00 	vstr	s15, [r3]
				Kd = 0.01 * (float)adcVal[2] / 256;
 8000a5e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000a60:	ee07 3a90 	vmov	s15, r3
 8000a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a6c:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>
 8000a70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a74:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 8000aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a0>
 8000a78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 8000a82:	edc3 7a00 	vstr	s15, [r3]
				break;
 8000a86:	e004      	b.n	8000a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x48a>
				break;
 8000a88:	bf00      	nop
 8000a8a:	e002      	b.n	8000a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x48a>
				break;
 8000a8c:	bf00      	nop
 8000a8e:	e000      	b.n	8000a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x48a>
				break;
 8000a90:	bf00      	nop
			}
		}
	}
}
 8000a92:	bf00      	nop
 8000a94:	3770      	adds	r7, #112	@ 0x70
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	f3af 8000 	nop.w
 8000aa0:	00000000 	.word	0x00000000
 8000aa4:	40440000 	.word	0x40440000
 8000aa8:	00000000 	.word	0x00000000
 8000aac:	40700000 	.word	0x40700000
 8000ab0:	47ae147b 	.word	0x47ae147b
 8000ab4:	3f747ae1 	.word	0x3f747ae1
 8000ab8:	47ae147b 	.word	0x47ae147b
 8000abc:	3f847ae1 	.word	0x3f847ae1
 8000ac0:	c67ffc00 	.word	0xc67ffc00
 8000ac4:	200013b0 	.word	0x200013b0
 8000ac8:	2000123c 	.word	0x2000123c
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000004 	.word	0x20000004
 8000ad4:	20001450 	.word	0x20001450

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ade:	f000 ff16 	bl	800190e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae2:	f000 f81f 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae6:	f000 f8f7 	bl	8000cd8 <MX_GPIO_Init>
  MX_CAN2_Init();
 8000aea:	f000 f889 	bl	8000c00 <MX_CAN2_Init>
  MX_CAN3_Init();
 8000aee:	f000 f8bd 	bl	8000c6c <MX_CAN3_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <main+0x44>)
 8000af4:	1d3c      	adds	r4, r7, #4
 8000af6:	461d      	mov	r5, r3
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fa04 	bl	8005f16 <osThreadCreate>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a03      	ldr	r2, [pc, #12]	@ (8000b20 <main+0x48>)
 8000b12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b14:	f005 f9e8 	bl	8005ee8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <main+0x40>
 8000b1c:	0801084c 	.word	0x0801084c
 8000b20:	2000128c 	.word	0x2000128c

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	@ 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2234      	movs	r2, #52	@ 0x34
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00e ffd3 	bl	800fade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <SystemClock_Config+0xd4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000bf8 <SystemClock_Config+0xd4>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b28      	ldr	r3, [pc, #160]	@ (8000bf8 <SystemClock_Config+0xd4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <SystemClock_Config+0xd8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a25      	ldr	r2, [pc, #148]	@ (8000bfc <SystemClock_Config+0xd8>)
 8000b66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <SystemClock_Config+0xd8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b7c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b82:	2302      	movs	r3, #2
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b90:	23d8      	movs	r3, #216	@ 0xd8
 8000b92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b98:	2309      	movs	r3, #9
 8000b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 fb17 	bl	80041d8 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000bb0:	f000 fb12 	bl	80011d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bb4:	f003 fac0 	bl	8004138 <HAL_PWREx_EnableOverDrive>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bbe:	f000 fb0b 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2107      	movs	r1, #7
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fda7 	bl	8004734 <HAL_RCC_ClockConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000bec:	f000 faf4 	bl	80011d8 <Error_Handler>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3750      	adds	r7, #80	@ 0x50
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c06:	4a18      	ldr	r2, [pc, #96]	@ (8000c68 <MX_CAN2_Init+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c1e:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000c22:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c26:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c2a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_CAN2_Init+0x64>)
 8000c52:	f000 feb9 	bl	80019c8 <HAL_CAN_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000c5c:	f000 fabc 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000123c 	.word	0x2000123c
 8000c68:	40006800 	.word	0x40006800

08000c6c <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000c70:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000c72:	4a18      	ldr	r2, [pc, #96]	@ (8000cd4 <MX_CAN3_Init+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 3;
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000c78:	2203      	movs	r2, #3
 8000c7a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000c8a:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000c8e:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000c92:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c96:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_CAN3_Init+0x64>)
 8000cbe:	f000 fe83 	bl	80019c8 <HAL_CAN_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000cc8:	f000 fa86 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20001264 	.word	0x20001264
 8000cd4:	40003400 	.word	0x40003400

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	@ 0x30
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b4f      	ldr	r3, [pc, #316]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a4e      	ldr	r2, [pc, #312]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d06:	4b49      	ldr	r3, [pc, #292]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a48      	ldr	r2, [pc, #288]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d0c:	f043 0320 	orr.w	r3, r3, #32
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b46      	ldr	r3, [pc, #280]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	4b43      	ldr	r3, [pc, #268]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a42      	ldr	r2, [pc, #264]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b40      	ldr	r3, [pc, #256]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b3d      	ldr	r3, [pc, #244]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a3c      	ldr	r2, [pc, #240]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b3a      	ldr	r3, [pc, #232]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4b37      	ldr	r3, [pc, #220]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a36      	ldr	r2, [pc, #216]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b34      	ldr	r3, [pc, #208]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d66:	4b31      	ldr	r3, [pc, #196]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a30      	ldr	r2, [pc, #192]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b2e      	ldr	r3, [pc, #184]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000d84:	482a      	ldr	r0, [pc, #168]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000d86:	f003 f9bd 	bl	8004104 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d8a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4824      	ldr	r0, [pc, #144]	@ (8000e34 <MX_GPIO_Init+0x15c>)
 8000da2:	f003 f803 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 PF3 PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000da6:	231e      	movs	r3, #30
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000daa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	481f      	ldr	r0, [pc, #124]	@ (8000e38 <MX_GPIO_Init+0x160>)
 8000dbc:	f002 fff6 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8000dc0:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dd2:	230e      	movs	r3, #14
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000dde:	f002 ffe5 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000de2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000df4:	2309      	movs	r3, #9
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000e00:	f002 ffd4 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e04:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000e1e:	f002 ffc5 	bl	8003dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e22:	bf00      	nop
 8000e24:	3730      	adds	r7, #48	@ 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40021800 	.word	0x40021800
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40021400 	.word	0x40021400

08000e3c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0be      	sub	sp, #248	@ 0xf8
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e44:	f004 f98e 	bl	8005164 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  // 移動平�?フィルタ初期�?
	for(uint8_t i=0u;i<4;i++){
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8000e4e:	e01a      	b.n	8000e86 <StartDefaultTask+0x4a>
		mean[i].size = 8;
 8000e50:	f897 20ef 	ldrb.w	r2, [r7, #239]	@ 0xef
 8000e54:	49d1      	ldr	r1, [pc, #836]	@ (800119c <StartDefaultTask+0x360>)
 8000e56:	4613      	mov	r3, r2
 8000e58:	015b      	lsls	r3, r3, #5
 8000e5a:	4413      	add	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	440b      	add	r3, r1
 8000e60:	3341      	adds	r3, #65	@ 0x41
 8000e62:	2208      	movs	r2, #8
 8000e64:	701a      	strb	r2, [r3, #0]
		mean[i].pointer = 0u;
 8000e66:	f897 20ef 	ldrb.w	r2, [r7, #239]	@ 0xef
 8000e6a:	49cc      	ldr	r1, [pc, #816]	@ (800119c <StartDefaultTask+0x360>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	015b      	lsls	r3, r3, #5
 8000e70:	4413      	add	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	440b      	add	r3, r1
 8000e76:	3340      	adds	r3, #64	@ 0x40
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0u;i<4;i++){
 8000e7c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8000e80:	3301      	adds	r3, #1
 8000e82:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8000e86:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d9e0      	bls.n	8000e50 <StartDefaultTask+0x14>
//	// Filter適用
//	HAL_CAN_ConfigFilter(&hcan2, &filter);

	/* CAN2 FIFO0 (For Encoder) */
	// ID and Mask Register
	fid = 0x080;
 8000e8e:	2380      	movs	r3, #128	@ 0x80
 8000e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	fmask = 0x7F0;
 8000e94:	f44f 63fe 	mov.w	r3, #2032	@ 0x7f0
 8000e98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	// CAN2のFilter Bankは14から
	filter.SlaveStartFilterBank = 14;
 8000e9c:	230e      	movs	r3, #14
 8000e9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	// Filter Bank 15に設定開?��?
	filter.FilterBank = 15;
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	// For FIFO0
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	// ID and Mask Bit Configure
	filter.FilterIdHigh = fid << 5;
 8000ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000ec4:	015b      	lsls	r3, r3, #5
 8000ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	filter.FilterIdLow = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	filter.FilterMaskIdHigh = fmask << 5;
 8000ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000ed4:	015b      	lsls	r3, r3, #5
 8000ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	filter.FilterMaskIdLow = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	// Filter適用
	HAL_CAN_ConfigFilter(&hcan2, &filter);
 8000ee0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	48ae      	ldr	r0, [pc, #696]	@ (80011a0 <StartDefaultTask+0x364>)
 8000ee8:	f000 fe6a 	bl	8001bc0 <HAL_CAN_ConfigFilter>

	/* CAN2 FIFO0 (For Robomaster Test) */
	// ID and Mask Register
	fid = 0x100;
 8000eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	fmask = 0x7F0;
 8000ef4:	f44f 63fe 	mov.w	r3, #2032	@ 0x7f0
 8000ef8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	// CAN2のFilter Bankは14から
	filter.SlaveStartFilterBank = 14;
 8000efc:	230e      	movs	r3, #14
 8000efe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	// Filter Bank 15に設定開?��?
	filter.FilterBank = 16;
 8000f02:	2310      	movs	r3, #16
 8000f04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	// For FIFO0
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	// ID and Mask Bit Configure
	filter.FilterIdHigh = fid << 5;
 8000f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f24:	015b      	lsls	r3, r3, #5
 8000f26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	filter.FilterIdLow = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	filter.FilterMaskIdHigh = fmask << 5;
 8000f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000f34:	015b      	lsls	r3, r3, #5
 8000f36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	filter.FilterMaskIdLow = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	// Filter適用
	HAL_CAN_ConfigFilter(&hcan2, &filter);
 8000f40:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f44:	4619      	mov	r1, r3
 8000f46:	4896      	ldr	r0, [pc, #600]	@ (80011a0 <StartDefaultTask+0x364>)
 8000f48:	f000 fe3a 	bl	8001bc0 <HAL_CAN_ConfigFilter>

	// CAN2 Start
	HAL_CAN_Start(&hcan2);
 8000f4c:	4894      	ldr	r0, [pc, #592]	@ (80011a0 <StartDefaultTask+0x364>)
 8000f4e:	f000 ff23 	bl	8001d98 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan3);
 8000f52:	4894      	ldr	r0, [pc, #592]	@ (80011a4 <StartDefaultTask+0x368>)
 8000f54:	f000 ff20 	bl	8001d98 <HAL_CAN_Start>
	// CAN2 FIFO0 and FIFO1 Enable Interrupt
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4891      	ldr	r0, [pc, #580]	@ (80011a0 <StartDefaultTask+0x364>)
 8000f5c:	f001 f987 	bl	800226e <HAL_CAN_ActivateNotification>

	for (int i = 0; i < 4; i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000f66:	e011      	b.n	8000f8c <StartDefaultTask+0x150>
		// Robomaster Initialize
		memset(&Robomaster[i], 0, sizeof(RobomasterTypedef));
 8000f68:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4a8c      	ldr	r2, [pc, #560]	@ (80011a8 <StartDefaultTask+0x36c>)
 8000f76:	4413      	add	r3, r2
 8000f78:	2228      	movs	r2, #40	@ 0x28
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00e fdae 	bl	800fade <memset>
	for (int i = 0; i < 4; i++) {
 8000f82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000f86:	3301      	adds	r3, #1
 8000f88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000f8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	dde9      	ble.n	8000f68 <StartDefaultTask+0x12c>
	}

	/* Configure UDP */
	// Data Buffer For UDP
	int16_t rxbuf[16] = { 0 };
 8000f94:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000f98:	2220      	movs	r2, #32
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00e fd9e 	bl	800fade <memset>
	int16_t txbuf[16] = { 0 };
 8000fa2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00e fd97 	bl	800fade <memset>
	uint8_t data_to_LedUator[2] = { 0,0 };
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
	uint8_t data_to_ArmUator[1] = { 0 };
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	//アドレスを宣???��?��??��?��?
	struct sockaddr_in rxAddr, txAddr;
	//ソケ???��?��??��?��?トを作�??
	int socket = lwip_socket(AF_INET, SOCK_DGRAM, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f008 ff0b 	bl	8009ddc <lwip_socket>
 8000fc6:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
	//アドレスのメモリを確???��?��??��?��?
	memset((char*) &txAddr, 0, sizeof(txAddr));
 8000fca:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fce:	2210      	movs	r2, #16
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f00e fd83 	bl	800fade <memset>
	memset((char*) &rxAddr, 0, sizeof(rxAddr));
 8000fd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fdc:	2210      	movs	r2, #16
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00e fd7c 	bl	800fade <memset>
	//アドレスの構�??体�????��?��??��?��???��?��??��?��?ータを定義
	rxAddr.sin_family = AF_INET; //プロトコルファミリの設???��?��??��?��?(IPv4に設???��?��??��?��?)
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	rxAddr.sin_len = sizeof(rxAddr); //アドレスの???��?��??��?��?ータサイズ
 8000fec:	2310      	movs	r3, #16
 8000fee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	rxAddr.sin_addr.s_addr = INADDR_ANY; //アドレスの設???��?��??��?��?(今回はすべてのアドレスを受け�????��?��??��?��れるためINADDR_ANY)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
	rxAddr.sin_port = lwip_htons(PC_PORT); //ポ�????��?��??��?��ト�????��?��??��?��???��?��??��?��????��?��??��?��?
 8000ff6:	f640 70a1 	movw	r0, #4001	@ 0xfa1
 8000ffa:	f009 fa53 	bl	800a4a4 <lwip_htons>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	txAddr.sin_family = AF_INET; //プロトコルファミリの???��?��??��?��????��?��??��?��?(IPv4に設???��?��??��?��?)
 8001004:	2302      	movs	r3, #2
 8001006:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	txAddr.sin_len = sizeof(txAddr); //アドレスの???��?��??��?��?ータのサイズ
 800100a:	2310      	movs	r3, #16
 800100c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	txAddr.sin_addr.s_addr = inet_addr(PC_ADDR); //アドレスの設???��?��??��?��?
 8001010:	4866      	ldr	r0, [pc, #408]	@ (80011ac <StartDefaultTask+0x370>)
 8001012:	f00d f9fa 	bl	800e40a <ipaddr_addr>
 8001016:	4603      	mov	r3, r0
 8001018:	64bb      	str	r3, [r7, #72]	@ 0x48
	txAddr.sin_port = lwip_htons(PC_PORT); //ポ�????��?��??��?��ト�????��?��??��?��???��?��??��?��????��?��??��?��?
 800101a:	f640 70a1 	movw	r0, #4001	@ 0xfa1
 800101e:	f009 fa41 	bl	800a4a4 <lwip_htons>
 8001022:	4603      	mov	r3, r0
 8001024:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	// whileでbindを�?ってみると??��?��?まく行く可能性??��?��?
//	(void) lwip_bind(socket, (struct sockaddr*) &rxAddr, sizeof(rxAddr)); //IPアドレスとソケ???��?��??��?��?トを紐付けて受信をできる状態に
	while(lwip_bind(socket, (struct sockaddr*) &rxAddr, sizeof(rxAddr)) < 0) {
 8001028:	bf00      	nop
 800102a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800102e:	2210      	movs	r2, #16
 8001030:	4619      	mov	r1, r3
 8001032:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001036:	f008 fdab 	bl	8009b90 <lwip_bind>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	dbf4      	blt.n	800102a <StartDefaultTask+0x1ee>

	}
	socklen_t n; //受信した???��?��??��?��?ータのサイズ
	socklen_t len = sizeof(rxAddr); //rxAddrのサイズ
 8001040:	2310      	movs	r3, #16
 8001042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4


	/* Infinite loop */
	for (;;) {
		lwip_sendto(socket, (uint8_t*) txbuf, sizeof(txbuf), 0, (struct sockaddr*) &txAddr, sizeof(txAddr)); //受信したら�????��?��??��?��信する
 8001046:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800104a:	2310      	movs	r3, #16
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2300      	movs	r3, #0
 8001056:	2220      	movs	r2, #32
 8001058:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800105c:	f008 fe06 	bl	8009c6c <lwip_sendto>
//		n = lwip_recvfrom(socket, (uint8_t*) rxbuf, sizeof(rxbuf), (int) NULL, (struct sockaddr*) &rxAddr, &len); //受信処???��?��??��?��?(blocking)

		// UDPから受け取った足回り�?ータ
		for(int i = 0; i < 4; i++) {
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001066:	e039      	b.n	80010dc <StartDefaultTask+0x2a0>
			// 減�?��?1:19を�??慮
//			Robomaster[i].TargetAngularVelocity = (float)rxbuf[i] * 19 / (-100);
			Robomaster[i].TargetAngularVelocity = (float)rxbuf[i] / (100);
 8001068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	33f0      	adds	r3, #240	@ 0xf0
 8001070:	443b      	add	r3, r7
 8001072:	f933 3c64 	ldrsh.w	r3, [r3, #-100]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107e:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 80011b0 <StartDefaultTask+0x374>
 8001082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001086:	4948      	ldr	r1, [pc, #288]	@ (80011a8 <StartDefaultTask+0x36c>)
 8001088:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	3314      	adds	r3, #20
 8001098:	edc3 7a00 	vstr	s15, [r3]
//			txbuf[i] = Robomaster[i].AngularVelocity * (-100);
			txbuf[i] = (int16_t)(Robomaster[i].EncoderAngularVelocity * 100);
 800109c:	4942      	ldr	r1, [pc, #264]	@ (80011a8 <StartDefaultTask+0x36c>)
 800109e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	3310      	adds	r3, #16
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80011b0 <StartDefaultTask+0x374>
 80010b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010be:	ee17 3a90 	vmov	r3, s15
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	33f0      	adds	r3, #240	@ 0xf0
 80010cc:	443b      	add	r3, r7
 80010ce:	f823 2c84 	strh.w	r2, [r3, #-132]
		for(int i = 0; i < 4; i++) {
 80010d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010d6:	3301      	adds	r3, #1
 80010d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80010dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	ddc1      	ble.n	8001068 <StartDefaultTask+0x22c>
		}

		rxbuf[4]=0b0000000000001111;
 80010e4:	230f      	movs	r3, #15
 80010e6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
		rxbuf[5]=0b0000000000000011;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
		rxbuf[6]=0b0000000000000000;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
		rxbuf[7]=0b0000000000000000;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

		data_to_LedUator[0] = (uint8_t)rxbuf[6];//for pantaSole
 80010fc:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	@ 0x98
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
		data_to_LedUator[1] = (uint8_t)rxbuf[7];//for Led
 8001106:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	@ 0x9a
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69


		data_to_ArmUator[0] = (uint8_t)rxbuf[4] << 2 | (uint8_t)rxbuf[5];//for nae ring Arm
 8001110:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8001114:	b2db      	uxtb	r3, r3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	b25a      	sxtb	r2, r3
 800111a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 800111e:	b25b      	sxtb	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b25b      	sxtb	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

		// send to shoki
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan3)) {
 800112a:	481e      	ldr	r0, [pc, #120]	@ (80011a4 <StartDefaultTask+0x368>)
 800112c:	f000 ff48 	bl	8001fc0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d014      	beq.n	8001160 <StartDefaultTask+0x324>
			// 送信用構�??体�??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��定義
			CAN_TxHeaderTypeDef TxHeader;
			// IDの設?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
			TxHeader.StdId = 0x201;
 8001136:	f240 2301 	movw	r3, #513	@ 0x201
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			// 標準IDを使用
			TxHeader.IDE = CAN_ID_STD;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
			// ?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?ータフレー?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��? or リモートフレー?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
			TxHeader.RTR = CAN_RTR_DATA;
 8001140:	2300      	movs	r3, #0
 8001142:	63bb      	str	r3, [r7, #56]	@ 0x38
			// ?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?ータ長?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��? [byte]
			TxHeader.DLC = 8;
 8001144:	2308      	movs	r3, #8
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
			// タイ?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?スタン?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
			TxHeader.TransmitGlobalTime = DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

			// 送信に使ったTxMailboxが�??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��納される
			uint32_t TxMailbox;
			// メ?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?セージ送信
			HAL_CAN_AddTxMessage(&hcan3, &TxHeader, data_to_LedUator, &TxMailbox);
 800114e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001152:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001156:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800115a:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <StartDefaultTask+0x368>)
 800115c:	f000 fe60 	bl	8001e20 <HAL_CAN_AddTxMessage>
		}

		// send to uator
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan3)) {
 8001160:	4810      	ldr	r0, [pc, #64]	@ (80011a4 <StartDefaultTask+0x368>)
 8001162:	f000 ff2d 	bl	8001fc0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	f43f af6c 	beq.w	8001046 <StartDefaultTask+0x20a>
			// 送信用構�??体�??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��定義
			CAN_TxHeaderTypeDef TxHeader;
			// IDの設?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
			TxHeader.StdId = 0x401;
 800116e:	f240 4301 	movw	r3, #1025	@ 0x401
 8001172:	613b      	str	r3, [r7, #16]
			// 標準IDを使用
			TxHeader.IDE = CAN_ID_STD;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
			// ?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?ータフレー?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��? or リモートフレー?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
			TxHeader.RTR = CAN_RTR_DATA;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
			// ?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?ータ長?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��? [byte]
			TxHeader.DLC = 8;
 800117c:	2308      	movs	r3, #8
 800117e:	623b      	str	r3, [r7, #32]
			// タイ?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?スタン?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
			TxHeader.TransmitGlobalTime = DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			// 送信に使ったTxMailboxが�??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��納される
			uint32_t TxMailbox;
			// メ?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?セージ送信
			HAL_CAN_AddTxMessage(&hcan3, &TxHeader, data_to_ArmUator, &TxMailbox);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800118e:	f107 0110 	add.w	r1, r7, #16
 8001192:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <StartDefaultTask+0x368>)
 8001194:	f000 fe44 	bl	8001e20 <HAL_CAN_AddTxMessage>
		lwip_sendto(socket, (uint8_t*) txbuf, sizeof(txbuf), 0, (struct sockaddr*) &txAddr, sizeof(txAddr)); //受信したら�????��?��??��?��信する
 8001198:	e755      	b.n	8001046 <StartDefaultTask+0x20a>
 800119a:	bf00      	nop
 800119c:	20001298 	.word	0x20001298
 80011a0:	2000123c 	.word	0x2000123c
 80011a4:	20001264 	.word	0x20001264
 80011a8:	200013b0 	.word	0x200013b0
 80011ac:	08010868 	.word	0x08010868
 80011b0:	42c80000 	.word	0x42c80000

080011b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011c6:	f000 fbaf 	bl	8001928 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40002000 	.word	0x40002000

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <HAL_MspInit+0x4c>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	210f      	movs	r1, #15
 800121e:	f06f 0001 	mvn.w	r0, #1
 8001222:	f001 fb31 	bl	8002888 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	@ 0x30
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a40      	ldr	r2, [pc, #256]	@ (8001354 <HAL_CAN_MspInit+0x120>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d144      	bne.n	80012e0 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001256:	4b40      	ldr	r3, [pc, #256]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	4a3f      	ldr	r2, [pc, #252]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 800125c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001260:	6413      	str	r3, [r2, #64]	@ 0x40
 8001262:	4b3d      	ldr	r3, [pc, #244]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800126e:	4b3a      	ldr	r3, [pc, #232]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	4a39      	ldr	r2, [pc, #228]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 8001274:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001278:	6413      	str	r3, [r2, #64]	@ 0x40
 800127a:	4b37      	ldr	r3, [pc, #220]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a33      	ldr	r2, [pc, #204]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800129e:	2360      	movs	r3, #96	@ 0x60
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80012ae:	2309      	movs	r3, #9
 80012b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	4828      	ldr	r0, [pc, #160]	@ (800135c <HAL_CAN_MspInit+0x128>)
 80012ba:	f002 fd77 	bl	8003dac <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2105      	movs	r1, #5
 80012c2:	2040      	movs	r0, #64	@ 0x40
 80012c4:	f001 fae0 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80012c8:	2040      	movs	r0, #64	@ 0x40
 80012ca:	f001 faf9 	bl	80028c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2105      	movs	r1, #5
 80012d2:	2041      	movs	r0, #65	@ 0x41
 80012d4:	f001 fad8 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80012d8:	2041      	movs	r0, #65	@ 0x41
 80012da:	f001 faf1 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 80012de:	e035      	b.n	800134c <HAL_CAN_MspInit+0x118>
  else if(hcan->Instance==CAN3)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001360 <HAL_CAN_MspInit+0x12c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d130      	bne.n	800134c <HAL_CAN_MspInit+0x118>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 80012f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a14      	ldr	r2, [pc, #80]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_CAN_MspInit+0x124>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800131a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800132c:	230b      	movs	r3, #11
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	@ (8001364 <HAL_CAN_MspInit+0x130>)
 8001338:	f002 fd38 	bl	8003dac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 5, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2105      	movs	r1, #5
 8001340:	206a      	movs	r0, #106	@ 0x6a
 8001342:	f001 faa1 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 8001346:	206a      	movs	r0, #106	@ 0x6a
 8001348:	f001 faba 	bl	80028c0 <HAL_NVIC_EnableIRQ>
}
 800134c:	bf00      	nop
 800134e:	3730      	adds	r7, #48	@ 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40006800 	.word	0x40006800
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400
 8001360:	40003400 	.word	0x40003400
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	@ 0x38
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001378:	4b33      	ldr	r3, [pc, #204]	@ (8001448 <HAL_InitTick+0xe0>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	4a32      	ldr	r2, [pc, #200]	@ (8001448 <HAL_InitTick+0xe0>)
 800137e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001382:	6413      	str	r3, [r2, #64]	@ 0x40
 8001384:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <HAL_InitTick+0xe0>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001390:	f107 0210 	add.w	r2, r7, #16
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fbdc 	bl	8004b58 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013aa:	f003 fbc1 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80013ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80013b0:	e004      	b.n	80013bc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013b2:	f003 fbbd 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013be:	4a23      	ldr	r2, [pc, #140]	@ (800144c <HAL_InitTick+0xe4>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	3b01      	subs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_InitTick+0xe8>)
 80013cc:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <HAL_InitTick+0xec>)
 80013ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <HAL_InitTick+0xe8>)
 80013d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013d6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_InitTick+0xe8>)
 80013da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013dc:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <HAL_InitTick+0xe8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_InitTick+0xe8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_InitTick+0xe8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80013f0:	4817      	ldr	r0, [pc, #92]	@ (8001450 <HAL_InitTick+0xe8>)
 80013f2:	f003 fbe3 	bl	8004bbc <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11b      	bne.n	800143c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001404:	4812      	ldr	r0, [pc, #72]	@ (8001450 <HAL_InitTick+0xe8>)
 8001406:	f003 fc3b 	bl	8004c80 <HAL_TIM_Base_Start_IT>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001414:	2b00      	cmp	r3, #0
 8001416:	d111      	bne.n	800143c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001418:	202d      	movs	r0, #45	@ 0x2d
 800141a:	f001 fa51 	bl	80028c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d808      	bhi.n	8001436 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	202d      	movs	r0, #45	@ 0x2d
 800142a:	f001 fa2d 	bl	8002888 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_InitTick+0xf0>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e002      	b.n	800143c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800143c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001440:	4618      	mov	r0, r3
 8001442:	3738      	adds	r7, #56	@ 0x38
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	431bde83 	.word	0x431bde83
 8001450:	20001454 	.word	0x20001454
 8001454:	40002000 	.word	0x40002000
 8001458:	2000000c 	.word	0x2000000c

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800149a:	f003 fc69 	bl	8004d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20001454 	.word	0x20001454

080014a8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <ETH_IRQHandler+0x10>)
 80014ae:	f001 fda3 	bl	8002ff8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005e88 	.word	0x20005e88

080014bc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <CAN2_RX0_IRQHandler+0x10>)
 80014c2:	f000 fefa 	bl	80022ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000123c 	.word	0x2000123c

080014d0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <CAN2_RX1_IRQHandler+0x10>)
 80014d6:	f000 fef0 	bl	80022ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000123c 	.word	0x2000123c

080014e4 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <CAN3_RX1_IRQHandler+0x10>)
 80014ea:	f000 fee6 	bl	80022ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001264 	.word	0x20001264

080014f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return 1;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_kill>:

int _kill(int pid, int sig)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001512:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <_kill+0x20>)
 8001514:	2216      	movs	r2, #22
 8001516:	601a      	str	r2, [r3, #0]
  return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	2000d098 	.word	0x2000d098

0800152c <_exit>:

void _exit (int status)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ffe5 	bl	8001508 <_kill>
  while (1) {}    /* Make sure we hang here */
 800153e:	bf00      	nop
 8001540:	e7fd      	b.n	800153e <_exit+0x12>

08001542 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e00a      	b.n	800156a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001554:	f3af 8000 	nop.w
 8001558:	4601      	mov	r1, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	60ba      	str	r2, [r7, #8]
 8001560:	b2ca      	uxtb	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	dbf0      	blt.n	8001554 <_read+0x12>
  }

  return len;
 8001572:	687b      	ldr	r3, [r7, #4]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e009      	b.n	80015a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	60ba      	str	r2, [r7, #8]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbf1      	blt.n	800158e <_write+0x12>
  }
  return len;
 80015aa:	687b      	ldr	r3, [r7, #4]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_close>:

int _close(int file)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015dc:	605a      	str	r2, [r3, #4]
  return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_isatty>:

int _isatty(int file)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d205      	bcs.n	8001658 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <_sbrk+0x6c>)
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	20080000 	.word	0x20080000
 800167c:	00000400 	.word	0x00000400
 8001680:	200014a0 	.word	0x200014a0
 8001684:	2000d1e8 	.word	0x2000d1e8
 8001688:	2000d098 	.word	0x2000d098

0800168c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <SystemInit+0x20>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <SystemInit+0x20>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b4:	480d      	ldr	r0, [pc, #52]	@ (80016ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b6:	490e      	ldr	r1, [pc, #56]	@ (80016f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b8:	4a0e      	ldr	r2, [pc, #56]	@ (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016cc:	4c0b      	ldr	r4, [pc, #44]	@ (80016fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016da:	f7ff ffd7 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f00e fa4d 	bl	800fb7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff f9f9 	bl	8000ad8 <main>
  bx  lr    
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80016f4:	08012c44 	.word	0x08012c44
  ldr r2, =_sbss
 80016f8:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80016fc:	2000d1e8 	.word	0x2000d1e8

08001700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC_IRQHandler>

08001702 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <LAN8742_RegisterBusIO+0x28>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <LAN8742_RegisterBusIO+0x28>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <LAN8742_RegisterBusIO+0x28>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e014      	b.n	800175a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d139      	bne.n	80017f6 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e01c      	b.n	80017d6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f107 020c 	add.w	r2, r7, #12
 80017a4:	2112      	movs	r1, #18
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	4798      	blx	r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da03      	bge.n	80017b8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80017b0:	f06f 0304 	mvn.w	r3, #4
 80017b4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80017b6:	e00b      	b.n	80017d0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d105      	bne.n	80017d0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
         break;
 80017ce:	e005      	b.n	80017dc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b1f      	cmp	r3, #31
 80017da:	d9df      	bls.n	800179c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b1f      	cmp	r3, #31
 80017e2:	d902      	bls.n	80017ea <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80017e4:	f06f 0302 	mvn.w	r3, #2
 80017e8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80017f6:	693b      	ldr	r3, [r7, #16]
 }
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6810      	ldr	r0, [r2, #0]
 8001814:	f107 020c 	add.w	r2, r7, #12
 8001818:	2101      	movs	r1, #1
 800181a:	4798      	blx	r3
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	da02      	bge.n	8001828 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001822:	f06f 0304 	mvn.w	r3, #4
 8001826:	e06e      	b.n	8001906 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6810      	ldr	r0, [r2, #0]
 8001830:	f107 020c 	add.w	r2, r7, #12
 8001834:	2101      	movs	r1, #1
 8001836:	4798      	blx	r3
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	da02      	bge.n	8001844 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800183e:	f06f 0304 	mvn.w	r3, #4
 8001842:	e060      	b.n	8001906 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800184e:	2301      	movs	r3, #1
 8001850:	e059      	b.n	8001906 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6810      	ldr	r0, [r2, #0]
 800185a:	f107 020c 	add.w	r2, r7, #12
 800185e:	2100      	movs	r1, #0
 8001860:	4798      	blx	r3
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	da02      	bge.n	800186e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001868:	f06f 0304 	mvn.w	r3, #4
 800186c:	e04b      	b.n	8001906 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d11b      	bne.n	80018b0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d006      	beq.n	8001890 <LAN8742_GetLinkState+0x90>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800188c:	2302      	movs	r3, #2
 800188e:	e03a      	b.n	8001906 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800189a:	2303      	movs	r3, #3
 800189c:	e033      	b.n	8001906 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018a8:	2304      	movs	r3, #4
 80018aa:	e02c      	b.n	8001906 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018ac:	2305      	movs	r3, #5
 80018ae:	e02a      	b.n	8001906 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6810      	ldr	r0, [r2, #0]
 80018b8:	f107 020c 	add.w	r2, r7, #12
 80018bc:	211f      	movs	r1, #31
 80018be:	4798      	blx	r3
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da02      	bge.n	80018cc <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80018c6:	f06f 0304 	mvn.w	r3, #4
 80018ca:	e01c      	b.n	8001906 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80018d6:	2306      	movs	r3, #6
 80018d8:	e015      	b.n	8001906 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 031c 	and.w	r3, r3, #28
 80018e0:	2b18      	cmp	r3, #24
 80018e2:	d101      	bne.n	80018e8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018e4:	2302      	movs	r3, #2
 80018e6:	e00e      	b.n	8001906 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 031c 	and.w	r3, r3, #28
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d101      	bne.n	80018f6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e007      	b.n	8001906 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f003 031c 	and.w	r3, r3, #28
 80018fc:	2b14      	cmp	r3, #20
 80018fe:	d101      	bne.n	8001904 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001900:	2304      	movs	r3, #4
 8001902:	e000      	b.n	8001906 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001904:	2305      	movs	r3, #5
    }
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001912:	2003      	movs	r0, #3
 8001914:	f000 ffad 	bl	8002872 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001918:	200f      	movs	r0, #15
 800191a:	f7ff fd25 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191e:	f7ff fc61 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000010 	.word	0x20000010
 800194c:	200014a4 	.word	0x200014a4

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200014a4 	.word	0x200014a4

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000010 	.word	0x20000010

080019b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetREVID+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0c1b      	lsrs	r3, r3, #16
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e0042000 	.word	0xe0042000

080019c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0ed      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fc24 	bl	8001234 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff ffa8 	bl	8001950 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a02:	e012      	b.n	8001a2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a04:	f7ff ffa4 	bl	8001950 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b0a      	cmp	r3, #10
 8001a10:	d90b      	bls.n	8001a2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2205      	movs	r2, #5
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0c5      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0e5      	beq.n	8001a04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0202 	bic.w	r2, r2, #2
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff ff82 	bl	8001950 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a4e:	e012      	b.n	8001a76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a50:	f7ff ff7e 	bl	8001950 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d90b      	bls.n	8001a76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e09f      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e5      	bne.n	8001a50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7e1b      	ldrb	r3, [r3, #24]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7e5b      	ldrb	r3, [r3, #25]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e9b      	ldrb	r3, [r3, #26]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0220 	bic.w	r2, r2, #32
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7edb      	ldrb	r3, [r3, #27]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0210 	bic.w	r2, r2, #16
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0210 	orr.w	r2, r2, #16
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7f1b      	ldrb	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0208 	orr.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0208 	bic.w	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7f5b      	ldrb	r3, [r3, #29]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0204 	orr.w	r2, r2, #4
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0204 	bic.w	r2, r2, #4
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	ea42 0103 	orr.w	r1, r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd8:	7cfb      	ldrb	r3, [r7, #19]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d003      	beq.n	8001be6 <HAL_CAN_ConfigFilter+0x26>
 8001bde:	7cfb      	ldrb	r3, [r7, #19]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	f040 80c7 	bne.w	8001d74 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a69      	ldr	r2, [pc, #420]	@ (8001d90 <HAL_CAN_ConfigFilter+0x1d0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d001      	beq.n	8001bf4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001bf0:	4b68      	ldr	r3, [pc, #416]	@ (8001d94 <HAL_CAN_ConfigFilter+0x1d4>)
 8001bf2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	4a63      	ldr	r2, [pc, #396]	@ (8001d94 <HAL_CAN_ConfigFilter+0x1d4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c12:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2201      	movs	r2, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d123      	bne.n	8001ca2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	401a      	ands	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3248      	adds	r2, #72	@ 0x48
 8001c82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c98:	6979      	ldr	r1, [r7, #20]
 8001c9a:	3348      	adds	r3, #72	@ 0x48
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d122      	bne.n	8001cf0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3248      	adds	r2, #72	@ 0x48
 8001cd0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ce4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ce6:	6979      	ldr	r1, [r7, #20]
 8001ce8:	3348      	adds	r3, #72	@ 0x48
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d0a:	e007      	b.n	8001d1c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d36:	e007      	b.n	8001d48 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d66:	f023 0201 	bic.w	r2, r3, #1
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e006      	b.n	8001d82 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
  }
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40003400 	.word	0x40003400
 8001d94:	40006400 	.word	0x40006400

08001d98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d12e      	bne.n	8001e0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc4:	f7ff fdc4 	bl	8001950 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dca:	e012      	b.n	8001df2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dcc:	f7ff fdc0 	bl	8001950 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d90b      	bls.n	8001df2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2205      	movs	r2, #5
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e012      	b.n	8001e18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e5      	bne.n	8001dcc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e006      	b.n	8001e18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
  }
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e34:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e3e:	7ffb      	ldrb	r3, [r7, #31]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d003      	beq.n	8001e4c <HAL_CAN_AddTxMessage+0x2c>
 8001e44:	7ffb      	ldrb	r3, [r7, #31]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	f040 80ad 	bne.w	8001fa6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8095 	beq.w	8001f96 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	0e1b      	lsrs	r3, r3, #24
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e76:	2201      	movs	r2, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10d      	bne.n	8001ea4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e92:	68f9      	ldr	r1, [r7, #12]
 8001e94:	6809      	ldr	r1, [r1, #0]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	440b      	add	r3, r1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e00f      	b.n	8001ec4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001eb8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3318      	adds	r3, #24
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6819      	ldr	r1, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3318      	adds	r3, #24
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	7d1b      	ldrb	r3, [r3, #20]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d111      	bne.n	8001f04 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	6811      	ldr	r1, [r2, #0]
 8001ef4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3318      	adds	r3, #24
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	440b      	add	r3, r1
 8001f00:	3304      	adds	r3, #4
 8001f02:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3307      	adds	r3, #7
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	061a      	lsls	r2, r3, #24
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3306      	adds	r3, #6
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3305      	adds	r3, #5
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	3204      	adds	r2, #4
 8001f24:	7812      	ldrb	r2, [r2, #0]
 8001f26:	4610      	mov	r0, r2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	6811      	ldr	r1, [r2, #0]
 8001f2c:	ea43 0200 	orr.w	r2, r3, r0
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001f3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3303      	adds	r3, #3
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	061a      	lsls	r2, r3, #24
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3302      	adds	r3, #2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	041b      	lsls	r3, r3, #16
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3301      	adds	r3, #1
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	4313      	orrs	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	7812      	ldrb	r2, [r2, #0]
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	6811      	ldr	r1, [r2, #0]
 8001f62:	ea43 0200 	orr.w	r2, r3, r0
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001f70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3318      	adds	r3, #24
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4413      	add	r3, r2
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6811      	ldr	r1, [r2, #0]
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3318      	adds	r3, #24
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	440b      	add	r3, r1
 8001f90:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e00e      	b.n	8001fb4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e006      	b.n	8001fb4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3724      	adds	r7, #36	@ 0x24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d002      	beq.n	8001fe0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001fda:	7afb      	ldrb	r3, [r7, #11]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d11d      	bne.n	800201c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3301      	adds	r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3301      	adds	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800202a:	b480      	push	{r7}
 800202c:	b087      	sub	sp, #28
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d003      	beq.n	800204e <HAL_CAN_GetRxMessage+0x24>
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	2b02      	cmp	r3, #2
 800204a:	f040 8103 	bne.w	8002254 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10e      	bne.n	8002072 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d116      	bne.n	8002090 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0f7      	b.n	8002262 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0e8      	b.n	8002262 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	331b      	adds	r3, #27
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	4413      	add	r3, r2
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0204 	and.w	r2, r3, #4
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	331b      	adds	r3, #27
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0d5b      	lsrs	r3, r3, #21
 80020be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	331b      	adds	r3, #27
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4413      	add	r3, r2
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	08db      	lsrs	r3, r3, #3
 80020d8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	331b      	adds	r3, #27
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0202 	and.w	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	331b      	adds	r3, #27
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	4413      	add	r3, r2
 8002102:	3304      	adds	r3, #4
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2208      	movs	r2, #8
 8002112:	611a      	str	r2, [r3, #16]
 8002114:	e00b      	b.n	800212e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	331b      	adds	r3, #27
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	4413      	add	r3, r2
 8002122:	3304      	adds	r3, #4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 020f 	and.w	r2, r3, #15
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	331b      	adds	r3, #27
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	4413      	add	r3, r2
 800213a:	3304      	adds	r3, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b2da      	uxtb	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	331b      	adds	r3, #27
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	4413      	add	r3, r2
 8002152:	3304      	adds	r3, #4
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	4413      	add	r3, r2
 8002168:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0a1a      	lsrs	r2, r3, #8
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0c1a      	lsrs	r2, r3, #16
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	3302      	adds	r3, #2
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0e1a      	lsrs	r2, r3, #24
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3303      	adds	r3, #3
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	3304      	adds	r3, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0a1a      	lsrs	r2, r3, #8
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	3305      	adds	r3, #5
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0c1a      	lsrs	r2, r3, #16
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3306      	adds	r3, #6
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e1a      	lsrs	r2, r3, #24
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3307      	adds	r3, #7
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d108      	bne.n	8002240 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0220 	orr.w	r2, r2, #32
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	e007      	b.n	8002250 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0220 	orr.w	r2, r2, #32
 800224e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e006      	b.n	8002262 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800227e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d002      	beq.n	800228c <HAL_CAN_ActivateNotification+0x1e>
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d109      	bne.n	80022a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6959      	ldr	r1, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	e006      	b.n	80022ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b08a      	sub	sp, #40	@ 0x28
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d07c      	beq.n	80023fa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d023      	beq.n	8002352 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f983 	bl	8002628 <HAL_CAN_TxMailbox0CompleteCallback>
 8002322:	e016      	b.n	8002352 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
 8002336:	e00c      	b.n	8002352 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
 800234a:	e002      	b.n	8002352 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f989 	bl	8002664 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d024      	beq.n	80023a6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002364:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f963 	bl	800263c <HAL_CAN_TxMailbox1CompleteCallback>
 8002376:	e016      	b.n	80023a6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
 800238a:	e00c      	b.n	80023a6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002392:	2b00      	cmp	r3, #0
 8002394:	d004      	beq.n	80023a0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
 800239e:	e002      	b.n	80023a6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f969 	bl	8002678 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d024      	beq.n	80023fa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f943 	bl	8002650 <HAL_CAN_TxMailbox2CompleteCallback>
 80023ca:	e016      	b.n	80023fa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023de:	e00c      	b.n	80023fa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f2:	e002      	b.n	80023fa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f949 	bl	800268c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00c      	beq.n	800241e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2210      	movs	r2, #16
 800241c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d006      	beq.n	8002440 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2208      	movs	r2, #8
 8002438:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f930 	bl	80026a0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fe f8d5 	bl	8000608 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00c      	beq.n	8002482 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2210      	movs	r2, #16
 8002480:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2208      	movs	r2, #8
 800249c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f912 	bl	80026c8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f8f9 	bl	80026b4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2210      	movs	r2, #16
 80024dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8fc 	bl	80026dc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2208      	movs	r2, #8
 80024fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8f5 	bl	80026f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d07b      	beq.n	8002608 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d072      	beq.n	8002600 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002574:	2b00      	cmp	r3, #0
 8002576:	d043      	beq.n	8002600 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d03e      	beq.n	8002600 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002588:	2b60      	cmp	r3, #96	@ 0x60
 800258a:	d02b      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x32a>
 800258c:	2b60      	cmp	r3, #96	@ 0x60
 800258e:	d82e      	bhi.n	80025ee <HAL_CAN_IRQHandler+0x334>
 8002590:	2b50      	cmp	r3, #80	@ 0x50
 8002592:	d022      	beq.n	80025da <HAL_CAN_IRQHandler+0x320>
 8002594:	2b50      	cmp	r3, #80	@ 0x50
 8002596:	d82a      	bhi.n	80025ee <HAL_CAN_IRQHandler+0x334>
 8002598:	2b40      	cmp	r3, #64	@ 0x40
 800259a:	d019      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x316>
 800259c:	2b40      	cmp	r3, #64	@ 0x40
 800259e:	d826      	bhi.n	80025ee <HAL_CAN_IRQHandler+0x334>
 80025a0:	2b30      	cmp	r3, #48	@ 0x30
 80025a2:	d010      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x30c>
 80025a4:	2b30      	cmp	r3, #48	@ 0x30
 80025a6:	d822      	bhi.n	80025ee <HAL_CAN_IRQHandler+0x334>
 80025a8:	2b10      	cmp	r3, #16
 80025aa:	d002      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x2f8>
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d005      	beq.n	80025bc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025b0:	e01d      	b.n	80025ee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ba:	e019      	b.n	80025f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	f043 0310 	orr.w	r3, r3, #16
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025c4:	e014      	b.n	80025f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	f043 0320 	orr.w	r3, r3, #32
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ce:	e00f      	b.n	80025f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025d8:	e00a      	b.n	80025f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025e2:	e005      	b.n	80025f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ec:	e000      	b.n	80025f0 <HAL_CAN_IRQHandler+0x336>
            break;
 80025ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80025fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2204      	movs	r2, #4
 8002606:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f872 	bl	8002704 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002620:	bf00      	nop
 8002622:	3728      	adds	r7, #40	@ 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <__NVIC_SetPriorityGrouping+0x40>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <__NVIC_SetPriorityGrouping+0x44>)
 8002742:	4313      	orrs	r3, r2
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <__NVIC_SetPriorityGrouping+0x40>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00
 800275c:	05fa0000 	.word	0x05fa0000

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4907      	ldr	r1, [pc, #28]	@ (80027b4 <__NVIC_EnableIRQ+0x38>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	@ (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	@ (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ff4c 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800289a:	f7ff ff61 	bl	8002760 <__NVIC_GetPriorityGrouping>
 800289e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	6978      	ldr	r0, [r7, #20]
 80028a6:	f7ff ffb1 	bl	800280c <NVIC_EncodePriority>
 80028aa:	4602      	mov	r2, r0
 80028ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff80 	bl	80027b8 <__NVIC_SetPriority>
}
 80028b8:	bf00      	nop
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff54 	bl	800277c <__NVIC_EnableIRQ>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e086      	b.n	80029fc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2223      	movs	r2, #35	@ 0x23
 80028fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f003 f875 	bl	80059f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002906:	4b3f      	ldr	r3, [pc, #252]	@ (8002a04 <HAL_ETH_Init+0x128>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a04 <HAL_ETH_Init+0x128>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002910:	6453      	str	r3, [r2, #68]	@ 0x44
 8002912:	4b3c      	ldr	r3, [pc, #240]	@ (8002a04 <HAL_ETH_Init+0x128>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800291e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a08 <HAL_ETH_Init+0x12c>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4a39      	ldr	r2, [pc, #228]	@ (8002a08 <HAL_ETH_Init+0x12c>)
 8002924:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002928:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800292a:	4b37      	ldr	r3, [pc, #220]	@ (8002a08 <HAL_ETH_Init+0x12c>)
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	4935      	ldr	r1, [pc, #212]	@ (8002a08 <HAL_ETH_Init+0x12c>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002938:	4b33      	ldr	r3, [pc, #204]	@ (8002a08 <HAL_ETH_Init+0x12c>)
 800293a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002952:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002954:	f7fe fffc 	bl	8001950 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800295a:	e011      	b.n	8002980 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800295c:	f7fe fff8 	bl	8001950 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800296a:	d909      	bls.n	8002980 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2204      	movs	r2, #4
 8002970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	22e0      	movs	r2, #224	@ 0xe0
 8002978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e03d      	b.n	80029fc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e4      	bne.n	800295c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 ff4e 	bl	8003834 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fff9 	bl	8003990 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 f84f 	bl	8003a42 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	461a      	mov	r2, r3
 80029aa:	2100      	movs	r1, #0
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 ffb7 	bl	8003920 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80029c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b0f      	ldr	r3, [pc, #60]	@ (8002a0c <HAL_ETH_Init+0x130>)
 80029d0:	430b      	orrs	r3, r1
 80029d2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80029e6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2210      	movs	r2, #16
 80029f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	00020060 	.word	0x00020060

08002a10 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d15f      	bne.n	8002ae2 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2223      	movs	r2, #35	@ 0x23
 8002a26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2204      	movs	r2, #4
 8002a34:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f9f6 	bl	8002e28 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a44:	2001      	movs	r0, #1
 8002a46:	f7fe ff8f 	bl	8001968 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a68:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a80:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fd73 	bl	800356e <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0208 	orr.w	r2, r2, #8
 8002a96:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7fe ff61 	bl	8001968 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0204 	orr.w	r2, r2, #4
 8002abc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac6:	69d9      	ldr	r1, [r3, #28]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <HAL_ETH_Start_IT+0xdc>)
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ad4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2223      	movs	r2, #35	@ 0x23
 8002ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	0001a0c1 	.word	0x0001a0c1

08002af0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afe:	2b23      	cmp	r3, #35	@ 0x23
 8002b00:	d16e      	bne.n	8002be0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2223      	movs	r2, #35	@ 0x23
 8002b06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b34      	ldr	r3, [pc, #208]	@ (8002bec <HAL_ETH_Stop_IT+0xfc>)
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b20:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b38:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	f023 0302 	bic.w	r3, r3, #2
 8002b4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b50:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0204 	bic.w	r2, r2, #4
 8002b60:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7fe fefc 	bl	8001968 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fcf8 	bl	800356e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0208 	bic.w	r2, r2, #8
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f7fe fee6 	bl	8001968 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e00e      	b.n	8002bc8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	3212      	adds	r2, #18
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d9ed      	bls.n	8002baa <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2210      	movs	r2, #16
 8002bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e000      	b.n	8002be2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	fffe5f3e 	.word	0xfffe5f3e

08002bf0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e045      	b.n	8002ca0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c1a:	2b23      	cmp	r3, #35	@ 0x23
 8002c1c:	d13f      	bne.n	8002c9e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002c26:	2201      	movs	r2, #1
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 ff78 	bl	8003b20 <ETH_Prepare_Tx_Descriptors>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3c:	f043 0202 	orr.w	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e02a      	b.n	8002ca0 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c4a:	f3bf 8f4f 	dsb	sy
}
 8002c4e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d904      	bls.n	8002c6c <HAL_ETH_Transmit_IT+0x7c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c66:	1f1a      	subs	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c86:	461a      	mov	r2, r3
 8002c88:	2304      	movs	r3, #4
 8002c8a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c94:	461a      	mov	r2, r3
 8002c96:	2300      	movs	r3, #0
 8002c98:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0a4      	b.n	8002e1e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cda:	2b23      	cmp	r3, #35	@ 0x23
 8002cdc:	d001      	beq.n	8002ce2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e09d      	b.n	8002e1e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	3212      	adds	r2, #18
 8002cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf8:	f1c3 0304 	rsb	r3, r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002cfe:	e066      	b.n	8002dce <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <HAL_ETH_ReadData+0x88>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d03c      	beq.n	8002daa <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002d52:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f003 f801 	bl	8005d90 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	441a      	add	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2200      	movs	r2, #0
 8002da8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d902      	bls.n	8002dbc <HAL_ETH_ReadData+0x114>
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3b04      	subs	r3, #4
 8002dba:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	3212      	adds	r2, #18
 8002dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db06      	blt.n	8002de4 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d202      	bcs.n	8002de4 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d08d      	beq.n	8002d00 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	441a      	add	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f815 	bl	8002e28 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d108      	bne.n	8002e1c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002e34:	2301      	movs	r3, #1
 8002e36:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e3c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	3212      	adds	r2, #18
 8002e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e48:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002e50:	e042      	b.n	8002ed8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d112      	bne.n	8002e80 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 ff66 	bl	8005d30 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	74fb      	strb	r3, [r7, #19]
 8002e6e:	e007      	b.n	8002e80 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	461a      	mov	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d028      	beq.n	8002ed8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <ETH_UpdateDescriptor+0x104>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	6053      	str	r3, [r2, #4]
 8002e9a:	e005      	b.n	8002ea8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d902      	bls.n	8002ec6 <ETH_UpdateDescriptor+0x9e>
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	3b04      	subs	r3, #4
 8002ec4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	3212      	adds	r2, #18
 8002ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed0:	617b      	str	r3, [r7, #20]
      desccount--;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <ETH_UpdateDescriptor+0xbc>
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1b6      	bne.n	8002e52 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d01a      	beq.n	8002f24 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ef8:	f3bf 8f5f 	dmb	sy
}
 8002efc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	18ca      	adds	r2, r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f16:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002f24:	bf00      	nop
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	80004000 	.word	0x80004000

08002f30 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002f4e:	e047      	b.n	8002fe0 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d902      	bls.n	8002f7c <HAL_ETH_ReleaseTxPacket+0x4c>
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	3b04      	subs	r3, #4
 8002f7a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002f80:	7bbb      	ldrb	r3, [r7, #14]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d02c      	beq.n	8002fe0 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68d9      	ldr	r1, [r3, #12]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	db1f      	blt.n	8002fdc <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 ff33 	bl	8005e14 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d902      	bls.n	8002fce <HAL_ETH_ReleaseTxPacket+0x9e>
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fda:	e001      	b.n	8002fe0 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_ETH_ReleaseTxPacket+0xbc>
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1b1      	bne.n	8002f50 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003006:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003020:	4b4b      	ldr	r3, [pc, #300]	@ (8003150 <HAL_ETH_IRQHandler+0x158>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <HAL_ETH_IRQHandler+0x56>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003042:	461a      	mov	r2, r3
 8003044:	4b43      	ldr	r3, [pc, #268]	@ (8003154 <HAL_ETH_IRQHandler+0x15c>)
 8003046:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f002 f9f9 	bl	8005440 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00f      	beq.n	8003078 <HAL_ETH_IRQHandler+0x80>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800306a:	461a      	mov	r2, r3
 800306c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003070:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f002 f9f4 	bl	8005460 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d042      	beq.n	8003108 <HAL_ETH_IRQHandler+0x110>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d03d      	beq.n	8003108 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003092:	f043 0208 	orr.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01a      	beq.n	80030dc <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	4b29      	ldr	r3, [pc, #164]	@ (8003158 <HAL_ETH_IRQHandler+0x160>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80030cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030d0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	22e0      	movs	r2, #224	@ 0xe0
 80030d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80030da:	e012      	b.n	8003102 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	f248 6380 	movw	r3, #34432	@ 0x8680
 80030ea:	4013      	ands	r3, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030fa:	461a      	mov	r2, r3
 80030fc:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003100:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f002 f9bc 	bl	8005480 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00e      	beq.n	8003130 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003118:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f81a 	bl	800315c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800313a:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_ETH_IRQHandler+0x158>)
 800313c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003140:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f814 	bl	8003170 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003148:	bf00      	nop
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40013c00 	.word	0x40013c00
 8003154:	00010040 	.word	0x00010040
 8003158:	007e2000 	.word	0x007e2000

0800315c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 031c 	and.w	r3, r3, #28
 80031a0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	02db      	lsls	r3, r3, #11
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	019b      	lsls	r3, r3, #6
 80031b2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0302 	bic.w	r3, r3, #2
 80031c2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80031d4:	f7fe fbbc 	bl	8001950 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031da:	e00d      	b.n	80031f8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80031dc:	f7fe fbb8 	bl	8001950 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ea:	d301      	bcc.n	80031f0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e010      	b.n	8003212 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ec      	bne.n	80031dc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	b29b      	uxth	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 031c 	and.w	r3, r3, #28
 8003236:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	02db      	lsls	r3, r3, #11
 800323c:	b29b      	uxth	r3, r3
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	019b      	lsls	r3, r3, #6
 8003248:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003274:	f7fe fb6c 	bl	8001950 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800327a:	e00d      	b.n	8003298 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800327c:	f7fe fb68 	bl	8001950 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328a:	d301      	bcc.n	8003290 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e009      	b.n	80032a4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1ec      	bne.n	800327c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0e6      	b.n	800348e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf14      	ite	ne
 80033da:	2301      	movne	r3, #1
 80033dc:	2300      	moveq	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	b29a      	uxth	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	bf14      	ite	ne
 8003462:	2301      	movne	r3, #1
 8003464:	2300      	moveq	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800347a:	2b00      	cmp	r3, #0
 800347c:	bf14      	ite	ne
 800347e:	2301      	movne	r3, #1
 8003480:	2300      	moveq	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00b      	b.n	80034c6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d105      	bne.n	80034c4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f87c 	bl	80035b8 <ETH_SetMACConfig>

    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 031c 	bic.w	r3, r3, #28
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80034e8:	f001 fb16 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 80034ec:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4a14      	ldr	r2, [pc, #80]	@ (8003544 <HAL_ETH_SetMDIOClockRange+0x74>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d804      	bhi.n	8003500 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f043 0308 	orr.w	r3, r3, #8
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e019      	b.n	8003534 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4a11      	ldr	r2, [pc, #68]	@ (8003548 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d204      	bcs.n	8003512 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f043 030c 	orr.w	r3, r3, #12
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e010      	b.n	8003534 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4a0d      	ldr	r2, [pc, #52]	@ (800354c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d90c      	bls.n	8003534 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4a0c      	ldr	r2, [pc, #48]	@ (8003550 <HAL_ETH_SetMDIOClockRange+0x80>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d804      	bhi.n	800352c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e003      	b.n	8003534 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f043 0310 	orr.w	r3, r3, #16
 8003532:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	611a      	str	r2, [r3, #16]
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	02160ebf 	.word	0x02160ebf
 8003548:	03938700 	.word	0x03938700
 800354c:	05f5e0ff 	.word	0x05f5e0ff
 8003550:	08f0d17f 	.word	0x08f0d17f

08003554 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800358c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003590:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800359e:	2001      	movs	r0, #1
 80035a0:	f7fe f9e2 	bl	8001968 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035ae:	6193      	str	r3, [r2, #24]
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4b53      	ldr	r3, [pc, #332]	@ (800371c <ETH_SetMACConfig+0x164>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	7b9b      	ldrb	r3, [r3, #14]
 80035d6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	7c12      	ldrb	r2, [r2, #16]
 80035dc:	2a00      	cmp	r2, #0
 80035de:	d102      	bne.n	80035e6 <ETH_SetMACConfig+0x2e>
 80035e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035e4:	e000      	b.n	80035e8 <ETH_SetMACConfig+0x30>
 80035e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80035e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	7c52      	ldrb	r2, [r2, #17]
 80035ee:	2a00      	cmp	r2, #0
 80035f0:	d102      	bne.n	80035f8 <ETH_SetMACConfig+0x40>
 80035f2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80035f6:	e000      	b.n	80035fa <ETH_SetMACConfig+0x42>
 80035f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003600:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	7fdb      	ldrb	r3, [r3, #31]
 8003606:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003608:	431a      	orrs	r2, r3
                        macconf->Speed |
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800360e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	7f92      	ldrb	r2, [r2, #30]
 8003614:	2a00      	cmp	r2, #0
 8003616:	d102      	bne.n	800361e <ETH_SetMACConfig+0x66>
 8003618:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800361c:	e000      	b.n	8003620 <ETH_SetMACConfig+0x68>
 800361e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003620:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	7f1b      	ldrb	r3, [r3, #28]
 8003626:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003628:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800362e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	791b      	ldrb	r3, [r3, #4]
 8003634:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003636:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800363e:	2a00      	cmp	r2, #0
 8003640:	d102      	bne.n	8003648 <ETH_SetMACConfig+0x90>
 8003642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003646:	e000      	b.n	800364a <ETH_SetMACConfig+0x92>
 8003648:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800364a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	7bdb      	ldrb	r3, [r3, #15]
 8003650:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003652:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003658:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003660:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003662:	4313      	orrs	r3, r2
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800367a:	2001      	movs	r0, #1
 800367c:	f7fe f974 	bl	8001968 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003696:	4013      	ands	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	d101      	bne.n	80036ae <ETH_SetMACConfig+0xf6>
 80036aa:	2280      	movs	r2, #128	@ 0x80
 80036ac:	e000      	b.n	80036b0 <ETH_SetMACConfig+0xf8>
 80036ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80036be:	2a01      	cmp	r2, #1
 80036c0:	d101      	bne.n	80036c6 <ETH_SetMACConfig+0x10e>
 80036c2:	2208      	movs	r2, #8
 80036c4:	e000      	b.n	80036c8 <ETH_SetMACConfig+0x110>
 80036c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80036c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80036d0:	2a01      	cmp	r2, #1
 80036d2:	d101      	bne.n	80036d8 <ETH_SetMACConfig+0x120>
 80036d4:	2204      	movs	r2, #4
 80036d6:	e000      	b.n	80036da <ETH_SetMACConfig+0x122>
 80036d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80036e2:	2a01      	cmp	r2, #1
 80036e4:	d101      	bne.n	80036ea <ETH_SetMACConfig+0x132>
 80036e6:	2202      	movs	r2, #2
 80036e8:	e000      	b.n	80036ec <ETH_SetMACConfig+0x134>
 80036ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036ec:	4313      	orrs	r3, r2
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003704:	2001      	movs	r0, #1
 8003706:	f7fe f92f 	bl	8001968 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	619a      	str	r2, [r3, #24]
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	fd20810f 	.word	0xfd20810f

08003720 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4b3d      	ldr	r3, [pc, #244]	@ (8003830 <ETH_SetDMAConfig+0x110>)
 800373a:	4013      	ands	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	7b1b      	ldrb	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <ETH_SetDMAConfig+0x2c>
 8003746:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800374a:	e000      	b.n	800374e <ETH_SetDMAConfig+0x2e>
 800374c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	7b5b      	ldrb	r3, [r3, #13]
 8003752:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003754:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	7f52      	ldrb	r2, [r2, #29]
 800375a:	2a00      	cmp	r2, #0
 800375c:	d102      	bne.n	8003764 <ETH_SetDMAConfig+0x44>
 800375e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003762:	e000      	b.n	8003766 <ETH_SetDMAConfig+0x46>
 8003764:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003766:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	7b9b      	ldrb	r3, [r3, #14]
 800376c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800376e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003774:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	7f1b      	ldrb	r3, [r3, #28]
 800377a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800377c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	7f9b      	ldrb	r3, [r3, #30]
 8003782:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003784:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800378a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003792:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003794:	4313      	orrs	r3, r2
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037a4:	461a      	mov	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037b6:	2001      	movs	r0, #1
 80037b8:	f7fe f8d6 	bl	8001968 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037c4:	461a      	mov	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	791b      	ldrb	r3, [r3, #4]
 80037ce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037d4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80037da:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80037e0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037e8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80037ea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80037f2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037f8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003802:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003806:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003814:	2001      	movs	r0, #1
 8003816:	f7fe f8a7 	bl	8001968 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6013      	str	r3, [r2, #0]
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	f8de3f23 	.word	0xf8de3f23

08003834 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b0a6      	sub	sp, #152	@ 0x98
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003842:	2301      	movs	r3, #1
 8003844:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003848:	2300      	movs	r3, #0
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800384c:	2300      	movs	r3, #0
 800384e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800386a:	2300      	movs	r3, #0
 800386c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003876:	2300      	movs	r3, #0
 8003878:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003880:	2300      	movs	r3, #0
 8003882:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003890:	2300      	movs	r3, #0
 8003892:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800389c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80038a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80038a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80038a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80038ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fe7f 	bl	80035b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80038be:	2301      	movs	r3, #1
 80038c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80038dc:	2300      	movs	r3, #0
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80038e6:	2301      	movs	r3, #1
 80038e8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80038ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80038f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80038f4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80038f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038fa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003902:	2300      	movs	r3, #0
 8003904:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800390a:	f107 0308 	add.w	r3, r7, #8
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff05 	bl	8003720 <ETH_SetDMAConfig>
}
 8003916:	bf00      	nop
 8003918:	3798      	adds	r7, #152	@ 0x98
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3305      	adds	r3, #5
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	3204      	adds	r2, #4
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <ETH_MACAddressConfig+0x68>)
 8003942:	4413      	add	r3, r2
 8003944:	461a      	mov	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3303      	adds	r3, #3
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	061a      	lsls	r2, r3, #24
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3302      	adds	r3, #2
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3301      	adds	r3, #1
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	4313      	orrs	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4b06      	ldr	r3, [pc, #24]	@ (800398c <ETH_MACAddressConfig+0x6c>)
 8003972:	4413      	add	r3, r2
 8003974:	461a      	mov	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	6013      	str	r3, [r2, #0]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40028040 	.word	0x40028040
 800398c:	40028044 	.word	0x40028044

08003990 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e03e      	b.n	8003a1c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68d9      	ldr	r1, [r3, #12]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	440b      	add	r3, r1
 80039ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2200      	movs	r2, #0
 80039ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2200      	movs	r2, #0
 80039c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	3206      	adds	r2, #6
 80039d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d80c      	bhi.n	8003a00 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68d9      	ldr	r1, [r3, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	440b      	add	r3, r1
 80039f8:	461a      	mov	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	e004      	b.n	8003a0a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	461a      	mov	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d9bd      	bls.n	800399e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a34:	611a      	str	r2, [r3, #16]
}
 8003a36:	bf00      	nop
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e048      	b.n	8003ae2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6919      	ldr	r1, [r3, #16]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	3212      	adds	r2, #18
 8003aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d80c      	bhi.n	8003ad2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6919      	ldr	r1, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	440b      	add	r3, r1
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	e004      	b.n	8003adc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d9b3      	bls.n	8003a50 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b12:	60da      	str	r2, [r3, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b091      	sub	sp, #68	@ 0x44
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3318      	adds	r3, #24
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b62:	d007      	beq.n	8003b74 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b68:	3304      	adds	r3, #4
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	e111      	b.n	8003d9c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	4b86      	ldr	r3, [pc, #536]	@ (8003da8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b92:	6852      	ldr	r2, [r2, #4]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003bfa:	e082      	b.n	8003d02 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c06:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e005      	b.n	8003c28 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d902      	bls.n	8003c3a <ETH_Prepare_Tx_Descriptors+0x11a>
 8003c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c36:	3b04      	subs	r3, #4
 8003c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c42:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c50:	d007      	beq.n	8003c62 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c56:	3304      	adds	r3, #4
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d029      	beq.n	8003cb6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c74:	e019      	b.n	8003caa <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003c76:	f3bf 8f5f 	dmb	sy
}
 8003c7a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d902      	bls.n	8003c9a <ETH_Prepare_Tx_Descriptors+0x17a>
 8003c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c96:	3b04      	subs	r3, #4
 8003c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003caa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d3e1      	bcc.n	8003c76 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e072      	b.n	8003d9c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	4b32      	ldr	r3, [pc, #200]	@ (8003da8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce2:	6852      	ldr	r2, [r2, #4]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cec:	3301      	adds	r3, #1
 8003cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003cf0:	f3bf 8f5f 	dmb	sy
}
 8003cf4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d00:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f47f af78 	bne.w	8003bfc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e005      	b.n	8003d2c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d36:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	6a3a      	ldr	r2, [r7, #32]
 8003d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003d42:	f3bf 8f5f 	dmb	sy
}
 8003d46:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d68:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6e:	613b      	str	r3, [r7, #16]
  return(result);
 8003d70:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	2301      	movs	r3, #1
 8003d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f383 8810 	msr	PRIMASK, r3
}
 8003d7e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d86:	4413      	add	r3, r2
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f383 8810 	msr	PRIMASK, r3
}
 8003d98:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3744      	adds	r7, #68	@ 0x44
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	ffffe000 	.word	0xffffe000

08003dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	@ 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e175      	b.n	80040b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003dcc:	2201      	movs	r2, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	f040 8164 	bne.w	80040b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d005      	beq.n	8003e02 <HAL_GPIO_Init+0x56>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d130      	bne.n	8003e64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 0201 	and.w	r2, r3, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d017      	beq.n	8003ea0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d123      	bne.n	8003ef4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	08da      	lsrs	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3208      	adds	r2, #8
 8003eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	220f      	movs	r2, #15
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	08da      	lsrs	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3208      	adds	r2, #8
 8003eee:	69b9      	ldr	r1, [r7, #24]
 8003ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0203 	and.w	r2, r3, #3
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80be 	beq.w	80040b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f36:	4b66      	ldr	r3, [pc, #408]	@ (80040d0 <HAL_GPIO_Init+0x324>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	4a65      	ldr	r2, [pc, #404]	@ (80040d0 <HAL_GPIO_Init+0x324>)
 8003f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f42:	4b63      	ldr	r3, [pc, #396]	@ (80040d0 <HAL_GPIO_Init+0x324>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f4e:	4a61      	ldr	r2, [pc, #388]	@ (80040d4 <HAL_GPIO_Init+0x328>)
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	3302      	adds	r3, #2
 8003f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	220f      	movs	r2, #15
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a58      	ldr	r2, [pc, #352]	@ (80040d8 <HAL_GPIO_Init+0x32c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d037      	beq.n	8003fea <HAL_GPIO_Init+0x23e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a57      	ldr	r2, [pc, #348]	@ (80040dc <HAL_GPIO_Init+0x330>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d031      	beq.n	8003fe6 <HAL_GPIO_Init+0x23a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a56      	ldr	r2, [pc, #344]	@ (80040e0 <HAL_GPIO_Init+0x334>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d02b      	beq.n	8003fe2 <HAL_GPIO_Init+0x236>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a55      	ldr	r2, [pc, #340]	@ (80040e4 <HAL_GPIO_Init+0x338>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d025      	beq.n	8003fde <HAL_GPIO_Init+0x232>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a54      	ldr	r2, [pc, #336]	@ (80040e8 <HAL_GPIO_Init+0x33c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01f      	beq.n	8003fda <HAL_GPIO_Init+0x22e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a53      	ldr	r2, [pc, #332]	@ (80040ec <HAL_GPIO_Init+0x340>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d019      	beq.n	8003fd6 <HAL_GPIO_Init+0x22a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a52      	ldr	r2, [pc, #328]	@ (80040f0 <HAL_GPIO_Init+0x344>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_GPIO_Init+0x226>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a51      	ldr	r2, [pc, #324]	@ (80040f4 <HAL_GPIO_Init+0x348>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00d      	beq.n	8003fce <HAL_GPIO_Init+0x222>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a50      	ldr	r2, [pc, #320]	@ (80040f8 <HAL_GPIO_Init+0x34c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <HAL_GPIO_Init+0x21e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80040fc <HAL_GPIO_Init+0x350>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_GPIO_Init+0x21a>
 8003fc2:	2309      	movs	r3, #9
 8003fc4:	e012      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fc6:	230a      	movs	r3, #10
 8003fc8:	e010      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	e00e      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fce:	2307      	movs	r3, #7
 8003fd0:	e00c      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fd2:	2306      	movs	r3, #6
 8003fd4:	e00a      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fd6:	2305      	movs	r3, #5
 8003fd8:	e008      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fda:	2304      	movs	r3, #4
 8003fdc:	e006      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e004      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e002      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_GPIO_Init+0x240>
 8003fea:	2300      	movs	r3, #0
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	f002 0203 	and.w	r2, r2, #3
 8003ff2:	0092      	lsls	r2, r2, #2
 8003ff4:	4093      	lsls	r3, r2
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ffc:	4935      	ldr	r1, [pc, #212]	@ (80040d4 <HAL_GPIO_Init+0x328>)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	089b      	lsrs	r3, r3, #2
 8004002:	3302      	adds	r3, #2
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800400a:	4b3d      	ldr	r3, [pc, #244]	@ (8004100 <HAL_GPIO_Init+0x354>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800402e:	4a34      	ldr	r2, [pc, #208]	@ (8004100 <HAL_GPIO_Init+0x354>)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004034:	4b32      	ldr	r3, [pc, #200]	@ (8004100 <HAL_GPIO_Init+0x354>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004058:	4a29      	ldr	r2, [pc, #164]	@ (8004100 <HAL_GPIO_Init+0x354>)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800405e:	4b28      	ldr	r3, [pc, #160]	@ (8004100 <HAL_GPIO_Init+0x354>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004082:	4a1f      	ldr	r2, [pc, #124]	@ (8004100 <HAL_GPIO_Init+0x354>)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004088:	4b1d      	ldr	r3, [pc, #116]	@ (8004100 <HAL_GPIO_Init+0x354>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ac:	4a14      	ldr	r2, [pc, #80]	@ (8004100 <HAL_GPIO_Init+0x354>)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3301      	adds	r3, #1
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b0f      	cmp	r3, #15
 80040bc:	f67f ae86 	bls.w	8003dcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	3724      	adds	r7, #36	@ 0x24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40013800 	.word	0x40013800
 80040d8:	40020000 	.word	0x40020000
 80040dc:	40020400 	.word	0x40020400
 80040e0:	40020800 	.word	0x40020800
 80040e4:	40020c00 	.word	0x40020c00
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40021400 	.word	0x40021400
 80040f0:	40021800 	.word	0x40021800
 80040f4:	40021c00 	.word	0x40021c00
 80040f8:	40022000 	.word	0x40022000
 80040fc:	40022400 	.word	0x40022400
 8004100:	40013c00 	.word	0x40013c00

08004104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
 8004110:	4613      	mov	r3, r2
 8004112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004114:	787b      	ldrb	r3, [r7, #1]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004120:	e003      	b.n	800412a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	041a      	lsls	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	619a      	str	r2, [r3, #24]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004142:	4b23      	ldr	r3, [pc, #140]	@ (80041d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	4a22      	ldr	r2, [pc, #136]	@ (80041d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800414c:	6413      	str	r3, [r2, #64]	@ 0x40
 800414e:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800415a:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004164:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004166:	f7fd fbf3 	bl	8001950 <HAL_GetTick>
 800416a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800416c:	e009      	b.n	8004182 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800416e:	f7fd fbef 	bl	8001950 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800417c:	d901      	bls.n	8004182 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e022      	b.n	80041c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004182:	4b14      	ldr	r3, [pc, #80]	@ (80041d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800418e:	d1ee      	bne.n	800416e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004190:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0f      	ldr	r2, [pc, #60]	@ (80041d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800419a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800419c:	f7fd fbd8 	bl	8001950 <HAL_GetTick>
 80041a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041a2:	e009      	b.n	80041b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041a4:	f7fd fbd4 	bl	8001950 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041b2:	d901      	bls.n	80041b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e007      	b.n	80041c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c4:	d1ee      	bne.n	80041a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40007000 	.word	0x40007000

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e29b      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8087 	beq.w	800430a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041fc:	4b96      	ldr	r3, [pc, #600]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 030c 	and.w	r3, r3, #12
 8004204:	2b04      	cmp	r3, #4
 8004206:	d00c      	beq.n	8004222 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004208:	4b93      	ldr	r3, [pc, #588]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 030c 	and.w	r3, r3, #12
 8004210:	2b08      	cmp	r3, #8
 8004212:	d112      	bne.n	800423a <HAL_RCC_OscConfig+0x62>
 8004214:	4b90      	ldr	r3, [pc, #576]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004220:	d10b      	bne.n	800423a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004222:	4b8d      	ldr	r3, [pc, #564]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d06c      	beq.n	8004308 <HAL_RCC_OscConfig+0x130>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d168      	bne.n	8004308 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e275      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x7a>
 8004244:	4b84      	ldr	r3, [pc, #528]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a83      	ldr	r2, [pc, #524]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800424a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	e02e      	b.n	80042b0 <HAL_RCC_OscConfig+0xd8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x9c>
 800425a:	4b7f      	ldr	r3, [pc, #508]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7e      	ldr	r2, [pc, #504]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b7c      	ldr	r3, [pc, #496]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a7b      	ldr	r2, [pc, #492]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800426c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e01d      	b.n	80042b0 <HAL_RCC_OscConfig+0xd8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0xc0>
 800427e:	4b76      	ldr	r3, [pc, #472]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a75      	ldr	r2, [pc, #468]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b73      	ldr	r3, [pc, #460]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a72      	ldr	r2, [pc, #456]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e00b      	b.n	80042b0 <HAL_RCC_OscConfig+0xd8>
 8004298:	4b6f      	ldr	r3, [pc, #444]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6e      	ldr	r2, [pc, #440]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800429e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80042aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd fb4a 	bl	8001950 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fd fb46 	bl	8001950 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	@ 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e229      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b61      	ldr	r3, [pc, #388]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e014      	b.n	800430a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fb36 	bl	8001950 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fd fb32 	bl	8001950 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	@ 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e215      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fa:	4b57      	ldr	r3, [pc, #348]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x110>
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d069      	beq.n	80043ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004316:	4b50      	ldr	r3, [pc, #320]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004322:	4b4d      	ldr	r3, [pc, #308]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b08      	cmp	r3, #8
 800432c:	d11c      	bne.n	8004368 <HAL_RCC_OscConfig+0x190>
 800432e:	4b4a      	ldr	r3, [pc, #296]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d116      	bne.n	8004368 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433a:	4b47      	ldr	r3, [pc, #284]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_RCC_OscConfig+0x17a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d001      	beq.n	8004352 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e1e9      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004352:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	493d      	ldr	r1, [pc, #244]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004366:	e040      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d023      	beq.n	80043b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004370:	4b39      	ldr	r3, [pc, #228]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a38      	ldr	r2, [pc, #224]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd fae8 	bl	8001950 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004384:	f7fd fae4 	bl	8001950 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1c7      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004396:	4b30      	ldr	r3, [pc, #192]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4929      	ldr	r1, [pc, #164]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
 80043b6:	e018      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b8:	4b27      	ldr	r3, [pc, #156]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fac4 	bl	8001950 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fd fac0 	bl	8001950 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1a3      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	4b1e      	ldr	r3, [pc, #120]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d038      	beq.n	8004468 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d019      	beq.n	8004432 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fe:	4b16      	ldr	r3, [pc, #88]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004402:	4a15      	ldr	r2, [pc, #84]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fd faa1 	bl	8001950 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004412:	f7fd fa9d 	bl	8001950 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e180      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004424:	4b0c      	ldr	r3, [pc, #48]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x23a>
 8004430:	e01a      	b.n	8004468 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004432:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004436:	4a08      	ldr	r2, [pc, #32]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443e:	f7fd fa87 	bl	8001950 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004444:	e00a      	b.n	800445c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004446:	f7fd fa83 	bl	8001950 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d903      	bls.n	800445c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e166      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
 8004458:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	4b92      	ldr	r3, [pc, #584]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 800445e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ee      	bne.n	8004446 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a4 	beq.w	80045be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b8c      	ldr	r3, [pc, #560]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	4b89      	ldr	r3, [pc, #548]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a88      	ldr	r2, [pc, #544]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	@ 0x40
 800448e:	4b86      	ldr	r3, [pc, #536]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449e:	4b83      	ldr	r3, [pc, #524]	@ (80046ac <HAL_RCC_OscConfig+0x4d4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044aa:	4b80      	ldr	r3, [pc, #512]	@ (80046ac <HAL_RCC_OscConfig+0x4d4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7f      	ldr	r2, [pc, #508]	@ (80046ac <HAL_RCC_OscConfig+0x4d4>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fd fa4b 	bl	8001950 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fd fa47 	bl	8001950 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	@ 0x64
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e12a      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d0:	4b76      	ldr	r3, [pc, #472]	@ (80046ac <HAL_RCC_OscConfig+0x4d4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x31a>
 80044e4:	4b70      	ldr	r3, [pc, #448]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a6f      	ldr	r2, [pc, #444]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f0:	e02d      	b.n	800454e <HAL_RCC_OscConfig+0x376>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x33c>
 80044fa:	4b6b      	ldr	r3, [pc, #428]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	4a6a      	ldr	r2, [pc, #424]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	6713      	str	r3, [r2, #112]	@ 0x70
 8004506:	4b68      	ldr	r3, [pc, #416]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	4a67      	ldr	r2, [pc, #412]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	6713      	str	r3, [r2, #112]	@ 0x70
 8004512:	e01c      	b.n	800454e <HAL_RCC_OscConfig+0x376>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b05      	cmp	r3, #5
 800451a:	d10c      	bne.n	8004536 <HAL_RCC_OscConfig+0x35e>
 800451c:	4b62      	ldr	r3, [pc, #392]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004520:	4a61      	ldr	r2, [pc, #388]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	6713      	str	r3, [r2, #112]	@ 0x70
 8004528:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452c:	4a5e      	ldr	r2, [pc, #376]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6713      	str	r3, [r2, #112]	@ 0x70
 8004534:	e00b      	b.n	800454e <HAL_RCC_OscConfig+0x376>
 8004536:	4b5c      	ldr	r3, [pc, #368]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	4a5b      	ldr	r2, [pc, #364]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	6713      	str	r3, [r2, #112]	@ 0x70
 8004542:	4b59      	ldr	r3, [pc, #356]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	4a58      	ldr	r2, [pc, #352]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d015      	beq.n	8004582 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fd f9fb 	bl	8001950 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fd f9f7 	bl	8001950 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0d8      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	4b4c      	ldr	r3, [pc, #304]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ee      	beq.n	800455e <HAL_RCC_OscConfig+0x386>
 8004580:	e014      	b.n	80045ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004582:	f7fd f9e5 	bl	8001950 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fd f9e1 	bl	8001950 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e0c2      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a0:	4b41      	ldr	r3, [pc, #260]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ee      	bne.n	800458a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b2:	4b3d      	ldr	r3, [pc, #244]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	4a3c      	ldr	r2, [pc, #240]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80ae 	beq.w	8004724 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c8:	4b37      	ldr	r3, [pc, #220]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d06d      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d14b      	bne.n	8004674 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b32      	ldr	r3, [pc, #200]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a31      	ldr	r2, [pc, #196]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd f9b2 	bl	8001950 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fd f9ae 	bl	8001950 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e091      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	4b29      	ldr	r3, [pc, #164]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004638:	071b      	lsls	r3, r3, #28
 800463a:	491b      	ldr	r1, [pc, #108]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004640:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a18      	ldr	r2, [pc, #96]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd f980 	bl	8001950 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd f97c 	bl	8001950 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e05f      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004666:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x47c>
 8004672:	e057      	b.n	8004724 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a0b      	ldr	r2, [pc, #44]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 800467a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800467e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fd f966 	bl	8001950 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004688:	f7fd f962 	bl	8001950 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e045      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	4b03      	ldr	r3, [pc, #12]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x4b0>
 80046a6:	e03d      	b.n	8004724 <HAL_RCC_OscConfig+0x54c>
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004730 <HAL_RCC_OscConfig+0x558>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d030      	beq.n	8004720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d129      	bne.n	8004720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d122      	bne.n	8004720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d119      	bne.n	8004720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	3b01      	subs	r3, #1
 80046fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d10f      	bne.n	8004720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d107      	bne.n	8004720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800

08004734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0d0      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800474c:	4b6a      	ldr	r3, [pc, #424]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d910      	bls.n	800477c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b67      	ldr	r3, [pc, #412]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 020f 	bic.w	r2, r3, #15
 8004762:	4965      	ldr	r1, [pc, #404]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	4313      	orrs	r3, r2
 8004768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b63      	ldr	r3, [pc, #396]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0b8      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d020      	beq.n	80047ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004794:	4b59      	ldr	r3, [pc, #356]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a58      	ldr	r2, [pc, #352]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800479e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047ac:	4b53      	ldr	r3, [pc, #332]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a52      	ldr	r2, [pc, #328]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80047b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	4b50      	ldr	r3, [pc, #320]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	494d      	ldr	r1, [pc, #308]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d040      	beq.n	8004858 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	4b47      	ldr	r3, [pc, #284]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d115      	bne.n	8004816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f6:	4b41      	ldr	r3, [pc, #260]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e073      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004806:	4b3d      	ldr	r3, [pc, #244]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e06b      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004816:	4b39      	ldr	r3, [pc, #228]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 0203 	bic.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4936      	ldr	r1, [pc, #216]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 8004824:	4313      	orrs	r3, r2
 8004826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004828:	f7fd f892 	bl	8001950 <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	e00a      	b.n	8004846 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004830:	f7fd f88e 	bl	8001950 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e053      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 020c 	and.w	r2, r3, #12
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	429a      	cmp	r2, r3
 8004856:	d1eb      	bne.n	8004830 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004858:	4b27      	ldr	r3, [pc, #156]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d210      	bcs.n	8004888 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b24      	ldr	r3, [pc, #144]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 020f 	bic.w	r2, r3, #15
 800486e:	4922      	ldr	r1, [pc, #136]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b20      	ldr	r3, [pc, #128]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e032      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004894:	4b19      	ldr	r3, [pc, #100]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4916      	ldr	r1, [pc, #88]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048b2:	4b12      	ldr	r3, [pc, #72]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	490e      	ldr	r1, [pc, #56]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048c6:	f000 f821 	bl	800490c <HAL_RCC_GetSysClockFreq>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	490a      	ldr	r1, [pc, #40]	@ (8004900 <HAL_RCC_ClockConfig+0x1cc>)
 80048d8:	5ccb      	ldrb	r3, [r1, r3]
 80048da:	fa22 f303 	lsr.w	r3, r2, r3
 80048de:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <HAL_RCC_ClockConfig+0x1d0>)
 80048e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048e2:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <HAL_RCC_ClockConfig+0x1d4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc fd3e 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023c00 	.word	0x40023c00
 80048fc:	40023800 	.word	0x40023800
 8004900:	08012920 	.word	0x08012920
 8004904:	20000008 	.word	0x20000008
 8004908:	2000000c 	.word	0x2000000c

0800490c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b094      	sub	sp, #80	@ 0x50
 8004912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	647b      	str	r3, [r7, #68]	@ 0x44
 8004918:	2300      	movs	r3, #0
 800491a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800491c:	2300      	movs	r3, #0
 800491e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004924:	4b79      	ldr	r3, [pc, #484]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	2b08      	cmp	r3, #8
 800492e:	d00d      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x40>
 8004930:	2b08      	cmp	r3, #8
 8004932:	f200 80e1 	bhi.w	8004af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x34>
 800493a:	2b04      	cmp	r3, #4
 800493c:	d003      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x3a>
 800493e:	e0db      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004940:	4b73      	ldr	r3, [pc, #460]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004942:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004944:	e0db      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004946:	4b73      	ldr	r3, [pc, #460]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8004948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800494a:	e0d8      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800494c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004954:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004956:	4b6d      	ldr	r3, [pc, #436]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d063      	beq.n	8004a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004962:	4b6a      	ldr	r3, [pc, #424]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	2200      	movs	r2, #0
 800496a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800496c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800496e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004974:	633b      	str	r3, [r7, #48]	@ 0x30
 8004976:	2300      	movs	r3, #0
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
 800497a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800497e:	4622      	mov	r2, r4
 8004980:	462b      	mov	r3, r5
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	0159      	lsls	r1, r3, #5
 800498c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004990:	0150      	lsls	r0, r2, #5
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4621      	mov	r1, r4
 8004998:	1a51      	subs	r1, r2, r1
 800499a:	6139      	str	r1, [r7, #16]
 800499c:	4629      	mov	r1, r5
 800499e:	eb63 0301 	sbc.w	r3, r3, r1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049b0:	4659      	mov	r1, fp
 80049b2:	018b      	lsls	r3, r1, #6
 80049b4:	4651      	mov	r1, sl
 80049b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ba:	4651      	mov	r1, sl
 80049bc:	018a      	lsls	r2, r1, #6
 80049be:	4651      	mov	r1, sl
 80049c0:	ebb2 0801 	subs.w	r8, r2, r1
 80049c4:	4659      	mov	r1, fp
 80049c6:	eb63 0901 	sbc.w	r9, r3, r1
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049de:	4690      	mov	r8, r2
 80049e0:	4699      	mov	r9, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	eb18 0303 	adds.w	r3, r8, r3
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	462b      	mov	r3, r5
 80049ec:	eb49 0303 	adc.w	r3, r9, r3
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049fe:	4629      	mov	r1, r5
 8004a00:	024b      	lsls	r3, r1, #9
 8004a02:	4621      	mov	r1, r4
 8004a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a08:	4621      	mov	r1, r4
 8004a0a:	024a      	lsls	r2, r1, #9
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a12:	2200      	movs	r2, #0
 8004a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a1c:	f7fb fc60 	bl	80002e0 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4613      	mov	r3, r2
 8004a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a28:	e058      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2a:	4b38      	ldr	r3, [pc, #224]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	099b      	lsrs	r3, r3, #6
 8004a30:	2200      	movs	r2, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	4611      	mov	r1, r2
 8004a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	f04f 0000 	mov.w	r0, #0
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	0159      	lsls	r1, r3, #5
 8004a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a56:	0150      	lsls	r0, r2, #5
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a62:	4649      	mov	r1, r9
 8004a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8004a80:	eb63 050b 	sbc.w	r5, r3, fp
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	00eb      	lsls	r3, r5, #3
 8004a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a92:	00e2      	lsls	r2, r4, #3
 8004a94:	4614      	mov	r4, r2
 8004a96:	461d      	mov	r5, r3
 8004a98:	4643      	mov	r3, r8
 8004a9a:	18e3      	adds	r3, r4, r3
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	eb45 0303 	adc.w	r3, r5, r3
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	028b      	lsls	r3, r1, #10
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004abc:	4621      	mov	r1, r4
 8004abe:	028a      	lsls	r2, r1, #10
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	61fa      	str	r2, [r7, #28]
 8004acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad0:	f7fb fc06 	bl	80002e0 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4613      	mov	r3, r2
 8004ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004aec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004af6:	e002      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004afa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3750      	adds	r7, #80	@ 0x50
 8004b04:	46bd      	mov	sp, r7
 8004b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	007a1200 	.word	0x007a1200

08004b18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	@ (8004b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000008 	.word	0x20000008

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0a9b      	lsrs	r3, r3, #10
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4903      	ldr	r1, [pc, #12]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40023800 	.word	0x40023800
 8004b54:	08012930 	.word	0x08012930

08004b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	220f      	movs	r2, #15
 8004b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b68:	4b12      	ldr	r3, [pc, #72]	@ (8004bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0203 	and.w	r2, r3, #3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b74:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b80:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b8c:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	08db      	lsrs	r3, r3, #3
 8004b92:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b9a:	4b07      	ldr	r3, [pc, #28]	@ (8004bb8 <HAL_RCC_GetClockConfig+0x60>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 020f 	and.w	r2, r3, #15
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	601a      	str	r2, [r3, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	40023c00 	.word	0x40023c00

08004bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e049      	b.n	8004c62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f841 	bl	8004c6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f000 f9e8 	bl	8004fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d001      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e054      	b.n	8004d42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a26      	ldr	r2, [pc, #152]	@ (8004d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d022      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc2:	d01d      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a22      	ldr	r2, [pc, #136]	@ (8004d54 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d018      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a21      	ldr	r2, [pc, #132]	@ (8004d58 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d5c <HAL_TIM_Base_Start_IT+0xdc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00e      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d60 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d009      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d64 <HAL_TIM_Base_Start_IT+0xe4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004d68 <HAL_TIM_Base_Start_IT+0xe8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d115      	bne.n	8004d2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	4b19      	ldr	r3, [pc, #100]	@ (8004d6c <HAL_TIM_Base_Start_IT+0xec>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b06      	cmp	r3, #6
 8004d10:	d015      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0xbe>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d18:	d011      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2a:	e008      	b.n	8004d3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e000      	b.n	8004d40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40001800 	.word	0x40001800
 8004d6c:	00010007 	.word	0x00010007

08004d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d020      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01b      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0202 	mvn.w	r2, #2
 8004da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8e9 	bl	8004f92 <HAL_TIM_IC_CaptureCallback>
 8004dc0:	e005      	b.n	8004dce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8db 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f8ec 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d020      	beq.n	8004e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01b      	beq.n	8004e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0204 	mvn.w	r2, #4
 8004df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f8c3 	bl	8004f92 <HAL_TIM_IC_CaptureCallback>
 8004e0c:	e005      	b.n	8004e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f8b5 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f8c6 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d020      	beq.n	8004e6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01b      	beq.n	8004e6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0208 	mvn.w	r2, #8
 8004e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2204      	movs	r2, #4
 8004e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f89d 	bl	8004f92 <HAL_TIM_IC_CaptureCallback>
 8004e58:	e005      	b.n	8004e66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f88f 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f8a0 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d020      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01b      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0210 	mvn.w	r2, #16
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f877 	bl	8004f92 <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f869 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f87a 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00c      	beq.n	8004edc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0201 	mvn.w	r2, #1
 8004ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc f96c 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d104      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00c      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f919 	bl	800513c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00c      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f911 	bl	8005150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00c      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f834 	bl	8004fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0220 	mvn.w	r2, #32
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f8d9 	bl	8005128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a46      	ldr	r2, [pc, #280]	@ (80050fc <TIM_Base_SetConfig+0x12c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fee:	d00f      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a43      	ldr	r2, [pc, #268]	@ (8005100 <TIM_Base_SetConfig+0x130>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a42      	ldr	r2, [pc, #264]	@ (8005104 <TIM_Base_SetConfig+0x134>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d007      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a41      	ldr	r2, [pc, #260]	@ (8005108 <TIM_Base_SetConfig+0x138>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a40      	ldr	r2, [pc, #256]	@ (800510c <TIM_Base_SetConfig+0x13c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d108      	bne.n	8005022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a35      	ldr	r2, [pc, #212]	@ (80050fc <TIM_Base_SetConfig+0x12c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02b      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005030:	d027      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a32      	ldr	r2, [pc, #200]	@ (8005100 <TIM_Base_SetConfig+0x130>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d023      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a31      	ldr	r2, [pc, #196]	@ (8005104 <TIM_Base_SetConfig+0x134>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01f      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a30      	ldr	r2, [pc, #192]	@ (8005108 <TIM_Base_SetConfig+0x138>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01b      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2f      	ldr	r2, [pc, #188]	@ (800510c <TIM_Base_SetConfig+0x13c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d017      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a2e      	ldr	r2, [pc, #184]	@ (8005110 <TIM_Base_SetConfig+0x140>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a2d      	ldr	r2, [pc, #180]	@ (8005114 <TIM_Base_SetConfig+0x144>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00f      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a2c      	ldr	r2, [pc, #176]	@ (8005118 <TIM_Base_SetConfig+0x148>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00b      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a2b      	ldr	r2, [pc, #172]	@ (800511c <TIM_Base_SetConfig+0x14c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2a      	ldr	r2, [pc, #168]	@ (8005120 <TIM_Base_SetConfig+0x150>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a29      	ldr	r2, [pc, #164]	@ (8005124 <TIM_Base_SetConfig+0x154>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a10      	ldr	r2, [pc, #64]	@ (80050fc <TIM_Base_SetConfig+0x12c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_Base_SetConfig+0xf8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a12      	ldr	r2, [pc, #72]	@ (800510c <TIM_Base_SetConfig+0x13c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d103      	bne.n	80050d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d105      	bne.n	80050ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f023 0201 	bic.w	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	611a      	str	r2, [r3, #16]
  }
}
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40010000 	.word	0x40010000
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800
 8005108:	40000c00 	.word	0x40000c00
 800510c:	40010400 	.word	0x40010400
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800
 800511c:	40001800 	.word	0x40001800
 8005120:	40001c00 	.word	0x40001c00
 8005124:	40002000 	.word	0x40002000

08005128 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005164:	b5b0      	push	{r4, r5, r7, lr}
 8005166:	b08c      	sub	sp, #48	@ 0x30
 8005168:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800516a:	4b8f      	ldr	r3, [pc, #572]	@ (80053a8 <MX_LWIP_Init+0x244>)
 800516c:	22c0      	movs	r2, #192	@ 0xc0
 800516e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005170:	4b8d      	ldr	r3, [pc, #564]	@ (80053a8 <MX_LWIP_Init+0x244>)
 8005172:	22a8      	movs	r2, #168	@ 0xa8
 8005174:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 21;
 8005176:	4b8c      	ldr	r3, [pc, #560]	@ (80053a8 <MX_LWIP_Init+0x244>)
 8005178:	2215      	movs	r2, #21
 800517a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 800517c:	4b8a      	ldr	r3, [pc, #552]	@ (80053a8 <MX_LWIP_Init+0x244>)
 800517e:	226f      	movs	r2, #111	@ 0x6f
 8005180:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005182:	4b8a      	ldr	r3, [pc, #552]	@ (80053ac <MX_LWIP_Init+0x248>)
 8005184:	22ff      	movs	r2, #255	@ 0xff
 8005186:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005188:	4b88      	ldr	r3, [pc, #544]	@ (80053ac <MX_LWIP_Init+0x248>)
 800518a:	22ff      	movs	r2, #255	@ 0xff
 800518c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800518e:	4b87      	ldr	r3, [pc, #540]	@ (80053ac <MX_LWIP_Init+0x248>)
 8005190:	22ff      	movs	r2, #255	@ 0xff
 8005192:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005194:	4b85      	ldr	r3, [pc, #532]	@ (80053ac <MX_LWIP_Init+0x248>)
 8005196:	2200      	movs	r2, #0
 8005198:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800519a:	4b85      	ldr	r3, [pc, #532]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 800519c:	22c0      	movs	r2, #192	@ 0xc0
 800519e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80051a0:	4b83      	ldr	r3, [pc, #524]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80051a2:	22a8      	movs	r2, #168	@ 0xa8
 80051a4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 21;
 80051a6:	4b82      	ldr	r3, [pc, #520]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80051a8:	2215      	movs	r2, #21
 80051aa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80051ac:	4b80      	ldr	r3, [pc, #512]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80051b2:	2100      	movs	r1, #0
 80051b4:	2000      	movs	r0, #0
 80051b6:	f005 f92b 	bl	800a410 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80051ba:	4b7b      	ldr	r3, [pc, #492]	@ (80053a8 <MX_LWIP_Init+0x244>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	061a      	lsls	r2, r3, #24
 80051c0:	4b79      	ldr	r3, [pc, #484]	@ (80053a8 <MX_LWIP_Init+0x244>)
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	431a      	orrs	r2, r3
 80051c8:	4b77      	ldr	r3, [pc, #476]	@ (80053a8 <MX_LWIP_Init+0x244>)
 80051ca:	789b      	ldrb	r3, [r3, #2]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	4313      	orrs	r3, r2
 80051d0:	4a75      	ldr	r2, [pc, #468]	@ (80053a8 <MX_LWIP_Init+0x244>)
 80051d2:	78d2      	ldrb	r2, [r2, #3]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	061a      	lsls	r2, r3, #24
 80051d8:	4b73      	ldr	r3, [pc, #460]	@ (80053a8 <MX_LWIP_Init+0x244>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	0619      	lsls	r1, r3, #24
 80051de:	4b72      	ldr	r3, [pc, #456]	@ (80053a8 <MX_LWIP_Init+0x244>)
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	4319      	orrs	r1, r3
 80051e6:	4b70      	ldr	r3, [pc, #448]	@ (80053a8 <MX_LWIP_Init+0x244>)
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	430b      	orrs	r3, r1
 80051ee:	496e      	ldr	r1, [pc, #440]	@ (80053a8 <MX_LWIP_Init+0x244>)
 80051f0:	78c9      	ldrb	r1, [r1, #3]
 80051f2:	430b      	orrs	r3, r1
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051fa:	431a      	orrs	r2, r3
 80051fc:	4b6a      	ldr	r3, [pc, #424]	@ (80053a8 <MX_LWIP_Init+0x244>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	0619      	lsls	r1, r3, #24
 8005202:	4b69      	ldr	r3, [pc, #420]	@ (80053a8 <MX_LWIP_Init+0x244>)
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	4319      	orrs	r1, r3
 800520a:	4b67      	ldr	r3, [pc, #412]	@ (80053a8 <MX_LWIP_Init+0x244>)
 800520c:	789b      	ldrb	r3, [r3, #2]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	430b      	orrs	r3, r1
 8005212:	4965      	ldr	r1, [pc, #404]	@ (80053a8 <MX_LWIP_Init+0x244>)
 8005214:	78c9      	ldrb	r1, [r1, #3]
 8005216:	430b      	orrs	r3, r1
 8005218:	0a1b      	lsrs	r3, r3, #8
 800521a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800521e:	431a      	orrs	r2, r3
 8005220:	4b61      	ldr	r3, [pc, #388]	@ (80053a8 <MX_LWIP_Init+0x244>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	0619      	lsls	r1, r3, #24
 8005226:	4b60      	ldr	r3, [pc, #384]	@ (80053a8 <MX_LWIP_Init+0x244>)
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	4319      	orrs	r1, r3
 800522e:	4b5e      	ldr	r3, [pc, #376]	@ (80053a8 <MX_LWIP_Init+0x244>)
 8005230:	789b      	ldrb	r3, [r3, #2]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	430b      	orrs	r3, r1
 8005236:	495c      	ldr	r1, [pc, #368]	@ (80053a8 <MX_LWIP_Init+0x244>)
 8005238:	78c9      	ldrb	r1, [r1, #3]
 800523a:	430b      	orrs	r3, r1
 800523c:	0e1b      	lsrs	r3, r3, #24
 800523e:	4313      	orrs	r3, r2
 8005240:	4a5c      	ldr	r2, [pc, #368]	@ (80053b4 <MX_LWIP_Init+0x250>)
 8005242:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005244:	4b59      	ldr	r3, [pc, #356]	@ (80053ac <MX_LWIP_Init+0x248>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	061a      	lsls	r2, r3, #24
 800524a:	4b58      	ldr	r3, [pc, #352]	@ (80053ac <MX_LWIP_Init+0x248>)
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	431a      	orrs	r2, r3
 8005252:	4b56      	ldr	r3, [pc, #344]	@ (80053ac <MX_LWIP_Init+0x248>)
 8005254:	789b      	ldrb	r3, [r3, #2]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	4313      	orrs	r3, r2
 800525a:	4a54      	ldr	r2, [pc, #336]	@ (80053ac <MX_LWIP_Init+0x248>)
 800525c:	78d2      	ldrb	r2, [r2, #3]
 800525e:	4313      	orrs	r3, r2
 8005260:	061a      	lsls	r2, r3, #24
 8005262:	4b52      	ldr	r3, [pc, #328]	@ (80053ac <MX_LWIP_Init+0x248>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	0619      	lsls	r1, r3, #24
 8005268:	4b50      	ldr	r3, [pc, #320]	@ (80053ac <MX_LWIP_Init+0x248>)
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	041b      	lsls	r3, r3, #16
 800526e:	4319      	orrs	r1, r3
 8005270:	4b4e      	ldr	r3, [pc, #312]	@ (80053ac <MX_LWIP_Init+0x248>)
 8005272:	789b      	ldrb	r3, [r3, #2]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	430b      	orrs	r3, r1
 8005278:	494c      	ldr	r1, [pc, #304]	@ (80053ac <MX_LWIP_Init+0x248>)
 800527a:	78c9      	ldrb	r1, [r1, #3]
 800527c:	430b      	orrs	r3, r1
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005284:	431a      	orrs	r2, r3
 8005286:	4b49      	ldr	r3, [pc, #292]	@ (80053ac <MX_LWIP_Init+0x248>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	0619      	lsls	r1, r3, #24
 800528c:	4b47      	ldr	r3, [pc, #284]	@ (80053ac <MX_LWIP_Init+0x248>)
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	4319      	orrs	r1, r3
 8005294:	4b45      	ldr	r3, [pc, #276]	@ (80053ac <MX_LWIP_Init+0x248>)
 8005296:	789b      	ldrb	r3, [r3, #2]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	430b      	orrs	r3, r1
 800529c:	4943      	ldr	r1, [pc, #268]	@ (80053ac <MX_LWIP_Init+0x248>)
 800529e:	78c9      	ldrb	r1, [r1, #3]
 80052a0:	430b      	orrs	r3, r1
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80052a8:	431a      	orrs	r2, r3
 80052aa:	4b40      	ldr	r3, [pc, #256]	@ (80053ac <MX_LWIP_Init+0x248>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	0619      	lsls	r1, r3, #24
 80052b0:	4b3e      	ldr	r3, [pc, #248]	@ (80053ac <MX_LWIP_Init+0x248>)
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	4319      	orrs	r1, r3
 80052b8:	4b3c      	ldr	r3, [pc, #240]	@ (80053ac <MX_LWIP_Init+0x248>)
 80052ba:	789b      	ldrb	r3, [r3, #2]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	430b      	orrs	r3, r1
 80052c0:	493a      	ldr	r1, [pc, #232]	@ (80053ac <MX_LWIP_Init+0x248>)
 80052c2:	78c9      	ldrb	r1, [r1, #3]
 80052c4:	430b      	orrs	r3, r1
 80052c6:	0e1b      	lsrs	r3, r3, #24
 80052c8:	4313      	orrs	r3, r2
 80052ca:	4a3b      	ldr	r2, [pc, #236]	@ (80053b8 <MX_LWIP_Init+0x254>)
 80052cc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80052ce:	4b38      	ldr	r3, [pc, #224]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	061a      	lsls	r2, r3, #24
 80052d4:	4b36      	ldr	r3, [pc, #216]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	041b      	lsls	r3, r3, #16
 80052da:	431a      	orrs	r2, r3
 80052dc:	4b34      	ldr	r3, [pc, #208]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80052de:	789b      	ldrb	r3, [r3, #2]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	4313      	orrs	r3, r2
 80052e4:	4a32      	ldr	r2, [pc, #200]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80052e6:	78d2      	ldrb	r2, [r2, #3]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	061a      	lsls	r2, r3, #24
 80052ec:	4b30      	ldr	r3, [pc, #192]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	0619      	lsls	r1, r3, #24
 80052f2:	4b2f      	ldr	r3, [pc, #188]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	4319      	orrs	r1, r3
 80052fa:	4b2d      	ldr	r3, [pc, #180]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 80052fc:	789b      	ldrb	r3, [r3, #2]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	430b      	orrs	r3, r1
 8005302:	492b      	ldr	r1, [pc, #172]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 8005304:	78c9      	ldrb	r1, [r1, #3]
 8005306:	430b      	orrs	r3, r1
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800530e:	431a      	orrs	r2, r3
 8005310:	4b27      	ldr	r3, [pc, #156]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	0619      	lsls	r1, r3, #24
 8005316:	4b26      	ldr	r3, [pc, #152]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	4319      	orrs	r1, r3
 800531e:	4b24      	ldr	r3, [pc, #144]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 8005320:	789b      	ldrb	r3, [r3, #2]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	430b      	orrs	r3, r1
 8005326:	4922      	ldr	r1, [pc, #136]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 8005328:	78c9      	ldrb	r1, [r1, #3]
 800532a:	430b      	orrs	r3, r1
 800532c:	0a1b      	lsrs	r3, r3, #8
 800532e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005332:	431a      	orrs	r2, r3
 8005334:	4b1e      	ldr	r3, [pc, #120]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	0619      	lsls	r1, r3, #24
 800533a:	4b1d      	ldr	r3, [pc, #116]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 800533c:	785b      	ldrb	r3, [r3, #1]
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	4319      	orrs	r1, r3
 8005342:	4b1b      	ldr	r3, [pc, #108]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 8005344:	789b      	ldrb	r3, [r3, #2]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	430b      	orrs	r3, r1
 800534a:	4919      	ldr	r1, [pc, #100]	@ (80053b0 <MX_LWIP_Init+0x24c>)
 800534c:	78c9      	ldrb	r1, [r1, #3]
 800534e:	430b      	orrs	r3, r1
 8005350:	0e1b      	lsrs	r3, r3, #24
 8005352:	4313      	orrs	r3, r2
 8005354:	4a19      	ldr	r2, [pc, #100]	@ (80053bc <MX_LWIP_Init+0x258>)
 8005356:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005358:	4b19      	ldr	r3, [pc, #100]	@ (80053c0 <MX_LWIP_Init+0x25c>)
 800535a:	9302      	str	r3, [sp, #8]
 800535c:	4b19      	ldr	r3, [pc, #100]	@ (80053c4 <MX_LWIP_Init+0x260>)
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	2300      	movs	r3, #0
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4b15      	ldr	r3, [pc, #84]	@ (80053bc <MX_LWIP_Init+0x258>)
 8005366:	4a14      	ldr	r2, [pc, #80]	@ (80053b8 <MX_LWIP_Init+0x254>)
 8005368:	4912      	ldr	r1, [pc, #72]	@ (80053b4 <MX_LWIP_Init+0x250>)
 800536a:	4817      	ldr	r0, [pc, #92]	@ (80053c8 <MX_LWIP_Init+0x264>)
 800536c:	f005 fe18 	bl	800afa0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005370:	4815      	ldr	r0, [pc, #84]	@ (80053c8 <MX_LWIP_Init+0x264>)
 8005372:	f005 ffc3 	bl	800b2fc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005376:	4814      	ldr	r0, [pc, #80]	@ (80053c8 <MX_LWIP_Init+0x264>)
 8005378:	f005 ffd0 	bl	800b31c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800537c:	4913      	ldr	r1, [pc, #76]	@ (80053cc <MX_LWIP_Init+0x268>)
 800537e:	4812      	ldr	r0, [pc, #72]	@ (80053c8 <MX_LWIP_Init+0x264>)
 8005380:	f006 f8ce 	bl	800b520 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005384:	4b12      	ldr	r3, [pc, #72]	@ (80053d0 <MX_LWIP_Init+0x26c>)
 8005386:	1d3c      	adds	r4, r7, #4
 8005388:	461d      	mov	r5, r3
 800538a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800538c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800538e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005396:	1d3b      	adds	r3, r7, #4
 8005398:	490b      	ldr	r1, [pc, #44]	@ (80053c8 <MX_LWIP_Init+0x264>)
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fdbb 	bl	8005f16 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80053a0:	bf00      	nop
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bdb0      	pop	{r4, r5, r7, pc}
 80053a8:	200014e8 	.word	0x200014e8
 80053ac:	200014ec 	.word	0x200014ec
 80053b0:	200014f0 	.word	0x200014f0
 80053b4:	200014dc 	.word	0x200014dc
 80053b8:	200014e0 	.word	0x200014e0
 80053bc:	200014e4 	.word	0x200014e4
 80053c0:	0800a3a1 	.word	0x0800a3a1
 80053c4:	08005945 	.word	0x08005945
 80053c8:	200014a8 	.word	0x200014a8
 80053cc:	080053d5 	.word	0x080053d5
 80053d0:	08010880 	.word	0x08010880

080053d4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80053fa:	2320      	movs	r3, #32
 80053fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80053fe:	f3bf 8f4f 	dsb	sy
}
 8005402:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005404:	e00b      	b.n	800541e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005406:	4a0d      	ldr	r2, [pc, #52]	@ (800543c <SCB_InvalidateDCache_by_Addr+0x54>)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	dcf0      	bgt.n	8005406 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005424:	f3bf 8f4f 	dsb	sy
}
 8005428:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800542a:	f3bf 8f6f 	isb	sy
}
 800542e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	e000ed00 	.word	0xe000ed00

08005440 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005448:	4b04      	ldr	r3, [pc, #16]	@ (800545c <HAL_ETH_RxCpltCallback+0x1c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f000 feeb 	bl	8006228 <osSemaphoreRelease>
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20005e80 	.word	0x20005e80

08005460 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005468:	4b04      	ldr	r3, [pc, #16]	@ (800547c <HAL_ETH_TxCpltCallback+0x1c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fedb 	bl	8006228 <osSemaphoreRelease>
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20005e84 	.word	0x20005e84

08005480 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7fe f863 	bl	8003554 <HAL_ETH_GetDMAError>
 800548e:	4603      	mov	r3, r0
 8005490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005494:	2b80      	cmp	r3, #128	@ 0x80
 8005496:	d104      	bne.n	80054a2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005498:	4b04      	ldr	r3, [pc, #16]	@ (80054ac <HAL_ETH_ErrorCallback+0x2c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fec3 	bl	8006228 <osSemaphoreRelease>
  }
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20005e80 	.word	0x20005e80

080054b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80054b0:	b5b0      	push	{r4, r5, r7, lr}
 80054b2:	b0b4      	sub	sp, #208	@ 0xd0
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 80054ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80054ce:	2264      	movs	r2, #100	@ 0x64
 80054d0:	2100      	movs	r1, #0
 80054d2:	4618      	mov	r0, r3
 80054d4:	f00a fb03 	bl	800fade <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80054d8:	4b9f      	ldr	r3, [pc, #636]	@ (8005758 <low_level_init+0x2a8>)
 80054da:	4aa0      	ldr	r2, [pc, #640]	@ (800575c <low_level_init+0x2ac>)
 80054dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80054de:	2300      	movs	r3, #0
 80054e0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 80054e4:	2380      	movs	r3, #128	@ 0x80
 80054e6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 80054ea:	23e1      	movs	r3, #225	@ 0xe1
 80054ec:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 80054f6:	2300      	movs	r3, #0
 80054f8:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8005502:	4a95      	ldr	r2, [pc, #596]	@ (8005758 <low_level_init+0x2a8>)
 8005504:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005508:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800550a:	4b93      	ldr	r3, [pc, #588]	@ (8005758 <low_level_init+0x2a8>)
 800550c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005510:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005512:	4b91      	ldr	r3, [pc, #580]	@ (8005758 <low_level_init+0x2a8>)
 8005514:	4a92      	ldr	r2, [pc, #584]	@ (8005760 <low_level_init+0x2b0>)
 8005516:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005518:	4b8f      	ldr	r3, [pc, #572]	@ (8005758 <low_level_init+0x2a8>)
 800551a:	4a92      	ldr	r2, [pc, #584]	@ (8005764 <low_level_init+0x2b4>)
 800551c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800551e:	4b8e      	ldr	r3, [pc, #568]	@ (8005758 <low_level_init+0x2a8>)
 8005520:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005524:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005526:	488c      	ldr	r0, [pc, #560]	@ (8005758 <low_level_init+0x2a8>)
 8005528:	f7fd f9d8 	bl	80028dc <HAL_ETH_Init>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005532:	2238      	movs	r2, #56	@ 0x38
 8005534:	2100      	movs	r1, #0
 8005536:	488c      	ldr	r0, [pc, #560]	@ (8005768 <low_level_init+0x2b8>)
 8005538:	f00a fad1 	bl	800fade <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800553c:	4b8a      	ldr	r3, [pc, #552]	@ (8005768 <low_level_init+0x2b8>)
 800553e:	2221      	movs	r2, #33	@ 0x21
 8005540:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005542:	4b89      	ldr	r3, [pc, #548]	@ (8005768 <low_level_init+0x2b8>)
 8005544:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005548:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800554a:	4b87      	ldr	r3, [pc, #540]	@ (8005768 <low_level_init+0x2b8>)
 800554c:	2200      	movs	r2, #0
 800554e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005550:	4886      	ldr	r0, [pc, #536]	@ (800576c <low_level_init+0x2bc>)
 8005552:	f005 fbdf 	bl	800ad14 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2206      	movs	r2, #6
 800555a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800555e:	4b7e      	ldr	r3, [pc, #504]	@ (8005758 <low_level_init+0x2a8>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800556a:	4b7b      	ldr	r3, [pc, #492]	@ (8005758 <low_level_init+0x2a8>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	785a      	ldrb	r2, [r3, #1]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005576:	4b78      	ldr	r3, [pc, #480]	@ (8005758 <low_level_init+0x2a8>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	789a      	ldrb	r2, [r3, #2]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005582:	4b75      	ldr	r3, [pc, #468]	@ (8005758 <low_level_init+0x2a8>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	78da      	ldrb	r2, [r3, #3]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800558e:	4b72      	ldr	r3, [pc, #456]	@ (8005758 <low_level_init+0x2a8>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	791a      	ldrb	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800559a:	4b6f      	ldr	r3, [pc, #444]	@ (8005758 <low_level_init+0x2a8>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	795a      	ldrb	r2, [r3, #5]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80055ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80055b4:	f043 030a 	orr.w	r3, r3, #10
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80055c0:	2300      	movs	r3, #0
 80055c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c4:	2300      	movs	r3, #0
 80055c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80055c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80055cc:	2101      	movs	r1, #1
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fdaa 	bl	8006128 <osSemaphoreCreate>
 80055d4:	4603      	mov	r3, r0
 80055d6:	4a66      	ldr	r2, [pc, #408]	@ (8005770 <low_level_init+0x2c0>)
 80055d8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80055da:	2300      	movs	r3, #0
 80055dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80055de:	2300      	movs	r3, #0
 80055e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80055e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80055e6:	2101      	movs	r1, #1
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fd9d 	bl	8006128 <osSemaphoreCreate>
 80055ee:	4603      	mov	r3, r0
 80055f0:	4a60      	ldr	r2, [pc, #384]	@ (8005774 <low_level_init+0x2c4>)
 80055f2:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80055f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005770 <low_level_init+0x2c0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fdc6 	bl	800618c <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8005600:	4b5c      	ldr	r3, [pc, #368]	@ (8005774 <low_level_init+0x2c4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fdc0 	bl	800618c <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800560c:	4b5a      	ldr	r3, [pc, #360]	@ (8005778 <low_level_init+0x2c8>)
 800560e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005612:	461d      	mov	r5, r3
 8005614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800561c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005620:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fc75 	bl	8005f16 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800562c:	4953      	ldr	r1, [pc, #332]	@ (800577c <low_level_init+0x2cc>)
 800562e:	4854      	ldr	r0, [pc, #336]	@ (8005780 <low_level_init+0x2d0>)
 8005630:	f7fc f867 	bl	8001702 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005634:	4852      	ldr	r0, [pc, #328]	@ (8005780 <low_level_init+0x2d0>)
 8005636:	f7fc f896 	bl	8001766 <LAN8742_Init>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f005 ff3d 	bl	800b4c0 <netif_set_link_down>
    netif_set_down(netif);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f005 fed4 	bl	800b3f4 <netif_set_down>
 800564c:	e081      	b.n	8005752 <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800564e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8005652:	2b00      	cmp	r3, #0
 8005654:	d165      	bne.n	8005722 <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005656:	484a      	ldr	r0, [pc, #296]	@ (8005780 <low_level_init+0x2d0>)
 8005658:	f7fc f8d2 	bl	8001800 <LAN8742_GetLinkState>
 800565c:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005664:	2b01      	cmp	r3, #1
 8005666:	dc06      	bgt.n	8005676 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f005 ff29 	bl	800b4c0 <netif_set_link_down>
      netif_set_down(netif);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f005 fec0 	bl	800b3f4 <netif_set_down>
 8005674:	e057      	b.n	8005726 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8005676:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800567a:	3b02      	subs	r3, #2
 800567c:	2b03      	cmp	r3, #3
 800567e:	d82b      	bhi.n	80056d8 <low_level_init+0x228>
 8005680:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <low_level_init+0x1d8>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	08005699 	.word	0x08005699
 800568c:	080056ab 	.word	0x080056ab
 8005690:	080056bb 	.word	0x080056bb
 8005694:	080056cb 	.word	0x080056cb
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005698:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800569c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80056a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80056a8:	e01f      	b.n	80056ea <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80056b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80056b8:	e017      	b.n	80056ea <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80056ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80056be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80056c8:	e00f      	b.n	80056ea <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80056d6:	e008      	b.n	80056ea <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80056d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80056dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80056e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80056e8:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80056ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80056ee:	4619      	mov	r1, r3
 80056f0:	4819      	ldr	r0, [pc, #100]	@ (8005758 <low_level_init+0x2a8>)
 80056f2:	f7fd fddb 	bl	80032ac <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80056f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056fa:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 80056fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005700:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005702:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005706:	4619      	mov	r1, r3
 8005708:	4813      	ldr	r0, [pc, #76]	@ (8005758 <low_level_init+0x2a8>)
 800570a:	f7fd fec6 	bl	800349a <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800570e:	4812      	ldr	r0, [pc, #72]	@ (8005758 <low_level_init+0x2a8>)
 8005710:	f7fd f97e 	bl	8002a10 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f005 fe01 	bl	800b31c <netif_set_up>
    netif_set_link_up(netif);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f005 fe9c 	bl	800b458 <netif_set_link_up>
 8005720:	e001      	b.n	8005726 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8005722:	f7fb fd59 	bl	80011d8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8005726:	f7fc f943 	bl	80019b0 <HAL_GetREVID>
 800572a:	4603      	mov	r3, r0
 800572c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005730:	d10f      	bne.n	8005752 <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8005732:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <low_level_init+0x2d4>)
 8005734:	f107 040c 	add.w	r4, r7, #12
 8005738:	461d      	mov	r5, r3
 800573a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800573c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800573e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8005746:	f107 030c 	add.w	r3, r7, #12
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fbe2 	bl	8005f16 <osThreadCreate>
  }
}
 8005752:	37d0      	adds	r7, #208	@ 0xd0
 8005754:	46bd      	mov	sp, r7
 8005756:	bdb0      	pop	{r4, r5, r7, pc}
 8005758:	20005e88 	.word	0x20005e88
 800575c:	40028000 	.word	0x40028000
 8005760:	2000012c 	.word	0x2000012c
 8005764:	2000008c 	.word	0x2000008c
 8005768:	20005f38 	.word	0x20005f38
 800576c:	08012938 	.word	0x08012938
 8005770:	20005e80 	.word	0x20005e80
 8005774:	20005e84 	.word	0x20005e84
 8005778:	080108a4 	.word	0x080108a4
 800577c:	20000014 	.word	0x20000014
 8005780:	20005f70 	.word	0x20005f70
 8005784:	080108d0 	.word	0x080108d0

08005788 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b092      	sub	sp, #72	@ 0x48
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80057a0:	f107 030c 	add.w	r3, r7, #12
 80057a4:	2230      	movs	r2, #48	@ 0x30
 80057a6:	2100      	movs	r1, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f00a f998 	bl	800fade <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80057ae:	f107 030c 	add.w	r3, r7, #12
 80057b2:	2230      	movs	r2, #48	@ 0x30
 80057b4:	2100      	movs	r1, #0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f00a f991 	bl	800fade <memset>

  for(q = p; q != NULL; q = q->next)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	643b      	str	r3, [r7, #64]	@ 0x40
 80057c0:	e045      	b.n	800584e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80057c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d902      	bls.n	80057ce <low_level_output+0x46>
      return ERR_IF;
 80057c8:	f06f 030b 	mvn.w	r3, #11
 80057cc:	e06c      	b.n	80058a8 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 80057ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057d4:	4613      	mov	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	3348      	adds	r3, #72	@ 0x48
 80057de:	443b      	add	r3, r7
 80057e0:	3b3c      	subs	r3, #60	@ 0x3c
 80057e2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80057e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e6:	895b      	ldrh	r3, [r3, #10]
 80057e8:	4619      	mov	r1, r3
 80057ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	3348      	adds	r3, #72	@ 0x48
 80057f6:	443b      	add	r3, r7
 80057f8:	3b38      	subs	r3, #56	@ 0x38
 80057fa:	6019      	str	r1, [r3, #0]

    if(i>0)
 80057fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d011      	beq.n	8005826 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005804:	1e5a      	subs	r2, r3, #1
 8005806:	f107 000c 	add.w	r0, r7, #12
 800580a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800580c:	460b      	mov	r3, r1
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	440b      	add	r3, r1
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	18c1      	adds	r1, r0, r3
 8005816:	4613      	mov	r3, r2
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	3348      	adds	r3, #72	@ 0x48
 8005820:	443b      	add	r3, r7
 8005822:	3b34      	subs	r3, #52	@ 0x34
 8005824:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800582e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	3348      	adds	r3, #72	@ 0x48
 800583a:	443b      	add	r3, r7
 800583c:	3b34      	subs	r3, #52	@ 0x34
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005844:	3301      	adds	r3, #1
 8005846:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	643b      	str	r3, [r7, #64]	@ 0x40
 800584e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1b6      	bne.n	80057c2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	891b      	ldrh	r3, [r3, #8]
 8005858:	461a      	mov	r2, r3
 800585a:	4b15      	ldr	r3, [pc, #84]	@ (80058b0 <low_level_output+0x128>)
 800585c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800585e:	4a14      	ldr	r2, [pc, #80]	@ (80058b0 <low_level_output+0x128>)
 8005860:	f107 030c 	add.w	r3, r7, #12
 8005864:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005866:	4a12      	ldr	r2, [pc, #72]	@ (80058b0 <low_level_output+0x128>)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800586c:	6838      	ldr	r0, [r7, #0]
 800586e:	f006 fa4f 	bl	800bd10 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8005872:	490f      	ldr	r1, [pc, #60]	@ (80058b0 <low_level_output+0x128>)
 8005874:	480f      	ldr	r0, [pc, #60]	@ (80058b4 <low_level_output+0x12c>)
 8005876:	f7fd f9bb 	bl	8002bf0 <HAL_ETH_Transmit_IT>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10e      	bne.n	800589e <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005880:	bf00      	nop
 8005882:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <low_level_output+0x130>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f04f 31ff 	mov.w	r1, #4294967295
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fc7e 	bl	800618c <osSemaphoreWait>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f5      	bne.n	8005882 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8005896:	4807      	ldr	r0, [pc, #28]	@ (80058b4 <low_level_output+0x12c>)
 8005898:	f7fd fb4a 	bl	8002f30 <HAL_ETH_ReleaseTxPacket>
 800589c:	e002      	b.n	80058a4 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800589e:	6838      	ldr	r0, [r7, #0]
 80058a0:	f006 f990 	bl	800bbc4 <pbuf_free>
  }

  return errval;
 80058a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3748      	adds	r7, #72	@ 0x48
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20005f38 	.word	0x20005f38
 80058b4:	20005e88 	.word	0x20005e88
 80058b8:	20005e84 	.word	0x20005e84

080058bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80058c8:	4b07      	ldr	r3, [pc, #28]	@ (80058e8 <low_level_input+0x2c>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80058d0:	f107 030c 	add.w	r3, r7, #12
 80058d4:	4619      	mov	r1, r3
 80058d6:	4805      	ldr	r0, [pc, #20]	@ (80058ec <low_level_input+0x30>)
 80058d8:	f7fd f9e6 	bl	8002ca8 <HAL_ETH_ReadData>
  }

  return p;
 80058dc:	68fb      	ldr	r3, [r7, #12]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20005e7c 	.word	0x20005e7c
 80058ec:	20005e88 	.word	0x20005e88

080058f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005900:	4b0f      	ldr	r3, [pc, #60]	@ (8005940 <ethernetif_input+0x50>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f04f 31ff 	mov.w	r1, #4294967295
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fc3f 	bl	800618c <osSemaphoreWait>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f5      	bne.n	8005900 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005914:	68b8      	ldr	r0, [r7, #8]
 8005916:	f7ff ffd1 	bl	80058bc <low_level_input>
 800591a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	4798      	blx	r3
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f006 f946 	bl	800bbc4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1ea      	bne.n	8005914 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800593e:	e7df      	b.n	8005900 <ethernetif_input+0x10>
 8005940:	20005e80 	.word	0x20005e80

08005944 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <ethernetif_init+0x1c>
 8005952:	4b0e      	ldr	r3, [pc, #56]	@ (800598c <ethernetif_init+0x48>)
 8005954:	f240 2207 	movw	r2, #519	@ 0x207
 8005958:	490d      	ldr	r1, [pc, #52]	@ (8005990 <ethernetif_init+0x4c>)
 800595a:	480e      	ldr	r0, [pc, #56]	@ (8005994 <ethernetif_init+0x50>)
 800595c:	f00a f85a 	bl	800fa14 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2273      	movs	r2, #115	@ 0x73
 8005964:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2274      	movs	r2, #116	@ 0x74
 800596c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a09      	ldr	r2, [pc, #36]	@ (8005998 <ethernetif_init+0x54>)
 8005974:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a08      	ldr	r2, [pc, #32]	@ (800599c <ethernetif_init+0x58>)
 800597a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff fd97 	bl	80054b0 <low_level_init>

  return ERR_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	080108ec 	.word	0x080108ec
 8005990:	08010908 	.word	0x08010908
 8005994:	08010918 	.word	0x08010918
 8005998:	0800d555 	.word	0x0800d555
 800599c:	08005789 	.word	0x08005789

080059a0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	4809      	ldr	r0, [pc, #36]	@ (80059d4 <pbuf_free_custom+0x34>)
 80059b0:	f005 faa0 	bl	800aef4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80059b4:	4b08      	ldr	r3, [pc, #32]	@ (80059d8 <pbuf_free_custom+0x38>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d107      	bne.n	80059cc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80059bc:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <pbuf_free_custom+0x38>)
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80059c2:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <pbuf_free_custom+0x3c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fc2e 	bl	8006228 <osSemaphoreRelease>
  }
}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	08012938 	.word	0x08012938
 80059d8:	20005e7c 	.word	0x20005e7c
 80059dc:	20005e80 	.word	0x20005e80

080059e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80059e4:	f7fb ffb4 	bl	8001950 <HAL_GetTick>
 80059e8:	4603      	mov	r3, r0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08e      	sub	sp, #56	@ 0x38
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	60da      	str	r2, [r3, #12]
 8005a06:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a52      	ldr	r2, [pc, #328]	@ (8005b58 <HAL_ETH_MspInit+0x168>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	f040 809e 	bne.w	8005b50 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005a14:	4b51      	ldr	r3, [pc, #324]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	4a50      	ldr	r2, [pc, #320]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a20:	4b4e      	ldr	r3, [pc, #312]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	4a4a      	ldr	r2, [pc, #296]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a38:	4b48      	ldr	r3, [pc, #288]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4b45      	ldr	r3, [pc, #276]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a48:	4a44      	ldr	r2, [pc, #272]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a50:	4b42      	ldr	r3, [pc, #264]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a60:	4a3e      	ldr	r2, [pc, #248]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a62:	f043 0304 	orr.w	r3, r3, #4
 8005a66:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a68:	4b3c      	ldr	r3, [pc, #240]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a74:	4b39      	ldr	r3, [pc, #228]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a78:	4a38      	ldr	r2, [pc, #224]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a80:	4b36      	ldr	r3, [pc, #216]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a8c:	4b33      	ldr	r3, [pc, #204]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a90:	4a32      	ldr	r2, [pc, #200]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a92:	f043 0302 	orr.w	r3, r3, #2
 8005a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a98:	4b30      	ldr	r3, [pc, #192]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b5c <HAL_ETH_MspInit+0x16c>)
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005abc:	2332      	movs	r3, #50	@ 0x32
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005acc:	230b      	movs	r3, #11
 8005ace:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4822      	ldr	r0, [pc, #136]	@ (8005b60 <HAL_ETH_MspInit+0x170>)
 8005ad8:	f7fe f968 	bl	8003dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005adc:	2386      	movs	r3, #134	@ 0x86
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005aec:	230b      	movs	r3, #11
 8005aee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005af4:	4619      	mov	r1, r3
 8005af6:	481b      	ldr	r0, [pc, #108]	@ (8005b64 <HAL_ETH_MspInit+0x174>)
 8005af8:	f7fe f958 	bl	8003dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD0_Pin|RMII_TXD1_Pin;
 8005afc:	f243 0301 	movw	r3, #12289	@ 0x3001
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b02:	2302      	movs	r3, #2
 8005b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b0e:	230b      	movs	r3, #11
 8005b10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b16:	4619      	mov	r1, r3
 8005b18:	4813      	ldr	r0, [pc, #76]	@ (8005b68 <HAL_ETH_MspInit+0x178>)
 8005b1a:	f7fe f947 	bl	8003dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin;
 8005b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b24:	2302      	movs	r3, #2
 8005b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b30:	230b      	movs	r3, #11
 8005b32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TX_EN_GPIO_Port, &GPIO_InitStruct);
 8005b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b38:	4619      	mov	r1, r3
 8005b3a:	480c      	ldr	r0, [pc, #48]	@ (8005b6c <HAL_ETH_MspInit+0x17c>)
 8005b3c:	f7fe f936 	bl	8003dac <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2105      	movs	r1, #5
 8005b44:	203d      	movs	r0, #61	@ 0x3d
 8005b46:	f7fc fe9f 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005b4a:	203d      	movs	r0, #61	@ 0x3d
 8005b4c:	f7fc feb8 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005b50:	bf00      	nop
 8005b52:	3738      	adds	r7, #56	@ 0x38
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40028000 	.word	0x40028000
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	40020800 	.word	0x40020800
 8005b64:	40020000 	.word	0x40020000
 8005b68:	40020400 	.word	0x40020400
 8005b6c:	40021800 	.word	0x40021800

08005b70 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005b74:	4802      	ldr	r0, [pc, #8]	@ (8005b80 <ETH_PHY_IO_Init+0x10>)
 8005b76:	f7fd fcab 	bl	80034d0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20005e88 	.word	0x20005e88

08005b84 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  return 0;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	68f9      	ldr	r1, [r7, #12]
 8005ba6:	4807      	ldr	r0, [pc, #28]	@ (8005bc4 <ETH_PHY_IO_ReadReg+0x30>)
 8005ba8:	f7fd faec 	bl	8003184 <HAL_ETH_ReadPHYRegister>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb6:	e000      	b.n	8005bba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20005e88 	.word	0x20005e88

08005bc8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	68f9      	ldr	r1, [r7, #12]
 8005bda:	4807      	ldr	r0, [pc, #28]	@ (8005bf8 <ETH_PHY_IO_WriteReg+0x30>)
 8005bdc:	f7fd fb1d 	bl	800321a <HAL_ETH_WritePHYRegister>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005be6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bea:	e000      	b.n	8005bee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20005e88 	.word	0x20005e88

08005bfc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
	HAL_Delay(600);
 8005c00:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8005c04:	f7fb feb0 	bl	8001968 <HAL_Delay>
  return HAL_GetTick();
 8005c08:	f7fb fea2 	bl	8001950 <HAL_GetTick>
 8005c0c:	4603      	mov	r3, r0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b0a0      	sub	sp, #128	@ 0x80
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005c1c:	f107 0308 	add.w	r3, r7, #8
 8005c20:	2264      	movs	r2, #100	@ 0x64
 8005c22:	2100      	movs	r1, #0
 8005c24:	4618      	mov	r0, r3
 8005c26:	f009 ff5a 	bl	800fade <memset>
  int32_t PHYLinkState = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c32:	2300      	movs	r3, #0
 8005c34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c36:	2300      	movs	r3, #0
 8005c38:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005c3e:	483a      	ldr	r0, [pc, #232]	@ (8005d28 <ethernet_link_thread+0x114>)
 8005c40:	f7fb fdde 	bl	8001800 <LAN8742_GetLinkState>
 8005c44:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c4c:	089b      	lsrs	r3, r3, #2
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00c      	beq.n	8005c72 <ethernet_link_thread+0x5e>
 8005c58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	dc09      	bgt.n	8005c72 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005c5e:	4833      	ldr	r0, [pc, #204]	@ (8005d2c <ethernet_link_thread+0x118>)
 8005c60:	f7fc ff46 	bl	8002af0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005c64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c66:	f005 fbc5 	bl	800b3f4 <netif_set_down>
    netif_set_link_down(netif);
 8005c6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c6c:	f005 fc28 	bl	800b4c0 <netif_set_link_down>
 8005c70:	e055      	b.n	8005d1e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d14e      	bne.n	8005d1e <ethernet_link_thread+0x10a>
 8005c80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	dd4b      	ble.n	8005d1e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005c86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c88:	3b02      	subs	r3, #2
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d82a      	bhi.n	8005ce4 <ethernet_link_thread+0xd0>
 8005c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <ethernet_link_thread+0x80>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cb7 	.word	0x08005cb7
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005cd7 	.word	0x08005cd7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005ca4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ca8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005caa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cae:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005cb4:	e017      	b.n	8005ce6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005cba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cbe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005cc4:	e00f      	b.n	8005ce6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005cc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005cca:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005cd4:	e007      	b.n	8005ce6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005ce2:	e000      	b.n	8005ce6 <ethernet_link_thread+0xd2>
    default:
      break;
 8005ce4:	bf00      	nop
    }

    if(linkchanged)
 8005ce6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d018      	beq.n	8005d1e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005cec:	f107 0308 	add.w	r3, r7, #8
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	480e      	ldr	r0, [pc, #56]	@ (8005d2c <ethernet_link_thread+0x118>)
 8005cf4:	f7fd fada 	bl	80032ac <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005cf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cfa:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cfe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005d00:	f107 0308 	add.w	r3, r7, #8
 8005d04:	4619      	mov	r1, r3
 8005d06:	4809      	ldr	r0, [pc, #36]	@ (8005d2c <ethernet_link_thread+0x118>)
 8005d08:	f7fd fbc7 	bl	800349a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005d0c:	4807      	ldr	r0, [pc, #28]	@ (8005d2c <ethernet_link_thread+0x118>)
 8005d0e:	f7fc fe7f 	bl	8002a10 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005d12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d14:	f005 fb02 	bl	800b31c <netif_set_up>
      netif_set_link_up(netif);
 8005d18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d1a:	f005 fb9d 	bl	800b458 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005d1e:	2064      	movs	r0, #100	@ 0x64
 8005d20:	f000 f951 	bl	8005fc6 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005d24:	e78b      	b.n	8005c3e <ethernet_link_thread+0x2a>
 8005d26:	bf00      	nop
 8005d28:	20005f70 	.word	0x20005f70
 8005d2c:	20005e88 	.word	0x20005e88

08005d30 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005d38:	4812      	ldr	r0, [pc, #72]	@ (8005d84 <HAL_ETH_RxAllocateCallback+0x54>)
 8005d3a:	f005 f867 	bl	800ae0c <memp_malloc_pool>
 8005d3e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d014      	beq.n	8005d70 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f103 0220 	add.w	r2, r3, #32
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a0d      	ldr	r2, [pc, #52]	@ (8005d88 <HAL_ETH_RxAllocateCallback+0x58>)
 8005d54:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005d5e:	9201      	str	r2, [sp, #4]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2241      	movs	r2, #65	@ 0x41
 8005d66:	2100      	movs	r1, #0
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f005 fd71 	bl	800b850 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005d6e:	e005      	b.n	8005d7c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005d70:	4b06      	ldr	r3, [pc, #24]	@ (8005d8c <HAL_ETH_RxAllocateCallback+0x5c>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	08012938 	.word	0x08012938
 8005d88:	080059a1 	.word	0x080059a1
 8005d8c:	20005e7c 	.word	0x20005e7c

08005d90 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3b20      	subs	r3, #32
 8005dae:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	2200      	movs	r2, #0
 8005dba:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e003      	b.n	8005dda <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	e009      	b.n	8005dfc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	891a      	ldrh	r2, [r3, #8]
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	4413      	add	r3, r2
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f2      	bne.n	8005de8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005e02:	887b      	ldrh	r3, [r7, #2]
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff faee 	bl	80053e8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005e0c:	bf00      	nop
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f005 fed1 	bl	800bbc4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8005e34:	4b15      	ldr	r3, [pc, #84]	@ (8005e8c <RMII_Thread+0x60>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8005e40:	2000      	movs	r0, #0
 8005e42:	f000 f8b4 	bl	8005fae <osThreadTerminate>
 8005e46:	e7f5      	b.n	8005e34 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8005e48:	4b10      	ldr	r3, [pc, #64]	@ (8005e8c <RMII_Thread+0x60>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8005e50:	2b0a      	cmp	r3, #10
 8005e52:	d916      	bls.n	8005e82 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8005e54:	4b0e      	ldr	r3, [pc, #56]	@ (8005e90 <RMII_Thread+0x64>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4a0d      	ldr	r2, [pc, #52]	@ (8005e90 <RMII_Thread+0x64>)
 8005e5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e5e:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8005e60:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <RMII_Thread+0x64>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4a0a      	ldr	r2, [pc, #40]	@ (8005e90 <RMII_Thread+0x64>)
 8005e66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e6a:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8005e6c:	4b07      	ldr	r3, [pc, #28]	@ (8005e8c <RMII_Thread+0x60>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005e74:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <RMII_Thread+0x60>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005e80:	e7d8      	b.n	8005e34 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8005e82:	20c8      	movs	r0, #200	@ 0xc8
 8005e84:	f000 f89f 	bl	8005fc6 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8005e88:	e7d4      	b.n	8005e34 <RMII_Thread+0x8>
 8005e8a:	bf00      	nop
 8005e8c:	20005e88 	.word	0x20005e88
 8005e90:	40013800 	.word	0x40013800

08005e94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ea6:	2b84      	cmp	r3, #132	@ 0x84
 8005ea8:	d005      	beq.n	8005eb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005eaa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3303      	adds	r3, #3
 8005eb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eca:	f3ef 8305 	mrs	r3, IPSR
 8005ece:	607b      	str	r3, [r7, #4]
  return(result);
 8005ed0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bf14      	ite	ne
 8005ed6:	2301      	movne	r3, #1
 8005ed8:	2300      	moveq	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005eec:	f001 fe34 	bl	8007b58 <vTaskStartScheduler>
  
  return osOK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005efa:	f7ff ffe3 	bl	8005ec4 <inHandlerMode>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005f04:	f001 ff4c 	bl	8007da0 <xTaskGetTickCountFromISR>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	e002      	b.n	8005f12 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005f0c:	f001 ff38 	bl	8007d80 <xTaskGetTickCount>
 8005f10:	4603      	mov	r3, r0
  }
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f18:	b089      	sub	sp, #36	@ 0x24
 8005f1a:	af04      	add	r7, sp, #16
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d020      	beq.n	8005f6a <osThreadCreate+0x54>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01c      	beq.n	8005f6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685c      	ldr	r4, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691e      	ldr	r6, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff ffa6 	bl	8005e94 <makeFreeRtosPriority>
 8005f48:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f52:	9202      	str	r2, [sp, #8]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	9100      	str	r1, [sp, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f001 fb90 	bl	8007684 <xTaskCreateStatic>
 8005f64:	4603      	mov	r3, r0
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e01c      	b.n	8005fa4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685c      	ldr	r4, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f76:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff ff88 	bl	8005e94 <makeFreeRtosPriority>
 8005f84:	4602      	mov	r2, r0
 8005f86:	f107 030c 	add.w	r3, r7, #12
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	9200      	str	r2, [sp, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	4632      	mov	r2, r6
 8005f92:	4629      	mov	r1, r5
 8005f94:	4620      	mov	r0, r4
 8005f96:	f001 fbdb 	bl	8007750 <xTaskCreate>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d001      	beq.n	8005fa4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fae <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fd04 	bl	80079c4 <vTaskDelete>
  return osOK;
 8005fbc:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <osDelay+0x16>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	e000      	b.n	8005fde <osDelay+0x18>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fd82 	bl	8007ae8 <vTaskDelay>
  
  return osOK;
 8005fe4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4619      	mov	r1, r3
 8006004:	2001      	movs	r0, #1
 8006006:	f000 fc9a 	bl	800693e <xQueueCreateMutexStatic>
 800600a:	4603      	mov	r3, r0
 800600c:	e003      	b.n	8006016 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800600e:	2001      	movs	r0, #1
 8006010:	f000 fc7d 	bl	800690e <xQueueCreateMutex>
 8006014:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800602a:	2300      	movs	r3, #0
 800602c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <osMutexWait+0x18>
    return osErrorParameter;
 8006034:	2380      	movs	r3, #128	@ 0x80
 8006036:	e03a      	b.n	80060ae <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d103      	bne.n	800604c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006044:	f04f 33ff 	mov.w	r3, #4294967295
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e009      	b.n	8006060 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d006      	beq.n	8006060 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <osMutexWait+0x40>
      ticks = 1;
 800605c:	2301      	movs	r3, #1
 800605e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006060:	f7ff ff30 	bl	8005ec4 <inHandlerMode>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d017      	beq.n	800609a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800606a:	f107 0308 	add.w	r3, r7, #8
 800606e:	461a      	mov	r2, r3
 8006070:	2100      	movs	r1, #0
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 f8c4 	bl	8007200 <xQueueReceiveFromISR>
 8006078:	4603      	mov	r3, r0
 800607a:	2b01      	cmp	r3, #1
 800607c:	d001      	beq.n	8006082 <osMutexWait+0x62>
      return osErrorOS;
 800607e:	23ff      	movs	r3, #255	@ 0xff
 8006080:	e015      	b.n	80060ae <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d011      	beq.n	80060ac <osMutexWait+0x8c>
 8006088:	4b0b      	ldr	r3, [pc, #44]	@ (80060b8 <osMutexWait+0x98>)
 800608a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	e008      	b.n	80060ac <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 ff97 	bl	8006fd0 <xQueueSemaphoreTake>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d001      	beq.n	80060ac <osMutexWait+0x8c>
    return osErrorOS;
 80060a8:	23ff      	movs	r3, #255	@ 0xff
 80060aa:	e000      	b.n	80060ae <osMutexWait+0x8e>
  }
  
  return osOK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80060cc:	f7ff fefa 	bl	8005ec4 <inHandlerMode>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d016      	beq.n	8006104 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80060d6:	f107 0308 	add.w	r3, r7, #8
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fdf6 	bl	8006cce <xQueueGiveFromISR>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d001      	beq.n	80060ec <osMutexRelease+0x30>
      return osErrorOS;
 80060e8:	23ff      	movs	r3, #255	@ 0xff
 80060ea:	e017      	b.n	800611c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d013      	beq.n	800611a <osMutexRelease+0x5e>
 80060f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006124 <osMutexRelease+0x68>)
 80060f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	e00a      	b.n	800611a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006104:	2300      	movs	r3, #0
 8006106:	2200      	movs	r2, #0
 8006108:	2100      	movs	r1, #0
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fc32 	bl	8006974 <xQueueGenericSend>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d001      	beq.n	800611a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006116:	23ff      	movs	r3, #255	@ 0xff
 8006118:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af02      	add	r7, sp, #8
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00f      	beq.n	800615a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10a      	bne.n	8006156 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2203      	movs	r2, #3
 8006146:	9200      	str	r2, [sp, #0]
 8006148:	2200      	movs	r2, #0
 800614a:	2100      	movs	r1, #0
 800614c:	2001      	movs	r0, #1
 800614e:	f000 fadb 	bl	8006708 <xQueueGenericCreateStatic>
 8006152:	4603      	mov	r3, r0
 8006154:	e016      	b.n	8006184 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	e014      	b.n	8006184 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d110      	bne.n	8006182 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006160:	2203      	movs	r2, #3
 8006162:	2100      	movs	r1, #0
 8006164:	2001      	movs	r0, #1
 8006166:	f000 fb56 	bl	8006816 <xQueueGenericCreate>
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <osSemaphoreCreate+0x56>
 8006172:	2300      	movs	r3, #0
 8006174:	2200      	movs	r2, #0
 8006176:	2100      	movs	r1, #0
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fbfb 	bl	8006974 <xQueueGenericSend>
      return sema;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	e000      	b.n	8006184 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006182:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80061a0:	2380      	movs	r3, #128	@ 0x80
 80061a2:	e03a      	b.n	800621a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d103      	bne.n	80061b8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80061b0:	f04f 33ff 	mov.w	r3, #4294967295
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e009      	b.n	80061cc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d006      	beq.n	80061cc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <osSemaphoreWait+0x40>
      ticks = 1;
 80061c8:	2301      	movs	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80061cc:	f7ff fe7a 	bl	8005ec4 <inHandlerMode>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d017      	beq.n	8006206 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80061d6:	f107 0308 	add.w	r3, r7, #8
 80061da:	461a      	mov	r2, r3
 80061dc:	2100      	movs	r1, #0
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 f80e 	bl	8007200 <xQueueReceiveFromISR>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d001      	beq.n	80061ee <osSemaphoreWait+0x62>
      return osErrorOS;
 80061ea:	23ff      	movs	r3, #255	@ 0xff
 80061ec:	e015      	b.n	800621a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d011      	beq.n	8006218 <osSemaphoreWait+0x8c>
 80061f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <osSemaphoreWait+0x98>)
 80061f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	e008      	b.n	8006218 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fee1 	bl	8006fd0 <xQueueSemaphoreTake>
 800620e:	4603      	mov	r3, r0
 8006210:	2b01      	cmp	r3, #1
 8006212:	d001      	beq.n	8006218 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006214:	23ff      	movs	r3, #255	@ 0xff
 8006216:	e000      	b.n	800621a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006234:	2300      	movs	r3, #0
 8006236:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006238:	f7ff fe44 	bl	8005ec4 <inHandlerMode>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d016      	beq.n	8006270 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006242:	f107 0308 	add.w	r3, r7, #8
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fd40 	bl	8006cce <xQueueGiveFromISR>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d001      	beq.n	8006258 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006254:	23ff      	movs	r3, #255	@ 0xff
 8006256:	e017      	b.n	8006288 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d013      	beq.n	8006286 <osSemaphoreRelease+0x5e>
 800625e:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <osSemaphoreRelease+0x68>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	e00a      	b.n	8006286 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006270:	2300      	movs	r3, #0
 8006272:	2200      	movs	r2, #0
 8006274:	2100      	movs	r1, #0
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fb7c 	bl	8006974 <xQueueGenericSend>
 800627c:	4603      	mov	r3, r0
 800627e:	2b01      	cmp	r3, #1
 8006280:	d001      	beq.n	8006286 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006282:	23ff      	movs	r3, #255	@ 0xff
 8006284:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006286:	68fb      	ldr	r3, [r7, #12]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800629c:	f7ff fe12 	bl	8005ec4 <inHandlerMode>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <osSemaphoreDelete+0x16>
    return osErrorISR;
 80062a6:	2382      	movs	r3, #130	@ 0x82
 80062a8:	e003      	b.n	80062b2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 f872 	bl	8007394 <vQueueDelete>

  return osOK; 
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80062ba:	b590      	push	{r4, r7, lr}
 80062bc:	b085      	sub	sp, #20
 80062be:	af02      	add	r7, sp, #8
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d011      	beq.n	80062f0 <osMessageCreate+0x36>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00d      	beq.n	80062f0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6859      	ldr	r1, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2400      	movs	r4, #0
 80062e6:	9400      	str	r4, [sp, #0]
 80062e8:	f000 fa0e 	bl	8006708 <xQueueGenericCreateStatic>
 80062ec:	4603      	mov	r3, r0
 80062ee:	e008      	b.n	8006302 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	4619      	mov	r1, r3
 80062fc:	f000 fa8b 	bl	8006816 <xQueueGenericCreate>
 8006300:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	bd90      	pop	{r4, r7, pc}
	...

0800630c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <osMessagePut+0x1e>
    ticks = 1;
 8006326:	2301      	movs	r3, #1
 8006328:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800632a:	f7ff fdcb 	bl	8005ec4 <inHandlerMode>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d018      	beq.n	8006366 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006334:	f107 0210 	add.w	r2, r7, #16
 8006338:	f107 0108 	add.w	r1, r7, #8
 800633c:	2300      	movs	r3, #0
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fc22 	bl	8006b88 <xQueueGenericSendFromISR>
 8006344:	4603      	mov	r3, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d001      	beq.n	800634e <osMessagePut+0x42>
      return osErrorOS;
 800634a:	23ff      	movs	r3, #255	@ 0xff
 800634c:	e018      	b.n	8006380 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d014      	beq.n	800637e <osMessagePut+0x72>
 8006354:	4b0c      	ldr	r3, [pc, #48]	@ (8006388 <osMessagePut+0x7c>)
 8006356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	e00b      	b.n	800637e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006366:	f107 0108 	add.w	r1, r7, #8
 800636a:	2300      	movs	r3, #0
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fb00 	bl	8006974 <xQueueGenericSend>
 8006374:	4603      	mov	r3, r0
 8006376:	2b01      	cmp	r3, #1
 8006378:	d001      	beq.n	800637e <osMessagePut+0x72>
      return osErrorOS;
 800637a:	23ff      	movs	r3, #255	@ 0xff
 800637c:	e000      	b.n	8006380 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b08b      	sub	sp, #44	@ 0x2c
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80063a6:	2380      	movs	r3, #128	@ 0x80
 80063a8:	617b      	str	r3, [r7, #20]
    return event;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	461c      	mov	r4, r3
 80063ae:	f107 0314 	add.w	r3, r7, #20
 80063b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80063ba:	e054      	b.n	8006466 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80063bc:	2300      	movs	r3, #0
 80063be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d103      	bne.n	80063d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80063cc:	f04f 33ff 	mov.w	r3, #4294967295
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d2:	e009      	b.n	80063e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d006      	beq.n	80063e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <osMessageGet+0x5c>
      ticks = 1;
 80063e4:	2301      	movs	r3, #1
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80063e8:	f7ff fd6c 	bl	8005ec4 <inHandlerMode>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01c      	beq.n	800642c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80063f2:	f107 0220 	add.w	r2, r7, #32
 80063f6:	f107 0314 	add.w	r3, r7, #20
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	68b8      	ldr	r0, [r7, #8]
 8006400:	f000 fefe 	bl	8007200 <xQueueReceiveFromISR>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d102      	bne.n	8006410 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800640a:	2310      	movs	r3, #16
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e001      	b.n	8006414 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01d      	beq.n	8006456 <osMessageGet+0xca>
 800641a:	4b15      	ldr	r3, [pc, #84]	@ (8006470 <osMessageGet+0xe4>)
 800641c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	e014      	b.n	8006456 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800642c:	f107 0314 	add.w	r3, r7, #20
 8006430:	3304      	adds	r3, #4
 8006432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006434:	4619      	mov	r1, r3
 8006436:	68b8      	ldr	r0, [r7, #8]
 8006438:	f000 fce2 	bl	8006e00 <xQueueReceive>
 800643c:	4603      	mov	r3, r0
 800643e:	2b01      	cmp	r3, #1
 8006440:	d102      	bne.n	8006448 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006442:	2310      	movs	r3, #16
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e006      	b.n	8006456 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <osMessageGet+0xc6>
 800644e:	2300      	movs	r3, #0
 8006450:	e000      	b.n	8006454 <osMessageGet+0xc8>
 8006452:	2340      	movs	r3, #64	@ 0x40
 8006454:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	461c      	mov	r4, r3
 800645a:	f107 0314 	add.w	r3, r7, #20
 800645e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	372c      	adds	r7, #44	@ 0x2c
 800646a:	46bd      	mov	sp, r7
 800646c:	bd90      	pop	{r4, r7, pc}
 800646e:	bf00      	nop
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800647c:	f7ff fd22 	bl	8005ec4 <inHandlerMode>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 ff63 	bl	8007352 <uxQueueMessagesWaitingFromISR>
 800648c:	4603      	mov	r3, r0
 800648e:	e003      	b.n	8006498 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 ff3d 	bl	8007310 <uxQueueMessagesWaiting>
 8006496:	4603      	mov	r3, r0
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80064a8:	f7ff fd0c 	bl	8005ec4 <inHandlerMode>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <osMessageDelete+0x16>
    return osErrorISR;
 80064b2:	2382      	movs	r3, #130	@ 0x82
 80064b4:	e003      	b.n	80064be <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 ff6c 	bl	8007394 <vQueueDelete>

  return osOK; 
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f103 0208 	add.w	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f04f 32ff 	mov.w	r2, #4294967295
 80064de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f103 0208 	add.w	r2, r3, #8
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f103 0208 	add.w	r2, r3, #8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	601a      	str	r2, [r3, #0]
}
 800655c:	bf00      	nop
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d103      	bne.n	8006588 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e00c      	b.n	80065a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3308      	adds	r3, #8
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	e002      	b.n	8006596 <vListInsert+0x2e>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d2f6      	bcs.n	8006590 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	601a      	str	r2, [r3, #0]
}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6892      	ldr	r2, [r2, #8]
 80065f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6852      	ldr	r2, [r2, #4]
 80065fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d103      	bne.n	800660e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	1e5a      	subs	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10d      	bne.n	8006660 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	b672      	cpsid	i
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	b662      	cpsie	i
 8006658:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	e7fd      	b.n	800665c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006660:	f002 fa0c 	bl	8008a7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666c:	68f9      	ldr	r1, [r7, #12]
 800666e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006670:	fb01 f303 	mul.w	r3, r1, r3
 8006674:	441a      	add	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006690:	3b01      	subs	r3, #1
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	441a      	add	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	22ff      	movs	r2, #255	@ 0xff
 80066a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	22ff      	movs	r2, #255	@ 0xff
 80066ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d114      	bne.n	80066e0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01a      	beq.n	80066f4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3310      	adds	r3, #16
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 fcc0 	bl	8008048 <xTaskRemoveFromEventList>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d012      	beq.n	80066f4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006704 <xQueueGenericReset+0xd4>)
 80066d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	e009      	b.n	80066f4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3310      	adds	r3, #16
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff feee 	bl	80064c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3324      	adds	r3, #36	@ 0x24
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fee9 	bl	80064c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066f4:	f002 f9f8 	bl	8008ae8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066f8:	2301      	movs	r3, #1
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08e      	sub	sp, #56	@ 0x38
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10d      	bne.n	800675a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	b672      	cpsid	i
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	b662      	cpsie	i
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <xQueueGenericCreateStatic+0x5e>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <xQueueGenericCreateStatic+0x62>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueGenericCreateStatic+0x64>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10d      	bne.n	800678c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	b672      	cpsid	i
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	b662      	cpsie	i
 8006784:	623b      	str	r3, [r7, #32]
}
 8006786:	bf00      	nop
 8006788:	bf00      	nop
 800678a:	e7fd      	b.n	8006788 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d102      	bne.n	8006798 <xQueueGenericCreateStatic+0x90>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <xQueueGenericCreateStatic+0x94>
 8006798:	2301      	movs	r3, #1
 800679a:	e000      	b.n	800679e <xQueueGenericCreateStatic+0x96>
 800679c:	2300      	movs	r3, #0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10d      	bne.n	80067be <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	b672      	cpsid	i
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	b662      	cpsie	i
 80067b6:	61fb      	str	r3, [r7, #28]
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	e7fd      	b.n	80067ba <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067be:	2348      	movs	r3, #72	@ 0x48
 80067c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b48      	cmp	r3, #72	@ 0x48
 80067c6:	d00d      	beq.n	80067e4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067cc:	b672      	cpsid	i
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	b662      	cpsie	i
 80067dc:	61bb      	str	r3, [r7, #24]
}
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	e7fd      	b.n	80067e0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80067ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00d      	beq.n	800680c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80067fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	4613      	mov	r3, r2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f848 	bl	800689c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800680c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800680e:	4618      	mov	r0, r3
 8006810:	3730      	adds	r7, #48	@ 0x30
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006816:	b580      	push	{r7, lr}
 8006818:	b08a      	sub	sp, #40	@ 0x28
 800681a:	af02      	add	r7, sp, #8
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	4613      	mov	r3, r2
 8006822:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10d      	bne.n	8006846 <xQueueGenericCreate+0x30>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	b672      	cpsid	i
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	b662      	cpsie	i
 800683e:	613b      	str	r3, [r7, #16]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d102      	bne.n	8006852 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800684c:	2300      	movs	r3, #0
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	e004      	b.n	800685c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3348      	adds	r3, #72	@ 0x48
 8006860:	4618      	mov	r0, r3
 8006862:	f002 fa39 	bl	8008cd8 <pvPortMalloc>
 8006866:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d011      	beq.n	8006892 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	3348      	adds	r3, #72	@ 0x48
 8006876:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006880:	79fa      	ldrb	r2, [r7, #7]
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	4613      	mov	r3, r2
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f805 	bl	800689c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006892:	69bb      	ldr	r3, [r7, #24]
	}
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d103      	bne.n	80068b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e002      	b.n	80068be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068ca:	2101      	movs	r1, #1
 80068cc:	69b8      	ldr	r0, [r7, #24]
 80068ce:	f7ff feaf 	bl	8006630 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00e      	beq.n	8006906 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80068fa:	2300      	movs	r3, #0
 80068fc:	2200      	movs	r2, #0
 80068fe:	2100      	movs	r1, #0
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f837 	bl	8006974 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800690e:	b580      	push	{r7, lr}
 8006910:	b086      	sub	sp, #24
 8006912:	af00      	add	r7, sp, #0
 8006914:	4603      	mov	r3, r0
 8006916:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	2300      	movs	r3, #0
 800691e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	461a      	mov	r2, r3
 8006924:	6939      	ldr	r1, [r7, #16]
 8006926:	6978      	ldr	r0, [r7, #20]
 8006928:	f7ff ff75 	bl	8006816 <xQueueGenericCreate>
 800692c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff ffd3 	bl	80068da <prvInitialiseMutex>

		return xNewQueue;
 8006934:	68fb      	ldr	r3, [r7, #12]
	}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800693e:	b580      	push	{r7, lr}
 8006940:	b088      	sub	sp, #32
 8006942:	af02      	add	r7, sp, #8
 8006944:	4603      	mov	r3, r0
 8006946:	6039      	str	r1, [r7, #0]
 8006948:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800694a:	2301      	movs	r3, #1
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	2300      	movs	r3, #0
 8006950:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2200      	movs	r2, #0
 800695a:	6939      	ldr	r1, [r7, #16]
 800695c:	6978      	ldr	r0, [r7, #20]
 800695e:	f7ff fed3 	bl	8006708 <xQueueGenericCreateStatic>
 8006962:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff ffb8 	bl	80068da <prvInitialiseMutex>

		return xNewQueue;
 800696a:	68fb      	ldr	r3, [r7, #12]
	}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08e      	sub	sp, #56	@ 0x38
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006982:	2300      	movs	r3, #0
 8006984:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10d      	bne.n	80069ac <xQueueGenericSend+0x38>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	b672      	cpsid	i
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	b662      	cpsie	i
 80069a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <xQueueGenericSend+0x46>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <xQueueGenericSend+0x4a>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <xQueueGenericSend+0x4c>
 80069be:	2300      	movs	r3, #0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10d      	bne.n	80069e0 <xQueueGenericSend+0x6c>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	b672      	cpsid	i
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	b662      	cpsie	i
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	e7fd      	b.n	80069dc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d103      	bne.n	80069ee <xQueueGenericSend+0x7a>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <xQueueGenericSend+0x7e>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <xQueueGenericSend+0x80>
 80069f2:	2300      	movs	r3, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10d      	bne.n	8006a14 <xQueueGenericSend+0xa0>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fc:	b672      	cpsid	i
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	b662      	cpsie	i
 8006a0c:	623b      	str	r3, [r7, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a14:	f001 fce0 	bl	80083d8 <xTaskGetSchedulerState>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d102      	bne.n	8006a24 <xQueueGenericSend+0xb0>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <xQueueGenericSend+0xb4>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <xQueueGenericSend+0xb6>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10d      	bne.n	8006a4a <xQueueGenericSend+0xd6>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a32:	b672      	cpsid	i
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	b662      	cpsie	i
 8006a42:	61fb      	str	r3, [r7, #28]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a4a:	f002 f817 	bl	8008a7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <xQueueGenericSend+0xec>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d129      	bne.n	8006ab4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a66:	f000 fcd3 	bl	8007410 <prvCopyDataToQueue>
 8006a6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d010      	beq.n	8006a96 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a76:	3324      	adds	r3, #36	@ 0x24
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 fae5 	bl	8008048 <xTaskRemoveFromEventList>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d013      	beq.n	8006aac <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a84:	4b3f      	ldr	r3, [pc, #252]	@ (8006b84 <xQueueGenericSend+0x210>)
 8006a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	e00a      	b.n	8006aac <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a9c:	4b39      	ldr	r3, [pc, #228]	@ (8006b84 <xQueueGenericSend+0x210>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006aac:	f002 f81c 	bl	8008ae8 <vPortExitCritical>
				return pdPASS;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e063      	b.n	8006b7c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006aba:	f002 f815 	bl	8008ae8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e05c      	b.n	8006b7c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d106      	bne.n	8006ad6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ac8:	f107 0314 	add.w	r3, r7, #20
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 fb21 	bl	8008114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ad6:	f002 f807 	bl	8008ae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ada:	f001 f8a3 	bl	8007c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ade:	f001 ffcd 	bl	8008a7c <vPortEnterCritical>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	d103      	bne.n	8006af8 <xQueueGenericSend+0x184>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006afe:	b25b      	sxtb	r3, r3
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d103      	bne.n	8006b0e <xQueueGenericSend+0x19a>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b0e:	f001 ffeb 	bl	8008ae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b12:	1d3a      	adds	r2, r7, #4
 8006b14:	f107 0314 	add.w	r3, r7, #20
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 fb10 	bl	8008140 <xTaskCheckForTimeOut>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d124      	bne.n	8006b70 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b28:	f000 fd6a 	bl	8007600 <prvIsQueueFull>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d018      	beq.n	8006b64 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	3310      	adds	r3, #16
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 fa5c 	bl	8007ff8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b42:	f000 fcf5 	bl	8007530 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b46:	f001 f87b 	bl	8007c40 <xTaskResumeAll>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f47f af7c 	bne.w	8006a4a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006b52:	4b0c      	ldr	r3, [pc, #48]	@ (8006b84 <xQueueGenericSend+0x210>)
 8006b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	e772      	b.n	8006a4a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b66:	f000 fce3 	bl	8007530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b6a:	f001 f869 	bl	8007c40 <xTaskResumeAll>
 8006b6e:	e76c      	b.n	8006a4a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b72:	f000 fcdd 	bl	8007530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b76:	f001 f863 	bl	8007c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3738      	adds	r7, #56	@ 0x38
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08e      	sub	sp, #56	@ 0x38
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10d      	bne.n	8006bbc <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba4:	b672      	cpsid	i
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	b662      	cpsie	i
 8006bb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d103      	bne.n	8006bca <xQueueGenericSendFromISR+0x42>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <xQueueGenericSendFromISR+0x46>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueGenericSendFromISR+0x48>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10d      	bne.n	8006bf0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd8:	b672      	cpsid	i
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	b662      	cpsie	i
 8006be8:	623b      	str	r3, [r7, #32]
}
 8006bea:	bf00      	nop
 8006bec:	bf00      	nop
 8006bee:	e7fd      	b.n	8006bec <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d103      	bne.n	8006bfe <xQueueGenericSendFromISR+0x76>
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <xQueueGenericSendFromISR+0x7a>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <xQueueGenericSendFromISR+0x7c>
 8006c02:	2300      	movs	r3, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10d      	bne.n	8006c24 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0c:	b672      	cpsid	i
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	b662      	cpsie	i
 8006c1c:	61fb      	str	r3, [r7, #28]
}
 8006c1e:	bf00      	nop
 8006c20:	bf00      	nop
 8006c22:	e7fd      	b.n	8006c20 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c24:	f002 f812 	bl	8008c4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c28:	f3ef 8211 	mrs	r2, BASEPRI
 8006c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c30:	b672      	cpsid	i
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	b662      	cpsie	i
 8006c40:	61ba      	str	r2, [r7, #24]
 8006c42:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c44:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d302      	bcc.n	8006c5a <xQueueGenericSendFromISR+0xd2>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d12c      	bne.n	8006cb4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c6a:	f000 fbd1 	bl	8007410 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d112      	bne.n	8006c9e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d016      	beq.n	8006cae <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c82:	3324      	adds	r3, #36	@ 0x24
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 f9df 	bl	8008048 <xTaskRemoveFromEventList>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00e      	beq.n	8006cae <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e007      	b.n	8006cae <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	b25a      	sxtb	r2, r3
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006cb2:	e001      	b.n	8006cb8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3738      	adds	r7, #56	@ 0x38
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b08e      	sub	sp, #56	@ 0x38
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10d      	bne.n	8006cfe <xQueueGiveFromISR+0x30>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	b672      	cpsid	i
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	b662      	cpsie	i
 8006cf6:	623b      	str	r3, [r7, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00d      	beq.n	8006d22 <xQueueGiveFromISR+0x54>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0a:	b672      	cpsid	i
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	b662      	cpsie	i
 8006d1a:	61fb      	str	r3, [r7, #28]
}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	e7fd      	b.n	8006d1e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <xQueueGiveFromISR+0x64>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <xQueueGiveFromISR+0x68>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueGiveFromISR+0x6a>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10d      	bne.n	8006d58 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d40:	b672      	cpsid	i
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	b662      	cpsie	i
 8006d50:	61bb      	str	r3, [r7, #24]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d58:	f001 ff78 	bl	8008c4c <vPortValidateInterruptPriority>
	__asm volatile
 8006d5c:	f3ef 8211 	mrs	r2, BASEPRI
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	b672      	cpsid	i
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	b662      	cpsie	i
 8006d74:	617a      	str	r2, [r7, #20]
 8006d76:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006d78:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d80:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d22b      	bcs.n	8006de4 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d112      	bne.n	8006dce <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d016      	beq.n	8006dde <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	3324      	adds	r3, #36	@ 0x24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 f947 	bl	8008048 <xTaskRemoveFromEventList>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00e      	beq.n	8006dde <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	e007      	b.n	8006dde <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	b25a      	sxtb	r2, r3
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006dde:	2301      	movs	r3, #1
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de2:	e001      	b.n	8006de8 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dea:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f383 8811 	msr	BASEPRI, r3
}
 8006df2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3738      	adds	r7, #56	@ 0x38
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08c      	sub	sp, #48	@ 0x30
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10d      	bne.n	8006e36 <xQueueReceive+0x36>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1e:	b672      	cpsid	i
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	b662      	cpsie	i
 8006e2e:	623b      	str	r3, [r7, #32]
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	e7fd      	b.n	8006e32 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <xQueueReceive+0x44>
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <xQueueReceive+0x48>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <xQueueReceive+0x4a>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10d      	bne.n	8006e6a <xQueueReceive+0x6a>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	b672      	cpsid	i
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	b662      	cpsie	i
 8006e62:	61fb      	str	r3, [r7, #28]
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop
 8006e68:	e7fd      	b.n	8006e66 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e6a:	f001 fab5 	bl	80083d8 <xTaskGetSchedulerState>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <xQueueReceive+0x7a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <xQueueReceive+0x7e>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <xQueueReceive+0x80>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10d      	bne.n	8006ea0 <xQueueReceive+0xa0>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e88:	b672      	cpsid	i
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	b662      	cpsie	i
 8006e98:	61bb      	str	r3, [r7, #24]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ea0:	f001 fdec 	bl	8008a7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01f      	beq.n	8006ef0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eb4:	f000 fb16 	bl	80074e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	1e5a      	subs	r2, r3, #1
 8006ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00f      	beq.n	8006ee8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	3310      	adds	r3, #16
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 f8bb 	bl	8008048 <xTaskRemoveFromEventList>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d007      	beq.n	8006ee8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8006fcc <xQueueReceive+0x1cc>)
 8006eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ee8:	f001 fdfe 	bl	8008ae8 <vPortExitCritical>
				return pdPASS;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e069      	b.n	8006fc4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ef6:	f001 fdf7 	bl	8008ae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e062      	b.n	8006fc4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d106      	bne.n	8006f12 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f04:	f107 0310 	add.w	r3, r7, #16
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 f903 	bl	8008114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f12:	f001 fde9 	bl	8008ae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f16:	f000 fe85 	bl	8007c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f1a:	f001 fdaf 	bl	8008a7c <vPortEnterCritical>
 8006f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d103      	bne.n	8006f34 <xQueueReceive+0x134>
 8006f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f3a:	b25b      	sxtb	r3, r3
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d103      	bne.n	8006f4a <xQueueReceive+0x14a>
 8006f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f4a:	f001 fdcd 	bl	8008ae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f4e:	1d3a      	adds	r2, r7, #4
 8006f50:	f107 0310 	add.w	r3, r7, #16
 8006f54:	4611      	mov	r1, r2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 f8f2 	bl	8008140 <xTaskCheckForTimeOut>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d123      	bne.n	8006faa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f64:	f000 fb36 	bl	80075d4 <prvIsQueueEmpty>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d017      	beq.n	8006f9e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	3324      	adds	r3, #36	@ 0x24
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 f83e 	bl	8007ff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f7e:	f000 fad7 	bl	8007530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f82:	f000 fe5d 	bl	8007c40 <xTaskResumeAll>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d189      	bne.n	8006ea0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fcc <xQueueReceive+0x1cc>)
 8006f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	e780      	b.n	8006ea0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fa0:	f000 fac6 	bl	8007530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fa4:	f000 fe4c 	bl	8007c40 <xTaskResumeAll>
 8006fa8:	e77a      	b.n	8006ea0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fac:	f000 fac0 	bl	8007530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fb0:	f000 fe46 	bl	8007c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fb6:	f000 fb0d 	bl	80075d4 <prvIsQueueEmpty>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f43f af6f 	beq.w	8006ea0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3730      	adds	r7, #48	@ 0x30
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	e000ed04 	.word	0xe000ed04

08006fd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08e      	sub	sp, #56	@ 0x38
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10d      	bne.n	8007008 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	b672      	cpsid	i
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	b662      	cpsie	i
 8007000:	623b      	str	r3, [r7, #32]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00d      	beq.n	800702c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007014:	b672      	cpsid	i
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	b662      	cpsie	i
 8007024:	61fb      	str	r3, [r7, #28]
}
 8007026:	bf00      	nop
 8007028:	bf00      	nop
 800702a:	e7fd      	b.n	8007028 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800702c:	f001 f9d4 	bl	80083d8 <xTaskGetSchedulerState>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <xQueueSemaphoreTake+0x6c>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <xQueueSemaphoreTake+0x70>
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <xQueueSemaphoreTake+0x72>
 8007040:	2300      	movs	r3, #0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10d      	bne.n	8007062 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704a:	b672      	cpsid	i
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	b662      	cpsie	i
 800705a:	61bb      	str	r3, [r7, #24]
}
 800705c:	bf00      	nop
 800705e:	bf00      	nop
 8007060:	e7fd      	b.n	800705e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007062:	f001 fd0b 	bl	8008a7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800706c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706e:	2b00      	cmp	r3, #0
 8007070:	d024      	beq.n	80070bc <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007074:	1e5a      	subs	r2, r3, #1
 8007076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007078:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d104      	bne.n	800708c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007082:	f001 fb73 	bl	800876c <pvTaskIncrementMutexHeldCount>
 8007086:	4602      	mov	r2, r0
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00f      	beq.n	80070b4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	3310      	adds	r3, #16
 8007098:	4618      	mov	r0, r3
 800709a:	f000 ffd5 	bl	8008048 <xTaskRemoveFromEventList>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d007      	beq.n	80070b4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070a4:	4b55      	ldr	r3, [pc, #340]	@ (80071fc <xQueueSemaphoreTake+0x22c>)
 80070a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070b4:	f001 fd18 	bl	8008ae8 <vPortExitCritical>
				return pdPASS;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e09a      	b.n	80071f2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d114      	bne.n	80070ec <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00d      	beq.n	80070e4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070cc:	b672      	cpsid	i
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	b662      	cpsie	i
 80070dc:	617b      	str	r3, [r7, #20]
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	e7fd      	b.n	80070e0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80070e4:	f001 fd00 	bl	8008ae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e082      	b.n	80071f2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070f2:	f107 030c 	add.w	r3, r7, #12
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 f80c 	bl	8008114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070fc:	2301      	movs	r3, #1
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007100:	f001 fcf2 	bl	8008ae8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007104:	f000 fd8e 	bl	8007c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007108:	f001 fcb8 	bl	8008a7c <vPortEnterCritical>
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007112:	b25b      	sxtb	r3, r3
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007118:	d103      	bne.n	8007122 <xQueueSemaphoreTake+0x152>
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007124:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007128:	b25b      	sxtb	r3, r3
 800712a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712e:	d103      	bne.n	8007138 <xQueueSemaphoreTake+0x168>
 8007130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007138:	f001 fcd6 	bl	8008ae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800713c:	463a      	mov	r2, r7
 800713e:	f107 030c 	add.w	r3, r7, #12
 8007142:	4611      	mov	r1, r2
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fffb 	bl	8008140 <xTaskCheckForTimeOut>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d132      	bne.n	80071b6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007150:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007152:	f000 fa3f 	bl	80075d4 <prvIsQueueEmpty>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d026      	beq.n	80071aa <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800715c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007164:	f001 fc8a 	bl	8008a7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	4618      	mov	r0, r3
 800716e:	f001 f951 	bl	8008414 <xTaskPriorityInherit>
 8007172:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007174:	f001 fcb8 	bl	8008ae8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717a:	3324      	adds	r3, #36	@ 0x24
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	4611      	mov	r1, r2
 8007180:	4618      	mov	r0, r3
 8007182:	f000 ff39 	bl	8007ff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007186:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007188:	f000 f9d2 	bl	8007530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800718c:	f000 fd58 	bl	8007c40 <xTaskResumeAll>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	f47f af65 	bne.w	8007062 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007198:	4b18      	ldr	r3, [pc, #96]	@ (80071fc <xQueueSemaphoreTake+0x22c>)
 800719a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	e75b      	b.n	8007062 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80071aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071ac:	f000 f9c0 	bl	8007530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071b0:	f000 fd46 	bl	8007c40 <xTaskResumeAll>
 80071b4:	e755      	b.n	8007062 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80071b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071b8:	f000 f9ba 	bl	8007530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071bc:	f000 fd40 	bl	8007c40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071c2:	f000 fa07 	bl	80075d4 <prvIsQueueEmpty>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f43f af4a 	beq.w	8007062 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00d      	beq.n	80071f0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80071d4:	f001 fc52 	bl	8008a7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80071d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071da:	f000 f901 	bl	80073e0 <prvGetDisinheritPriorityAfterTimeout>
 80071de:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80071e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f001 fa20 	bl	800862c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80071ec:	f001 fc7c 	bl	8008ae8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3738      	adds	r7, #56	@ 0x38
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08e      	sub	sp, #56	@ 0x38
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10d      	bne.n	8007232 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721a:	b672      	cpsid	i
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	b662      	cpsie	i
 800722a:	623b      	str	r3, [r7, #32]
}
 800722c:	bf00      	nop
 800722e:	bf00      	nop
 8007230:	e7fd      	b.n	800722e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d103      	bne.n	8007240 <xQueueReceiveFromISR+0x40>
 8007238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <xQueueReceiveFromISR+0x44>
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <xQueueReceiveFromISR+0x46>
 8007244:	2300      	movs	r3, #0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10d      	bne.n	8007266 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724e:	b672      	cpsid	i
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	b662      	cpsie	i
 800725e:	61fb      	str	r3, [r7, #28]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007266:	f001 fcf1 	bl	8008c4c <vPortValidateInterruptPriority>
	__asm volatile
 800726a:	f3ef 8211 	mrs	r2, BASEPRI
 800726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007272:	b672      	cpsid	i
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	b662      	cpsie	i
 8007282:	61ba      	str	r2, [r7, #24]
 8007284:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007286:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007288:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800728a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007292:	2b00      	cmp	r3, #0
 8007294:	d02f      	beq.n	80072f6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800729c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072a4:	f000 f91e 	bl	80074e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	1e5a      	subs	r2, r3, #1
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80072b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b8:	d112      	bne.n	80072e0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d016      	beq.n	80072f0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	3310      	adds	r3, #16
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 febe 	bl	8008048 <xTaskRemoveFromEventList>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00e      	beq.n	80072f0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	e007      	b.n	80072f0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80072e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072e4:	3301      	adds	r3, #1
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	b25a      	sxtb	r2, r3
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80072f0:	2301      	movs	r3, #1
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f4:	e001      	b.n	80072fa <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f383 8811 	msr	BASEPRI, r3
}
 8007304:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007308:	4618      	mov	r0, r3
 800730a:	3738      	adds	r7, #56	@ 0x38
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10d      	bne.n	800733a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007322:	b672      	cpsid	i
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	b662      	cpsie	i
 8007332:	60bb      	str	r3, [r7, #8]
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	e7fd      	b.n	8007336 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800733a:	f001 fb9f 	bl	8008a7c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007344:	f001 fbd0 	bl	8008ae8 <vPortExitCritical>

	return uxReturn;
 8007348:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007352:	b480      	push	{r7}
 8007354:	b087      	sub	sp, #28
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10d      	bne.n	8007380 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	b672      	cpsid	i
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	b662      	cpsie	i
 8007378:	60fb      	str	r3, [r7, #12]
}
 800737a:	bf00      	nop
 800737c:	bf00      	nop
 800737e:	e7fd      	b.n	800737c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007386:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007388:	4618      	mov	r0, r3
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10d      	bne.n	80073c2 <vQueueDelete+0x2e>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	b672      	cpsid	i
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	b662      	cpsie	i
 80073ba:	60bb      	str	r3, [r7, #8]
}
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	e7fd      	b.n	80073be <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f934 	bl	8007630 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f001 fd4e 	bl	8008e74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d006      	beq.n	80073fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f1c3 0307 	rsb	r3, r3, #7
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e001      	b.n	8007402 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007402:	68fb      	ldr	r3, [r7, #12]
	}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800741c:	2300      	movs	r3, #0
 800741e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007424:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10d      	bne.n	800744a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d14d      	bne.n	80074d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	4618      	mov	r0, r3
 800743c:	f001 f86a 	bl	8008514 <xTaskPriorityDisinherit>
 8007440:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	e043      	b.n	80074d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d119      	bne.n	8007484 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6858      	ldr	r0, [r3, #4]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007458:	461a      	mov	r2, r3
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	f008 fbb5 	bl	800fbca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007468:	441a      	add	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	429a      	cmp	r2, r3
 8007478:	d32b      	bcc.n	80074d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	605a      	str	r2, [r3, #4]
 8007482:	e026      	b.n	80074d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	68d8      	ldr	r0, [r3, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748c:	461a      	mov	r2, r3
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	f008 fb9b 	bl	800fbca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749c:	425b      	negs	r3, r3
 800749e:	441a      	add	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d207      	bcs.n	80074c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b8:	425b      	negs	r3, r3
 80074ba:	441a      	add	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d105      	bne.n	80074d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80074da:	697b      	ldr	r3, [r7, #20]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d018      	beq.n	8007528 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fe:	441a      	add	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	429a      	cmp	r2, r3
 800750e:	d303      	bcc.n	8007518 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68d9      	ldr	r1, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007520:	461a      	mov	r2, r3
 8007522:	6838      	ldr	r0, [r7, #0]
 8007524:	f008 fb51 	bl	800fbca <memcpy>
	}
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007538:	f001 faa0 	bl	8008a7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007542:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007544:	e011      	b.n	800756a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d012      	beq.n	8007574 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3324      	adds	r3, #36	@ 0x24
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fd78 	bl	8008048 <xTaskRemoveFromEventList>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800755e:	f000 fe57 	bl	8008210 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	3b01      	subs	r3, #1
 8007566:	b2db      	uxtb	r3, r3
 8007568:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800756a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800756e:	2b00      	cmp	r3, #0
 8007570:	dce9      	bgt.n	8007546 <prvUnlockQueue+0x16>
 8007572:	e000      	b.n	8007576 <prvUnlockQueue+0x46>
					break;
 8007574:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	22ff      	movs	r2, #255	@ 0xff
 800757a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800757e:	f001 fab3 	bl	8008ae8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007582:	f001 fa7b 	bl	8008a7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800758c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800758e:	e011      	b.n	80075b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d012      	beq.n	80075be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3310      	adds	r3, #16
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fd53 	bl	8008048 <xTaskRemoveFromEventList>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80075a8:	f000 fe32 	bl	8008210 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dce9      	bgt.n	8007590 <prvUnlockQueue+0x60>
 80075bc:	e000      	b.n	80075c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80075be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	22ff      	movs	r2, #255	@ 0xff
 80075c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80075c8:	f001 fa8e 	bl	8008ae8 <vPortExitCritical>
}
 80075cc:	bf00      	nop
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075dc:	f001 fa4e 	bl	8008a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075e8:	2301      	movs	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e001      	b.n	80075f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075f2:	f001 fa79 	bl	8008ae8 <vPortExitCritical>

	return xReturn;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007608:	f001 fa38 	bl	8008a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007614:	429a      	cmp	r2, r3
 8007616:	d102      	bne.n	800761e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e001      	b.n	8007622 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007622:	f001 fa61 	bl	8008ae8 <vPortExitCritical>

	return xReturn;
 8007626:	68fb      	ldr	r3, [r7, #12]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e016      	b.n	800766c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800763e:	4a10      	ldr	r2, [pc, #64]	@ (8007680 <vQueueUnregisterQueue+0x50>)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	4413      	add	r3, r2
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	429a      	cmp	r2, r3
 800764c:	d10b      	bne.n	8007666 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800764e:	4a0c      	ldr	r2, [pc, #48]	@ (8007680 <vQueueUnregisterQueue+0x50>)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2100      	movs	r1, #0
 8007654:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007658:	4a09      	ldr	r2, [pc, #36]	@ (8007680 <vQueueUnregisterQueue+0x50>)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	4413      	add	r3, r2
 8007660:	2200      	movs	r2, #0
 8007662:	605a      	str	r2, [r3, #4]
				break;
 8007664:	e006      	b.n	8007674 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b07      	cmp	r3, #7
 8007670:	d9e5      	bls.n	800763e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007672:	bf00      	nop
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20005f90 	.word	0x20005f90

08007684 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08e      	sub	sp, #56	@ 0x38
 8007688:	af04      	add	r7, sp, #16
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10d      	bne.n	80076b4 <xTaskCreateStatic+0x30>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	b672      	cpsid	i
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	b662      	cpsie	i
 80076ac:	623b      	str	r3, [r7, #32]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80076b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10d      	bne.n	80076d6 <xTaskCreateStatic+0x52>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	b672      	cpsid	i
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	b662      	cpsie	i
 80076ce:	61fb      	str	r3, [r7, #28]
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	e7fd      	b.n	80076d2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076d6:	2354      	movs	r3, #84	@ 0x54
 80076d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b54      	cmp	r3, #84	@ 0x54
 80076de:	d00d      	beq.n	80076fc <xTaskCreateStatic+0x78>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e4:	b672      	cpsid	i
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	b662      	cpsie	i
 80076f4:	61bb      	str	r3, [r7, #24]
}
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	e7fd      	b.n	80076f8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01e      	beq.n	8007742 <xTaskCreateStatic+0xbe>
 8007704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01b      	beq.n	8007742 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800770a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007712:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	2202      	movs	r2, #2
 8007718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800771c:	2300      	movs	r3, #0
 800771e:	9303      	str	r3, [sp, #12]
 8007720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007722:	9302      	str	r3, [sp, #8]
 8007724:	f107 0314 	add.w	r3, r7, #20
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 f850 	bl	80077da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800773a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800773c:	f000 f8d8 	bl	80078f0 <prvAddNewTaskToReadyList>
 8007740:	e001      	b.n	8007746 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007746:	697b      	ldr	r3, [r7, #20]
	}
 8007748:	4618      	mov	r0, r3
 800774a:	3728      	adds	r7, #40	@ 0x28
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	@ 0x30
 8007754:	af04      	add	r7, sp, #16
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	4613      	mov	r3, r2
 800775e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007760:	88fb      	ldrh	r3, [r7, #6]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4618      	mov	r0, r3
 8007766:	f001 fab7 	bl	8008cd8 <pvPortMalloc>
 800776a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00e      	beq.n	8007790 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007772:	2054      	movs	r0, #84	@ 0x54
 8007774:	f001 fab0 	bl	8008cd8 <pvPortMalloc>
 8007778:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	631a      	str	r2, [r3, #48]	@ 0x30
 8007786:	e005      	b.n	8007794 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007788:	6978      	ldr	r0, [r7, #20]
 800778a:	f001 fb73 	bl	8008e74 <vPortFree>
 800778e:	e001      	b.n	8007794 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d017      	beq.n	80077ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	2300      	movs	r3, #0
 80077a6:	9303      	str	r3, [sp, #12]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	9302      	str	r3, [sp, #8]
 80077ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f80e 	bl	80077da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077be:	69f8      	ldr	r0, [r7, #28]
 80077c0:	f000 f896 	bl	80078f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077c4:	2301      	movs	r3, #1
 80077c6:	61bb      	str	r3, [r7, #24]
 80077c8:	e002      	b.n	80077d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077d0:	69bb      	ldr	r3, [r7, #24]
	}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b088      	sub	sp, #32
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80077f2:	440b      	add	r3, r1
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	f023 0307 	bic.w	r3, r3, #7
 8007800:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007810:	b672      	cpsid	i
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	b662      	cpsie	i
 8007820:	617b      	str	r3, [r7, #20]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01f      	beq.n	800786e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800782e:	2300      	movs	r3, #0
 8007830:	61fb      	str	r3, [r7, #28]
 8007832:	e012      	b.n	800785a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	7819      	ldrb	r1, [r3, #0]
 800783c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	4413      	add	r3, r2
 8007842:	3334      	adds	r3, #52	@ 0x34
 8007844:	460a      	mov	r2, r1
 8007846:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	4413      	add	r3, r2
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	3301      	adds	r3, #1
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	2b0f      	cmp	r3, #15
 800785e:	d9e9      	bls.n	8007834 <prvInitialiseNewTask+0x5a>
 8007860:	e000      	b.n	8007864 <prvInitialiseNewTask+0x8a>
			{
				break;
 8007862:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800786c:	e003      	b.n	8007876 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	2b06      	cmp	r3, #6
 800787a:	d901      	bls.n	8007880 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800787c:	2306      	movs	r3, #6
 800787e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007884:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800788a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788e:	2200      	movs	r2, #0
 8007890:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	3304      	adds	r3, #4
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fe35 	bl	8006506 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	3318      	adds	r3, #24
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe fe30 	bl	8006506 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	f1c3 0207 	rsb	r2, r3, #7
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078ba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	2200      	movs	r2, #0
 80078c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	68f9      	ldr	r1, [r7, #12]
 80078ce:	69b8      	ldr	r0, [r7, #24]
 80078d0:	f000 ffc6 	bl	8008860 <pxPortInitialiseStack>
 80078d4:	4602      	mov	r2, r0
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078e6:	bf00      	nop
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078f8:	f001 f8c0 	bl	8008a7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078fc:	4b2a      	ldr	r3, [pc, #168]	@ (80079a8 <prvAddNewTaskToReadyList+0xb8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	4a29      	ldr	r2, [pc, #164]	@ (80079a8 <prvAddNewTaskToReadyList+0xb8>)
 8007904:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007906:	4b29      	ldr	r3, [pc, #164]	@ (80079ac <prvAddNewTaskToReadyList+0xbc>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800790e:	4a27      	ldr	r2, [pc, #156]	@ (80079ac <prvAddNewTaskToReadyList+0xbc>)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007914:	4b24      	ldr	r3, [pc, #144]	@ (80079a8 <prvAddNewTaskToReadyList+0xb8>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d110      	bne.n	800793e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800791c:	f000 fc9c 	bl	8008258 <prvInitialiseTaskLists>
 8007920:	e00d      	b.n	800793e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007922:	4b23      	ldr	r3, [pc, #140]	@ (80079b0 <prvAddNewTaskToReadyList+0xc0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800792a:	4b20      	ldr	r3, [pc, #128]	@ (80079ac <prvAddNewTaskToReadyList+0xbc>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	429a      	cmp	r2, r3
 8007936:	d802      	bhi.n	800793e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007938:	4a1c      	ldr	r2, [pc, #112]	@ (80079ac <prvAddNewTaskToReadyList+0xbc>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800793e:	4b1d      	ldr	r3, [pc, #116]	@ (80079b4 <prvAddNewTaskToReadyList+0xc4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	4a1b      	ldr	r2, [pc, #108]	@ (80079b4 <prvAddNewTaskToReadyList+0xc4>)
 8007946:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794c:	2201      	movs	r2, #1
 800794e:	409a      	lsls	r2, r3
 8007950:	4b19      	ldr	r3, [pc, #100]	@ (80079b8 <prvAddNewTaskToReadyList+0xc8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4313      	orrs	r3, r2
 8007956:	4a18      	ldr	r2, [pc, #96]	@ (80079b8 <prvAddNewTaskToReadyList+0xc8>)
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4a15      	ldr	r2, [pc, #84]	@ (80079bc <prvAddNewTaskToReadyList+0xcc>)
 8007968:	441a      	add	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3304      	adds	r3, #4
 800796e:	4619      	mov	r1, r3
 8007970:	4610      	mov	r0, r2
 8007972:	f7fe fdd5 	bl	8006520 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007976:	f001 f8b7 	bl	8008ae8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <prvAddNewTaskToReadyList+0xc0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00e      	beq.n	80079a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007982:	4b0a      	ldr	r3, [pc, #40]	@ (80079ac <prvAddNewTaskToReadyList+0xbc>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798c:	429a      	cmp	r2, r3
 800798e:	d207      	bcs.n	80079a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007990:	4b0b      	ldr	r3, [pc, #44]	@ (80079c0 <prvAddNewTaskToReadyList+0xd0>)
 8007992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	200060d0 	.word	0x200060d0
 80079ac:	20005fd0 	.word	0x20005fd0
 80079b0:	200060dc 	.word	0x200060dc
 80079b4:	200060ec 	.word	0x200060ec
 80079b8:	200060d8 	.word	0x200060d8
 80079bc:	20005fd4 	.word	0x20005fd4
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80079cc:	f001 f856 	bl	8008a7c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d102      	bne.n	80079dc <vTaskDelete+0x18>
 80079d6:	4b3a      	ldr	r3, [pc, #232]	@ (8007ac0 <vTaskDelete+0xfc>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	e000      	b.n	80079de <vTaskDelete+0x1a>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe fdf8 	bl	80065da <uxListRemove>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d115      	bne.n	8007a1c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f4:	4933      	ldr	r1, [pc, #204]	@ (8007ac4 <vTaskDelete+0x100>)
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <vTaskDelete+0x58>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a10:	43da      	mvns	r2, r3
 8007a12:	4b2d      	ldr	r3, [pc, #180]	@ (8007ac8 <vTaskDelete+0x104>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4013      	ands	r3, r2
 8007a18:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac8 <vTaskDelete+0x104>)
 8007a1a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3318      	adds	r3, #24
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fdd6 	bl	80065da <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007a2e:	4b27      	ldr	r3, [pc, #156]	@ (8007acc <vTaskDelete+0x108>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3301      	adds	r3, #1
 8007a34:	4a25      	ldr	r2, [pc, #148]	@ (8007acc <vTaskDelete+0x108>)
 8007a36:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007a38:	4b21      	ldr	r3, [pc, #132]	@ (8007ac0 <vTaskDelete+0xfc>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d10b      	bne.n	8007a5a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3304      	adds	r3, #4
 8007a46:	4619      	mov	r1, r3
 8007a48:	4821      	ldr	r0, [pc, #132]	@ (8007ad0 <vTaskDelete+0x10c>)
 8007a4a:	f7fe fd69 	bl	8006520 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007a4e:	4b21      	ldr	r3, [pc, #132]	@ (8007ad4 <vTaskDelete+0x110>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad4 <vTaskDelete+0x110>)
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	e009      	b.n	8007a6e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ad8 <vTaskDelete+0x114>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad8 <vTaskDelete+0x114>)
 8007a62:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fc65 	bl	8008334 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007a6a:	f000 fc95 	bl	8008398 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007a6e:	f001 f83b 	bl	8008ae8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007a72:	4b1a      	ldr	r3, [pc, #104]	@ (8007adc <vTaskDelete+0x118>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01e      	beq.n	8007ab8 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8007a7a:	4b11      	ldr	r3, [pc, #68]	@ (8007ac0 <vTaskDelete+0xfc>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d119      	bne.n	8007ab8 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007a84:	4b16      	ldr	r3, [pc, #88]	@ (8007ae0 <vTaskDelete+0x11c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00d      	beq.n	8007aa8 <vTaskDelete+0xe4>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a90:	b672      	cpsid	i
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	b662      	cpsie	i
 8007aa0:	60bb      	str	r3, [r7, #8]
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8007aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae4 <vTaskDelete+0x120>)
 8007aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	20005fd0 	.word	0x20005fd0
 8007ac4:	20005fd4 	.word	0x20005fd4
 8007ac8:	200060d8 	.word	0x200060d8
 8007acc:	200060ec 	.word	0x200060ec
 8007ad0:	200060a4 	.word	0x200060a4
 8007ad4:	200060b8 	.word	0x200060b8
 8007ad8:	200060d0 	.word	0x200060d0
 8007adc:	200060dc 	.word	0x200060dc
 8007ae0:	200060f8 	.word	0x200060f8
 8007ae4:	e000ed04 	.word	0xe000ed04

08007ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01a      	beq.n	8007b30 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007afa:	4b15      	ldr	r3, [pc, #84]	@ (8007b50 <vTaskDelay+0x68>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00d      	beq.n	8007b1e <vTaskDelay+0x36>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	b672      	cpsid	i
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	b662      	cpsie	i
 8007b16:	60bb      	str	r3, [r7, #8]
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	e7fd      	b.n	8007b1a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007b1e:	f000 f881 	bl	8007c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b22:	2100      	movs	r1, #0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fe35 	bl	8008794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b2a:	f000 f889 	bl	8007c40 <xTaskResumeAll>
 8007b2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d107      	bne.n	8007b46 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007b36:	4b07      	ldr	r3, [pc, #28]	@ (8007b54 <vTaskDelay+0x6c>)
 8007b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	200060f8 	.word	0x200060f8
 8007b54:	e000ed04 	.word	0xe000ed04

08007b58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	@ 0x28
 8007b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b66:	463a      	mov	r2, r7
 8007b68:	1d39      	adds	r1, r7, #4
 8007b6a:	f107 0308 	add.w	r3, r7, #8
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7f8 fd2e 	bl	80005d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	9202      	str	r2, [sp, #8]
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	460a      	mov	r2, r1
 8007b86:	4921      	ldr	r1, [pc, #132]	@ (8007c0c <vTaskStartScheduler+0xb4>)
 8007b88:	4821      	ldr	r0, [pc, #132]	@ (8007c10 <vTaskStartScheduler+0xb8>)
 8007b8a:	f7ff fd7b 	bl	8007684 <xTaskCreateStatic>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4a20      	ldr	r2, [pc, #128]	@ (8007c14 <vTaskStartScheduler+0xbc>)
 8007b92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b94:	4b1f      	ldr	r3, [pc, #124]	@ (8007c14 <vTaskStartScheduler+0xbc>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e001      	b.n	8007ba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d118      	bne.n	8007bde <vTaskStartScheduler+0x86>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb0:	b672      	cpsid	i
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	b662      	cpsie	i
 8007bc0:	613b      	str	r3, [r7, #16]
}
 8007bc2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bc4:	4b14      	ldr	r3, [pc, #80]	@ (8007c18 <vTaskStartScheduler+0xc0>)
 8007bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007bcc:	4b13      	ldr	r3, [pc, #76]	@ (8007c1c <vTaskStartScheduler+0xc4>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007bd2:	4b13      	ldr	r3, [pc, #76]	@ (8007c20 <vTaskStartScheduler+0xc8>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bd8:	f000 fed2 	bl	8008980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bdc:	e011      	b.n	8007c02 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be4:	d10d      	bne.n	8007c02 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	b672      	cpsid	i
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	b662      	cpsie	i
 8007bfa:	60fb      	str	r3, [r7, #12]
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	e7fd      	b.n	8007bfe <vTaskStartScheduler+0xa6>
}
 8007c02:	bf00      	nop
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	08010940 	.word	0x08010940
 8007c10:	08008229 	.word	0x08008229
 8007c14:	200060f4 	.word	0x200060f4
 8007c18:	200060f0 	.word	0x200060f0
 8007c1c:	200060dc 	.word	0x200060dc
 8007c20:	200060d4 	.word	0x200060d4

08007c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c28:	4b04      	ldr	r3, [pc, #16]	@ (8007c3c <vTaskSuspendAll+0x18>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	4a03      	ldr	r2, [pc, #12]	@ (8007c3c <vTaskSuspendAll+0x18>)
 8007c30:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007c32:	bf00      	nop
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	200060f8 	.word	0x200060f8

08007c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c4e:	4b43      	ldr	r3, [pc, #268]	@ (8007d5c <xTaskResumeAll+0x11c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10d      	bne.n	8007c72 <xTaskResumeAll+0x32>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5a:	b672      	cpsid	i
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	b662      	cpsie	i
 8007c6a:	603b      	str	r3, [r7, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	bf00      	nop
 8007c70:	e7fd      	b.n	8007c6e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c72:	f000 ff03 	bl	8008a7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c76:	4b39      	ldr	r3, [pc, #228]	@ (8007d5c <xTaskResumeAll+0x11c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	4a37      	ldr	r2, [pc, #220]	@ (8007d5c <xTaskResumeAll+0x11c>)
 8007c7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c80:	4b36      	ldr	r3, [pc, #216]	@ (8007d5c <xTaskResumeAll+0x11c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d161      	bne.n	8007d4c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c88:	4b35      	ldr	r3, [pc, #212]	@ (8007d60 <xTaskResumeAll+0x120>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d05d      	beq.n	8007d4c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c90:	e02e      	b.n	8007cf0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c92:	4b34      	ldr	r3, [pc, #208]	@ (8007d64 <xTaskResumeAll+0x124>)
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3318      	adds	r3, #24
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fc9b 	bl	80065da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fc96 	bl	80065da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	409a      	lsls	r2, r3
 8007cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8007d68 <xTaskResumeAll+0x128>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8007d68 <xTaskResumeAll+0x128>)
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4a27      	ldr	r2, [pc, #156]	@ (8007d6c <xTaskResumeAll+0x12c>)
 8007cce:	441a      	add	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	f7fe fc22 	bl	8006520 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce0:	4b23      	ldr	r3, [pc, #140]	@ (8007d70 <xTaskResumeAll+0x130>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d302      	bcc.n	8007cf0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007cea:	4b22      	ldr	r3, [pc, #136]	@ (8007d74 <xTaskResumeAll+0x134>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8007d64 <xTaskResumeAll+0x124>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1cc      	bne.n	8007c92 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cfe:	f000 fb4b 	bl	8008398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d02:	4b1d      	ldr	r3, [pc, #116]	@ (8007d78 <xTaskResumeAll+0x138>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d010      	beq.n	8007d30 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d0e:	f000 f859 	bl	8007dc4 <xTaskIncrementTick>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007d18:	4b16      	ldr	r3, [pc, #88]	@ (8007d74 <xTaskResumeAll+0x134>)
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1f1      	bne.n	8007d0e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007d2a:	4b13      	ldr	r3, [pc, #76]	@ (8007d78 <xTaskResumeAll+0x138>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d30:	4b10      	ldr	r3, [pc, #64]	@ (8007d74 <xTaskResumeAll+0x134>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d009      	beq.n	8007d4c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d7c <xTaskResumeAll+0x13c>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d4c:	f000 fecc 	bl	8008ae8 <vPortExitCritical>

	return xAlreadyYielded;
 8007d50:	68bb      	ldr	r3, [r7, #8]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	200060f8 	.word	0x200060f8
 8007d60:	200060d0 	.word	0x200060d0
 8007d64:	20006090 	.word	0x20006090
 8007d68:	200060d8 	.word	0x200060d8
 8007d6c:	20005fd4 	.word	0x20005fd4
 8007d70:	20005fd0 	.word	0x20005fd0
 8007d74:	200060e4 	.word	0x200060e4
 8007d78:	200060e0 	.word	0x200060e0
 8007d7c:	e000ed04 	.word	0xe000ed04

08007d80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d86:	4b05      	ldr	r3, [pc, #20]	@ (8007d9c <xTaskGetTickCount+0x1c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d8c:	687b      	ldr	r3, [r7, #4]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	200060d4 	.word	0x200060d4

08007da0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007da6:	f000 ff51 	bl	8008c4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007daa:	2300      	movs	r3, #0
 8007dac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007dae:	4b04      	ldr	r3, [pc, #16]	@ (8007dc0 <xTaskGetTickCountFromISR+0x20>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007db4:	683b      	ldr	r3, [r7, #0]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	200060d4 	.word	0x200060d4

08007dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dce:	4b50      	ldr	r3, [pc, #320]	@ (8007f10 <xTaskIncrementTick+0x14c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f040 808b 	bne.w	8007eee <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8007f14 <xTaskIncrementTick+0x150>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007de0:	4a4c      	ldr	r2, [pc, #304]	@ (8007f14 <xTaskIncrementTick+0x150>)
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d123      	bne.n	8007e34 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007dec:	4b4a      	ldr	r3, [pc, #296]	@ (8007f18 <xTaskIncrementTick+0x154>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00d      	beq.n	8007e12 <xTaskIncrementTick+0x4e>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	b672      	cpsid	i
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	b662      	cpsie	i
 8007e0a:	603b      	str	r3, [r7, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	e7fd      	b.n	8007e0e <xTaskIncrementTick+0x4a>
 8007e12:	4b41      	ldr	r3, [pc, #260]	@ (8007f18 <xTaskIncrementTick+0x154>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	4b40      	ldr	r3, [pc, #256]	@ (8007f1c <xTaskIncrementTick+0x158>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f18 <xTaskIncrementTick+0x154>)
 8007e1e:	6013      	str	r3, [r2, #0]
 8007e20:	4a3e      	ldr	r2, [pc, #248]	@ (8007f1c <xTaskIncrementTick+0x158>)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	4b3e      	ldr	r3, [pc, #248]	@ (8007f20 <xTaskIncrementTick+0x15c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f20 <xTaskIncrementTick+0x15c>)
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	f000 fab2 	bl	8008398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e34:	4b3b      	ldr	r3, [pc, #236]	@ (8007f24 <xTaskIncrementTick+0x160>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d348      	bcc.n	8007ed0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e3e:	4b36      	ldr	r3, [pc, #216]	@ (8007f18 <xTaskIncrementTick+0x154>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e48:	4b36      	ldr	r3, [pc, #216]	@ (8007f24 <xTaskIncrementTick+0x160>)
 8007e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4e:	601a      	str	r2, [r3, #0]
					break;
 8007e50:	e03e      	b.n	8007ed0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e52:	4b31      	ldr	r3, [pc, #196]	@ (8007f18 <xTaskIncrementTick+0x154>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d203      	bcs.n	8007e72 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8007f24 <xTaskIncrementTick+0x160>)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e70:	e02e      	b.n	8007ed0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fbaf 	bl	80065da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	3318      	adds	r3, #24
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe fba6 	bl	80065da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e92:	2201      	movs	r2, #1
 8007e94:	409a      	lsls	r2, r3
 8007e96:	4b24      	ldr	r3, [pc, #144]	@ (8007f28 <xTaskIncrementTick+0x164>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	4a22      	ldr	r2, [pc, #136]	@ (8007f28 <xTaskIncrementTick+0x164>)
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4a1f      	ldr	r2, [pc, #124]	@ (8007f2c <xTaskIncrementTick+0x168>)
 8007eae:	441a      	add	r2, r3
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7fe fb32 	bl	8006520 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8007f30 <xTaskIncrementTick+0x16c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d3b9      	bcc.n	8007e3e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ece:	e7b6      	b.n	8007e3e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ed0:	4b17      	ldr	r3, [pc, #92]	@ (8007f30 <xTaskIncrementTick+0x16c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed6:	4915      	ldr	r1, [pc, #84]	@ (8007f2c <xTaskIncrementTick+0x168>)
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d907      	bls.n	8007ef8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	e004      	b.n	8007ef8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007eee:	4b11      	ldr	r3, [pc, #68]	@ (8007f34 <xTaskIncrementTick+0x170>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8007f34 <xTaskIncrementTick+0x170>)
 8007ef6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f38 <xTaskIncrementTick+0x174>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007f00:	2301      	movs	r3, #1
 8007f02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f04:	697b      	ldr	r3, [r7, #20]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	200060f8 	.word	0x200060f8
 8007f14:	200060d4 	.word	0x200060d4
 8007f18:	20006088 	.word	0x20006088
 8007f1c:	2000608c 	.word	0x2000608c
 8007f20:	200060e8 	.word	0x200060e8
 8007f24:	200060f0 	.word	0x200060f0
 8007f28:	200060d8 	.word	0x200060d8
 8007f2c:	20005fd4 	.word	0x20005fd4
 8007f30:	20005fd0 	.word	0x20005fd0
 8007f34:	200060e0 	.word	0x200060e0
 8007f38:	200060e4 	.word	0x200060e4

08007f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f42:	4b28      	ldr	r3, [pc, #160]	@ (8007fe4 <vTaskSwitchContext+0xa8>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f4a:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <vTaskSwitchContext+0xac>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f50:	e042      	b.n	8007fd8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007f52:	4b25      	ldr	r3, [pc, #148]	@ (8007fe8 <vTaskSwitchContext+0xac>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f58:	4b24      	ldr	r3, [pc, #144]	@ (8007fec <vTaskSwitchContext+0xb0>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	fab3 f383 	clz	r3, r3
 8007f64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	f1c3 031f 	rsb	r3, r3, #31
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	4920      	ldr	r1, [pc, #128]	@ (8007ff0 <vTaskSwitchContext+0xb4>)
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10d      	bne.n	8007f9e <vTaskSwitchContext+0x62>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	b672      	cpsid	i
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	b662      	cpsie	i
 8007f96:	607b      	str	r3, [r7, #4]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <vTaskSwitchContext+0x5e>
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4a11      	ldr	r2, [pc, #68]	@ (8007ff0 <vTaskSwitchContext+0xb4>)
 8007faa:	4413      	add	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	605a      	str	r2, [r3, #4]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d104      	bne.n	8007fce <vTaskSwitchContext+0x92>
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	605a      	str	r2, [r3, #4]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	4a07      	ldr	r2, [pc, #28]	@ (8007ff4 <vTaskSwitchContext+0xb8>)
 8007fd6:	6013      	str	r3, [r2, #0]
}
 8007fd8:	bf00      	nop
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	200060f8 	.word	0x200060f8
 8007fe8:	200060e4 	.word	0x200060e4
 8007fec:	200060d8 	.word	0x200060d8
 8007ff0:	20005fd4 	.word	0x20005fd4
 8007ff4:	20005fd0 	.word	0x20005fd0

08007ff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10d      	bne.n	8008024 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800c:	b672      	cpsid	i
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	b662      	cpsie	i
 800801c:	60fb      	str	r3, [r7, #12]
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008024:	4b07      	ldr	r3, [pc, #28]	@ (8008044 <vTaskPlaceOnEventList+0x4c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3318      	adds	r3, #24
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7fe fa9b 	bl	8006568 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008032:	2101      	movs	r1, #1
 8008034:	6838      	ldr	r0, [r7, #0]
 8008036:	f000 fbad 	bl	8008794 <prvAddCurrentTaskToDelayedList>
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20005fd0 	.word	0x20005fd0

08008048 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10d      	bne.n	800807a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008062:	b672      	cpsid	i
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	b662      	cpsie	i
 8008072:	60fb      	str	r3, [r7, #12]
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	e7fd      	b.n	8008076 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	3318      	adds	r3, #24
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe faab 	bl	80065da <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008084:	4b1d      	ldr	r3, [pc, #116]	@ (80080fc <xTaskRemoveFromEventList+0xb4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11c      	bne.n	80080c6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	3304      	adds	r3, #4
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe faa2 	bl	80065da <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	2201      	movs	r2, #1
 800809c:	409a      	lsls	r2, r3
 800809e:	4b18      	ldr	r3, [pc, #96]	@ (8008100 <xTaskRemoveFromEventList+0xb8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	4a16      	ldr	r2, [pc, #88]	@ (8008100 <xTaskRemoveFromEventList+0xb8>)
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4a13      	ldr	r2, [pc, #76]	@ (8008104 <xTaskRemoveFromEventList+0xbc>)
 80080b6:	441a      	add	r2, r3
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4619      	mov	r1, r3
 80080be:	4610      	mov	r0, r2
 80080c0:	f7fe fa2e 	bl	8006520 <vListInsertEnd>
 80080c4:	e005      	b.n	80080d2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	3318      	adds	r3, #24
 80080ca:	4619      	mov	r1, r3
 80080cc:	480e      	ldr	r0, [pc, #56]	@ (8008108 <xTaskRemoveFromEventList+0xc0>)
 80080ce:	f7fe fa27 	bl	8006520 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d6:	4b0d      	ldr	r3, [pc, #52]	@ (800810c <xTaskRemoveFromEventList+0xc4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080dc:	429a      	cmp	r2, r3
 80080de:	d905      	bls.n	80080ec <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080e0:	2301      	movs	r3, #1
 80080e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008110 <xTaskRemoveFromEventList+0xc8>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	e001      	b.n	80080f0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080f0:	697b      	ldr	r3, [r7, #20]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200060f8 	.word	0x200060f8
 8008100:	200060d8 	.word	0x200060d8
 8008104:	20005fd4 	.word	0x20005fd4
 8008108:	20006090 	.word	0x20006090
 800810c:	20005fd0 	.word	0x20005fd0
 8008110:	200060e4 	.word	0x200060e4

08008114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800811c:	4b06      	ldr	r3, [pc, #24]	@ (8008138 <vTaskInternalSetTimeOutState+0x24>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008124:	4b05      	ldr	r3, [pc, #20]	@ (800813c <vTaskInternalSetTimeOutState+0x28>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	605a      	str	r2, [r3, #4]
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	200060e8 	.word	0x200060e8
 800813c:	200060d4 	.word	0x200060d4

08008140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10d      	bne.n	800816c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	b672      	cpsid	i
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	b662      	cpsie	i
 8008164:	613b      	str	r3, [r7, #16]
}
 8008166:	bf00      	nop
 8008168:	bf00      	nop
 800816a:	e7fd      	b.n	8008168 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10d      	bne.n	800818e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008176:	b672      	cpsid	i
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	b662      	cpsie	i
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800818e:	f000 fc75 	bl	8008a7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008192:	4b1d      	ldr	r3, [pc, #116]	@ (8008208 <xTaskCheckForTimeOut+0xc8>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d102      	bne.n	80081b2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081ac:	2300      	movs	r3, #0
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	e023      	b.n	80081fa <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	4b15      	ldr	r3, [pc, #84]	@ (800820c <xTaskCheckForTimeOut+0xcc>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d007      	beq.n	80081ce <xTaskCheckForTimeOut+0x8e>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d302      	bcc.n	80081ce <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081c8:	2301      	movs	r3, #1
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	e015      	b.n	80081fa <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d20b      	bcs.n	80081f0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	1ad2      	subs	r2, r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff ff95 	bl	8008114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	e004      	b.n	80081fa <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081f6:	2301      	movs	r3, #1
 80081f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081fa:	f000 fc75 	bl	8008ae8 <vPortExitCritical>

	return xReturn;
 80081fe:	69fb      	ldr	r3, [r7, #28]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	200060d4 	.word	0x200060d4
 800820c:	200060e8 	.word	0x200060e8

08008210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008214:	4b03      	ldr	r3, [pc, #12]	@ (8008224 <vTaskMissedYield+0x14>)
 8008216:	2201      	movs	r2, #1
 8008218:	601a      	str	r2, [r3, #0]
}
 800821a:	bf00      	nop
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	200060e4 	.word	0x200060e4

08008228 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008230:	f000 f852 	bl	80082d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008234:	4b06      	ldr	r3, [pc, #24]	@ (8008250 <prvIdleTask+0x28>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d9f9      	bls.n	8008230 <prvIdleTask+0x8>
			{
				taskYIELD();
 800823c:	4b05      	ldr	r3, [pc, #20]	@ (8008254 <prvIdleTask+0x2c>)
 800823e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800824c:	e7f0      	b.n	8008230 <prvIdleTask+0x8>
 800824e:	bf00      	nop
 8008250:	20005fd4 	.word	0x20005fd4
 8008254:	e000ed04 	.word	0xe000ed04

08008258 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800825e:	2300      	movs	r3, #0
 8008260:	607b      	str	r3, [r7, #4]
 8008262:	e00c      	b.n	800827e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4a12      	ldr	r2, [pc, #72]	@ (80082b8 <prvInitialiseTaskLists+0x60>)
 8008270:	4413      	add	r3, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe f927 	bl	80064c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3301      	adds	r3, #1
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b06      	cmp	r3, #6
 8008282:	d9ef      	bls.n	8008264 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008284:	480d      	ldr	r0, [pc, #52]	@ (80082bc <prvInitialiseTaskLists+0x64>)
 8008286:	f7fe f91e 	bl	80064c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800828a:	480d      	ldr	r0, [pc, #52]	@ (80082c0 <prvInitialiseTaskLists+0x68>)
 800828c:	f7fe f91b 	bl	80064c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008290:	480c      	ldr	r0, [pc, #48]	@ (80082c4 <prvInitialiseTaskLists+0x6c>)
 8008292:	f7fe f918 	bl	80064c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008296:	480c      	ldr	r0, [pc, #48]	@ (80082c8 <prvInitialiseTaskLists+0x70>)
 8008298:	f7fe f915 	bl	80064c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800829c:	480b      	ldr	r0, [pc, #44]	@ (80082cc <prvInitialiseTaskLists+0x74>)
 800829e:	f7fe f912 	bl	80064c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082a2:	4b0b      	ldr	r3, [pc, #44]	@ (80082d0 <prvInitialiseTaskLists+0x78>)
 80082a4:	4a05      	ldr	r2, [pc, #20]	@ (80082bc <prvInitialiseTaskLists+0x64>)
 80082a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <prvInitialiseTaskLists+0x7c>)
 80082aa:	4a05      	ldr	r2, [pc, #20]	@ (80082c0 <prvInitialiseTaskLists+0x68>)
 80082ac:	601a      	str	r2, [r3, #0]
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20005fd4 	.word	0x20005fd4
 80082bc:	20006060 	.word	0x20006060
 80082c0:	20006074 	.word	0x20006074
 80082c4:	20006090 	.word	0x20006090
 80082c8:	200060a4 	.word	0x200060a4
 80082cc:	200060bc 	.word	0x200060bc
 80082d0:	20006088 	.word	0x20006088
 80082d4:	2000608c 	.word	0x2000608c

080082d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082de:	e019      	b.n	8008314 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082e0:	f000 fbcc 	bl	8008a7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e4:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <prvCheckTasksWaitingTermination+0x50>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe f972 	bl	80065da <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <prvCheckTasksWaitingTermination+0x54>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	4a0b      	ldr	r2, [pc, #44]	@ (800832c <prvCheckTasksWaitingTermination+0x54>)
 80082fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008300:	4b0b      	ldr	r3, [pc, #44]	@ (8008330 <prvCheckTasksWaitingTermination+0x58>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3b01      	subs	r3, #1
 8008306:	4a0a      	ldr	r2, [pc, #40]	@ (8008330 <prvCheckTasksWaitingTermination+0x58>)
 8008308:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800830a:	f000 fbed 	bl	8008ae8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f810 	bl	8008334 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008314:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <prvCheckTasksWaitingTermination+0x58>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e1      	bne.n	80082e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200060a4 	.word	0x200060a4
 800832c:	200060d0 	.word	0x200060d0
 8008330:	200060b8 	.word	0x200060b8

08008334 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008342:	2b00      	cmp	r3, #0
 8008344:	d108      	bne.n	8008358 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834a:	4618      	mov	r0, r3
 800834c:	f000 fd92 	bl	8008e74 <vPortFree>
				vPortFree( pxTCB );
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fd8f 	bl	8008e74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008356:	e01b      	b.n	8008390 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800835e:	2b01      	cmp	r3, #1
 8008360:	d103      	bne.n	800836a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fd86 	bl	8008e74 <vPortFree>
	}
 8008368:	e012      	b.n	8008390 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008370:	2b02      	cmp	r3, #2
 8008372:	d00d      	beq.n	8008390 <prvDeleteTCB+0x5c>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	b672      	cpsid	i
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	b662      	cpsie	i
 8008388:	60fb      	str	r3, [r7, #12]
}
 800838a:	bf00      	nop
 800838c:	bf00      	nop
 800838e:	e7fd      	b.n	800838c <prvDeleteTCB+0x58>
	}
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800839e:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <prvResetNextTaskUnblockTime+0x38>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d104      	bne.n	80083b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083a8:	4b0a      	ldr	r3, [pc, #40]	@ (80083d4 <prvResetNextTaskUnblockTime+0x3c>)
 80083aa:	f04f 32ff 	mov.w	r2, #4294967295
 80083ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083b0:	e008      	b.n	80083c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b2:	4b07      	ldr	r3, [pc, #28]	@ (80083d0 <prvResetNextTaskUnblockTime+0x38>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	4a04      	ldr	r2, [pc, #16]	@ (80083d4 <prvResetNextTaskUnblockTime+0x3c>)
 80083c2:	6013      	str	r3, [r2, #0]
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	20006088 	.word	0x20006088
 80083d4:	200060f0 	.word	0x200060f0

080083d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083de:	4b0b      	ldr	r3, [pc, #44]	@ (800840c <xTaskGetSchedulerState+0x34>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d102      	bne.n	80083ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083e6:	2301      	movs	r3, #1
 80083e8:	607b      	str	r3, [r7, #4]
 80083ea:	e008      	b.n	80083fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ec:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <xTaskGetSchedulerState+0x38>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d102      	bne.n	80083fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083f4:	2302      	movs	r3, #2
 80083f6:	607b      	str	r3, [r7, #4]
 80083f8:	e001      	b.n	80083fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083fa:	2300      	movs	r3, #0
 80083fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083fe:	687b      	ldr	r3, [r7, #4]
	}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	200060dc 	.word	0x200060dc
 8008410:	200060f8 	.word	0x200060f8

08008414 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d069      	beq.n	80084fe <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800842e:	4b36      	ldr	r3, [pc, #216]	@ (8008508 <xTaskPriorityInherit+0xf4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008434:	429a      	cmp	r2, r3
 8008436:	d259      	bcs.n	80084ec <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	2b00      	cmp	r3, #0
 800843e:	db06      	blt.n	800844e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008440:	4b31      	ldr	r3, [pc, #196]	@ (8008508 <xTaskPriorityInherit+0xf4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	f1c3 0207 	rsb	r2, r3, #7
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6959      	ldr	r1, [r3, #20]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4a2b      	ldr	r2, [pc, #172]	@ (800850c <xTaskPriorityInherit+0xf8>)
 8008460:	4413      	add	r3, r2
 8008462:	4299      	cmp	r1, r3
 8008464:	d13a      	bne.n	80084dc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	3304      	adds	r3, #4
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe f8b5 	bl	80065da <uxListRemove>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d115      	bne.n	80084a2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847a:	4924      	ldr	r1, [pc, #144]	@ (800850c <xTaskPriorityInherit+0xf8>)
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	440b      	add	r3, r1
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10a      	bne.n	80084a2 <xTaskPriorityInherit+0x8e>
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008490:	2201      	movs	r2, #1
 8008492:	fa02 f303 	lsl.w	r3, r2, r3
 8008496:	43da      	mvns	r2, r3
 8008498:	4b1d      	ldr	r3, [pc, #116]	@ (8008510 <xTaskPriorityInherit+0xfc>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4013      	ands	r3, r2
 800849e:	4a1c      	ldr	r2, [pc, #112]	@ (8008510 <xTaskPriorityInherit+0xfc>)
 80084a0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084a2:	4b19      	ldr	r3, [pc, #100]	@ (8008508 <xTaskPriorityInherit+0xf4>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b0:	2201      	movs	r2, #1
 80084b2:	409a      	lsls	r2, r3
 80084b4:	4b16      	ldr	r3, [pc, #88]	@ (8008510 <xTaskPriorityInherit+0xfc>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	4a15      	ldr	r2, [pc, #84]	@ (8008510 <xTaskPriorityInherit+0xfc>)
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4a10      	ldr	r2, [pc, #64]	@ (800850c <xTaskPriorityInherit+0xf8>)
 80084cc:	441a      	add	r2, r3
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4619      	mov	r1, r3
 80084d4:	4610      	mov	r0, r2
 80084d6:	f7fe f823 	bl	8006520 <vListInsertEnd>
 80084da:	e004      	b.n	80084e6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <xTaskPriorityInherit+0xf4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80084e6:	2301      	movs	r3, #1
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	e008      	b.n	80084fe <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084f0:	4b05      	ldr	r3, [pc, #20]	@ (8008508 <xTaskPriorityInherit+0xf4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d201      	bcs.n	80084fe <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80084fa:	2301      	movs	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084fe:	68fb      	ldr	r3, [r7, #12]
	}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20005fd0 	.word	0x20005fd0
 800850c:	20005fd4 	.word	0x20005fd4
 8008510:	200060d8 	.word	0x200060d8

08008514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d074      	beq.n	8008614 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800852a:	4b3d      	ldr	r3, [pc, #244]	@ (8008620 <xTaskPriorityDisinherit+0x10c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	429a      	cmp	r2, r3
 8008532:	d00d      	beq.n	8008550 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	b672      	cpsid	i
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	b662      	cpsie	i
 8008548:	60fb      	str	r3, [r7, #12]
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	e7fd      	b.n	800854c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10d      	bne.n	8008574 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855c:	b672      	cpsid	i
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	b662      	cpsie	i
 800856c:	60bb      	str	r3, [r7, #8]
}
 800856e:	bf00      	nop
 8008570:	bf00      	nop
 8008572:	e7fd      	b.n	8008570 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008578:	1e5a      	subs	r2, r3, #1
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008586:	429a      	cmp	r2, r3
 8008588:	d044      	beq.n	8008614 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800858e:	2b00      	cmp	r3, #0
 8008590:	d140      	bne.n	8008614 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	3304      	adds	r3, #4
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe f81f 	bl	80065da <uxListRemove>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d115      	bne.n	80085ce <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a6:	491f      	ldr	r1, [pc, #124]	@ (8008624 <xTaskPriorityDisinherit+0x110>)
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10a      	bne.n	80085ce <xTaskPriorityDisinherit+0xba>
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085bc:	2201      	movs	r2, #1
 80085be:	fa02 f303 	lsl.w	r3, r2, r3
 80085c2:	43da      	mvns	r2, r3
 80085c4:	4b18      	ldr	r3, [pc, #96]	@ (8008628 <xTaskPriorityDisinherit+0x114>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4013      	ands	r3, r2
 80085ca:	4a17      	ldr	r2, [pc, #92]	@ (8008628 <xTaskPriorityDisinherit+0x114>)
 80085cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085da:	f1c3 0207 	rsb	r2, r3, #7
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e6:	2201      	movs	r2, #1
 80085e8:	409a      	lsls	r2, r3
 80085ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008628 <xTaskPriorityDisinherit+0x114>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008628 <xTaskPriorityDisinherit+0x114>)
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4a08      	ldr	r2, [pc, #32]	@ (8008624 <xTaskPriorityDisinherit+0x110>)
 8008602:	441a      	add	r2, r3
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	3304      	adds	r3, #4
 8008608:	4619      	mov	r1, r3
 800860a:	4610      	mov	r0, r2
 800860c:	f7fd ff88 	bl	8006520 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008614:	697b      	ldr	r3, [r7, #20]
	}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20005fd0 	.word	0x20005fd0
 8008624:	20005fd4 	.word	0x20005fd4
 8008628:	200060d8 	.word	0x200060d8

0800862c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800863a:	2301      	movs	r3, #1
 800863c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8089 	beq.w	8008758 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10d      	bne.n	800866a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	b672      	cpsid	i
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	b662      	cpsie	i
 8008662:	60fb      	str	r3, [r7, #12]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d902      	bls.n	800867a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	e002      	b.n	8008680 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800867e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	429a      	cmp	r2, r3
 8008688:	d066      	beq.n	8008758 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	429a      	cmp	r2, r3
 8008692:	d161      	bne.n	8008758 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008694:	4b32      	ldr	r3, [pc, #200]	@ (8008760 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	429a      	cmp	r2, r3
 800869c:	d10d      	bne.n	80086ba <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	b672      	cpsid	i
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	b662      	cpsie	i
 80086b2:	60bb      	str	r3, [r7, #8]
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	db04      	blt.n	80086d8 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	f1c3 0207 	rsb	r2, r3, #7
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	6959      	ldr	r1, [r3, #20]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008764 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80086e8:	4413      	add	r3, r2
 80086ea:	4299      	cmp	r1, r3
 80086ec:	d134      	bne.n	8008758 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	3304      	adds	r3, #4
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fd ff71 	bl	80065da <uxListRemove>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d115      	bne.n	800872a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008702:	4918      	ldr	r1, [pc, #96]	@ (8008764 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10a      	bne.n	800872a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008718:	2201      	movs	r2, #1
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	43da      	mvns	r2, r3
 8008720:	4b11      	ldr	r3, [pc, #68]	@ (8008768 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4013      	ands	r3, r2
 8008726:	4a10      	ldr	r2, [pc, #64]	@ (8008768 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008728:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872e:	2201      	movs	r2, #1
 8008730:	409a      	lsls	r2, r3
 8008732:	4b0d      	ldr	r3, [pc, #52]	@ (8008768 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4313      	orrs	r3, r2
 8008738:	4a0b      	ldr	r2, [pc, #44]	@ (8008768 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4a06      	ldr	r2, [pc, #24]	@ (8008764 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800874a:	441a      	add	r2, r3
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f7fd fee4 	bl	8006520 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008758:	bf00      	nop
 800875a:	3720      	adds	r7, #32
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20005fd0 	.word	0x20005fd0
 8008764:	20005fd4 	.word	0x20005fd4
 8008768:	200060d8 	.word	0x200060d8

0800876c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008770:	4b07      	ldr	r3, [pc, #28]	@ (8008790 <pvTaskIncrementMutexHeldCount+0x24>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d004      	beq.n	8008782 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008778:	4b05      	ldr	r3, [pc, #20]	@ (8008790 <pvTaskIncrementMutexHeldCount+0x24>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800877e:	3201      	adds	r2, #1
 8008780:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008782:	4b03      	ldr	r3, [pc, #12]	@ (8008790 <pvTaskIncrementMutexHeldCount+0x24>)
 8008784:	681b      	ldr	r3, [r3, #0]
	}
 8008786:	4618      	mov	r0, r3
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	20005fd0 	.word	0x20005fd0

08008794 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800879e:	4b29      	ldr	r3, [pc, #164]	@ (8008844 <prvAddCurrentTaskToDelayedList+0xb0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087a4:	4b28      	ldr	r3, [pc, #160]	@ (8008848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3304      	adds	r3, #4
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fd ff15 	bl	80065da <uxListRemove>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80087b6:	4b24      	ldr	r3, [pc, #144]	@ (8008848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087bc:	2201      	movs	r2, #1
 80087be:	fa02 f303 	lsl.w	r3, r2, r3
 80087c2:	43da      	mvns	r2, r3
 80087c4:	4b21      	ldr	r3, [pc, #132]	@ (800884c <prvAddCurrentTaskToDelayedList+0xb8>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4013      	ands	r3, r2
 80087ca:	4a20      	ldr	r2, [pc, #128]	@ (800884c <prvAddCurrentTaskToDelayedList+0xb8>)
 80087cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d4:	d10a      	bne.n	80087ec <prvAddCurrentTaskToDelayedList+0x58>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d007      	beq.n	80087ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	481a      	ldr	r0, [pc, #104]	@ (8008850 <prvAddCurrentTaskToDelayedList+0xbc>)
 80087e6:	f7fd fe9b 	bl	8006520 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087ea:	e026      	b.n	800883a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4413      	add	r3, r2
 80087f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087f4:	4b14      	ldr	r3, [pc, #80]	@ (8008848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	429a      	cmp	r2, r3
 8008802:	d209      	bcs.n	8008818 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008804:	4b13      	ldr	r3, [pc, #76]	@ (8008854 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	4b0f      	ldr	r3, [pc, #60]	@ (8008848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3304      	adds	r3, #4
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f7fd fea9 	bl	8006568 <vListInsert>
}
 8008816:	e010      	b.n	800883a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008818:	4b0f      	ldr	r3, [pc, #60]	@ (8008858 <prvAddCurrentTaskToDelayedList+0xc4>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3304      	adds	r3, #4
 8008822:	4619      	mov	r1, r3
 8008824:	4610      	mov	r0, r2
 8008826:	f7fd fe9f 	bl	8006568 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800882a:	4b0c      	ldr	r3, [pc, #48]	@ (800885c <prvAddCurrentTaskToDelayedList+0xc8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	429a      	cmp	r2, r3
 8008832:	d202      	bcs.n	800883a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008834:	4a09      	ldr	r2, [pc, #36]	@ (800885c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	6013      	str	r3, [r2, #0]
}
 800883a:	bf00      	nop
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	200060d4 	.word	0x200060d4
 8008848:	20005fd0 	.word	0x20005fd0
 800884c:	200060d8 	.word	0x200060d8
 8008850:	200060bc 	.word	0x200060bc
 8008854:	2000608c 	.word	0x2000608c
 8008858:	20006088 	.word	0x20006088
 800885c:	200060f0 	.word	0x200060f0

08008860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3b04      	subs	r3, #4
 8008870:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3b04      	subs	r3, #4
 800887e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f023 0201 	bic.w	r2, r3, #1
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3b04      	subs	r3, #4
 800888e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008890:	4a0c      	ldr	r2, [pc, #48]	@ (80088c4 <pxPortInitialiseStack+0x64>)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3b14      	subs	r3, #20
 800889a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3b04      	subs	r3, #4
 80088a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f06f 0202 	mvn.w	r2, #2
 80088ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3b20      	subs	r3, #32
 80088b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088b6:	68fb      	ldr	r3, [r7, #12]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	080088c9 	.word	0x080088c9

080088c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088d2:	4b15      	ldr	r3, [pc, #84]	@ (8008928 <prvTaskExitError+0x60>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088da:	d00d      	beq.n	80088f8 <prvTaskExitError+0x30>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e0:	b672      	cpsid	i
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	b662      	cpsie	i
 80088f0:	60fb      	str	r3, [r7, #12]
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <prvTaskExitError+0x2c>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fc:	b672      	cpsid	i
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	b662      	cpsie	i
 800890c:	60bb      	str	r3, [r7, #8]
}
 800890e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008910:	bf00      	nop
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0fc      	beq.n	8008912 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	20000028 	.word	0x20000028
 800892c:	00000000 	.word	0x00000000

08008930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008930:	4b07      	ldr	r3, [pc, #28]	@ (8008950 <pxCurrentTCBConst2>)
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	6808      	ldr	r0, [r1, #0]
 8008936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893a:	f380 8809 	msr	PSP, r0
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f380 8811 	msr	BASEPRI, r0
 800894a:	4770      	bx	lr
 800894c:	f3af 8000 	nop.w

08008950 <pxCurrentTCBConst2>:
 8008950:	20005fd0 	.word	0x20005fd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop

08008958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008958:	4808      	ldr	r0, [pc, #32]	@ (800897c <prvPortStartFirstTask+0x24>)
 800895a:	6800      	ldr	r0, [r0, #0]
 800895c:	6800      	ldr	r0, [r0, #0]
 800895e:	f380 8808 	msr	MSP, r0
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8814 	msr	CONTROL, r0
 800896a:	b662      	cpsie	i
 800896c:	b661      	cpsie	f
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	df00      	svc	0
 8008978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800897a:	bf00      	nop
 800897c:	e000ed08 	.word	0xe000ed08

08008980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008986:	4b37      	ldr	r3, [pc, #220]	@ (8008a64 <xPortStartScheduler+0xe4>)
 8008988:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	22ff      	movs	r2, #255	@ 0xff
 8008996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008a68 <xPortStartScheduler+0xe8>)
 80089ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089ae:	4b2f      	ldr	r3, [pc, #188]	@ (8008a6c <xPortStartScheduler+0xec>)
 80089b0:	2207      	movs	r2, #7
 80089b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089b4:	e009      	b.n	80089ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80089b6:	4b2d      	ldr	r3, [pc, #180]	@ (8008a6c <xPortStartScheduler+0xec>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4a2b      	ldr	r2, [pc, #172]	@ (8008a6c <xPortStartScheduler+0xec>)
 80089be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ca:	78fb      	ldrb	r3, [r7, #3]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d2:	2b80      	cmp	r3, #128	@ 0x80
 80089d4:	d0ef      	beq.n	80089b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089d6:	4b25      	ldr	r3, [pc, #148]	@ (8008a6c <xPortStartScheduler+0xec>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f1c3 0307 	rsb	r3, r3, #7
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d00d      	beq.n	80089fe <xPortStartScheduler+0x7e>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	b672      	cpsid	i
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	b662      	cpsie	i
 80089f6:	60bb      	str	r3, [r7, #8]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089fe:	4b1b      	ldr	r3, [pc, #108]	@ (8008a6c <xPortStartScheduler+0xec>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	021b      	lsls	r3, r3, #8
 8008a04:	4a19      	ldr	r2, [pc, #100]	@ (8008a6c <xPortStartScheduler+0xec>)
 8008a06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a08:	4b18      	ldr	r3, [pc, #96]	@ (8008a6c <xPortStartScheduler+0xec>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a10:	4a16      	ldr	r2, [pc, #88]	@ (8008a6c <xPortStartScheduler+0xec>)
 8008a12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a1c:	4b14      	ldr	r3, [pc, #80]	@ (8008a70 <xPortStartScheduler+0xf0>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a13      	ldr	r2, [pc, #76]	@ (8008a70 <xPortStartScheduler+0xf0>)
 8008a22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a28:	4b11      	ldr	r3, [pc, #68]	@ (8008a70 <xPortStartScheduler+0xf0>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a10      	ldr	r2, [pc, #64]	@ (8008a70 <xPortStartScheduler+0xf0>)
 8008a2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a34:	f000 f8dc 	bl	8008bf0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a38:	4b0e      	ldr	r3, [pc, #56]	@ (8008a74 <xPortStartScheduler+0xf4>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a3e:	f000 f8fb 	bl	8008c38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a42:	4b0d      	ldr	r3, [pc, #52]	@ (8008a78 <xPortStartScheduler+0xf8>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a0c      	ldr	r2, [pc, #48]	@ (8008a78 <xPortStartScheduler+0xf8>)
 8008a48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a4e:	f7ff ff83 	bl	8008958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a52:	f7ff fa73 	bl	8007f3c <vTaskSwitchContext>
	prvTaskExitError();
 8008a56:	f7ff ff37 	bl	80088c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	e000e400 	.word	0xe000e400
 8008a68:	200060fc 	.word	0x200060fc
 8008a6c:	20006100 	.word	0x20006100
 8008a70:	e000ed20 	.word	0xe000ed20
 8008a74:	20000028 	.word	0x20000028
 8008a78:	e000ef34 	.word	0xe000ef34

08008a7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a86:	b672      	cpsid	i
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	b662      	cpsie	i
 8008a96:	607b      	str	r3, [r7, #4]
}
 8008a98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a9a:	4b11      	ldr	r3, [pc, #68]	@ (8008ae0 <vPortEnterCritical+0x64>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8008ae0 <vPortEnterCritical+0x64>)
 8008aa2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae0 <vPortEnterCritical+0x64>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d112      	bne.n	8008ad2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008aac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae4 <vPortEnterCritical+0x68>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00d      	beq.n	8008ad2 <vPortEnterCritical+0x56>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	b672      	cpsid	i
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	b662      	cpsie	i
 8008aca:	603b      	str	r3, [r7, #0]
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	e7fd      	b.n	8008ace <vPortEnterCritical+0x52>
	}
}
 8008ad2:	bf00      	nop
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000028 	.word	0x20000028
 8008ae4:	e000ed04 	.word	0xe000ed04

08008ae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008aee:	4b13      	ldr	r3, [pc, #76]	@ (8008b3c <vPortExitCritical+0x54>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10d      	bne.n	8008b12 <vPortExitCritical+0x2a>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	b672      	cpsid	i
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	b662      	cpsie	i
 8008b0a:	607b      	str	r3, [r7, #4]
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	e7fd      	b.n	8008b0e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008b12:	4b0a      	ldr	r3, [pc, #40]	@ (8008b3c <vPortExitCritical+0x54>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	4a08      	ldr	r2, [pc, #32]	@ (8008b3c <vPortExitCritical+0x54>)
 8008b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b1c:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <vPortExitCritical+0x54>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <vPortExitCritical+0x48>
 8008b24:	2300      	movs	r3, #0
 8008b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	f383 8811 	msr	BASEPRI, r3
}
 8008b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	20000028 	.word	0x20000028

08008b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b40:	f3ef 8009 	mrs	r0, PSP
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	4b15      	ldr	r3, [pc, #84]	@ (8008ba0 <pxCurrentTCBConst>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	f01e 0f10 	tst.w	lr, #16
 8008b50:	bf08      	it	eq
 8008b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5a:	6010      	str	r0, [r2, #0]
 8008b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b64:	b672      	cpsid	i
 8008b66:	f380 8811 	msr	BASEPRI, r0
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	b662      	cpsie	i
 8008b74:	f7ff f9e2 	bl	8007f3c <vTaskSwitchContext>
 8008b78:	f04f 0000 	mov.w	r0, #0
 8008b7c:	f380 8811 	msr	BASEPRI, r0
 8008b80:	bc09      	pop	{r0, r3}
 8008b82:	6819      	ldr	r1, [r3, #0]
 8008b84:	6808      	ldr	r0, [r1, #0]
 8008b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8a:	f01e 0f10 	tst.w	lr, #16
 8008b8e:	bf08      	it	eq
 8008b90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b94:	f380 8809 	msr	PSP, r0
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop

08008ba0 <pxCurrentTCBConst>:
 8008ba0:	20005fd0 	.word	0x20005fd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop

08008ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	b672      	cpsid	i
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	b662      	cpsie	i
 8008bc2:	607b      	str	r3, [r7, #4]
}
 8008bc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bc6:	f7ff f8fd 	bl	8007dc4 <xTaskIncrementTick>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bd0:	4b06      	ldr	r3, [pc, #24]	@ (8008bec <SysTick_Handler+0x44>)
 8008bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	f383 8811 	msr	BASEPRI, r3
}
 8008be2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	e000ed04 	.word	0xe000ed04

08008bf0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8008c24 <vPortSetupTimerInterrupt+0x34>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8008c28 <vPortSetupTimerInterrupt+0x38>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c00:	4b0a      	ldr	r3, [pc, #40]	@ (8008c2c <vPortSetupTimerInterrupt+0x3c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a0a      	ldr	r2, [pc, #40]	@ (8008c30 <vPortSetupTimerInterrupt+0x40>)
 8008c06:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0a:	099b      	lsrs	r3, r3, #6
 8008c0c:	4a09      	ldr	r2, [pc, #36]	@ (8008c34 <vPortSetupTimerInterrupt+0x44>)
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c12:	4b04      	ldr	r3, [pc, #16]	@ (8008c24 <vPortSetupTimerInterrupt+0x34>)
 8008c14:	2207      	movs	r2, #7
 8008c16:	601a      	str	r2, [r3, #0]
}
 8008c18:	bf00      	nop
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	e000e010 	.word	0xe000e010
 8008c28:	e000e018 	.word	0xe000e018
 8008c2c:	20000008 	.word	0x20000008
 8008c30:	10624dd3 	.word	0x10624dd3
 8008c34:	e000e014 	.word	0xe000e014

08008c38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c38:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c48 <vPortEnableVFP+0x10>
 8008c3c:	6801      	ldr	r1, [r0, #0]
 8008c3e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c42:	6001      	str	r1, [r0, #0]
 8008c44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c46:	bf00      	nop
 8008c48:	e000ed88 	.word	0xe000ed88

08008c4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c52:	f3ef 8305 	mrs	r3, IPSR
 8008c56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b0f      	cmp	r3, #15
 8008c5c:	d917      	bls.n	8008c8e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cc8 <vPortValidateInterruptPriority+0x7c>)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c68:	4b18      	ldr	r3, [pc, #96]	@ (8008ccc <vPortValidateInterruptPriority+0x80>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	7afa      	ldrb	r2, [r7, #11]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d20d      	bcs.n	8008c8e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c76:	b672      	cpsid	i
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	b662      	cpsie	i
 8008c86:	607b      	str	r3, [r7, #4]
}
 8008c88:	bf00      	nop
 8008c8a:	bf00      	nop
 8008c8c:	e7fd      	b.n	8008c8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c8e:	4b10      	ldr	r3, [pc, #64]	@ (8008cd0 <vPortValidateInterruptPriority+0x84>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c96:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd4 <vPortValidateInterruptPriority+0x88>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d90d      	bls.n	8008cba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	b672      	cpsid	i
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	b662      	cpsie	i
 8008cb2:	603b      	str	r3, [r7, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	e7fd      	b.n	8008cb6 <vPortValidateInterruptPriority+0x6a>
	}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	e000e3f0 	.word	0xe000e3f0
 8008ccc:	200060fc 	.word	0x200060fc
 8008cd0:	e000ed0c 	.word	0xe000ed0c
 8008cd4:	20006100 	.word	0x20006100

08008cd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	@ 0x28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ce4:	f7fe ff9e 	bl	8007c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8008e60 <pvPortMalloc+0x188>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cf0:	f000 f920 	bl	8008f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8008e64 <pvPortMalloc+0x18c>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f040 8094 	bne.w	8008e2a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d020      	beq.n	8008d4a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008d08:	2208      	movs	r2, #8
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d017      	beq.n	8008d4a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f023 0307 	bic.w	r3, r3, #7
 8008d20:	3308      	adds	r3, #8
 8008d22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00d      	beq.n	8008d4a <pvPortMalloc+0x72>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	b672      	cpsid	i
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	b662      	cpsie	i
 8008d42:	617b      	str	r3, [r7, #20]
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	e7fd      	b.n	8008d46 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d06c      	beq.n	8008e2a <pvPortMalloc+0x152>
 8008d50:	4b45      	ldr	r3, [pc, #276]	@ (8008e68 <pvPortMalloc+0x190>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d867      	bhi.n	8008e2a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d5a:	4b44      	ldr	r3, [pc, #272]	@ (8008e6c <pvPortMalloc+0x194>)
 8008d5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d5e:	4b43      	ldr	r3, [pc, #268]	@ (8008e6c <pvPortMalloc+0x194>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d64:	e004      	b.n	8008d70 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d903      	bls.n	8008d82 <pvPortMalloc+0xaa>
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1f1      	bne.n	8008d66 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d82:	4b37      	ldr	r3, [pc, #220]	@ (8008e60 <pvPortMalloc+0x188>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d04e      	beq.n	8008e2a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2208      	movs	r2, #8
 8008d92:	4413      	add	r3, r2
 8008d94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	1ad2      	subs	r2, r2, r3
 8008da6:	2308      	movs	r3, #8
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d922      	bls.n	8008df4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4413      	add	r3, r2
 8008db4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00d      	beq.n	8008ddc <pvPortMalloc+0x104>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc4:	b672      	cpsid	i
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	b662      	cpsie	i
 8008dd4:	613b      	str	r3, [r7, #16]
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	e7fd      	b.n	8008dd8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dee:	69b8      	ldr	r0, [r7, #24]
 8008df0:	f000 f902 	bl	8008ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008df4:	4b1c      	ldr	r3, [pc, #112]	@ (8008e68 <pvPortMalloc+0x190>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8008e68 <pvPortMalloc+0x190>)
 8008e00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e02:	4b19      	ldr	r3, [pc, #100]	@ (8008e68 <pvPortMalloc+0x190>)
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4b1a      	ldr	r3, [pc, #104]	@ (8008e70 <pvPortMalloc+0x198>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d203      	bcs.n	8008e16 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e0e:	4b16      	ldr	r3, [pc, #88]	@ (8008e68 <pvPortMalloc+0x190>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a17      	ldr	r2, [pc, #92]	@ (8008e70 <pvPortMalloc+0x198>)
 8008e14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	4b12      	ldr	r3, [pc, #72]	@ (8008e64 <pvPortMalloc+0x18c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e2a:	f7fe ff09 	bl	8007c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	f003 0307 	and.w	r3, r3, #7
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00d      	beq.n	8008e54 <pvPortMalloc+0x17c>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3c:	b672      	cpsid	i
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	b662      	cpsie	i
 8008e4c:	60fb      	str	r3, [r7, #12]
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	e7fd      	b.n	8008e50 <pvPortMalloc+0x178>
	return pvReturn;
 8008e54:	69fb      	ldr	r3, [r7, #28]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3728      	adds	r7, #40	@ 0x28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20009d0c 	.word	0x20009d0c
 8008e64:	20009d18 	.word	0x20009d18
 8008e68:	20009d10 	.word	0x20009d10
 8008e6c:	20009d04 	.word	0x20009d04
 8008e70:	20009d14 	.word	0x20009d14

08008e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d04e      	beq.n	8008f24 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e86:	2308      	movs	r3, #8
 8008e88:	425b      	negs	r3, r3
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	4b24      	ldr	r3, [pc, #144]	@ (8008f2c <vPortFree+0xb8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10d      	bne.n	8008ebe <vPortFree+0x4a>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	b672      	cpsid	i
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	b662      	cpsie	i
 8008eb6:	60fb      	str	r3, [r7, #12]
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	e7fd      	b.n	8008eba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00d      	beq.n	8008ee2 <vPortFree+0x6e>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eca:	b672      	cpsid	i
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	b662      	cpsie	i
 8008eda:	60bb      	str	r3, [r7, #8]
}
 8008edc:	bf00      	nop
 8008ede:	bf00      	nop
 8008ee0:	e7fd      	b.n	8008ede <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	4b11      	ldr	r3, [pc, #68]	@ (8008f2c <vPortFree+0xb8>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4013      	ands	r3, r2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d019      	beq.n	8008f24 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d115      	bne.n	8008f24 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	4b0b      	ldr	r3, [pc, #44]	@ (8008f2c <vPortFree+0xb8>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	43db      	mvns	r3, r3
 8008f02:	401a      	ands	r2, r3
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f08:	f7fe fe8c 	bl	8007c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	4b07      	ldr	r3, [pc, #28]	@ (8008f30 <vPortFree+0xbc>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4413      	add	r3, r2
 8008f16:	4a06      	ldr	r2, [pc, #24]	@ (8008f30 <vPortFree+0xbc>)
 8008f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f1a:	6938      	ldr	r0, [r7, #16]
 8008f1c:	f000 f86c 	bl	8008ff8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f20:	f7fe fe8e 	bl	8007c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f24:	bf00      	nop
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	20009d18 	.word	0x20009d18
 8008f30:	20009d10 	.word	0x20009d10

08008f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f3a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f40:	4b27      	ldr	r3, [pc, #156]	@ (8008fe0 <prvHeapInit+0xac>)
 8008f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00c      	beq.n	8008f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3307      	adds	r3, #7
 8008f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0307 	bic.w	r3, r3, #7
 8008f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe0 <prvHeapInit+0xac>)
 8008f64:	4413      	add	r3, r2
 8008f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe4 <prvHeapInit+0xb0>)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f72:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe4 <prvHeapInit+0xb0>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f80:	2208      	movs	r2, #8
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0307 	bic.w	r3, r3, #7
 8008f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4a15      	ldr	r2, [pc, #84]	@ (8008fe8 <prvHeapInit+0xb4>)
 8008f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f96:	4b14      	ldr	r3, [pc, #80]	@ (8008fe8 <prvHeapInit+0xb4>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f9e:	4b12      	ldr	r3, [pc, #72]	@ (8008fe8 <prvHeapInit+0xb4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe8 <prvHeapInit+0xb4>)
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8008fec <prvHeapInit+0xb8>)
 8008fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	4a09      	ldr	r2, [pc, #36]	@ (8008ff0 <prvHeapInit+0xbc>)
 8008fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fcc:	4b09      	ldr	r3, [pc, #36]	@ (8008ff4 <prvHeapInit+0xc0>)
 8008fce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008fd2:	601a      	str	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	20006104 	.word	0x20006104
 8008fe4:	20009d04 	.word	0x20009d04
 8008fe8:	20009d0c 	.word	0x20009d0c
 8008fec:	20009d14 	.word	0x20009d14
 8008ff0:	20009d10 	.word	0x20009d10
 8008ff4:	20009d18 	.word	0x20009d18

08008ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009000:	4b28      	ldr	r3, [pc, #160]	@ (80090a4 <prvInsertBlockIntoFreeList+0xac>)
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e002      	b.n	800900c <prvInsertBlockIntoFreeList+0x14>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	429a      	cmp	r2, r3
 8009014:	d8f7      	bhi.n	8009006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	4413      	add	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	d108      	bne.n	800903a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	441a      	add	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	441a      	add	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d118      	bne.n	8009080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b15      	ldr	r3, [pc, #84]	@ (80090a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d00d      	beq.n	8009076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	441a      	add	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e008      	b.n	8009088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009076:	4b0c      	ldr	r3, [pc, #48]	@ (80090a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	e003      	b.n	8009088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	429a      	cmp	r2, r3
 800908e:	d002      	beq.n	8009096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009096:	bf00      	nop
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20009d04 	.word	0x20009d04
 80090a8:	20009d0c 	.word	0x20009d0c

080090ac <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	330c      	adds	r3, #12
 80090bc:	461a      	mov	r2, r3
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 f98f 	bl	800a3e4 <tcpip_send_msg_wait_sem>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80090ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d103      	bne.n	80090da <netconn_apimsg+0x2e>
    return apimsg->err;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80090d8:	e001      	b.n	80090de <netconn_apimsg+0x32>
  }
  return err;
 80090da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08c      	sub	sp, #48	@ 0x30
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	603a      	str	r2, [r7, #0]
 80090f2:	71fb      	strb	r3, [r7, #7]
 80090f4:	460b      	mov	r3, r1
 80090f6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fa03 	bl	8009508 <netconn_alloc>
 8009102:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009106:	2b00      	cmp	r3, #0
 8009108:	d046      	beq.n	8009198 <netconn_new_with_proto_and_callback+0xb0>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800910a:	79bb      	ldrb	r3, [r7, #6]
 800910c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800910e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009110:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009112:	f107 0308 	add.w	r3, r7, #8
 8009116:	4619      	mov	r1, r3
 8009118:	4822      	ldr	r0, [pc, #136]	@ (80091a4 <netconn_new_with_proto_and_callback+0xbc>)
 800911a:	f7ff ffc7 	bl	80090ac <netconn_apimsg>
 800911e:	4603      	mov	r3, r0
 8009120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8009124:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009128:	2b00      	cmp	r3, #0
 800912a:	d035      	beq.n	8009198 <netconn_new_with_proto_and_callback+0xb0>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800912c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d005      	beq.n	8009140 <netconn_new_with_proto_and_callback+0x58>
 8009134:	4b1c      	ldr	r3, [pc, #112]	@ (80091a8 <netconn_new_with_proto_and_callback+0xc0>)
 8009136:	22a3      	movs	r2, #163	@ 0xa3
 8009138:	491c      	ldr	r1, [pc, #112]	@ (80091ac <netconn_new_with_proto_and_callback+0xc4>)
 800913a:	481d      	ldr	r0, [pc, #116]	@ (80091b0 <netconn_new_with_proto_and_callback+0xc8>)
 800913c:	f006 fc6a 	bl	800fa14 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009142:	3310      	adds	r3, #16
 8009144:	4618      	mov	r0, r3
 8009146:	f006 fa5c 	bl	800f602 <sys_mbox_valid>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <netconn_new_with_proto_and_callback+0x74>
 8009150:	4b15      	ldr	r3, [pc, #84]	@ (80091a8 <netconn_new_with_proto_and_callback+0xc0>)
 8009152:	22a4      	movs	r2, #164	@ 0xa4
 8009154:	4917      	ldr	r1, [pc, #92]	@ (80091b4 <netconn_new_with_proto_and_callback+0xcc>)
 8009156:	4816      	ldr	r0, [pc, #88]	@ (80091b0 <netconn_new_with_proto_and_callback+0xc8>)
 8009158:	f006 fc5c 	bl	800fa14 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800915c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915e:	330c      	adds	r3, #12
 8009160:	4618      	mov	r0, r3
 8009162:	f006 faae 	bl	800f6c2 <sys_sem_valid>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d105      	bne.n	8009178 <netconn_new_with_proto_and_callback+0x90>
 800916c:	4b0e      	ldr	r3, [pc, #56]	@ (80091a8 <netconn_new_with_proto_and_callback+0xc0>)
 800916e:	22a9      	movs	r2, #169	@ 0xa9
 8009170:	4911      	ldr	r1, [pc, #68]	@ (80091b8 <netconn_new_with_proto_and_callback+0xd0>)
 8009172:	480f      	ldr	r0, [pc, #60]	@ (80091b0 <netconn_new_with_proto_and_callback+0xc8>)
 8009174:	f006 fc4e 	bl	800fa14 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917a:	330c      	adds	r3, #12
 800917c:	4618      	mov	r0, r3
 800917e:	f006 fa93 	bl	800f6a8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009184:	3310      	adds	r3, #16
 8009186:	4618      	mov	r0, r3
 8009188:	f006 f9b4 	bl	800f4f4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800918c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800918e:	2004      	movs	r0, #4
 8009190:	f001 fed4 	bl	800af3c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009194:	2300      	movs	r3, #0
 8009196:	e000      	b.n	800919a <netconn_new_with_proto_and_callback+0xb2>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800919a:	4618      	mov	r0, r3
 800919c:	3730      	adds	r7, #48	@ 0x30
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	080094dd 	.word	0x080094dd
 80091a8:	08010948 	.word	0x08010948
 80091ac:	0801097c 	.word	0x0801097c
 80091b0:	080109a0 	.word	0x080109a0
 80091b4:	080109c8 	.word	0x080109c8
 80091b8:	080109e0 	.word	0x080109e0

080091bc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08c      	sub	sp, #48	@ 0x30
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <netconn_prepare_delete+0x12>
    return ERR_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	e012      	b.n	80091f4 <netconn_prepare_delete+0x38>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80091d2:	f107 030c 	add.w	r3, r7, #12
 80091d6:	4619      	mov	r1, r3
 80091d8:	4808      	ldr	r0, [pc, #32]	@ (80091fc <netconn_prepare_delete+0x40>)
 80091da:	f7ff ff67 	bl	80090ac <netconn_apimsg>
 80091de:	4603      	mov	r3, r0
 80091e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80091e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <netconn_prepare_delete+0x36>
    return err;
 80091ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80091f0:	e000      	b.n	80091f4 <netconn_prepare_delete+0x38>
  }
  return ERR_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3730      	adds	r7, #48	@ 0x30
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	08009695 	.word	0x08009695

08009200 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <netconn_delete+0x12>
    return ERR_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	e00d      	b.n	800922e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7ff ffd2 	bl	80091bc <netconn_prepare_delete>
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800921c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d102      	bne.n	800922a <netconn_delete+0x2a>
    netconn_free(conn);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f9d1 	bl	80095cc <netconn_free>
  }
  return err;
 800922a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08e      	sub	sp, #56	@ 0x38
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	4613      	mov	r3, r2
 8009244:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <netconn_bind+0x28>
 800924c:	4b11      	ldr	r3, [pc, #68]	@ (8009294 <netconn_bind+0x5c>)
 800924e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8009252:	4911      	ldr	r1, [pc, #68]	@ (8009298 <netconn_bind+0x60>)
 8009254:	4811      	ldr	r0, [pc, #68]	@ (800929c <netconn_bind+0x64>)
 8009256:	f006 fbdd 	bl	800fa14 <iprintf>
 800925a:	f06f 030f 	mvn.w	r3, #15
 800925e:	e015      	b.n	800928c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009266:	4b0e      	ldr	r3, [pc, #56]	@ (80092a0 <netconn_bind+0x68>)
 8009268:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009276:	f107 0314 	add.w	r3, r7, #20
 800927a:	4619      	mov	r1, r3
 800927c:	4809      	ldr	r0, [pc, #36]	@ (80092a4 <netconn_bind+0x6c>)
 800927e:	f7ff ff15 	bl	80090ac <netconn_apimsg>
 8009282:	4603      	mov	r3, r0
 8009284:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009288:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800928c:	4618      	mov	r0, r3
 800928e:	3738      	adds	r7, #56	@ 0x38
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	08010948 	.word	0x08010948
 8009298:	08010a5c 	.word	0x08010a5c
 800929c:	080109a0 	.word	0x080109a0
 80092a0:	08012a38 	.word	0x08012a38
 80092a4:	080097bd 	.word	0x080097bd

080092a8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08c      	sub	sp, #48	@ 0x30
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d109      	bne.n	80092cc <netconn_send+0x24>
 80092b8:	4b0e      	ldr	r3, [pc, #56]	@ (80092f4 <netconn_send+0x4c>)
 80092ba:	f240 32b2 	movw	r2, #946	@ 0x3b2
 80092be:	490e      	ldr	r1, [pc, #56]	@ (80092f8 <netconn_send+0x50>)
 80092c0:	480e      	ldr	r0, [pc, #56]	@ (80092fc <netconn_send+0x54>)
 80092c2:	f006 fba7 	bl	800fa14 <iprintf>
 80092c6:	f06f 030f 	mvn.w	r3, #15
 80092ca:	e00e      	b.n	80092ea <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80092d4:	f107 030c 	add.w	r3, r7, #12
 80092d8:	4619      	mov	r1, r3
 80092da:	4809      	ldr	r0, [pc, #36]	@ (8009300 <netconn_send+0x58>)
 80092dc:	f7ff fee6 	bl	80090ac <netconn_apimsg>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80092e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3730      	adds	r7, #48	@ 0x30
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	08010948 	.word	0x08010948
 80092f8:	08010b50 	.word	0x08010b50
 80092fc:	080109a0 	.word	0x080109a0
 8009300:	08009813 	.word	0x08009813

08009304 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <netconn_err+0x12>
    return ERR_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	e00d      	b.n	8009332 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009316:	f006 fa5f 	bl	800f7d8 <sys_arch_protect>
 800931a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7a1b      	ldrb	r3, [r3, #8]
 8009320:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f006 fa63 	bl	800f7f4 <sys_arch_unprotect>
  return err;
 800932e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
	...

0800933c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d105      	bne.n	800935c <recv_udp+0x20>
 8009350:	4b34      	ldr	r3, [pc, #208]	@ (8009424 <recv_udp+0xe8>)
 8009352:	22e5      	movs	r2, #229	@ 0xe5
 8009354:	4934      	ldr	r1, [pc, #208]	@ (8009428 <recv_udp+0xec>)
 8009356:	4835      	ldr	r0, [pc, #212]	@ (800942c <recv_udp+0xf0>)
 8009358:	f006 fb5c 	bl	800fa14 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d105      	bne.n	800936e <recv_udp+0x32>
 8009362:	4b30      	ldr	r3, [pc, #192]	@ (8009424 <recv_udp+0xe8>)
 8009364:	22e6      	movs	r2, #230	@ 0xe6
 8009366:	4932      	ldr	r1, [pc, #200]	@ (8009430 <recv_udp+0xf4>)
 8009368:	4830      	ldr	r0, [pc, #192]	@ (800942c <recv_udp+0xf0>)
 800936a:	f006 fb53 	bl	800fa14 <iprintf>
  conn = (struct netconn *)arg;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d103      	bne.n	8009380 <recv_udp+0x44>
    pbuf_free(p);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f002 fc23 	bl	800bbc4 <pbuf_free>
    return;
 800937e:	e04d      	b.n	800941c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	429a      	cmp	r2, r3
 8009388:	d005      	beq.n	8009396 <recv_udp+0x5a>
 800938a:	4b26      	ldr	r3, [pc, #152]	@ (8009424 <recv_udp+0xe8>)
 800938c:	22ee      	movs	r2, #238	@ 0xee
 800938e:	4929      	ldr	r1, [pc, #164]	@ (8009434 <recv_udp+0xf8>)
 8009390:	4826      	ldr	r0, [pc, #152]	@ (800942c <recv_udp+0xf0>)
 8009392:	f006 fb3f 	bl	800fa14 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	3310      	adds	r3, #16
 800939a:	4618      	mov	r0, r3
 800939c:	f006 f931 	bl	800f602 <sys_mbox_valid>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d103      	bne.n	80093ae <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f002 fc0c 	bl	800bbc4 <pbuf_free>
    return;
 80093ac:	e036      	b.n	800941c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80093ae:	2003      	movs	r0, #3
 80093b0:	f001 fd4e 	bl	800ae50 <memp_malloc>
 80093b4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d103      	bne.n	80093c4 <recv_udp+0x88>
    pbuf_free(p);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f002 fc01 	bl	800bbc4 <pbuf_free>
    return;
 80093c2:	e02b      	b.n	800941c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <recv_udp+0xa0>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	e000      	b.n	80093de <recv_udp+0xa2>
 80093dc:	2300      	movs	r3, #0
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093e6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	891b      	ldrh	r3, [r3, #8]
 80093ec:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	3310      	adds	r3, #16
 80093f2:	69b9      	ldr	r1, [r7, #24]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f006 f88f 	bl	800f518 <sys_mbox_trypost>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009400:	69b8      	ldr	r0, [r7, #24]
 8009402:	f000 fa71 	bl	80098e8 <netbuf_delete>
    return;
 8009406:	e009      	b.n	800941c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <recv_udp+0xe0>
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	8afa      	ldrh	r2, [r7, #22]
 8009416:	2100      	movs	r1, #0
 8009418:	69f8      	ldr	r0, [r7, #28]
 800941a:	4798      	blx	r3
  }
}
 800941c:	3720      	adds	r7, #32
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	08010bec 	.word	0x08010bec
 8009428:	08010c20 	.word	0x08010c20
 800942c:	08010c44 	.word	0x08010c44
 8009430:	08010c6c 	.word	0x08010c6c
 8009434:	08010c8c 	.word	0x08010c8c

08009438 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009438:	b590      	push	{r4, r7, lr}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009440:	2300      	movs	r3, #0
 8009442:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d006      	beq.n	800945c <pcb_new+0x24>
 800944e:	4b1f      	ldr	r3, [pc, #124]	@ (80094cc <pcb_new+0x94>)
 8009450:	f240 2265 	movw	r2, #613	@ 0x265
 8009454:	491e      	ldr	r1, [pc, #120]	@ (80094d0 <pcb_new+0x98>)
 8009456:	481f      	ldr	r0, [pc, #124]	@ (80094d4 <pcb_new+0x9c>)
 8009458:	f006 fadc 	bl	800fa14 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009466:	2b20      	cmp	r3, #32
 8009468:	d120      	bne.n	80094ac <pcb_new+0x74>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681c      	ldr	r4, [r3, #0]
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	4618      	mov	r0, r3
 8009472:	f003 fbe6 	bl	800cc42 <udp_new_ip_type>
 8009476:	4603      	mov	r3, r0
 8009478:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d017      	beq.n	80094b4 <pcb_new+0x7c>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2b22      	cmp	r3, #34	@ 0x22
 800948c:	d104      	bne.n	8009498 <pcb_new+0x60>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6858      	ldr	r0, [r3, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	490c      	ldr	r1, [pc, #48]	@ (80094d8 <pcb_new+0xa0>)
 80094a6:	f003 fb53 	bl	800cb50 <udp_recv>
      }
      break;
 80094aa:	e003      	b.n	80094b4 <pcb_new+0x7c>
      }
      break;
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	22fa      	movs	r2, #250	@ 0xfa
 80094b0:	711a      	strb	r2, [r3, #4]
      return;
 80094b2:	e008      	b.n	80094c6 <pcb_new+0x8e>
      break;
 80094b4:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d102      	bne.n	80094c6 <pcb_new+0x8e>
    msg->err = ERR_MEM;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	22ff      	movs	r2, #255	@ 0xff
 80094c4:	711a      	strb	r2, [r3, #4]
  }
}
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd90      	pop	{r4, r7, pc}
 80094cc:	08010bec 	.word	0x08010bec
 80094d0:	08010cac 	.word	0x08010cac
 80094d4:	08010c44 	.word	0x08010c44
 80094d8:	0800933d 	.word	0x0800933d

080094dc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d102      	bne.n	80094fe <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff ff9d 	bl	8009438 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	6039      	str	r1, [r7, #0]
 8009512:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009514:	2300      	movs	r3, #0
 8009516:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009518:	2004      	movs	r0, #4
 800951a:	f001 fc99 	bl	800ae50 <memp_malloc>
 800951e:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <netconn_alloc+0x22>
    return NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	e045      	b.n	80095b6 <netconn_alloc+0xae>
  }

  conn->pending_err = ERR_OK;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2200      	movs	r2, #0
 800952e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	79fa      	ldrb	r2, [r7, #7]
 8009534:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2200      	movs	r2, #0
 800953a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009542:	2b20      	cmp	r3, #32
 8009544:	d10c      	bne.n	8009560 <netconn_alloc+0x58>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009546:	2306      	movs	r3, #6
 8009548:	60fb      	str	r3, [r7, #12]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800954a:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	3310      	adds	r3, #16
 8009550:	68f9      	ldr	r1, [r7, #12]
 8009552:	4618      	mov	r0, r3
 8009554:	f005 ffac 	bl	800f4b0 <sys_mbox_new>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <netconn_alloc+0x68>
    goto free_and_return;
 800955e:	e025      	b.n	80095ac <netconn_alloc+0xa4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009560:	4b17      	ldr	r3, [pc, #92]	@ (80095c0 <netconn_alloc+0xb8>)
 8009562:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8009566:	4917      	ldr	r1, [pc, #92]	@ (80095c4 <netconn_alloc+0xbc>)
 8009568:	4817      	ldr	r0, [pc, #92]	@ (80095c8 <netconn_alloc+0xc0>)
 800956a:	f006 fa53 	bl	800fa14 <iprintf>
      goto free_and_return;
 800956e:	e01d      	b.n	80095ac <netconn_alloc+0xa4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	330c      	adds	r3, #12
 8009574:	2100      	movs	r1, #0
 8009576:	4618      	mov	r0, r3
 8009578:	f006 f861 	bl	800f63e <sys_sem_new>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	3310      	adds	r3, #16
 8009586:	4618      	mov	r0, r3
 8009588:	f005 ffb4 	bl	800f4f4 <sys_mbox_free>
    goto free_and_return;
 800958c:	e00e      	b.n	80095ac <netconn_alloc+0xa4>
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
#endif
  conn->state        = NETCONN_NONE;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	2200      	movs	r2, #0
 8009592:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f04f 32ff 	mov.w	r2, #4294967295
 800959a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	7dfa      	ldrb	r2, [r7, #23]
 80095a6:	761a      	strb	r2, [r3, #24]
  return conn;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	e004      	b.n	80095b6 <netconn_alloc+0xae>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80095ac:	6939      	ldr	r1, [r7, #16]
 80095ae:	2004      	movs	r0, #4
 80095b0:	f001 fcc4 	bl	800af3c <memp_free>
  return NULL;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	08010bec 	.word	0x08010bec
 80095c4:	08010ccc 	.word	0x08010ccc
 80095c8:	08010c44 	.word	0x08010c44

080095cc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d006      	beq.n	80095ea <netconn_free+0x1e>
 80095dc:	4b13      	ldr	r3, [pc, #76]	@ (800962c <netconn_free+0x60>)
 80095de:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80095e2:	4913      	ldr	r1, [pc, #76]	@ (8009630 <netconn_free+0x64>)
 80095e4:	4813      	ldr	r0, [pc, #76]	@ (8009634 <netconn_free+0x68>)
 80095e6:	f006 fa15 	bl	800fa14 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3310      	adds	r3, #16
 80095ee:	4618      	mov	r0, r3
 80095f0:	f006 f807 	bl	800f602 <sys_mbox_valid>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d006      	beq.n	8009608 <netconn_free+0x3c>
 80095fa:	4b0c      	ldr	r3, [pc, #48]	@ (800962c <netconn_free+0x60>)
 80095fc:	f240 3223 	movw	r2, #803	@ 0x323
 8009600:	490d      	ldr	r1, [pc, #52]	@ (8009638 <netconn_free+0x6c>)
 8009602:	480c      	ldr	r0, [pc, #48]	@ (8009634 <netconn_free+0x68>)
 8009604:	f006 fa06 	bl	800fa14 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	330c      	adds	r3, #12
 800960c:	4618      	mov	r0, r3
 800960e:	f006 f84b 	bl	800f6a8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	330c      	adds	r3, #12
 8009616:	4618      	mov	r0, r3
 8009618:	f006 f864 	bl	800f6e4 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	2004      	movs	r0, #4
 8009620:	f001 fc8c 	bl	800af3c <memp_free>
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	08010bec 	.word	0x08010bec
 8009630:	08010cf4 	.word	0x08010cf4
 8009634:	08010c44 	.word	0x08010c44
 8009638:	08010d24 	.word	0x08010d24

0800963c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3310      	adds	r3, #16
 8009648:	4618      	mov	r0, r3
 800964a:	f005 ffda 	bl	800f602 <sys_mbox_valid>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01a      	beq.n	800968a <netconn_drain+0x4e>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009654:	e003      	b.n	800965e <netconn_drain+0x22>
            pbuf_free((struct pbuf *)mem);
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 f945 	bl	80098e8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3310      	adds	r3, #16
 8009662:	f107 020c 	add.w	r2, r7, #12
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f005 ffae 	bl	800f5ca <sys_arch_mbox_tryfetch>
 800966e:	4603      	mov	r3, r0
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009674:	d1ef      	bne.n	8009656 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	3310      	adds	r3, #16
 800967a:	4618      	mov	r0, r3
 800967c:	f005 ff3a 	bl	800f4f4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3310      	adds	r3, #16
 8009684:	4618      	mov	r0, r3
 8009686:	f005 ffcd 	bl	800f624 <sys_mbox_set_invalid>
    }
    sys_mbox_free(&conn->acceptmbox);
    sys_mbox_set_invalid(&conn->acceptmbox);
  }
#endif /* LWIP_TCP */
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	785b      	ldrb	r3, [r3, #1]
 80096a6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00d      	beq.n	80096ca <lwip_netconn_do_delconn+0x36>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096b8:	2b10      	cmp	r3, #16
 80096ba:	d006      	beq.n	80096ca <lwip_netconn_do_delconn+0x36>
 80096bc:	4b3b      	ldr	r3, [pc, #236]	@ (80097ac <lwip_netconn_do_delconn+0x118>)
 80096be:	f240 425e 	movw	r2, #1118	@ 0x45e
 80096c2:	493b      	ldr	r1, [pc, #236]	@ (80097b0 <lwip_netconn_do_delconn+0x11c>)
 80096c4:	483b      	ldr	r0, [pc, #236]	@ (80097b4 <lwip_netconn_do_delconn+0x120>)
 80096c6:	f006 f9a5 	bl	800fa14 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80096ca:	7afb      	ldrb	r3, [r7, #11]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d005      	beq.n	80096dc <lwip_netconn_do_delconn+0x48>
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d002      	beq.n	80096dc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80096d6:	7afb      	ldrb	r3, [r7, #11]
 80096d8:	2b03      	cmp	r3, #3
 80096da:	d109      	bne.n	80096f0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d10a      	bne.n	80096f8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	7e1b      	ldrb	r3, [r3, #24]
 80096e8:	f003 0304 	and.w	r3, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d103      	bne.n	80096f8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	22fb      	movs	r2, #251	@ 0xfb
 80096f4:	711a      	strb	r2, [r3, #4]
 80096f6:	e04f      	b.n	8009798 <lwip_netconn_do_delconn+0x104>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d10d      	bne.n	800971a <lwip_netconn_do_delconn+0x86>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	7e1b      	ldrb	r3, [r3, #24]
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d106      	bne.n	800971a <lwip_netconn_do_delconn+0x86>
 800970c:	4b27      	ldr	r3, [pc, #156]	@ (80097ac <lwip_netconn_do_delconn+0x118>)
 800970e:	f240 427a 	movw	r2, #1146	@ 0x47a
 8009712:	4929      	ldr	r1, [pc, #164]	@ (80097b8 <lwip_netconn_do_delconn+0x124>)
 8009714:	4827      	ldr	r0, [pc, #156]	@ (80097b4 <lwip_netconn_do_delconn+0x120>)
 8009716:	f006 f97d 	bl	800fa14 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff ff89 	bl	800963c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d017      	beq.n	8009764 <lwip_netconn_do_delconn+0xd0>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800973e:	2b20      	cmp	r3, #32
 8009740:	d10b      	bne.n	800975a <lwip_netconn_do_delconn+0xc6>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	4618      	mov	r0, r3
 8009754:	f003 fa1c 	bl	800cb90 <udp_remove>
          break;
 8009758:	e000      	b.n	800975c <lwip_netconn_do_delconn+0xc8>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800975a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2200      	movs	r2, #0
 8009762:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d007      	beq.n	800977e <lwip_netconn_do_delconn+0xea>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	6810      	ldr	r0, [r2, #0]
 8009778:	2200      	movs	r2, #0
 800977a:	2100      	movs	r1, #0
 800977c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	69db      	ldr	r3, [r3, #28]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d007      	beq.n	8009798 <lwip_netconn_do_delconn+0x104>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	6810      	ldr	r0, [r2, #0]
 8009792:	2200      	movs	r2, #0
 8009794:	2102      	movs	r1, #2
 8009796:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	330c      	adds	r3, #12
 800979e:	4618      	mov	r0, r3
 80097a0:	f005 ff8f 	bl	800f6c2 <sys_sem_valid>
    TCPIP_APIMSG_ACK(msg);
  }
}
 80097a4:	bf00      	nop
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	08010bec 	.word	0x08010bec
 80097b0:	08010d60 	.word	0x08010d60
 80097b4:	08010c44 	.word	0x08010c44
 80097b8:	08010d74 	.word	0x08010d74

080097bc <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d016      	beq.n	8009800 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80097dc:	2b20      	cmp	r3, #32
 80097de:	d10c      	bne.n	80097fa <lwip_netconn_do_bind+0x3e>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6858      	ldr	r0, [r3, #4]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6899      	ldr	r1, [r3, #8]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	899b      	ldrh	r3, [r3, #12]
 80097ee:	461a      	mov	r2, r3
 80097f0:	f003 f926 	bl	800ca40 <udp_bind>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
        break;
 80097f8:	e004      	b.n	8009804 <lwip_netconn_do_bind+0x48>
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80097fa:	23fa      	movs	r3, #250	@ 0xfa
 80097fc:	73fb      	strb	r3, [r7, #15]
        break;
 80097fe:	e001      	b.n	8009804 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 8009800:	23fa      	movs	r3, #250	@ 0xfa
 8009802:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	7bfa      	ldrb	r2, [r7, #15]
 8009808:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff fd6e 	bl	8009304 <netconn_err>
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800982c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d134      	bne.n	800989e <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d02d      	beq.n	800989a <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009848:	2b20      	cmp	r3, #32
 800984a:	d123      	bne.n	8009894 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10c      	bne.n	8009870 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f002 ff01 	bl	800c66c <udp_send>
 800986a:	4603      	mov	r3, r0
 800986c:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800986e:	e016      	b.n	800989e <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6858      	ldr	r0, [r3, #4]
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	6819      	ldr	r1, [r3, #0]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f103 0208 	add.w	r2, r3, #8
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	899b      	ldrh	r3, [r3, #12]
 800988a:	f002 ff23 	bl	800c6d4 <udp_sendto>
 800988e:	4603      	mov	r3, r0
 8009890:	73fb      	strb	r3, [r7, #15]
          break;
 8009892:	e004      	b.n	800989e <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8009894:	23f5      	movs	r3, #245	@ 0xf5
 8009896:	73fb      	strb	r3, [r7, #15]
          break;
 8009898:	e001      	b.n	800989e <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800989a:	23f5      	movs	r3, #245	@ 0xf5
 800989c:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	7bfa      	ldrb	r2, [r7, #15]
 80098a2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80098a4:	bf00      	nop
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80098b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dc04      	bgt.n	80098c8 <err_to_errno+0x1c>
 80098be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c2:	f113 0f10 	cmn.w	r3, #16
 80098c6:	da01      	bge.n	80098cc <err_to_errno+0x20>
    return EIO;
 80098c8:	2305      	movs	r3, #5
 80098ca:	e005      	b.n	80098d8 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 80098cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098d0:	425b      	negs	r3, r3
 80098d2:	4a04      	ldr	r2, [pc, #16]	@ (80098e4 <err_to_errno+0x38>)
 80098d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	08012944 	.word	0x08012944

080098e8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d013      	beq.n	800991e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00b      	beq.n	8009916 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4618      	mov	r0, r3
 8009904:	f002 f95e 	bl	800bbc4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	2003      	movs	r0, #3
 800991a:	f001 fb0f 	bl	800af3c <memp_free>
  }
}
 800991e:	bf00      	nop
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d106      	bne.n	8009944 <netbuf_free+0x1c>
 8009936:	4b0d      	ldr	r3, [pc, #52]	@ (800996c <netbuf_free+0x44>)
 8009938:	2281      	movs	r2, #129	@ 0x81
 800993a:	490d      	ldr	r1, [pc, #52]	@ (8009970 <netbuf_free+0x48>)
 800993c:	480d      	ldr	r0, [pc, #52]	@ (8009974 <netbuf_free+0x4c>)
 800993e:	f006 f869 	bl	800fa14 <iprintf>
 8009942:	e00f      	b.n	8009964 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4618      	mov	r0, r3
 8009952:	f002 f937 	bl	800bbc4 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	605a      	str	r2, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	08010dc4 	.word	0x08010dc4
 8009970:	08010e60 	.word	0x08010e60
 8009974:	08010e14 	.word	0x08010e14

08009978 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d108      	bne.n	800999e <netbuf_ref+0x26>
 800998c:	4b1c      	ldr	r3, [pc, #112]	@ (8009a00 <netbuf_ref+0x88>)
 800998e:	2299      	movs	r2, #153	@ 0x99
 8009990:	491c      	ldr	r1, [pc, #112]	@ (8009a04 <netbuf_ref+0x8c>)
 8009992:	481d      	ldr	r0, [pc, #116]	@ (8009a08 <netbuf_ref+0x90>)
 8009994:	f006 f83e 	bl	800fa14 <iprintf>
 8009998:	f06f 030f 	mvn.w	r3, #15
 800999c:	e02b      	b.n	80099f6 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d004      	beq.n	80099b0 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f002 f90a 	bl	800bbc4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80099b0:	2241      	movs	r2, #65	@ 0x41
 80099b2:	2100      	movs	r1, #0
 80099b4:	2036      	movs	r0, #54	@ 0x36
 80099b6:	f001 fe23 	bl	800b600 <pbuf_alloc>
 80099ba:	4602      	mov	r2, r0
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d105      	bne.n	80099d4 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 80099ce:	f04f 33ff 	mov.w	r3, #4294967295
 80099d2:	e010      	b.n	80099f6 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	88fa      	ldrh	r2, [r7, #6]
 80099e2:	811a      	strh	r2, [r3, #8]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	6812      	ldr	r2, [r2, #0]
 80099e8:	891b      	ldrh	r3, [r3, #8]
 80099ea:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	08010dc4 	.word	0x08010dc4
 8009a04:	08010e7c 	.word	0x08010e7c
 8009a08:	08010e14 	.word	0x08010e14

08009a0c <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	db02      	blt.n	8009a24 <tryget_socket_unconn_nouse+0x18>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	dd01      	ble.n	8009a28 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	e003      	b.n	8009a30 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	011b      	lsls	r3, r3, #4
 8009a2c:	4a03      	ldr	r2, [pc, #12]	@ (8009a3c <tryget_socket_unconn_nouse+0x30>)
 8009a2e:	4413      	add	r3, r2
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20009d1c 	.word	0x20009d1c

08009a40 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff ffdf 	bl	8009a0c <tryget_socket_unconn_nouse>
 8009a4e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8009a50:	68fb      	ldr	r3, [r7, #12]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff ffec 	bl	8009a40 <tryget_socket_unconn>
 8009a68:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d005      	beq.n	8009a7c <tryget_socket+0x22>
    if (sock->conn) {
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <tryget_socket+0x22>
      return sock;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	e000      	b.n	8009a7e <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff ffe2 	bl	8009a5a <tryget_socket>
 8009a96:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d104      	bne.n	8009aa8 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8009a9e:	4b05      	ldr	r3, [pc, #20]	@ (8009ab4 <get_socket+0x2c>)
 8009aa0:	2209      	movs	r2, #9
 8009aa2:	601a      	str	r2, [r3, #0]
    return NULL;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e000      	b.n	8009aaa <get_socket+0x22>
  }
  return sock;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	2000d098 	.word	0x2000d098

08009ab8 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	e052      	b.n	8009b6e <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8009ac8:	f005 fe86 	bl	800f7d8 <sys_arch_protect>
 8009acc:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8009ace:	4a2c      	ldr	r2, [pc, #176]	@ (8009b80 <alloc_socket+0xc8>)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	011b      	lsls	r3, r3, #4
 8009ad4:	4413      	add	r3, r2
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d142      	bne.n	8009b62 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8009adc:	4a28      	ldr	r2, [pc, #160]	@ (8009b80 <alloc_socket+0xc8>)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	011b      	lsls	r3, r3, #4
 8009ae2:	4413      	add	r3, r2
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8009ae8:	68b8      	ldr	r0, [r7, #8]
 8009aea:	f005 fe83 	bl	800f7f4 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8009aee:	4a24      	ldr	r2, [pc, #144]	@ (8009b80 <alloc_socket+0xc8>)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	011b      	lsls	r3, r3, #4
 8009af4:	4413      	add	r3, r2
 8009af6:	3304      	adds	r3, #4
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8009afc:	4a20      	ldr	r2, [pc, #128]	@ (8009b80 <alloc_socket+0xc8>)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	011b      	lsls	r3, r3, #4
 8009b02:	4413      	add	r3, r2
 8009b04:	330e      	adds	r3, #14
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d006      	beq.n	8009b1a <alloc_socket+0x62>
 8009b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8009b84 <alloc_socket+0xcc>)
 8009b0e:	f240 220e 	movw	r2, #526	@ 0x20e
 8009b12:	491d      	ldr	r1, [pc, #116]	@ (8009b88 <alloc_socket+0xd0>)
 8009b14:	481d      	ldr	r0, [pc, #116]	@ (8009b8c <alloc_socket+0xd4>)
 8009b16:	f005 ff7d 	bl	800fa14 <iprintf>
      sockets[i].rcvevent   = 0;
 8009b1a:	4a19      	ldr	r2, [pc, #100]	@ (8009b80 <alloc_socket+0xc8>)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	011b      	lsls	r3, r3, #4
 8009b20:	4413      	add	r3, r2
 8009b22:	3308      	adds	r3, #8
 8009b24:	2200      	movs	r2, #0
 8009b26:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b30:	2b10      	cmp	r3, #16
 8009b32:	d102      	bne.n	8009b3a <alloc_socket+0x82>
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <alloc_socket+0x86>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <alloc_socket+0x88>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	b299      	uxth	r1, r3
 8009b42:	4a0f      	ldr	r2, [pc, #60]	@ (8009b80 <alloc_socket+0xc8>)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	4413      	add	r3, r2
 8009b4a:	330a      	adds	r3, #10
 8009b4c:	460a      	mov	r2, r1
 8009b4e:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8009b50:	4a0b      	ldr	r2, [pc, #44]	@ (8009b80 <alloc_socket+0xc8>)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	011b      	lsls	r3, r3, #4
 8009b56:	4413      	add	r3, r2
 8009b58:	330c      	adds	r3, #12
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	e00a      	b.n	8009b78 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8009b62:	68b8      	ldr	r0, [r7, #8]
 8009b64:	f005 fe46 	bl	800f7f4 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	dda9      	ble.n	8009ac8 <alloc_socket+0x10>
  }
  return -1;
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20009d1c 	.word	0x20009d1c
 8009b84:	08010f5c 	.word	0x08010f5c
 8009b88:	08010f90 	.word	0x08010f90
 8009b8c:	08010fb0 	.word	0x08010fb0

08009b90 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08a      	sub	sp, #40	@ 0x28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff ff73 	bl	8009a88 <get_socket>
 8009ba2:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d102      	bne.n	8009bb0 <lwip_bind+0x20>
    return -1;
 8009baa:	f04f 33ff 	mov.w	r3, #4294967295
 8009bae:	e051      	b.n	8009c54 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b10      	cmp	r3, #16
 8009bb4:	d108      	bne.n	8009bc8 <lwip_bind+0x38>
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d104      	bne.n	8009bc8 <lwip_bind+0x38>
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f003 0303 	and.w	r3, r3, #3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d014      	beq.n	8009bf2 <lwip_bind+0x62>
 8009bc8:	4b24      	ldr	r3, [pc, #144]	@ (8009c5c <lwip_bind+0xcc>)
 8009bca:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8009bce:	4924      	ldr	r1, [pc, #144]	@ (8009c60 <lwip_bind+0xd0>)
 8009bd0:	4824      	ldr	r0, [pc, #144]	@ (8009c64 <lwip_bind+0xd4>)
 8009bd2:	f005 ff1f 	bl	800fa14 <iprintf>
 8009bd6:	f06f 000f 	mvn.w	r0, #15
 8009bda:	f7ff fe67 	bl	80098ac <err_to_errno>
 8009bde:	6178      	str	r0, [r7, #20]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <lwip_bind+0x5c>
 8009be6:	4a20      	ldr	r2, [pc, #128]	@ (8009c68 <lwip_bind+0xd8>)
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf0:	e030      	b.n	8009c54 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	613b      	str	r3, [r7, #16]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	885b      	ldrh	r3, [r3, #2]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 fc51 	bl	800a4a4 <lwip_htons>
 8009c02:	4603      	mov	r3, r0
 8009c04:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009c0c:	f107 0110 	add.w	r1, r7, #16
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff fb11 	bl	8009238 <netconn_bind>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 8009c1c:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00e      	beq.n	8009c42 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8009c24:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff fe3f 	bl	80098ac <err_to_errno>
 8009c2e:	61b8      	str	r0, [r7, #24]
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <lwip_bind+0xac>
 8009c36:	4a0c      	ldr	r2, [pc, #48]	@ (8009c68 <lwip_bind+0xd8>)
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c40:	e008      	b.n	8009c54 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8009c42:	2300      	movs	r3, #0
 8009c44:	61fb      	str	r3, [r7, #28]
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <lwip_bind+0xc2>
 8009c4c:	4a06      	ldr	r2, [pc, #24]	@ (8009c68 <lwip_bind+0xd8>)
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3728      	adds	r7, #40	@ 0x28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	08010f5c 	.word	0x08010f5c
 8009c60:	08011000 	.word	0x08011000
 8009c64:	08010fb0 	.word	0x08010fb0
 8009c68:	2000d098 	.word	0x2000d098

08009c6c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b090      	sub	sp, #64	@ 0x40
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f7ff ff04 	bl	8009a88 <get_socket>
 8009c80:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (!sock) {
 8009c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d102      	bne.n	8009c8e <lwip_sendto+0x22>
    return -1;
 8009c88:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8c:	e099      	b.n	8009dc2 <lwip_sendto+0x156>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c98:	2b10      	cmp	r3, #16
 8009c9a:	d10d      	bne.n	8009cb8 <lwip_sendto+0x4c>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
#else /* LWIP_TCP */
    LWIP_UNUSED_ARG(flags);
    sock_set_errno(sock, err_to_errno(ERR_ARG));
 8009c9c:	f06f 000f 	mvn.w	r0, #15
 8009ca0:	f7ff fe04 	bl	80098ac <err_to_errno>
 8009ca4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <lwip_sendto+0x46>
 8009cac:	4a47      	ldr	r2, [pc, #284]	@ (8009dcc <lwip_sendto+0x160>)
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb6:	e084      	b.n	8009dc2 <lwip_sendto+0x156>
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cbe:	d30a      	bcc.n	8009cd6 <lwip_sendto+0x6a>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8009cc0:	235a      	movs	r3, #90	@ 0x5a
 8009cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <lwip_sendto+0x64>
 8009cca:	4a40      	ldr	r2, [pc, #256]	@ (8009dcc <lwip_sendto+0x160>)
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd4:	e075      	b.n	8009dc2 <lwip_sendto+0x156>
  }
  short_size = (u16_t)size;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	86fb      	strh	r3, [r7, #54]	@ 0x36
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8009cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d102      	bne.n	8009ce6 <lwip_sendto+0x7a>
 8009ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d023      	beq.n	8009d2e <lwip_sendto+0xc2>
 8009ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ce8:	2b10      	cmp	r3, #16
 8009cea:	d10b      	bne.n	8009d04 <lwip_sendto+0x98>
 8009cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d008      	beq.n	8009d04 <lwip_sendto+0x98>
 8009cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cf4:	785b      	ldrb	r3, [r3, #1]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d104      	bne.n	8009d04 <lwip_sendto+0x98>
 8009cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d014      	beq.n	8009d2e <lwip_sendto+0xc2>
 8009d04:	4b32      	ldr	r3, [pc, #200]	@ (8009dd0 <lwip_sendto+0x164>)
 8009d06:	f240 6252 	movw	r2, #1618	@ 0x652
 8009d0a:	4932      	ldr	r1, [pc, #200]	@ (8009dd4 <lwip_sendto+0x168>)
 8009d0c:	4832      	ldr	r0, [pc, #200]	@ (8009dd8 <lwip_sendto+0x16c>)
 8009d0e:	f005 fe81 	bl	800fa14 <iprintf>
 8009d12:	f06f 000f 	mvn.w	r0, #15
 8009d16:	f7ff fdc9 	bl	80098ac <err_to_errno>
 8009d1a:	6338      	str	r0, [r7, #48]	@ 0x30
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <lwip_sendto+0xbc>
 8009d22:	4a2a      	ldr	r2, [pc, #168]	@ (8009dcc <lwip_sendto+0x160>)
 8009d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	f04f 33ff 	mov.w	r3, #4294967295
 8009d2c:	e049      	b.n	8009dc2 <lwip_sendto+0x156>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	61bb      	str	r3, [r7, #24]
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8009d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00a      	beq.n	8009d52 <lwip_sendto+0xe6>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8009d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	61fb      	str	r3, [r7, #28]
 8009d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d44:	885b      	ldrh	r3, [r3, #2]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 fbac 	bl	800a4a4 <lwip_htons>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009d50:	e003      	b.n	8009d5a <lwip_sendto+0xee>
  } else {
    remote_port = 0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8009d56:	2300      	movs	r3, #0
 8009d58:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 8009d5a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009d5c:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8009d5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d60:	f107 0314 	add.w	r3, r7, #20
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7ff fe06 	bl	8009978 <netbuf_ref>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8009d72:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10a      	bne.n	8009d90 <lwip_sendto+0x124>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f107 0214 	add.w	r2, r7, #20
 8009d82:	4611      	mov	r1, r2
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7ff fa8f 	bl	80092a8 <netconn_send>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8009d90:	f107 0314 	add.w	r3, r7, #20
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff fdc7 	bl	8009928 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8009d9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fd84 	bl	80098ac <err_to_errno>
 8009da4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <lwip_sendto+0x146>
 8009dac:	4a07      	ldr	r2, [pc, #28]	@ (8009dcc <lwip_sendto+0x160>)
 8009dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8009db2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <lwip_sendto+0x152>
 8009dba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009dbc:	e001      	b.n	8009dc2 <lwip_sendto+0x156>
 8009dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3740      	adds	r7, #64	@ 0x40
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	2000d098 	.word	0x2000d098
 8009dd0:	08010f5c 	.word	0x08010f5c
 8009dd4:	080111b4 	.word	0x080111b4
 8009dd8:	08010fb0 	.word	0x08010fb0

08009ddc <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d009      	beq.n	8009e02 <lwip_socket+0x26>
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	dc23      	bgt.n	8009e3c <lwip_socket+0x60>
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d019      	beq.n	8009e2e <lwip_socket+0x52>
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d009      	beq.n	8009e14 <lwip_socket+0x38>
 8009e00:	e01c      	b.n	8009e3c <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	4a22      	ldr	r2, [pc, #136]	@ (8009e90 <lwip_socket+0xb4>)
 8009e08:	4619      	mov	r1, r3
 8009e0a:	2040      	movs	r0, #64	@ 0x40
 8009e0c:	f7ff f96c 	bl	80090e8 <netconn_new_with_proto_and_callback>
 8009e10:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8009e12:	e019      	b.n	8009e48 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b88      	cmp	r3, #136	@ 0x88
 8009e18:	d101      	bne.n	8009e1e <lwip_socket+0x42>
 8009e1a:	2321      	movs	r3, #33	@ 0x21
 8009e1c:	e000      	b.n	8009e20 <lwip_socket+0x44>
 8009e1e:	2320      	movs	r3, #32
 8009e20:	4a1b      	ldr	r2, [pc, #108]	@ (8009e90 <lwip_socket+0xb4>)
 8009e22:	2100      	movs	r1, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff f95f 	bl	80090e8 <netconn_new_with_proto_and_callback>
 8009e2a:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009e2c:	e00c      	b.n	8009e48 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8009e2e:	4a18      	ldr	r2, [pc, #96]	@ (8009e90 <lwip_socket+0xb4>)
 8009e30:	2100      	movs	r1, #0
 8009e32:	2010      	movs	r0, #16
 8009e34:	f7ff f958 	bl	80090e8 <netconn_new_with_proto_and_callback>
 8009e38:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8009e3a:	e005      	b.n	8009e48 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8009e3c:	4b15      	ldr	r3, [pc, #84]	@ (8009e94 <lwip_socket+0xb8>)
 8009e3e:	2216      	movs	r2, #22
 8009e40:	601a      	str	r2, [r3, #0]
      return -1;
 8009e42:	f04f 33ff 	mov.w	r3, #4294967295
 8009e46:	e01e      	b.n	8009e86 <lwip_socket+0xaa>
  }

  if (!conn) {
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d105      	bne.n	8009e5a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8009e4e:	4b11      	ldr	r3, [pc, #68]	@ (8009e94 <lwip_socket+0xb8>)
 8009e50:	2269      	movs	r2, #105	@ 0x69
 8009e52:	601a      	str	r2, [r3, #0]
    return -1;
 8009e54:	f04f 33ff 	mov.w	r3, #4294967295
 8009e58:	e015      	b.n	8009e86 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	6978      	ldr	r0, [r7, #20]
 8009e5e:	f7ff fe2b 	bl	8009ab8 <alloc_socket>
 8009e62:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6a:	d108      	bne.n	8009e7e <lwip_socket+0xa2>
    netconn_delete(conn);
 8009e6c:	6978      	ldr	r0, [r7, #20]
 8009e6e:	f7ff f9c7 	bl	8009200 <netconn_delete>
    set_errno(ENFILE);
 8009e72:	4b08      	ldr	r3, [pc, #32]	@ (8009e94 <lwip_socket+0xb8>)
 8009e74:	2217      	movs	r2, #23
 8009e76:	601a      	str	r2, [r3, #0]
    return -1;
 8009e78:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7c:	e003      	b.n	8009e86 <lwip_socket+0xaa>
  }
  conn->socket = i;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	615a      	str	r2, [r3, #20]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8009e84:	693b      	ldr	r3, [r7, #16]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	08009f21 	.word	0x08009f21
 8009e94:	2000d098 	.word	0x2000d098

08009e98 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	e02c      	b.n	8009f06 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	695a      	ldr	r2, [r3, #20]
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	4413      	add	r3, r2
 8009eb6:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d11e      	bne.n	8009f00 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d009      	beq.n	8009edc <lwip_poll_should_wake+0x44>
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <lwip_poll_should_wake+0x44>
        return 1;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e01a      	b.n	8009f12 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <lwip_poll_should_wake+0x5e>
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	f003 0302 	and.w	r3, r3, #2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <lwip_poll_should_wake+0x5e>
        return 1;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e00d      	b.n	8009f12 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e008      	b.n	8009f12 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	3301      	adds	r3, #1
 8009f04:	617b      	str	r3, [r7, #20]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d3cd      	bcc.n	8009eac <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
	...

08009f20 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08a      	sub	sp, #40	@ 0x28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	70fb      	strb	r3, [r7, #3]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80a4 	beq.w	800a080 <event_callback+0x160>
    s = conn->socket;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	da18      	bge.n	8009f76 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8009f44:	f005 fc48 	bl	800f7d8 <sys_arch_protect>
 8009f48:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	da0b      	bge.n	8009f6a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d104      	bne.n	8009f62 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	695b      	ldr	r3, [r3, #20]
 8009f5c:	1e5a      	subs	r2, r3, #1
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	615a      	str	r2, [r3, #20]
        }
        SYS_ARCH_UNPROTECT(lev);
 8009f62:	69f8      	ldr	r0, [r7, #28]
 8009f64:	f005 fc46 	bl	800f7f4 <sys_arch_unprotect>
        return;
 8009f68:	e08d      	b.n	800a086 <event_callback+0x166>
      }
      s = conn->socket;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 8009f70:	69f8      	ldr	r0, [r7, #28]
 8009f72:	f005 fc3f 	bl	800f7f4 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8009f76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f78:	f7ff fd86 	bl	8009a88 <get_socket>
 8009f7c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d07f      	beq.n	800a084 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8009f84:	2301      	movs	r3, #1
 8009f86:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8009f88:	f005 fc26 	bl	800f7d8 <sys_arch_protect>
 8009f8c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8009f8e:	78fb      	ldrb	r3, [r7, #3]
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	d83e      	bhi.n	800a012 <event_callback+0xf2>
 8009f94:	a201      	add	r2, pc, #4	@ (adr r2, 8009f9c <event_callback+0x7c>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fb1 	.word	0x08009fb1
 8009fa0:	08009fd3 	.word	0x08009fd3
 8009fa4:	08009feb 	.word	0x08009feb
 8009fa8:	08009fff 	.word	0x08009fff
 8009fac:	0800a00b 	.word	0x0800a00b
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	3301      	adds	r3, #1
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	b21a      	sxth	r2, r3
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	dd2a      	ble.n	800a022 <event_callback+0x102>
        check_waiters = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	623b      	str	r3, [r7, #32]
      }
      break;
 8009fd0:	e027      	b.n	800a022 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	b21a      	sxth	r2, r3
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	623b      	str	r3, [r7, #32]
      break;
 8009fe8:	e01c      	b.n	800a024 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	895b      	ldrh	r3, [r3, #10]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <event_callback+0xd6>
        check_waiters = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	815a      	strh	r2, [r3, #10]
      break;
 8009ffc:	e012      	b.n	800a024 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2200      	movs	r2, #0
 800a002:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	623b      	str	r3, [r7, #32]
      break;
 800a008:	e00c      	b.n	800a024 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	2201      	movs	r2, #1
 800a00e:	819a      	strh	r2, [r3, #12]
      break;
 800a010:	e008      	b.n	800a024 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800a012:	4b1e      	ldr	r3, [pc, #120]	@ (800a08c <event_callback+0x16c>)
 800a014:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800a018:	491d      	ldr	r1, [pc, #116]	@ (800a090 <event_callback+0x170>)
 800a01a:	481e      	ldr	r0, [pc, #120]	@ (800a094 <event_callback+0x174>)
 800a01c:	f005 fcfa 	bl	800fa14 <iprintf>
      break;
 800a020:	e000      	b.n	800a024 <event_callback+0x104>
      break;
 800a022:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	7b9b      	ldrb	r3, [r3, #14]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d025      	beq.n	800a078 <event_callback+0x158>
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d022      	beq.n	800a078 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bfcc      	ite	gt
 800a03c:	2301      	movgt	r3, #1
 800a03e:	2300      	movle	r3, #0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	895b      	ldrh	r3, [r3, #10]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	bf14      	ite	ne
 800a04c:	2301      	movne	r3, #1
 800a04e:	2300      	moveq	r3, #0
 800a050:	b2db      	uxtb	r3, r3
 800a052:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	899b      	ldrh	r3, [r3, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bf14      	ite	ne
 800a05c:	2301      	movne	r3, #1
 800a05e:	2300      	moveq	r3, #0
 800a060:	b2db      	uxtb	r3, r3
 800a062:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800a064:	69f8      	ldr	r0, [r7, #28]
 800a066:	f005 fbc5 	bl	800f7f4 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	6979      	ldr	r1, [r7, #20]
 800a070:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a072:	f000 f811 	bl	800a098 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800a076:	e006      	b.n	800a086 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800a078:	69f8      	ldr	r0, [r7, #28]
 800a07a:	f005 fbbb 	bl	800f7f4 <sys_arch_unprotect>
 800a07e:	e002      	b.n	800a086 <event_callback+0x166>
    return;
 800a080:	bf00      	nop
 800a082:	e000      	b.n	800a086 <event_callback+0x166>
      return;
 800a084:	bf00      	nop
  }
  done_socket(sock);
}
 800a086:	3728      	adds	r7, #40	@ 0x28
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	08010f5c 	.word	0x08010f5c
 800a090:	08011250 	.word	0x08011250
 800a094:	08010fb0 	.word	0x08010fb0

0800a098 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a0a6:	4b42      	ldr	r3, [pc, #264]	@ (800a1b0 <select_check_waiters+0x118>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	617b      	str	r3, [r7, #20]
 800a0ac:	e078      	b.n	800a1a0 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d171      	bne.n	800a19a <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d009      	beq.n	800a0d6 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	68f9      	ldr	r1, [r7, #12]
 800a0cc:	6978      	ldr	r0, [r7, #20]
 800a0ce:	f7ff fee3 	bl	8009e98 <lwip_poll_should_wake>
 800a0d2:	6138      	str	r0, [r7, #16]
 800a0d4:	e056      	b.n	800a184 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d017      	beq.n	800a10c <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d013      	beq.n	800a10c <select_check_waiters+0x74>
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	da00      	bge.n	800a0f0 <select_check_waiters+0x58>
 800a0ee:	331f      	adds	r3, #31
 800a0f0:	115b      	asrs	r3, r3, #5
 800a0f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f003 031f 	and.w	r3, r3, #31
 800a0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <select_check_waiters+0x74>
            do_signal = 1;
 800a108:	2301      	movs	r3, #1
 800a10a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01a      	beq.n	800a148 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d117      	bne.n	800a148 <select_check_waiters+0xb0>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d013      	beq.n	800a148 <select_check_waiters+0xb0>
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	da00      	bge.n	800a12c <select_check_waiters+0x94>
 800a12a:	331f      	adds	r3, #31
 800a12c:	115b      	asrs	r3, r3, #5
 800a12e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f003 031f 	and.w	r3, r3, #31
 800a138:	fa22 f303 	lsr.w	r3, r2, r3
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <select_check_waiters+0xb0>
            do_signal = 1;
 800a144:	2301      	movs	r3, #1
 800a146:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01a      	beq.n	800a184 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d117      	bne.n	800a184 <select_check_waiters+0xec>
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d013      	beq.n	800a184 <select_check_waiters+0xec>
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	691a      	ldr	r2, [r3, #16]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b00      	cmp	r3, #0
 800a164:	da00      	bge.n	800a168 <select_check_waiters+0xd0>
 800a166:	331f      	adds	r3, #31
 800a168:	115b      	asrs	r3, r3, #5
 800a16a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f003 031f 	and.w	r3, r3, #31
 800a174:	fa22 f303 	lsr.w	r3, r2, r3
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <select_check_waiters+0xec>
            do_signal = 1;
 800a180:	2301      	movs	r3, #1
 800a182:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d007      	beq.n	800a19a <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2201      	movs	r2, #1
 800a18e:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	3320      	adds	r3, #32
 800a194:	4618      	mov	r0, r3
 800a196:	f005 fa7a 	bl	800f68e <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d183      	bne.n	800a0ae <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	3718      	adds	r7, #24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20009d5c 	.word	0x20009d5c

0800a1b4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a1be:	f002 f85b 	bl	800c278 <sys_timeouts_sleeptime>
 800a1c2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ca:	d10b      	bne.n	800a1e4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a1cc:	4813      	ldr	r0, [pc, #76]	@ (800a21c <tcpip_timeouts_mbox_fetch+0x68>)
 800a1ce:	f005 fad0 	bl	800f772 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f005 f9b8 	bl	800f54c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a1dc:	480f      	ldr	r0, [pc, #60]	@ (800a21c <tcpip_timeouts_mbox_fetch+0x68>)
 800a1de:	f005 fab9 	bl	800f754 <sys_mutex_lock>
    return;
 800a1e2:	e018      	b.n	800a216 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d102      	bne.n	800a1f0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a1ea:	f002 f80b 	bl	800c204 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a1ee:	e7e6      	b.n	800a1be <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a1f0:	480a      	ldr	r0, [pc, #40]	@ (800a21c <tcpip_timeouts_mbox_fetch+0x68>)
 800a1f2:	f005 fabe 	bl	800f772 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f005 f9a6 	bl	800f54c <sys_arch_mbox_fetch>
 800a200:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a202:	4806      	ldr	r0, [pc, #24]	@ (800a21c <tcpip_timeouts_mbox_fetch+0x68>)
 800a204:	f005 faa6 	bl	800f754 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20e:	d102      	bne.n	800a216 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a210:	f001 fff8 	bl	800c204 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a214:	e7d3      	b.n	800a1be <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20009d6c 	.word	0x20009d6c

0800a220 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a228:	4810      	ldr	r0, [pc, #64]	@ (800a26c <tcpip_thread+0x4c>)
 800a22a:	f005 fa93 	bl	800f754 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a22e:	4b10      	ldr	r3, [pc, #64]	@ (800a270 <tcpip_thread+0x50>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a236:	4b0e      	ldr	r3, [pc, #56]	@ (800a270 <tcpip_thread+0x50>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a0e      	ldr	r2, [pc, #56]	@ (800a274 <tcpip_thread+0x54>)
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	4610      	mov	r0, r2
 800a240:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a242:	f107 030c 	add.w	r3, r7, #12
 800a246:	4619      	mov	r1, r3
 800a248:	480b      	ldr	r0, [pc, #44]	@ (800a278 <tcpip_thread+0x58>)
 800a24a:	f7ff ffb3 	bl	800a1b4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d106      	bne.n	800a262 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a254:	4b09      	ldr	r3, [pc, #36]	@ (800a27c <tcpip_thread+0x5c>)
 800a256:	2291      	movs	r2, #145	@ 0x91
 800a258:	4909      	ldr	r1, [pc, #36]	@ (800a280 <tcpip_thread+0x60>)
 800a25a:	480a      	ldr	r0, [pc, #40]	@ (800a284 <tcpip_thread+0x64>)
 800a25c:	f005 fbda 	bl	800fa14 <iprintf>
      continue;
 800a260:	e003      	b.n	800a26a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f80f 	bl	800a288 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a26a:	e7ea      	b.n	800a242 <tcpip_thread+0x22>
 800a26c:	20009d6c 	.word	0x20009d6c
 800a270:	20009d60 	.word	0x20009d60
 800a274:	20009d64 	.word	0x20009d64
 800a278:	20009d68 	.word	0x20009d68
 800a27c:	080112a4 	.word	0x080112a4
 800a280:	080112d4 	.word	0x080112d4
 800a284:	080112f4 	.word	0x080112f4

0800a288 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b02      	cmp	r3, #2
 800a296:	d026      	beq.n	800a2e6 <tcpip_thread_handle_msg+0x5e>
 800a298:	2b02      	cmp	r3, #2
 800a29a:	dc2b      	bgt.n	800a2f4 <tcpip_thread_handle_msg+0x6c>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <tcpip_thread_handle_msg+0x1e>
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d015      	beq.n	800a2d0 <tcpip_thread_handle_msg+0x48>
 800a2a4:	e026      	b.n	800a2f4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	6850      	ldr	r0, [r2, #4]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	6892      	ldr	r2, [r2, #8]
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4798      	blx	r3
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d004      	beq.n	800a2c6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f001 fc7f 	bl	800bbc4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	2006      	movs	r0, #6
 800a2ca:	f000 fe37 	bl	800af3c <memp_free>
      break;
 800a2ce:	e018      	b.n	800a302 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	6892      	ldr	r2, [r2, #8]
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a2dc:	6879      	ldr	r1, [r7, #4]
 800a2de:	2005      	movs	r0, #5
 800a2e0:	f000 fe2c 	bl	800af3c <memp_free>
      break;
 800a2e4:	e00d      	b.n	800a302 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	6892      	ldr	r2, [r2, #8]
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	4798      	blx	r3
      break;
 800a2f2:	e006      	b.n	800a302 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a2f4:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <tcpip_thread_handle_msg+0x84>)
 800a2f6:	22cf      	movs	r2, #207	@ 0xcf
 800a2f8:	4905      	ldr	r1, [pc, #20]	@ (800a310 <tcpip_thread_handle_msg+0x88>)
 800a2fa:	4806      	ldr	r0, [pc, #24]	@ (800a314 <tcpip_thread_handle_msg+0x8c>)
 800a2fc:	f005 fb8a 	bl	800fa14 <iprintf>
      break;
 800a300:	bf00      	nop
  }
}
 800a302:	bf00      	nop
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	080112a4 	.word	0x080112a4
 800a310:	080112d4 	.word	0x080112d4
 800a314:	080112f4 	.word	0x080112f4

0800a318 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a324:	481a      	ldr	r0, [pc, #104]	@ (800a390 <tcpip_inpkt+0x78>)
 800a326:	f005 f96c 	bl	800f602 <sys_mbox_valid>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d105      	bne.n	800a33c <tcpip_inpkt+0x24>
 800a330:	4b18      	ldr	r3, [pc, #96]	@ (800a394 <tcpip_inpkt+0x7c>)
 800a332:	22fc      	movs	r2, #252	@ 0xfc
 800a334:	4918      	ldr	r1, [pc, #96]	@ (800a398 <tcpip_inpkt+0x80>)
 800a336:	4819      	ldr	r0, [pc, #100]	@ (800a39c <tcpip_inpkt+0x84>)
 800a338:	f005 fb6c 	bl	800fa14 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a33c:	2006      	movs	r0, #6
 800a33e:	f000 fd87 	bl	800ae50 <memp_malloc>
 800a342:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a34a:	f04f 33ff 	mov.w	r3, #4294967295
 800a34e:	e01a      	b.n	800a386 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2200      	movs	r2, #0
 800a354:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a368:	6979      	ldr	r1, [r7, #20]
 800a36a:	4809      	ldr	r0, [pc, #36]	@ (800a390 <tcpip_inpkt+0x78>)
 800a36c:	f005 f8d4 	bl	800f518 <sys_mbox_trypost>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d006      	beq.n	800a384 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a376:	6979      	ldr	r1, [r7, #20]
 800a378:	2006      	movs	r0, #6
 800a37a:	f000 fddf 	bl	800af3c <memp_free>
    return ERR_MEM;
 800a37e:	f04f 33ff 	mov.w	r3, #4294967295
 800a382:	e000      	b.n	800a386 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a384:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20009d68 	.word	0x20009d68
 800a394:	080112a4 	.word	0x080112a4
 800a398:	0801131c 	.word	0x0801131c
 800a39c:	080112f4 	.word	0x080112f4

0800a3a0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a3b0:	f003 0318 	and.w	r3, r3, #24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d006      	beq.n	800a3c6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a3b8:	4a08      	ldr	r2, [pc, #32]	@ (800a3dc <tcpip_input+0x3c>)
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff ffab 	bl	800a318 <tcpip_inpkt>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	e005      	b.n	800a3d2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a3c6:	4a06      	ldr	r2, [pc, #24]	@ (800a3e0 <tcpip_input+0x40>)
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7ff ffa4 	bl	800a318 <tcpip_inpkt>
 800a3d0:	4603      	mov	r3, r0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	0800f305 	.word	0x0800f305
 800a3e0:	0800dfa5 	.word	0x0800dfa5

0800a3e4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a3f0:	4806      	ldr	r0, [pc, #24]	@ (800a40c <tcpip_send_msg_wait_sem+0x28>)
 800a3f2:	f005 f9af 	bl	800f754 <sys_mutex_lock>
  fn(apimsg);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	68b8      	ldr	r0, [r7, #8]
 800a3fa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a3fc:	4803      	ldr	r0, [pc, #12]	@ (800a40c <tcpip_send_msg_wait_sem+0x28>)
 800a3fe:	f005 f9b8 	bl	800f772 <sys_mutex_unlock>
  return ERR_OK;
 800a402:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	20009d6c 	.word	0x20009d6c

0800a410 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af02      	add	r7, sp, #8
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a41a:	f000 f871 	bl	800a500 <lwip_init>

  tcpip_init_done = initfunc;
 800a41e:	4a17      	ldr	r2, [pc, #92]	@ (800a47c <tcpip_init+0x6c>)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a424:	4a16      	ldr	r2, [pc, #88]	@ (800a480 <tcpip_init+0x70>)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a42a:	2106      	movs	r1, #6
 800a42c:	4815      	ldr	r0, [pc, #84]	@ (800a484 <tcpip_init+0x74>)
 800a42e:	f005 f83f 	bl	800f4b0 <sys_mbox_new>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a438:	4b13      	ldr	r3, [pc, #76]	@ (800a488 <tcpip_init+0x78>)
 800a43a:	f240 2261 	movw	r2, #609	@ 0x261
 800a43e:	4913      	ldr	r1, [pc, #76]	@ (800a48c <tcpip_init+0x7c>)
 800a440:	4813      	ldr	r0, [pc, #76]	@ (800a490 <tcpip_init+0x80>)
 800a442:	f005 fae7 	bl	800fa14 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a446:	4813      	ldr	r0, [pc, #76]	@ (800a494 <tcpip_init+0x84>)
 800a448:	f005 f968 	bl	800f71c <sys_mutex_new>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d006      	beq.n	800a460 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a452:	4b0d      	ldr	r3, [pc, #52]	@ (800a488 <tcpip_init+0x78>)
 800a454:	f240 2265 	movw	r2, #613	@ 0x265
 800a458:	490f      	ldr	r1, [pc, #60]	@ (800a498 <tcpip_init+0x88>)
 800a45a:	480d      	ldr	r0, [pc, #52]	@ (800a490 <tcpip_init+0x80>)
 800a45c:	f005 fada 	bl	800fa14 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a460:	2300      	movs	r3, #0
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a468:	2200      	movs	r2, #0
 800a46a:	490c      	ldr	r1, [pc, #48]	@ (800a49c <tcpip_init+0x8c>)
 800a46c:	480c      	ldr	r0, [pc, #48]	@ (800a4a0 <tcpip_init+0x90>)
 800a46e:	f005 f98d 	bl	800f78c <sys_thread_new>
}
 800a472:	bf00      	nop
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20009d60 	.word	0x20009d60
 800a480:	20009d64 	.word	0x20009d64
 800a484:	20009d68 	.word	0x20009d68
 800a488:	080112a4 	.word	0x080112a4
 800a48c:	0801132c 	.word	0x0801132c
 800a490:	080112f4 	.word	0x080112f4
 800a494:	20009d6c 	.word	0x20009d6c
 800a498:	08011350 	.word	0x08011350
 800a49c:	0800a221 	.word	0x0800a221
 800a4a0:	08011374 	.word	0x08011374

0800a4a4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a4ae:	88fb      	ldrh	r3, [r7, #6]
 800a4b0:	021b      	lsls	r3, r3, #8
 800a4b2:	b21a      	sxth	r2, r3
 800a4b4:	88fb      	ldrh	r3, [r7, #6]
 800a4b6:	0a1b      	lsrs	r3, r3, #8
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	b21b      	sxth	r3, r3
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	b21b      	sxth	r3, r3
 800a4c0:	b29b      	uxth	r3, r3
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	061a      	lsls	r2, r3, #24
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	0a1b      	lsrs	r3, r3, #8
 800a4e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	0e1b      	lsrs	r3, r3, #24
 800a4f2:	4313      	orrs	r3, r2
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a50a:	f005 f8f9 	bl	800f700 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a50e:	f000 f8d3 	bl	800a6b8 <mem_init>
  memp_init();
 800a512:	f000 fc2f 	bl	800ad74 <memp_init>
  pbuf_init();
  netif_init();
 800a516:	f000 fd3b 	bl	800af90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a51a:	f001 fee5 	bl	800c2e8 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a51e:	f001 fe29 	bl	800c174 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a522:	bf00      	nop
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
	...

0800a52c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a536:	4b05      	ldr	r3, [pc, #20]	@ (800a54c <ptr_to_mem+0x20>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	88fb      	ldrh	r3, [r7, #6]
 800a53c:	4413      	add	r3, r2
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	2000a3dc 	.word	0x2000a3dc

0800a550 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a558:	4b05      	ldr	r3, [pc, #20]	@ (800a570 <mem_to_ptr+0x20>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	b29b      	uxth	r3, r3
}
 800a562:	4618      	mov	r0, r3
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	2000a3dc 	.word	0x2000a3dc

0800a574 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a574:	b590      	push	{r4, r7, lr}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a57c:	4b45      	ldr	r3, [pc, #276]	@ (800a694 <plug_holes+0x120>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	429a      	cmp	r2, r3
 800a584:	d206      	bcs.n	800a594 <plug_holes+0x20>
 800a586:	4b44      	ldr	r3, [pc, #272]	@ (800a698 <plug_holes+0x124>)
 800a588:	f240 12df 	movw	r2, #479	@ 0x1df
 800a58c:	4943      	ldr	r1, [pc, #268]	@ (800a69c <plug_holes+0x128>)
 800a58e:	4844      	ldr	r0, [pc, #272]	@ (800a6a0 <plug_holes+0x12c>)
 800a590:	f005 fa40 	bl	800fa14 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a594:	4b43      	ldr	r3, [pc, #268]	@ (800a6a4 <plug_holes+0x130>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d306      	bcc.n	800a5ac <plug_holes+0x38>
 800a59e:	4b3e      	ldr	r3, [pc, #248]	@ (800a698 <plug_holes+0x124>)
 800a5a0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a5a4:	4940      	ldr	r1, [pc, #256]	@ (800a6a8 <plug_holes+0x134>)
 800a5a6:	483e      	ldr	r0, [pc, #248]	@ (800a6a0 <plug_holes+0x12c>)
 800a5a8:	f005 fa34 	bl	800fa14 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	791b      	ldrb	r3, [r3, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d006      	beq.n	800a5c2 <plug_holes+0x4e>
 800a5b4:	4b38      	ldr	r3, [pc, #224]	@ (800a698 <plug_holes+0x124>)
 800a5b6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a5ba:	493c      	ldr	r1, [pc, #240]	@ (800a6ac <plug_holes+0x138>)
 800a5bc:	4838      	ldr	r0, [pc, #224]	@ (800a6a0 <plug_holes+0x12c>)
 800a5be:	f005 fa29 	bl	800fa14 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a5ca:	d906      	bls.n	800a5da <plug_holes+0x66>
 800a5cc:	4b32      	ldr	r3, [pc, #200]	@ (800a698 <plug_holes+0x124>)
 800a5ce:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a5d2:	4937      	ldr	r1, [pc, #220]	@ (800a6b0 <plug_holes+0x13c>)
 800a5d4:	4832      	ldr	r0, [pc, #200]	@ (800a6a0 <plug_holes+0x12c>)
 800a5d6:	f005 fa1d 	bl	800fa14 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	881b      	ldrh	r3, [r3, #0]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff ffa4 	bl	800a52c <ptr_to_mem>
 800a5e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d024      	beq.n	800a638 <plug_holes+0xc4>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	791b      	ldrb	r3, [r3, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d120      	bne.n	800a638 <plug_holes+0xc4>
 800a5f6:	4b2b      	ldr	r3, [pc, #172]	@ (800a6a4 <plug_holes+0x130>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d01b      	beq.n	800a638 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a600:	4b2c      	ldr	r3, [pc, #176]	@ (800a6b4 <plug_holes+0x140>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	429a      	cmp	r2, r3
 800a608:	d102      	bne.n	800a610 <plug_holes+0x9c>
      lfree = mem;
 800a60a:	4a2a      	ldr	r2, [pc, #168]	@ (800a6b4 <plug_holes+0x140>)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	881a      	ldrh	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	881b      	ldrh	r3, [r3, #0]
 800a61c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a620:	d00a      	beq.n	800a638 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff ff80 	bl	800a52c <ptr_to_mem>
 800a62c:	4604      	mov	r4, r0
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7ff ff8e 	bl	800a550 <mem_to_ptr>
 800a634:	4603      	mov	r3, r0
 800a636:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	885b      	ldrh	r3, [r3, #2]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff ff75 	bl	800a52c <ptr_to_mem>
 800a642:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d01f      	beq.n	800a68c <plug_holes+0x118>
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	791b      	ldrb	r3, [r3, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d11b      	bne.n	800a68c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a654:	4b17      	ldr	r3, [pc, #92]	@ (800a6b4 <plug_holes+0x140>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d102      	bne.n	800a664 <plug_holes+0xf0>
      lfree = pmem;
 800a65e:	4a15      	ldr	r2, [pc, #84]	@ (800a6b4 <plug_holes+0x140>)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	881a      	ldrh	r2, [r3, #0]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a674:	d00a      	beq.n	800a68c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff ff56 	bl	800a52c <ptr_to_mem>
 800a680:	4604      	mov	r4, r0
 800a682:	68b8      	ldr	r0, [r7, #8]
 800a684:	f7ff ff64 	bl	800a550 <mem_to_ptr>
 800a688:	4603      	mov	r3, r0
 800a68a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a68c:	bf00      	nop
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	bd90      	pop	{r4, r7, pc}
 800a694:	2000a3dc 	.word	0x2000a3dc
 800a698:	08011384 	.word	0x08011384
 800a69c:	080113b4 	.word	0x080113b4
 800a6a0:	080113cc 	.word	0x080113cc
 800a6a4:	2000a3e0 	.word	0x2000a3e0
 800a6a8:	080113f4 	.word	0x080113f4
 800a6ac:	08011410 	.word	0x08011410
 800a6b0:	0801142c 	.word	0x0801142c
 800a6b4:	2000a3e8 	.word	0x2000a3e8

0800a6b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a6be:	4b1f      	ldr	r3, [pc, #124]	@ (800a73c <mem_init+0x84>)
 800a6c0:	3303      	adds	r3, #3
 800a6c2:	f023 0303 	bic.w	r3, r3, #3
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4b1d      	ldr	r3, [pc, #116]	@ (800a740 <mem_init+0x88>)
 800a6ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a6cc:	4b1c      	ldr	r3, [pc, #112]	@ (800a740 <mem_init+0x88>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a6d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a6e6:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800a6ea:	f7ff ff1f 	bl	800a52c <ptr_to_mem>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	4a14      	ldr	r2, [pc, #80]	@ (800a744 <mem_init+0x8c>)
 800a6f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a6f4:	4b13      	ldr	r3, [pc, #76]	@ (800a744 <mem_init+0x8c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a6fc:	4b11      	ldr	r3, [pc, #68]	@ (800a744 <mem_init+0x8c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a704:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a706:	4b0f      	ldr	r3, [pc, #60]	@ (800a744 <mem_init+0x8c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a70e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a710:	4b0b      	ldr	r3, [pc, #44]	@ (800a740 <mem_init+0x88>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a0c      	ldr	r2, [pc, #48]	@ (800a748 <mem_init+0x90>)
 800a716:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a718:	480c      	ldr	r0, [pc, #48]	@ (800a74c <mem_init+0x94>)
 800a71a:	f004 ffff 	bl	800f71c <sys_mutex_new>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d006      	beq.n	800a732 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a724:	4b0a      	ldr	r3, [pc, #40]	@ (800a750 <mem_init+0x98>)
 800a726:	f240 221f 	movw	r2, #543	@ 0x21f
 800a72a:	490a      	ldr	r1, [pc, #40]	@ (800a754 <mem_init+0x9c>)
 800a72c:	480a      	ldr	r0, [pc, #40]	@ (800a758 <mem_init+0xa0>)
 800a72e:	f005 f971 	bl	800fa14 <iprintf>
  }
}
 800a732:	bf00      	nop
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20009d88 	.word	0x20009d88
 800a740:	2000a3dc 	.word	0x2000a3dc
 800a744:	2000a3e0 	.word	0x2000a3e0
 800a748:	2000a3e8 	.word	0x2000a3e8
 800a74c:	2000a3e4 	.word	0x2000a3e4
 800a750:	08011384 	.word	0x08011384
 800a754:	08011458 	.word	0x08011458
 800a758:	080113cc 	.word	0x080113cc

0800a75c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff fef3 	bl	800a550 <mem_to_ptr>
 800a76a:	4603      	mov	r3, r0
 800a76c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff feda 	bl	800a52c <ptr_to_mem>
 800a778:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	885b      	ldrh	r3, [r3, #2]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7ff fed4 	bl	800a52c <ptr_to_mem>
 800a784:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a78e:	d818      	bhi.n	800a7c2 <mem_link_valid+0x66>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	885b      	ldrh	r3, [r3, #2]
 800a794:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a798:	d813      	bhi.n	800a7c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a79e:	8afa      	ldrh	r2, [r7, #22]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d004      	beq.n	800a7ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	8afa      	ldrh	r2, [r7, #22]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d109      	bne.n	800a7c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a7ae:	4b08      	ldr	r3, [pc, #32]	@ (800a7d0 <mem_link_valid+0x74>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d006      	beq.n	800a7c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	885b      	ldrh	r3, [r3, #2]
 800a7bc:	8afa      	ldrh	r2, [r7, #22]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d001      	beq.n	800a7c6 <mem_link_valid+0x6a>
    return 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e000      	b.n	800a7c8 <mem_link_valid+0x6c>
  }
  return 1;
 800a7c6:	2301      	movs	r3, #1
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	2000a3e0 	.word	0x2000a3e0

0800a7d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d070      	beq.n	800a8c4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00d      	beq.n	800a808 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a7ec:	4b37      	ldr	r3, [pc, #220]	@ (800a8cc <mem_free+0xf8>)
 800a7ee:	f240 2273 	movw	r2, #627	@ 0x273
 800a7f2:	4937      	ldr	r1, [pc, #220]	@ (800a8d0 <mem_free+0xfc>)
 800a7f4:	4837      	ldr	r0, [pc, #220]	@ (800a8d4 <mem_free+0x100>)
 800a7f6:	f005 f90d 	bl	800fa14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7fa:	f004 ffed 	bl	800f7d8 <sys_arch_protect>
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f004 fff7 	bl	800f7f4 <sys_arch_unprotect>
    return;
 800a806:	e05e      	b.n	800a8c6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3b08      	subs	r3, #8
 800a80c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a80e:	4b32      	ldr	r3, [pc, #200]	@ (800a8d8 <mem_free+0x104>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	429a      	cmp	r2, r3
 800a816:	d306      	bcc.n	800a826 <mem_free+0x52>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f103 020c 	add.w	r2, r3, #12
 800a81e:	4b2f      	ldr	r3, [pc, #188]	@ (800a8dc <mem_free+0x108>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d90d      	bls.n	800a842 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a826:	4b29      	ldr	r3, [pc, #164]	@ (800a8cc <mem_free+0xf8>)
 800a828:	f240 227f 	movw	r2, #639	@ 0x27f
 800a82c:	492c      	ldr	r1, [pc, #176]	@ (800a8e0 <mem_free+0x10c>)
 800a82e:	4829      	ldr	r0, [pc, #164]	@ (800a8d4 <mem_free+0x100>)
 800a830:	f005 f8f0 	bl	800fa14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a834:	f004 ffd0 	bl	800f7d8 <sys_arch_protect>
 800a838:	6138      	str	r0, [r7, #16]
 800a83a:	6938      	ldr	r0, [r7, #16]
 800a83c:	f004 ffda 	bl	800f7f4 <sys_arch_unprotect>
    return;
 800a840:	e041      	b.n	800a8c6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a842:	4828      	ldr	r0, [pc, #160]	@ (800a8e4 <mem_free+0x110>)
 800a844:	f004 ff86 	bl	800f754 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	791b      	ldrb	r3, [r3, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d110      	bne.n	800a872 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a850:	4b1e      	ldr	r3, [pc, #120]	@ (800a8cc <mem_free+0xf8>)
 800a852:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a856:	4924      	ldr	r1, [pc, #144]	@ (800a8e8 <mem_free+0x114>)
 800a858:	481e      	ldr	r0, [pc, #120]	@ (800a8d4 <mem_free+0x100>)
 800a85a:	f005 f8db 	bl	800fa14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a85e:	4821      	ldr	r0, [pc, #132]	@ (800a8e4 <mem_free+0x110>)
 800a860:	f004 ff87 	bl	800f772 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a864:	f004 ffb8 	bl	800f7d8 <sys_arch_protect>
 800a868:	6178      	str	r0, [r7, #20]
 800a86a:	6978      	ldr	r0, [r7, #20]
 800a86c:	f004 ffc2 	bl	800f7f4 <sys_arch_unprotect>
    return;
 800a870:	e029      	b.n	800a8c6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a872:	69f8      	ldr	r0, [r7, #28]
 800a874:	f7ff ff72 	bl	800a75c <mem_link_valid>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d110      	bne.n	800a8a0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a87e:	4b13      	ldr	r3, [pc, #76]	@ (800a8cc <mem_free+0xf8>)
 800a880:	f240 2295 	movw	r2, #661	@ 0x295
 800a884:	4919      	ldr	r1, [pc, #100]	@ (800a8ec <mem_free+0x118>)
 800a886:	4813      	ldr	r0, [pc, #76]	@ (800a8d4 <mem_free+0x100>)
 800a888:	f005 f8c4 	bl	800fa14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a88c:	4815      	ldr	r0, [pc, #84]	@ (800a8e4 <mem_free+0x110>)
 800a88e:	f004 ff70 	bl	800f772 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a892:	f004 ffa1 	bl	800f7d8 <sys_arch_protect>
 800a896:	61b8      	str	r0, [r7, #24]
 800a898:	69b8      	ldr	r0, [r7, #24]
 800a89a:	f004 ffab 	bl	800f7f4 <sys_arch_unprotect>
    return;
 800a89e:	e012      	b.n	800a8c6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a8a6:	4b12      	ldr	r3, [pc, #72]	@ (800a8f0 <mem_free+0x11c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69fa      	ldr	r2, [r7, #28]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d202      	bcs.n	800a8b6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a8b0:	4a0f      	ldr	r2, [pc, #60]	@ (800a8f0 <mem_free+0x11c>)
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a8b6:	69f8      	ldr	r0, [r7, #28]
 800a8b8:	f7ff fe5c 	bl	800a574 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a8bc:	4809      	ldr	r0, [pc, #36]	@ (800a8e4 <mem_free+0x110>)
 800a8be:	f004 ff58 	bl	800f772 <sys_mutex_unlock>
 800a8c2:	e000      	b.n	800a8c6 <mem_free+0xf2>
    return;
 800a8c4:	bf00      	nop
}
 800a8c6:	3720      	adds	r7, #32
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	08011384 	.word	0x08011384
 800a8d0:	08011474 	.word	0x08011474
 800a8d4:	080113cc 	.word	0x080113cc
 800a8d8:	2000a3dc 	.word	0x2000a3dc
 800a8dc:	2000a3e0 	.word	0x2000a3e0
 800a8e0:	08011498 	.word	0x08011498
 800a8e4:	2000a3e4 	.word	0x2000a3e4
 800a8e8:	080114b4 	.word	0x080114b4
 800a8ec:	080114dc 	.word	0x080114dc
 800a8f0:	2000a3e8 	.word	0x2000a3e8

0800a8f4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a900:	887b      	ldrh	r3, [r7, #2]
 800a902:	3303      	adds	r3, #3
 800a904:	b29b      	uxth	r3, r3
 800a906:	f023 0303 	bic.w	r3, r3, #3
 800a90a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a90c:	8bfb      	ldrh	r3, [r7, #30]
 800a90e:	2b0b      	cmp	r3, #11
 800a910:	d801      	bhi.n	800a916 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a912:	230c      	movs	r3, #12
 800a914:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a916:	8bfb      	ldrh	r3, [r7, #30]
 800a918:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a91c:	d803      	bhi.n	800a926 <mem_trim+0x32>
 800a91e:	8bfa      	ldrh	r2, [r7, #30]
 800a920:	887b      	ldrh	r3, [r7, #2]
 800a922:	429a      	cmp	r2, r3
 800a924:	d201      	bcs.n	800a92a <mem_trim+0x36>
    return NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	e0d8      	b.n	800aadc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a92a:	4b6e      	ldr	r3, [pc, #440]	@ (800aae4 <mem_trim+0x1f0>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	429a      	cmp	r2, r3
 800a932:	d304      	bcc.n	800a93e <mem_trim+0x4a>
 800a934:	4b6c      	ldr	r3, [pc, #432]	@ (800aae8 <mem_trim+0x1f4>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d306      	bcc.n	800a94c <mem_trim+0x58>
 800a93e:	4b6b      	ldr	r3, [pc, #428]	@ (800aaec <mem_trim+0x1f8>)
 800a940:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a944:	496a      	ldr	r1, [pc, #424]	@ (800aaf0 <mem_trim+0x1fc>)
 800a946:	486b      	ldr	r0, [pc, #428]	@ (800aaf4 <mem_trim+0x200>)
 800a948:	f005 f864 	bl	800fa14 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a94c:	4b65      	ldr	r3, [pc, #404]	@ (800aae4 <mem_trim+0x1f0>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	429a      	cmp	r2, r3
 800a954:	d304      	bcc.n	800a960 <mem_trim+0x6c>
 800a956:	4b64      	ldr	r3, [pc, #400]	@ (800aae8 <mem_trim+0x1f4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d307      	bcc.n	800a970 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a960:	f004 ff3a 	bl	800f7d8 <sys_arch_protect>
 800a964:	60b8      	str	r0, [r7, #8]
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f004 ff44 	bl	800f7f4 <sys_arch_unprotect>
    return rmem;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	e0b5      	b.n	800aadc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3b08      	subs	r3, #8
 800a974:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a976:	69b8      	ldr	r0, [r7, #24]
 800a978:	f7ff fdea 	bl	800a550 <mem_to_ptr>
 800a97c:	4603      	mov	r3, r0
 800a97e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	881a      	ldrh	r2, [r3, #0]
 800a984:	8afb      	ldrh	r3, [r7, #22]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	b29b      	uxth	r3, r3
 800a98a:	3b08      	subs	r3, #8
 800a98c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a98e:	8bfa      	ldrh	r2, [r7, #30]
 800a990:	8abb      	ldrh	r3, [r7, #20]
 800a992:	429a      	cmp	r2, r3
 800a994:	d906      	bls.n	800a9a4 <mem_trim+0xb0>
 800a996:	4b55      	ldr	r3, [pc, #340]	@ (800aaec <mem_trim+0x1f8>)
 800a998:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a99c:	4956      	ldr	r1, [pc, #344]	@ (800aaf8 <mem_trim+0x204>)
 800a99e:	4855      	ldr	r0, [pc, #340]	@ (800aaf4 <mem_trim+0x200>)
 800a9a0:	f005 f838 	bl	800fa14 <iprintf>
  if (newsize > size) {
 800a9a4:	8bfa      	ldrh	r2, [r7, #30]
 800a9a6:	8abb      	ldrh	r3, [r7, #20]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d901      	bls.n	800a9b0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e095      	b.n	800aadc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a9b0:	8bfa      	ldrh	r2, [r7, #30]
 800a9b2:	8abb      	ldrh	r3, [r7, #20]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d101      	bne.n	800a9bc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	e08f      	b.n	800aadc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a9bc:	484f      	ldr	r0, [pc, #316]	@ (800aafc <mem_trim+0x208>)
 800a9be:	f004 fec9 	bl	800f754 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff fdb0 	bl	800a52c <ptr_to_mem>
 800a9cc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	791b      	ldrb	r3, [r3, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d13f      	bne.n	800aa56 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a9de:	d106      	bne.n	800a9ee <mem_trim+0xfa>
 800a9e0:	4b42      	ldr	r3, [pc, #264]	@ (800aaec <mem_trim+0x1f8>)
 800a9e2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a9e6:	4946      	ldr	r1, [pc, #280]	@ (800ab00 <mem_trim+0x20c>)
 800a9e8:	4842      	ldr	r0, [pc, #264]	@ (800aaf4 <mem_trim+0x200>)
 800a9ea:	f005 f813 	bl	800fa14 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a9f4:	8afa      	ldrh	r2, [r7, #22]
 800a9f6:	8bfb      	ldrh	r3, [r7, #30]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800aa00:	4b40      	ldr	r3, [pc, #256]	@ (800ab04 <mem_trim+0x210>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d106      	bne.n	800aa18 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800aa0a:	89fb      	ldrh	r3, [r7, #14]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff fd8d 	bl	800a52c <ptr_to_mem>
 800aa12:	4603      	mov	r3, r0
 800aa14:	4a3b      	ldr	r2, [pc, #236]	@ (800ab04 <mem_trim+0x210>)
 800aa16:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800aa18:	89fb      	ldrh	r3, [r7, #14]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff fd86 	bl	800a52c <ptr_to_mem>
 800aa20:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	2200      	movs	r2, #0
 800aa26:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	89ba      	ldrh	r2, [r7, #12]
 800aa2c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	8afa      	ldrh	r2, [r7, #22]
 800aa32:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	89fa      	ldrh	r2, [r7, #14]
 800aa38:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800aa42:	d047      	beq.n	800aad4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	881b      	ldrh	r3, [r3, #0]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff fd6f 	bl	800a52c <ptr_to_mem>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	89fb      	ldrh	r3, [r7, #14]
 800aa52:	8053      	strh	r3, [r2, #2]
 800aa54:	e03e      	b.n	800aad4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aa56:	8bfb      	ldrh	r3, [r7, #30]
 800aa58:	f103 0214 	add.w	r2, r3, #20
 800aa5c:	8abb      	ldrh	r3, [r7, #20]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d838      	bhi.n	800aad4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aa62:	8afa      	ldrh	r2, [r7, #22]
 800aa64:	8bfb      	ldrh	r3, [r7, #30]
 800aa66:	4413      	add	r3, r2
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800aa76:	d106      	bne.n	800aa86 <mem_trim+0x192>
 800aa78:	4b1c      	ldr	r3, [pc, #112]	@ (800aaec <mem_trim+0x1f8>)
 800aa7a:	f240 3216 	movw	r2, #790	@ 0x316
 800aa7e:	4920      	ldr	r1, [pc, #128]	@ (800ab00 <mem_trim+0x20c>)
 800aa80:	481c      	ldr	r0, [pc, #112]	@ (800aaf4 <mem_trim+0x200>)
 800aa82:	f004 ffc7 	bl	800fa14 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800aa86:	89fb      	ldrh	r3, [r7, #14]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7ff fd4f 	bl	800a52c <ptr_to_mem>
 800aa8e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800aa90:	4b1c      	ldr	r3, [pc, #112]	@ (800ab04 <mem_trim+0x210>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d202      	bcs.n	800aaa0 <mem_trim+0x1ac>
      lfree = mem2;
 800aa9a:	4a1a      	ldr	r2, [pc, #104]	@ (800ab04 <mem_trim+0x210>)
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	881a      	ldrh	r2, [r3, #0]
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	8afa      	ldrh	r2, [r7, #22]
 800aab2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	89fa      	ldrh	r2, [r7, #14]
 800aab8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	881b      	ldrh	r3, [r3, #0]
 800aabe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800aac2:	d007      	beq.n	800aad4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7ff fd2f 	bl	800a52c <ptr_to_mem>
 800aace:	4602      	mov	r2, r0
 800aad0:	89fb      	ldrh	r3, [r7, #14]
 800aad2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aad4:	4809      	ldr	r0, [pc, #36]	@ (800aafc <mem_trim+0x208>)
 800aad6:	f004 fe4c 	bl	800f772 <sys_mutex_unlock>
  return rmem;
 800aada:	687b      	ldr	r3, [r7, #4]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3720      	adds	r7, #32
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	2000a3dc 	.word	0x2000a3dc
 800aae8:	2000a3e0 	.word	0x2000a3e0
 800aaec:	08011384 	.word	0x08011384
 800aaf0:	08011510 	.word	0x08011510
 800aaf4:	080113cc 	.word	0x080113cc
 800aaf8:	08011528 	.word	0x08011528
 800aafc:	2000a3e4 	.word	0x2000a3e4
 800ab00:	08011548 	.word	0x08011548
 800ab04:	2000a3e8 	.word	0x2000a3e8

0800ab08 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ab12:	88fb      	ldrh	r3, [r7, #6]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <mem_malloc+0x14>
    return NULL;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	e0e2      	b.n	800ace2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ab1c:	88fb      	ldrh	r3, [r7, #6]
 800ab1e:	3303      	adds	r3, #3
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	f023 0303 	bic.w	r3, r3, #3
 800ab26:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ab28:	8bbb      	ldrh	r3, [r7, #28]
 800ab2a:	2b0b      	cmp	r3, #11
 800ab2c:	d801      	bhi.n	800ab32 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ab2e:	230c      	movs	r3, #12
 800ab30:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ab32:	8bbb      	ldrh	r3, [r7, #28]
 800ab34:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ab38:	d803      	bhi.n	800ab42 <mem_malloc+0x3a>
 800ab3a:	8bba      	ldrh	r2, [r7, #28]
 800ab3c:	88fb      	ldrh	r3, [r7, #6]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d201      	bcs.n	800ab46 <mem_malloc+0x3e>
    return NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e0cd      	b.n	800ace2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ab46:	4869      	ldr	r0, [pc, #420]	@ (800acec <mem_malloc+0x1e4>)
 800ab48:	f004 fe04 	bl	800f754 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab4c:	4b68      	ldr	r3, [pc, #416]	@ (800acf0 <mem_malloc+0x1e8>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff fcfd 	bl	800a550 <mem_to_ptr>
 800ab56:	4603      	mov	r3, r0
 800ab58:	83fb      	strh	r3, [r7, #30]
 800ab5a:	e0b7      	b.n	800accc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ab5c:	8bfb      	ldrh	r3, [r7, #30]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fce4 	bl	800a52c <ptr_to_mem>
 800ab64:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	791b      	ldrb	r3, [r3, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f040 80a7 	bne.w	800acbe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	461a      	mov	r2, r3
 800ab76:	8bfb      	ldrh	r3, [r7, #30]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	f1a3 0208 	sub.w	r2, r3, #8
 800ab7e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ab80:	429a      	cmp	r2, r3
 800ab82:	f0c0 809c 	bcc.w	800acbe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	8bfb      	ldrh	r3, [r7, #30]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	f1a3 0208 	sub.w	r2, r3, #8
 800ab94:	8bbb      	ldrh	r3, [r7, #28]
 800ab96:	3314      	adds	r3, #20
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d333      	bcc.n	800ac04 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ab9c:	8bfa      	ldrh	r2, [r7, #30]
 800ab9e:	8bbb      	ldrh	r3, [r7, #28]
 800aba0:	4413      	add	r3, r2
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	3308      	adds	r3, #8
 800aba6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aba8:	8a7b      	ldrh	r3, [r7, #18]
 800abaa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800abae:	d106      	bne.n	800abbe <mem_malloc+0xb6>
 800abb0:	4b50      	ldr	r3, [pc, #320]	@ (800acf4 <mem_malloc+0x1ec>)
 800abb2:	f240 3287 	movw	r2, #903	@ 0x387
 800abb6:	4950      	ldr	r1, [pc, #320]	@ (800acf8 <mem_malloc+0x1f0>)
 800abb8:	4850      	ldr	r0, [pc, #320]	@ (800acfc <mem_malloc+0x1f4>)
 800abba:	f004 ff2b 	bl	800fa14 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800abbe:	8a7b      	ldrh	r3, [r7, #18]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff fcb3 	bl	800a52c <ptr_to_mem>
 800abc6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	881a      	ldrh	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	8bfa      	ldrh	r2, [r7, #30]
 800abda:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	8a7a      	ldrh	r2, [r7, #18]
 800abe0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2201      	movs	r2, #1
 800abe6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800abf0:	d00b      	beq.n	800ac0a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7ff fc98 	bl	800a52c <ptr_to_mem>
 800abfc:	4602      	mov	r2, r0
 800abfe:	8a7b      	ldrh	r3, [r7, #18]
 800ac00:	8053      	strh	r3, [r2, #2]
 800ac02:	e002      	b.n	800ac0a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2201      	movs	r2, #1
 800ac08:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ac0a:	4b39      	ldr	r3, [pc, #228]	@ (800acf0 <mem_malloc+0x1e8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d127      	bne.n	800ac64 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ac14:	4b36      	ldr	r3, [pc, #216]	@ (800acf0 <mem_malloc+0x1e8>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ac1a:	e005      	b.n	800ac28 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff fc83 	bl	800a52c <ptr_to_mem>
 800ac26:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	791b      	ldrb	r3, [r3, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d004      	beq.n	800ac3a <mem_malloc+0x132>
 800ac30:	4b33      	ldr	r3, [pc, #204]	@ (800ad00 <mem_malloc+0x1f8>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d1f0      	bne.n	800ac1c <mem_malloc+0x114>
          }
          lfree = cur;
 800ac3a:	4a2d      	ldr	r2, [pc, #180]	@ (800acf0 <mem_malloc+0x1e8>)
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ac40:	4b2b      	ldr	r3, [pc, #172]	@ (800acf0 <mem_malloc+0x1e8>)
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	4b2e      	ldr	r3, [pc, #184]	@ (800ad00 <mem_malloc+0x1f8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d00b      	beq.n	800ac64 <mem_malloc+0x15c>
 800ac4c:	4b28      	ldr	r3, [pc, #160]	@ (800acf0 <mem_malloc+0x1e8>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	791b      	ldrb	r3, [r3, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d006      	beq.n	800ac64 <mem_malloc+0x15c>
 800ac56:	4b27      	ldr	r3, [pc, #156]	@ (800acf4 <mem_malloc+0x1ec>)
 800ac58:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800ac5c:	4929      	ldr	r1, [pc, #164]	@ (800ad04 <mem_malloc+0x1fc>)
 800ac5e:	4827      	ldr	r0, [pc, #156]	@ (800acfc <mem_malloc+0x1f4>)
 800ac60:	f004 fed8 	bl	800fa14 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ac64:	4821      	ldr	r0, [pc, #132]	@ (800acec <mem_malloc+0x1e4>)
 800ac66:	f004 fd84 	bl	800f772 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ac6a:	8bba      	ldrh	r2, [r7, #28]
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	4413      	add	r3, r2
 800ac70:	3308      	adds	r3, #8
 800ac72:	4a23      	ldr	r2, [pc, #140]	@ (800ad00 <mem_malloc+0x1f8>)
 800ac74:	6812      	ldr	r2, [r2, #0]
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d906      	bls.n	800ac88 <mem_malloc+0x180>
 800ac7a:	4b1e      	ldr	r3, [pc, #120]	@ (800acf4 <mem_malloc+0x1ec>)
 800ac7c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800ac80:	4921      	ldr	r1, [pc, #132]	@ (800ad08 <mem_malloc+0x200>)
 800ac82:	481e      	ldr	r0, [pc, #120]	@ (800acfc <mem_malloc+0x1f4>)
 800ac84:	f004 fec6 	bl	800fa14 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d006      	beq.n	800aca0 <mem_malloc+0x198>
 800ac92:	4b18      	ldr	r3, [pc, #96]	@ (800acf4 <mem_malloc+0x1ec>)
 800ac94:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800ac98:	491c      	ldr	r1, [pc, #112]	@ (800ad0c <mem_malloc+0x204>)
 800ac9a:	4818      	ldr	r0, [pc, #96]	@ (800acfc <mem_malloc+0x1f4>)
 800ac9c:	f004 feba 	bl	800fa14 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f003 0303 	and.w	r3, r3, #3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d006      	beq.n	800acb8 <mem_malloc+0x1b0>
 800acaa:	4b12      	ldr	r3, [pc, #72]	@ (800acf4 <mem_malloc+0x1ec>)
 800acac:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800acb0:	4917      	ldr	r1, [pc, #92]	@ (800ad10 <mem_malloc+0x208>)
 800acb2:	4812      	ldr	r0, [pc, #72]	@ (800acfc <mem_malloc+0x1f4>)
 800acb4:	f004 feae 	bl	800fa14 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	3308      	adds	r3, #8
 800acbc:	e011      	b.n	800ace2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800acbe:	8bfb      	ldrh	r3, [r7, #30]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fc33 	bl	800a52c <ptr_to_mem>
 800acc6:	4603      	mov	r3, r0
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800accc:	8bfa      	ldrh	r2, [r7, #30]
 800acce:	8bbb      	ldrh	r3, [r7, #28]
 800acd0:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800acd4:	429a      	cmp	r2, r3
 800acd6:	f4ff af41 	bcc.w	800ab5c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800acda:	4804      	ldr	r0, [pc, #16]	@ (800acec <mem_malloc+0x1e4>)
 800acdc:	f004 fd49 	bl	800f772 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3720      	adds	r7, #32
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	2000a3e4 	.word	0x2000a3e4
 800acf0:	2000a3e8 	.word	0x2000a3e8
 800acf4:	08011384 	.word	0x08011384
 800acf8:	08011548 	.word	0x08011548
 800acfc:	080113cc 	.word	0x080113cc
 800ad00:	2000a3e0 	.word	0x2000a3e0
 800ad04:	0801155c 	.word	0x0801155c
 800ad08:	08011578 	.word	0x08011578
 800ad0c:	080115a8 	.word	0x080115a8
 800ad10:	080115d8 	.word	0x080115d8

0800ad14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	2200      	movs	r2, #0
 800ad22:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	3303      	adds	r3, #3
 800ad2a:	f023 0303 	bic.w	r3, r3, #3
 800ad2e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	e011      	b.n	800ad5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	4413      	add	r3, r2
 800ad52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3301      	adds	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	885b      	ldrh	r3, [r3, #2]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4293      	cmp	r3, r2
 800ad64:	dbe7      	blt.n	800ad36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ad66:	bf00      	nop
 800ad68:	bf00      	nop
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	80fb      	strh	r3, [r7, #6]
 800ad7e:	e009      	b.n	800ad94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ad80:	88fb      	ldrh	r3, [r7, #6]
 800ad82:	4a08      	ldr	r2, [pc, #32]	@ (800ada4 <memp_init+0x30>)
 800ad84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7ff ffc3 	bl	800ad14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad8e:	88fb      	ldrh	r3, [r7, #6]
 800ad90:	3301      	adds	r3, #1
 800ad92:	80fb      	strh	r3, [r7, #6]
 800ad94:	88fb      	ldrh	r3, [r7, #6]
 800ad96:	2b09      	cmp	r3, #9
 800ad98:	d9f2      	bls.n	800ad80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ad9a:	bf00      	nop
 800ad9c:	bf00      	nop
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	08012a00 	.word	0x08012a00

0800ada8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800adb0:	f004 fd12 	bl	800f7d8 <sys_arch_protect>
 800adb4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d015      	beq.n	800adf0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	6812      	ldr	r2, [r2, #0]
 800adcc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f003 0303 	and.w	r3, r3, #3
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <do_memp_malloc_pool+0x3e>
 800add8:	4b09      	ldr	r3, [pc, #36]	@ (800ae00 <do_memp_malloc_pool+0x58>)
 800adda:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800adde:	4909      	ldr	r1, [pc, #36]	@ (800ae04 <do_memp_malloc_pool+0x5c>)
 800ade0:	4809      	ldr	r0, [pc, #36]	@ (800ae08 <do_memp_malloc_pool+0x60>)
 800ade2:	f004 fe17 	bl	800fa14 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f004 fd04 	bl	800f7f4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	e003      	b.n	800adf8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f004 fcff 	bl	800f7f4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	080115fc 	.word	0x080115fc
 800ae04:	0801162c 	.word	0x0801162c
 800ae08:	08011650 	.word	0x08011650

0800ae0c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <memp_malloc_pool+0x1c>
 800ae1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae44 <memp_malloc_pool+0x38>)
 800ae1c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ae20:	4909      	ldr	r1, [pc, #36]	@ (800ae48 <memp_malloc_pool+0x3c>)
 800ae22:	480a      	ldr	r0, [pc, #40]	@ (800ae4c <memp_malloc_pool+0x40>)
 800ae24:	f004 fdf6 	bl	800fa14 <iprintf>
  if (desc == NULL) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <memp_malloc_pool+0x26>
    return NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e003      	b.n	800ae3a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff ffb8 	bl	800ada8 <do_memp_malloc_pool>
 800ae38:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	080115fc 	.word	0x080115fc
 800ae48:	08011678 	.word	0x08011678
 800ae4c:	08011650 	.word	0x08011650

0800ae50 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ae5a:	79fb      	ldrb	r3, [r7, #7]
 800ae5c:	2b09      	cmp	r3, #9
 800ae5e:	d908      	bls.n	800ae72 <memp_malloc+0x22>
 800ae60:	4b0a      	ldr	r3, [pc, #40]	@ (800ae8c <memp_malloc+0x3c>)
 800ae62:	f240 1257 	movw	r2, #343	@ 0x157
 800ae66:	490a      	ldr	r1, [pc, #40]	@ (800ae90 <memp_malloc+0x40>)
 800ae68:	480a      	ldr	r0, [pc, #40]	@ (800ae94 <memp_malloc+0x44>)
 800ae6a:	f004 fdd3 	bl	800fa14 <iprintf>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e008      	b.n	800ae84 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ae72:	79fb      	ldrb	r3, [r7, #7]
 800ae74:	4a08      	ldr	r2, [pc, #32]	@ (800ae98 <memp_malloc+0x48>)
 800ae76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff ff94 	bl	800ada8 <do_memp_malloc_pool>
 800ae80:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ae82:	68fb      	ldr	r3, [r7, #12]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	080115fc 	.word	0x080115fc
 800ae90:	0801168c 	.word	0x0801168c
 800ae94:	08011650 	.word	0x08011650
 800ae98:	08012a00 	.word	0x08012a00

0800ae9c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	f003 0303 	and.w	r3, r3, #3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d006      	beq.n	800aebe <do_memp_free_pool+0x22>
 800aeb0:	4b0d      	ldr	r3, [pc, #52]	@ (800aee8 <do_memp_free_pool+0x4c>)
 800aeb2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800aeb6:	490d      	ldr	r1, [pc, #52]	@ (800aeec <do_memp_free_pool+0x50>)
 800aeb8:	480d      	ldr	r0, [pc, #52]	@ (800aef0 <do_memp_free_pool+0x54>)
 800aeba:	f004 fdab 	bl	800fa14 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800aec2:	f004 fc89 	bl	800f7d8 <sys_arch_protect>
 800aec6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800aeda:	68b8      	ldr	r0, [r7, #8]
 800aedc:	f004 fc8a 	bl	800f7f4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800aee0:	bf00      	nop
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	080115fc 	.word	0x080115fc
 800aeec:	080116ac 	.word	0x080116ac
 800aef0:	08011650 	.word	0x08011650

0800aef4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d106      	bne.n	800af12 <memp_free_pool+0x1e>
 800af04:	4b0a      	ldr	r3, [pc, #40]	@ (800af30 <memp_free_pool+0x3c>)
 800af06:	f240 1295 	movw	r2, #405	@ 0x195
 800af0a:	490a      	ldr	r1, [pc, #40]	@ (800af34 <memp_free_pool+0x40>)
 800af0c:	480a      	ldr	r0, [pc, #40]	@ (800af38 <memp_free_pool+0x44>)
 800af0e:	f004 fd81 	bl	800fa14 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d007      	beq.n	800af28 <memp_free_pool+0x34>
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d004      	beq.n	800af28 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff ffbb 	bl	800ae9c <do_memp_free_pool>
 800af26:	e000      	b.n	800af2a <memp_free_pool+0x36>
    return;
 800af28:	bf00      	nop
}
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	080115fc 	.word	0x080115fc
 800af34:	08011678 	.word	0x08011678
 800af38:	08011650 	.word	0x08011650

0800af3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	6039      	str	r1, [r7, #0]
 800af46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	2b09      	cmp	r3, #9
 800af4c:	d907      	bls.n	800af5e <memp_free+0x22>
 800af4e:	4b0c      	ldr	r3, [pc, #48]	@ (800af80 <memp_free+0x44>)
 800af50:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800af54:	490b      	ldr	r1, [pc, #44]	@ (800af84 <memp_free+0x48>)
 800af56:	480c      	ldr	r0, [pc, #48]	@ (800af88 <memp_free+0x4c>)
 800af58:	f004 fd5c 	bl	800fa14 <iprintf>
 800af5c:	e00c      	b.n	800af78 <memp_free+0x3c>

  if (mem == NULL) {
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d008      	beq.n	800af76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800af64:	79fb      	ldrb	r3, [r7, #7]
 800af66:	4a09      	ldr	r2, [pc, #36]	@ (800af8c <memp_free+0x50>)
 800af68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff ff94 	bl	800ae9c <do_memp_free_pool>
 800af74:	e000      	b.n	800af78 <memp_free+0x3c>
    return;
 800af76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	080115fc 	.word	0x080115fc
 800af84:	080116cc 	.word	0x080116cc
 800af88:	08011650 	.word	0x08011650
 800af8c:	08012a00 	.word	0x08012a00

0800af90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800af90:	b480      	push	{r7}
 800af92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800af94:	bf00      	nop
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
	...

0800afa0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d108      	bne.n	800afc6 <netif_add+0x26>
 800afb4:	4b57      	ldr	r3, [pc, #348]	@ (800b114 <netif_add+0x174>)
 800afb6:	f240 1227 	movw	r2, #295	@ 0x127
 800afba:	4957      	ldr	r1, [pc, #348]	@ (800b118 <netif_add+0x178>)
 800afbc:	4857      	ldr	r0, [pc, #348]	@ (800b11c <netif_add+0x17c>)
 800afbe:	f004 fd29 	bl	800fa14 <iprintf>
 800afc2:	2300      	movs	r3, #0
 800afc4:	e0a2      	b.n	800b10c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d108      	bne.n	800afde <netif_add+0x3e>
 800afcc:	4b51      	ldr	r3, [pc, #324]	@ (800b114 <netif_add+0x174>)
 800afce:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800afd2:	4953      	ldr	r1, [pc, #332]	@ (800b120 <netif_add+0x180>)
 800afd4:	4851      	ldr	r0, [pc, #324]	@ (800b11c <netif_add+0x17c>)
 800afd6:	f004 fd1d 	bl	800fa14 <iprintf>
 800afda:	2300      	movs	r3, #0
 800afdc:	e096      	b.n	800b10c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d101      	bne.n	800afe8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800afe4:	4b4f      	ldr	r3, [pc, #316]	@ (800b124 <netif_add+0x184>)
 800afe6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d101      	bne.n	800aff2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800afee:	4b4d      	ldr	r3, [pc, #308]	@ (800b124 <netif_add+0x184>)
 800aff0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aff8:	4b4a      	ldr	r3, [pc, #296]	@ (800b124 <netif_add+0x184>)
 800affa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	4a45      	ldr	r2, [pc, #276]	@ (800b128 <netif_add+0x188>)
 800b012:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6a3a      	ldr	r2, [r7, #32]
 800b02c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b02e:	4b3f      	ldr	r3, [pc, #252]	@ (800b12c <netif_add+0x18c>)
 800b030:	781a      	ldrb	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b03c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	68b9      	ldr	r1, [r7, #8]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f90f 	bl	800b268 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	4798      	blx	r3
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <netif_add+0xba>
    return NULL;
 800b056:	2300      	movs	r3, #0
 800b058:	e058      	b.n	800b10c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b060:	2bff      	cmp	r3, #255	@ 0xff
 800b062:	d103      	bne.n	800b06c <netif_add+0xcc>
        netif->num = 0;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b070:	4b2f      	ldr	r3, [pc, #188]	@ (800b130 <netif_add+0x190>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	e02b      	b.n	800b0d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d106      	bne.n	800b08e <netif_add+0xee>
 800b080:	4b24      	ldr	r3, [pc, #144]	@ (800b114 <netif_add+0x174>)
 800b082:	f240 128b 	movw	r2, #395	@ 0x18b
 800b086:	492b      	ldr	r1, [pc, #172]	@ (800b134 <netif_add+0x194>)
 800b088:	4824      	ldr	r0, [pc, #144]	@ (800b11c <netif_add+0x17c>)
 800b08a:	f004 fcc3 	bl	800fa14 <iprintf>
        num_netifs++;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	3301      	adds	r3, #1
 800b092:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	2bff      	cmp	r3, #255	@ 0xff
 800b098:	dd06      	ble.n	800b0a8 <netif_add+0x108>
 800b09a:	4b1e      	ldr	r3, [pc, #120]	@ (800b114 <netif_add+0x174>)
 800b09c:	f240 128d 	movw	r2, #397	@ 0x18d
 800b0a0:	4925      	ldr	r1, [pc, #148]	@ (800b138 <netif_add+0x198>)
 800b0a2:	481e      	ldr	r0, [pc, #120]	@ (800b11c <netif_add+0x17c>)
 800b0a4:	f004 fcb6 	bl	800fa14 <iprintf>
        if (netif2->num == netif->num) {
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d108      	bne.n	800b0ca <netif_add+0x12a>
          netif->num++;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0be:	3301      	adds	r3, #1
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b0c8:	e005      	b.n	800b0d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	617b      	str	r3, [r7, #20]
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1d0      	bne.n	800b078 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1be      	bne.n	800b05a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0e2:	2bfe      	cmp	r3, #254	@ 0xfe
 800b0e4:	d103      	bne.n	800b0ee <netif_add+0x14e>
    netif_num = 0;
 800b0e6:	4b11      	ldr	r3, [pc, #68]	@ (800b12c <netif_add+0x18c>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
 800b0ec:	e006      	b.n	800b0fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b12c <netif_add+0x18c>)
 800b0fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b0fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b130 <netif_add+0x190>)
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b104:	4a0a      	ldr	r2, [pc, #40]	@ (800b130 <netif_add+0x190>)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b10a:	68fb      	ldr	r3, [r7, #12]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	080116e8 	.word	0x080116e8
 800b118:	0801177c 	.word	0x0801177c
 800b11c:	08011738 	.word	0x08011738
 800b120:	08011798 	.word	0x08011798
 800b124:	08012a38 	.word	0x08012a38
 800b128:	0800b543 	.word	0x0800b543
 800b12c:	2000cf8c 	.word	0x2000cf8c
 800b130:	2000cf84 	.word	0x2000cf84
 800b134:	080117bc 	.word	0x080117bc
 800b138:	080117d0 	.word	0x080117d0

0800b13c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f001 fd87 	bl	800cc5c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d106      	bne.n	800b178 <netif_do_set_ipaddr+0x20>
 800b16a:	4b1d      	ldr	r3, [pc, #116]	@ (800b1e0 <netif_do_set_ipaddr+0x88>)
 800b16c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b170:	491c      	ldr	r1, [pc, #112]	@ (800b1e4 <netif_do_set_ipaddr+0x8c>)
 800b172:	481d      	ldr	r0, [pc, #116]	@ (800b1e8 <netif_do_set_ipaddr+0x90>)
 800b174:	f004 fc4e 	bl	800fa14 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <netif_do_set_ipaddr+0x34>
 800b17e:	4b18      	ldr	r3, [pc, #96]	@ (800b1e0 <netif_do_set_ipaddr+0x88>)
 800b180:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b184:	4917      	ldr	r1, [pc, #92]	@ (800b1e4 <netif_do_set_ipaddr+0x8c>)
 800b186:	4818      	ldr	r0, [pc, #96]	@ (800b1e8 <netif_do_set_ipaddr+0x90>)
 800b188:	f004 fc44 	bl	800fa14 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3304      	adds	r3, #4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	429a      	cmp	r2, r3
 800b198:	d01c      	beq.n	800b1d4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b1aa:	f107 0314 	add.w	r3, r7, #20
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7ff ffc3 	bl	800b13c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <netif_do_set_ipaddr+0x6a>
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	e000      	b.n	800b1c4 <netif_do_set_ipaddr+0x6c>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f000 f8d2 	bl	800b374 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e000      	b.n	800b1d6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3718      	adds	r7, #24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	080116e8 	.word	0x080116e8
 800b1e4:	08011800 	.word	0x08011800
 800b1e8:	08011738 	.word	0x08011738

0800b1ec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3308      	adds	r3, #8
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	d00a      	beq.n	800b21c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <netif_do_set_netmask+0x26>
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	e000      	b.n	800b214 <netif_do_set_netmask+0x28>
 800b212:	2300      	movs	r3, #0
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b218:	2301      	movs	r3, #1
 800b21a:	e000      	b.n	800b21e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b085      	sub	sp, #20
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	330c      	adds	r3, #12
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	429a      	cmp	r2, r3
 800b242:	d00a      	beq.n	800b25a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <netif_do_set_gw+0x26>
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	e000      	b.n	800b252 <netif_do_set_gw+0x28>
 800b250:	2300      	movs	r3, #0
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b256:	2301      	movs	r3, #1
 800b258:	e000      	b.n	800b25c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d101      	bne.n	800b288 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b284:	4b1c      	ldr	r3, [pc, #112]	@ (800b2f8 <netif_set_addr+0x90>)
 800b286:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b28e:	4b1a      	ldr	r3, [pc, #104]	@ (800b2f8 <netif_set_addr+0x90>)
 800b290:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b298:	4b17      	ldr	r3, [pc, #92]	@ (800b2f8 <netif_set_addr+0x90>)
 800b29a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d003      	beq.n	800b2aa <netif_set_addr+0x42>
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <netif_set_addr+0x46>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e000      	b.n	800b2b0 <netif_set_addr+0x48>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d006      	beq.n	800b2c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b2b8:	f107 0310 	add.w	r3, r7, #16
 800b2bc:	461a      	mov	r2, r3
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7ff ff49 	bl	800b158 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	6879      	ldr	r1, [r7, #4]
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f7ff ff8e 	bl	800b1ec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f7ff ffa8 	bl	800b22a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d106      	bne.n	800b2ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b2e0:	f107 0310 	add.w	r3, r7, #16
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	68b9      	ldr	r1, [r7, #8]
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7ff ff35 	bl	800b158 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b2ee:	bf00      	nop
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	08012a38 	.word	0x08012a38

0800b2fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b304:	4a04      	ldr	r2, [pc, #16]	@ (800b318 <netif_set_default+0x1c>)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b30a:	bf00      	nop
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	2000cf88 	.word	0x2000cf88

0800b31c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d107      	bne.n	800b33a <netif_set_up+0x1e>
 800b32a:	4b0f      	ldr	r3, [pc, #60]	@ (800b368 <netif_set_up+0x4c>)
 800b32c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b330:	490e      	ldr	r1, [pc, #56]	@ (800b36c <netif_set_up+0x50>)
 800b332:	480f      	ldr	r0, [pc, #60]	@ (800b370 <netif_set_up+0x54>)
 800b334:	f004 fb6e 	bl	800fa14 <iprintf>
 800b338:	e013      	b.n	800b362 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b340:	f003 0301 	and.w	r3, r3, #1
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10c      	bne.n	800b362 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b34e:	f043 0301 	orr.w	r3, r3, #1
 800b352:	b2da      	uxtb	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b35a:	2103      	movs	r1, #3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f809 	bl	800b374 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	080116e8 	.word	0x080116e8
 800b36c:	08011870 	.word	0x08011870
 800b370:	08011738 	.word	0x08011738

0800b374 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	460b      	mov	r3, r1
 800b37e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <netif_issue_reports+0x20>
 800b386:	4b18      	ldr	r3, [pc, #96]	@ (800b3e8 <netif_issue_reports+0x74>)
 800b388:	f240 326d 	movw	r2, #877	@ 0x36d
 800b38c:	4917      	ldr	r1, [pc, #92]	@ (800b3ec <netif_issue_reports+0x78>)
 800b38e:	4818      	ldr	r0, [pc, #96]	@ (800b3f0 <netif_issue_reports+0x7c>)
 800b390:	f004 fb40 	bl	800fa14 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b39a:	f003 0304 	and.w	r3, r3, #4
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d01e      	beq.n	800b3e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b3a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d017      	beq.n	800b3e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b3b0:	78fb      	ldrb	r3, [r7, #3]
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d013      	beq.n	800b3e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3304      	adds	r3, #4
 800b3be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00e      	beq.n	800b3e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b3ca:	f003 0308 	and.w	r3, r3, #8
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d007      	beq.n	800b3e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f002 fba9 	bl	800db30 <etharp_request>
 800b3de:	e000      	b.n	800b3e2 <netif_issue_reports+0x6e>
    return;
 800b3e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	080116e8 	.word	0x080116e8
 800b3ec:	0801188c 	.word	0x0801188c
 800b3f0:	08011738 	.word	0x08011738

0800b3f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d107      	bne.n	800b412 <netif_set_down+0x1e>
 800b402:	4b12      	ldr	r3, [pc, #72]	@ (800b44c <netif_set_down+0x58>)
 800b404:	f240 329b 	movw	r2, #923	@ 0x39b
 800b408:	4911      	ldr	r1, [pc, #68]	@ (800b450 <netif_set_down+0x5c>)
 800b40a:	4812      	ldr	r0, [pc, #72]	@ (800b454 <netif_set_down+0x60>)
 800b40c:	f004 fb02 	bl	800fa14 <iprintf>
 800b410:	e019      	b.n	800b446 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d012      	beq.n	800b446 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b426:	f023 0301 	bic.w	r3, r3, #1
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b438:	f003 0308 	and.w	r3, r3, #8
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 ff33 	bl	800d2ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	080116e8 	.word	0x080116e8
 800b450:	080118b0 	.word	0x080118b0
 800b454:	08011738 	.word	0x08011738

0800b458 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d107      	bne.n	800b476 <netif_set_link_up+0x1e>
 800b466:	4b13      	ldr	r3, [pc, #76]	@ (800b4b4 <netif_set_link_up+0x5c>)
 800b468:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b46c:	4912      	ldr	r1, [pc, #72]	@ (800b4b8 <netif_set_link_up+0x60>)
 800b46e:	4813      	ldr	r0, [pc, #76]	@ (800b4bc <netif_set_link_up+0x64>)
 800b470:	f004 fad0 	bl	800fa14 <iprintf>
 800b474:	e01b      	b.n	800b4ae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b47c:	f003 0304 	and.w	r3, r3, #4
 800b480:	2b00      	cmp	r3, #0
 800b482:	d114      	bne.n	800b4ae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b48a:	f043 0304 	orr.w	r3, r3, #4
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b496:	2103      	movs	r1, #3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7ff ff6b 	bl	800b374 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	69db      	ldr	r3, [r3, #28]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <netif_set_link_up+0x56>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	080116e8 	.word	0x080116e8
 800b4b8:	080118d0 	.word	0x080118d0
 800b4bc:	08011738 	.word	0x08011738

0800b4c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d107      	bne.n	800b4de <netif_set_link_down+0x1e>
 800b4ce:	4b11      	ldr	r3, [pc, #68]	@ (800b514 <netif_set_link_down+0x54>)
 800b4d0:	f240 4206 	movw	r2, #1030	@ 0x406
 800b4d4:	4910      	ldr	r1, [pc, #64]	@ (800b518 <netif_set_link_down+0x58>)
 800b4d6:	4811      	ldr	r0, [pc, #68]	@ (800b51c <netif_set_link_down+0x5c>)
 800b4d8:	f004 fa9c 	bl	800fa14 <iprintf>
 800b4dc:	e017      	b.n	800b50e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b4e4:	f003 0304 	and.w	r3, r3, #4
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d010      	beq.n	800b50e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b4f2:	f023 0304 	bic.w	r3, r3, #4
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	69db      	ldr	r3, [r3, #28]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d003      	beq.n	800b50e <netif_set_link_down+0x4e>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	080116e8 	.word	0x080116e8
 800b518:	080118f4 	.word	0x080118f4
 800b51c:	08011738 	.word	0x08011738

0800b520 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	61da      	str	r2, [r3, #28]
  }
}
 800b536:	bf00      	nop
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b542:	b480      	push	{r7}
 800b544:	b085      	sub	sp, #20
 800b546:	af00      	add	r7, sp, #0
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b54e:	f06f 030b 	mvn.w	r3, #11
}
 800b552:	4618      	mov	r0, r3
 800b554:	3714      	adds	r7, #20
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
	...

0800b560 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b56a:	79fb      	ldrb	r3, [r7, #7]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d013      	beq.n	800b598 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b570:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a8 <netif_get_by_index+0x48>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	60fb      	str	r3, [r7, #12]
 800b576:	e00c      	b.n	800b592 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b57e:	3301      	adds	r3, #1
 800b580:	b2db      	uxtb	r3, r3
 800b582:	79fa      	ldrb	r2, [r7, #7]
 800b584:	429a      	cmp	r2, r3
 800b586:	d101      	bne.n	800b58c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	e006      	b.n	800b59a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1ef      	bne.n	800b578 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	2000cf84 	.word	0x2000cf84

0800b5ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	80fb      	strh	r3, [r7, #6]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	88fa      	ldrh	r2, [r7, #6]
 800b5d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	88ba      	ldrh	r2, [r7, #4]
 800b5d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b5da:	8b3b      	ldrh	r3, [r7, #24]
 800b5dc:	b2da      	uxtb	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	7f3a      	ldrb	r2, [r7, #28]
 800b5e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	73da      	strb	r2, [r3, #15]
}
 800b5f4:	bf00      	nop
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08c      	sub	sp, #48	@ 0x30
 800b604:	af02      	add	r7, sp, #8
 800b606:	4603      	mov	r3, r0
 800b608:	71fb      	strb	r3, [r7, #7]
 800b60a:	460b      	mov	r3, r1
 800b60c:	80bb      	strh	r3, [r7, #4]
 800b60e:	4613      	mov	r3, r2
 800b610:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b616:	887b      	ldrh	r3, [r7, #2]
 800b618:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b61c:	d07d      	beq.n	800b71a <pbuf_alloc+0x11a>
 800b61e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b622:	f300 80c6 	bgt.w	800b7b2 <pbuf_alloc+0x1b2>
 800b626:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b62a:	d010      	beq.n	800b64e <pbuf_alloc+0x4e>
 800b62c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b630:	f300 80bf 	bgt.w	800b7b2 <pbuf_alloc+0x1b2>
 800b634:	2b01      	cmp	r3, #1
 800b636:	d002      	beq.n	800b63e <pbuf_alloc+0x3e>
 800b638:	2b41      	cmp	r3, #65	@ 0x41
 800b63a:	f040 80ba 	bne.w	800b7b2 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b63e:	887a      	ldrh	r2, [r7, #2]
 800b640:	88bb      	ldrh	r3, [r7, #4]
 800b642:	4619      	mov	r1, r3
 800b644:	2000      	movs	r0, #0
 800b646:	f000 f8cf 	bl	800b7e8 <pbuf_alloc_reference>
 800b64a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b64c:	e0bb      	b.n	800b7c6 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b652:	2300      	movs	r3, #0
 800b654:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b656:	88bb      	ldrh	r3, [r7, #4]
 800b658:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b65a:	2009      	movs	r0, #9
 800b65c:	f7ff fbf8 	bl	800ae50 <memp_malloc>
 800b660:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d107      	bne.n	800b678 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d002      	beq.n	800b674 <pbuf_alloc+0x74>
            pbuf_free(p);
 800b66e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b670:	f000 faa8 	bl	800bbc4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b674:	2300      	movs	r3, #0
 800b676:	e0a7      	b.n	800b7c8 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b678:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b67a:	3303      	adds	r3, #3
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	f023 0303 	bic.w	r3, r3, #3
 800b682:	b29b      	uxth	r3, r3
 800b684:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b688:	b29b      	uxth	r3, r3
 800b68a:	8b7a      	ldrh	r2, [r7, #26]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	bf28      	it	cs
 800b690:	4613      	movcs	r3, r2
 800b692:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b694:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b696:	3310      	adds	r3, #16
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	4413      	add	r3, r2
 800b69c:	3303      	adds	r3, #3
 800b69e:	f023 0303 	bic.w	r3, r3, #3
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	89f9      	ldrh	r1, [r7, #14]
 800b6a6:	8b7a      	ldrh	r2, [r7, #26]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	9301      	str	r3, [sp, #4]
 800b6ac:	887b      	ldrh	r3, [r7, #2]
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4601      	mov	r1, r0
 800b6b4:	6938      	ldr	r0, [r7, #16]
 800b6b6:	f7ff ff79 	bl	800b5ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	f003 0303 	and.w	r3, r3, #3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d006      	beq.n	800b6d4 <pbuf_alloc+0xd4>
 800b6c6:	4b42      	ldr	r3, [pc, #264]	@ (800b7d0 <pbuf_alloc+0x1d0>)
 800b6c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b6cc:	4941      	ldr	r1, [pc, #260]	@ (800b7d4 <pbuf_alloc+0x1d4>)
 800b6ce:	4842      	ldr	r0, [pc, #264]	@ (800b7d8 <pbuf_alloc+0x1d8>)
 800b6d0:	f004 f9a0 	bl	800fa14 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b6d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b6d6:	3303      	adds	r3, #3
 800b6d8:	f023 0303 	bic.w	r3, r3, #3
 800b6dc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b6e0:	d106      	bne.n	800b6f0 <pbuf_alloc+0xf0>
 800b6e2:	4b3b      	ldr	r3, [pc, #236]	@ (800b7d0 <pbuf_alloc+0x1d0>)
 800b6e4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b6e8:	493c      	ldr	r1, [pc, #240]	@ (800b7dc <pbuf_alloc+0x1dc>)
 800b6ea:	483b      	ldr	r0, [pc, #236]	@ (800b7d8 <pbuf_alloc+0x1d8>)
 800b6ec:	f004 f992 	bl	800fa14 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d102      	bne.n	800b6fc <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6fa:	e002      	b.n	800b702 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b706:	8b7a      	ldrh	r2, [r7, #26]
 800b708:	89fb      	ldrh	r3, [r7, #14]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b70e:	2300      	movs	r3, #0
 800b710:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b712:	8b7b      	ldrh	r3, [r7, #26]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1a0      	bne.n	800b65a <pbuf_alloc+0x5a>
      break;
 800b718:	e055      	b.n	800b7c6 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b71a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b71c:	3303      	adds	r3, #3
 800b71e:	b29b      	uxth	r3, r3
 800b720:	f023 0303 	bic.w	r3, r3, #3
 800b724:	b29a      	uxth	r2, r3
 800b726:	88bb      	ldrh	r3, [r7, #4]
 800b728:	3303      	adds	r3, #3
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	f023 0303 	bic.w	r3, r3, #3
 800b730:	b29b      	uxth	r3, r3
 800b732:	4413      	add	r3, r2
 800b734:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b736:	8b3b      	ldrh	r3, [r7, #24]
 800b738:	3310      	adds	r3, #16
 800b73a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b73c:	8b3a      	ldrh	r2, [r7, #24]
 800b73e:	88bb      	ldrh	r3, [r7, #4]
 800b740:	3303      	adds	r3, #3
 800b742:	f023 0303 	bic.w	r3, r3, #3
 800b746:	429a      	cmp	r2, r3
 800b748:	d306      	bcc.n	800b758 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b74a:	8afa      	ldrh	r2, [r7, #22]
 800b74c:	88bb      	ldrh	r3, [r7, #4]
 800b74e:	3303      	adds	r3, #3
 800b750:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b754:	429a      	cmp	r2, r3
 800b756:	d201      	bcs.n	800b75c <pbuf_alloc+0x15c>
        return NULL;
 800b758:	2300      	movs	r3, #0
 800b75a:	e035      	b.n	800b7c8 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b75c:	8afb      	ldrh	r3, [r7, #22]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff f9d2 	bl	800ab08 <mem_malloc>
 800b764:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <pbuf_alloc+0x170>
        return NULL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	e02b      	b.n	800b7c8 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b770:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b772:	3310      	adds	r3, #16
 800b774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b776:	4413      	add	r3, r2
 800b778:	3303      	adds	r3, #3
 800b77a:	f023 0303 	bic.w	r3, r3, #3
 800b77e:	4618      	mov	r0, r3
 800b780:	88b9      	ldrh	r1, [r7, #4]
 800b782:	88ba      	ldrh	r2, [r7, #4]
 800b784:	2300      	movs	r3, #0
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	887b      	ldrh	r3, [r7, #2]
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	460b      	mov	r3, r1
 800b78e:	4601      	mov	r1, r0
 800b790:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b792:	f7ff ff0b 	bl	800b5ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f003 0303 	and.w	r3, r3, #3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d010      	beq.n	800b7c4 <pbuf_alloc+0x1c4>
 800b7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b7d0 <pbuf_alloc+0x1d0>)
 800b7a4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b7a8:	490d      	ldr	r1, [pc, #52]	@ (800b7e0 <pbuf_alloc+0x1e0>)
 800b7aa:	480b      	ldr	r0, [pc, #44]	@ (800b7d8 <pbuf_alloc+0x1d8>)
 800b7ac:	f004 f932 	bl	800fa14 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b7b0:	e008      	b.n	800b7c4 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b7b2:	4b07      	ldr	r3, [pc, #28]	@ (800b7d0 <pbuf_alloc+0x1d0>)
 800b7b4:	f240 1227 	movw	r2, #295	@ 0x127
 800b7b8:	490a      	ldr	r1, [pc, #40]	@ (800b7e4 <pbuf_alloc+0x1e4>)
 800b7ba:	4807      	ldr	r0, [pc, #28]	@ (800b7d8 <pbuf_alloc+0x1d8>)
 800b7bc:	f004 f92a 	bl	800fa14 <iprintf>
      return NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e001      	b.n	800b7c8 <pbuf_alloc+0x1c8>
      break;
 800b7c4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3728      	adds	r7, #40	@ 0x28
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	08011918 	.word	0x08011918
 800b7d4:	08011948 	.word	0x08011948
 800b7d8:	08011978 	.word	0x08011978
 800b7dc:	080119a0 	.word	0x080119a0
 800b7e0:	080119d4 	.word	0x080119d4
 800b7e4:	08011a00 	.word	0x08011a00

0800b7e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af02      	add	r7, sp, #8
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	807b      	strh	r3, [r7, #2]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b7f8:	883b      	ldrh	r3, [r7, #0]
 800b7fa:	2b41      	cmp	r3, #65	@ 0x41
 800b7fc:	d009      	beq.n	800b812 <pbuf_alloc_reference+0x2a>
 800b7fe:	883b      	ldrh	r3, [r7, #0]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d006      	beq.n	800b812 <pbuf_alloc_reference+0x2a>
 800b804:	4b0f      	ldr	r3, [pc, #60]	@ (800b844 <pbuf_alloc_reference+0x5c>)
 800b806:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b80a:	490f      	ldr	r1, [pc, #60]	@ (800b848 <pbuf_alloc_reference+0x60>)
 800b80c:	480f      	ldr	r0, [pc, #60]	@ (800b84c <pbuf_alloc_reference+0x64>)
 800b80e:	f004 f901 	bl	800fa14 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b812:	2008      	movs	r0, #8
 800b814:	f7ff fb1c 	bl	800ae50 <memp_malloc>
 800b818:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b820:	2300      	movs	r3, #0
 800b822:	e00b      	b.n	800b83c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b824:	8879      	ldrh	r1, [r7, #2]
 800b826:	887a      	ldrh	r2, [r7, #2]
 800b828:	2300      	movs	r3, #0
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	883b      	ldrh	r3, [r7, #0]
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	460b      	mov	r3, r1
 800b832:	6879      	ldr	r1, [r7, #4]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f7ff feb9 	bl	800b5ac <pbuf_init_alloced_pbuf>
  return p;
 800b83a:	68fb      	ldr	r3, [r7, #12]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	08011918 	.word	0x08011918
 800b848:	08011a1c 	.word	0x08011a1c
 800b84c:	08011978 	.word	0x08011978

0800b850 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b088      	sub	sp, #32
 800b854:	af02      	add	r7, sp, #8
 800b856:	607b      	str	r3, [r7, #4]
 800b858:	4603      	mov	r3, r0
 800b85a:	73fb      	strb	r3, [r7, #15]
 800b85c:	460b      	mov	r3, r1
 800b85e:	81bb      	strh	r3, [r7, #12]
 800b860:	4613      	mov	r3, r2
 800b862:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b868:	8a7b      	ldrh	r3, [r7, #18]
 800b86a:	3303      	adds	r3, #3
 800b86c:	f023 0203 	bic.w	r2, r3, #3
 800b870:	89bb      	ldrh	r3, [r7, #12]
 800b872:	441a      	add	r2, r3
 800b874:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b876:	429a      	cmp	r2, r3
 800b878:	d901      	bls.n	800b87e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	e018      	b.n	800b8b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d007      	beq.n	800b894 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b884:	8a7b      	ldrh	r3, [r7, #18]
 800b886:	3303      	adds	r3, #3
 800b888:	f023 0303 	bic.w	r3, r3, #3
 800b88c:	6a3a      	ldr	r2, [r7, #32]
 800b88e:	4413      	add	r3, r2
 800b890:	617b      	str	r3, [r7, #20]
 800b892:	e001      	b.n	800b898 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b894:	2300      	movs	r3, #0
 800b896:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	89b9      	ldrh	r1, [r7, #12]
 800b89c:	89ba      	ldrh	r2, [r7, #12]
 800b89e:	2302      	movs	r3, #2
 800b8a0:	9301      	str	r3, [sp, #4]
 800b8a2:	897b      	ldrh	r3, [r7, #10]
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	6979      	ldr	r1, [r7, #20]
 800b8aa:	f7ff fe7f 	bl	800b5ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b8ae:	687b      	ldr	r3, [r7, #4]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3718      	adds	r7, #24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d106      	bne.n	800b8d8 <pbuf_realloc+0x20>
 800b8ca:	4b3a      	ldr	r3, [pc, #232]	@ (800b9b4 <pbuf_realloc+0xfc>)
 800b8cc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b8d0:	4939      	ldr	r1, [pc, #228]	@ (800b9b8 <pbuf_realloc+0x100>)
 800b8d2:	483a      	ldr	r0, [pc, #232]	@ (800b9bc <pbuf_realloc+0x104>)
 800b8d4:	f004 f89e 	bl	800fa14 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	891b      	ldrh	r3, [r3, #8]
 800b8dc:	887a      	ldrh	r2, [r7, #2]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d263      	bcs.n	800b9aa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	891a      	ldrh	r2, [r3, #8]
 800b8e6:	887b      	ldrh	r3, [r7, #2]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b8ec:	887b      	ldrh	r3, [r7, #2]
 800b8ee:	817b      	strh	r3, [r7, #10]
  q = p;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b8f4:	e018      	b.n	800b928 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	895b      	ldrh	r3, [r3, #10]
 800b8fa:	897a      	ldrh	r2, [r7, #10]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	891a      	ldrh	r2, [r3, #8]
 800b904:	893b      	ldrh	r3, [r7, #8]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	b29a      	uxth	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d106      	bne.n	800b928 <pbuf_realloc+0x70>
 800b91a:	4b26      	ldr	r3, [pc, #152]	@ (800b9b4 <pbuf_realloc+0xfc>)
 800b91c:	f240 12af 	movw	r2, #431	@ 0x1af
 800b920:	4927      	ldr	r1, [pc, #156]	@ (800b9c0 <pbuf_realloc+0x108>)
 800b922:	4826      	ldr	r0, [pc, #152]	@ (800b9bc <pbuf_realloc+0x104>)
 800b924:	f004 f876 	bl	800fa14 <iprintf>
  while (rem_len > q->len) {
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	895b      	ldrh	r3, [r3, #10]
 800b92c:	897a      	ldrh	r2, [r7, #10]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d8e1      	bhi.n	800b8f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	7b1b      	ldrb	r3, [r3, #12]
 800b936:	f003 030f 	and.w	r3, r3, #15
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d121      	bne.n	800b982 <pbuf_realloc+0xca>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	895b      	ldrh	r3, [r3, #10]
 800b942:	897a      	ldrh	r2, [r7, #10]
 800b944:	429a      	cmp	r2, r3
 800b946:	d01c      	beq.n	800b982 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	7b5b      	ldrb	r3, [r3, #13]
 800b94c:	f003 0302 	and.w	r3, r3, #2
 800b950:	2b00      	cmp	r3, #0
 800b952:	d116      	bne.n	800b982 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	897b      	ldrh	r3, [r7, #10]
 800b960:	4413      	add	r3, r2
 800b962:	b29b      	uxth	r3, r3
 800b964:	4619      	mov	r1, r3
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f7fe ffc4 	bl	800a8f4 <mem_trim>
 800b96c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d106      	bne.n	800b982 <pbuf_realloc+0xca>
 800b974:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b4 <pbuf_realloc+0xfc>)
 800b976:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b97a:	4912      	ldr	r1, [pc, #72]	@ (800b9c4 <pbuf_realloc+0x10c>)
 800b97c:	480f      	ldr	r0, [pc, #60]	@ (800b9bc <pbuf_realloc+0x104>)
 800b97e:	f004 f849 	bl	800fa14 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	897a      	ldrh	r2, [r7, #10]
 800b986:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	895a      	ldrh	r2, [r3, #10]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f000 f911 	bl	800bbc4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	e000      	b.n	800b9ac <pbuf_realloc+0xf4>
    return;
 800b9aa:	bf00      	nop

}
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	08011918 	.word	0x08011918
 800b9b8:	08011a30 	.word	0x08011a30
 800b9bc:	08011978 	.word	0x08011978
 800b9c0:	08011a48 	.word	0x08011a48
 800b9c4:	08011a60 	.word	0x08011a60

0800b9c8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <pbuf_add_header_impl+0x22>
 800b9dc:	4b2b      	ldr	r3, [pc, #172]	@ (800ba8c <pbuf_add_header_impl+0xc4>)
 800b9de:	f240 12df 	movw	r2, #479	@ 0x1df
 800b9e2:	492b      	ldr	r1, [pc, #172]	@ (800ba90 <pbuf_add_header_impl+0xc8>)
 800b9e4:	482b      	ldr	r0, [pc, #172]	@ (800ba94 <pbuf_add_header_impl+0xcc>)
 800b9e6:	f004 f815 	bl	800fa14 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d003      	beq.n	800b9f8 <pbuf_add_header_impl+0x30>
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9f6:	d301      	bcc.n	800b9fc <pbuf_add_header_impl+0x34>
    return 1;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e043      	b.n	800ba84 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <pbuf_add_header_impl+0x3e>
    return 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	e03e      	b.n	800ba84 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	891a      	ldrh	r2, [r3, #8]
 800ba0e:	8a7b      	ldrh	r3, [r7, #18]
 800ba10:	4413      	add	r3, r2
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	8a7a      	ldrh	r2, [r7, #18]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d901      	bls.n	800ba1e <pbuf_add_header_impl+0x56>
    return 1;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e032      	b.n	800ba84 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	7b1b      	ldrb	r3, [r3, #12]
 800ba22:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ba24:	8a3b      	ldrh	r3, [r7, #16]
 800ba26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00c      	beq.n	800ba48 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	425b      	negs	r3, r3
 800ba36:	4413      	add	r3, r2
 800ba38:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3310      	adds	r3, #16
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d20d      	bcs.n	800ba60 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ba44:	2301      	movs	r3, #1
 800ba46:	e01d      	b.n	800ba84 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ba48:	79fb      	ldrb	r3, [r7, #7]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d006      	beq.n	800ba5c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	425b      	negs	r3, r3
 800ba56:	4413      	add	r3, r2
 800ba58:	617b      	str	r3, [r7, #20]
 800ba5a:	e001      	b.n	800ba60 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e011      	b.n	800ba84 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	895a      	ldrh	r2, [r3, #10]
 800ba6a:	8a7b      	ldrh	r3, [r7, #18]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	891a      	ldrh	r2, [r3, #8]
 800ba78:	8a7b      	ldrh	r3, [r7, #18]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	811a      	strh	r2, [r3, #8]


  return 0;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	08011918 	.word	0x08011918
 800ba90:	08011a7c 	.word	0x08011a7c
 800ba94:	08011978 	.word	0x08011978

0800ba98 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800baa2:	2200      	movs	r2, #0
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff ff8e 	bl	800b9c8 <pbuf_add_header_impl>
 800baac:	4603      	mov	r3, r0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d106      	bne.n	800bad6 <pbuf_remove_header+0x1e>
 800bac8:	4b20      	ldr	r3, [pc, #128]	@ (800bb4c <pbuf_remove_header+0x94>)
 800baca:	f240 224b 	movw	r2, #587	@ 0x24b
 800bace:	4920      	ldr	r1, [pc, #128]	@ (800bb50 <pbuf_remove_header+0x98>)
 800bad0:	4820      	ldr	r0, [pc, #128]	@ (800bb54 <pbuf_remove_header+0x9c>)
 800bad2:	f003 ff9f 	bl	800fa14 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <pbuf_remove_header+0x2c>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bae2:	d301      	bcc.n	800bae8 <pbuf_remove_header+0x30>
    return 1;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e02c      	b.n	800bb42 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <pbuf_remove_header+0x3a>
    return 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	e027      	b.n	800bb42 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	895b      	ldrh	r3, [r3, #10]
 800bafa:	89fa      	ldrh	r2, [r7, #14]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d908      	bls.n	800bb12 <pbuf_remove_header+0x5a>
 800bb00:	4b12      	ldr	r3, [pc, #72]	@ (800bb4c <pbuf_remove_header+0x94>)
 800bb02:	f240 2255 	movw	r2, #597	@ 0x255
 800bb06:	4914      	ldr	r1, [pc, #80]	@ (800bb58 <pbuf_remove_header+0xa0>)
 800bb08:	4812      	ldr	r0, [pc, #72]	@ (800bb54 <pbuf_remove_header+0x9c>)
 800bb0a:	f003 ff83 	bl	800fa14 <iprintf>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e017      	b.n	800bb42 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	441a      	add	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	895a      	ldrh	r2, [r3, #10]
 800bb28:	89fb      	ldrh	r3, [r7, #14]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	891a      	ldrh	r2, [r3, #8]
 800bb36:	89fb      	ldrh	r3, [r7, #14]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	08011918 	.word	0x08011918
 800bb50:	08011a7c 	.word	0x08011a7c
 800bb54:	08011978 	.word	0x08011978
 800bb58:	08011a88 	.word	0x08011a88

0800bb5c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	807b      	strh	r3, [r7, #2]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bb6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	da08      	bge.n	800bb86 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bb74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb78:	425b      	negs	r3, r3
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff ff9b 	bl	800bab8 <pbuf_remove_header>
 800bb82:	4603      	mov	r3, r0
 800bb84:	e007      	b.n	800bb96 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bb86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb8a:	787a      	ldrb	r2, [r7, #1]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7ff ff1a 	bl	800b9c8 <pbuf_add_header_impl>
 800bb94:	4603      	mov	r3, r0
  }
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
 800bba6:	460b      	mov	r3, r1
 800bba8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bbaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f7ff ffd2 	bl	800bb5c <pbuf_header_impl>
 800bbb8:	4603      	mov	r3, r0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b088      	sub	sp, #32
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10b      	bne.n	800bbea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d106      	bne.n	800bbe6 <pbuf_free+0x22>
 800bbd8:	4b3b      	ldr	r3, [pc, #236]	@ (800bcc8 <pbuf_free+0x104>)
 800bbda:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800bbde:	493b      	ldr	r1, [pc, #236]	@ (800bccc <pbuf_free+0x108>)
 800bbe0:	483b      	ldr	r0, [pc, #236]	@ (800bcd0 <pbuf_free+0x10c>)
 800bbe2:	f003 ff17 	bl	800fa14 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	e069      	b.n	800bcbe <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bbee:	e062      	b.n	800bcb6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bbf0:	f003 fdf2 	bl	800f7d8 <sys_arch_protect>
 800bbf4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	7b9b      	ldrb	r3, [r3, #14]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <pbuf_free+0x48>
 800bbfe:	4b32      	ldr	r3, [pc, #200]	@ (800bcc8 <pbuf_free+0x104>)
 800bc00:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bc04:	4933      	ldr	r1, [pc, #204]	@ (800bcd4 <pbuf_free+0x110>)
 800bc06:	4832      	ldr	r0, [pc, #200]	@ (800bcd0 <pbuf_free+0x10c>)
 800bc08:	f003 ff04 	bl	800fa14 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7b9b      	ldrb	r3, [r3, #14]
 800bc10:	3b01      	subs	r3, #1
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	739a      	strb	r2, [r3, #14]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	7b9b      	ldrb	r3, [r3, #14]
 800bc1c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bc1e:	69b8      	ldr	r0, [r7, #24]
 800bc20:	f003 fde8 	bl	800f7f4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d143      	bne.n	800bcb2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	7b1b      	ldrb	r3, [r3, #12]
 800bc34:	f003 030f 	and.w	r3, r3, #15
 800bc38:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	7b5b      	ldrb	r3, [r3, #13]
 800bc3e:	f003 0302 	and.w	r3, r3, #2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d011      	beq.n	800bc6a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d106      	bne.n	800bc60 <pbuf_free+0x9c>
 800bc52:	4b1d      	ldr	r3, [pc, #116]	@ (800bcc8 <pbuf_free+0x104>)
 800bc54:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800bc58:	491f      	ldr	r1, [pc, #124]	@ (800bcd8 <pbuf_free+0x114>)
 800bc5a:	481d      	ldr	r0, [pc, #116]	@ (800bcd0 <pbuf_free+0x10c>)
 800bc5c:	f003 feda 	bl	800fa14 <iprintf>
        pc->custom_free_function(p);
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	4798      	blx	r3
 800bc68:	e01d      	b.n	800bca6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bc6a:	7bfb      	ldrb	r3, [r7, #15]
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d104      	bne.n	800bc7a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bc70:	6879      	ldr	r1, [r7, #4]
 800bc72:	2009      	movs	r0, #9
 800bc74:	f7ff f962 	bl	800af3c <memp_free>
 800bc78:	e015      	b.n	800bca6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d104      	bne.n	800bc8a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bc80:	6879      	ldr	r1, [r7, #4]
 800bc82:	2008      	movs	r0, #8
 800bc84:	f7ff f95a 	bl	800af3c <memp_free>
 800bc88:	e00d      	b.n	800bca6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d103      	bne.n	800bc98 <pbuf_free+0xd4>
          mem_free(p);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7fe fd9f 	bl	800a7d4 <mem_free>
 800bc96:	e006      	b.n	800bca6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bc98:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc8 <pbuf_free+0x104>)
 800bc9a:	f240 320f 	movw	r2, #783	@ 0x30f
 800bc9e:	490f      	ldr	r1, [pc, #60]	@ (800bcdc <pbuf_free+0x118>)
 800bca0:	480b      	ldr	r0, [pc, #44]	@ (800bcd0 <pbuf_free+0x10c>)
 800bca2:	f003 feb7 	bl	800fa14 <iprintf>
        }
      }
      count++;
 800bca6:	7ffb      	ldrb	r3, [r7, #31]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	607b      	str	r3, [r7, #4]
 800bcb0:	e001      	b.n	800bcb6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d199      	bne.n	800bbf0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bcbc:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3720      	adds	r7, #32
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	08011918 	.word	0x08011918
 800bccc:	08011a7c 	.word	0x08011a7c
 800bcd0:	08011978 	.word	0x08011978
 800bcd4:	08011aa8 	.word	0x08011aa8
 800bcd8:	08011ac0 	.word	0x08011ac0
 800bcdc:	08011ae4 	.word	0x08011ae4

0800bce0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bcec:	e005      	b.n	800bcfa <pbuf_clen+0x1a>
    ++len;
 800bcee:	89fb      	ldrh	r3, [r7, #14]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1f6      	bne.n	800bcee <pbuf_clen+0xe>
  }
  return len;
 800bd00:	89fb      	ldrh	r3, [r7, #14]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
	...

0800bd10 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d016      	beq.n	800bd4c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bd1e:	f003 fd5b 	bl	800f7d8 <sys_arch_protect>
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	7b9b      	ldrb	r3, [r3, #14]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	b2da      	uxtb	r2, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	739a      	strb	r2, [r3, #14]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f003 fd5f 	bl	800f7f4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	7b9b      	ldrb	r3, [r3, #14]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <pbuf_ref+0x3c>
 800bd3e:	4b05      	ldr	r3, [pc, #20]	@ (800bd54 <pbuf_ref+0x44>)
 800bd40:	f240 3242 	movw	r2, #834	@ 0x342
 800bd44:	4904      	ldr	r1, [pc, #16]	@ (800bd58 <pbuf_ref+0x48>)
 800bd46:	4805      	ldr	r0, [pc, #20]	@ (800bd5c <pbuf_ref+0x4c>)
 800bd48:	f003 fe64 	bl	800fa14 <iprintf>
  }
}
 800bd4c:	bf00      	nop
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	08011918 	.word	0x08011918
 800bd58:	08011af8 	.word	0x08011af8
 800bd5c:	08011978 	.word	0x08011978

0800bd60 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <pbuf_cat+0x16>
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d107      	bne.n	800bd86 <pbuf_cat+0x26>
 800bd76:	4b20      	ldr	r3, [pc, #128]	@ (800bdf8 <pbuf_cat+0x98>)
 800bd78:	f240 3259 	movw	r2, #857	@ 0x359
 800bd7c:	491f      	ldr	r1, [pc, #124]	@ (800bdfc <pbuf_cat+0x9c>)
 800bd7e:	4820      	ldr	r0, [pc, #128]	@ (800be00 <pbuf_cat+0xa0>)
 800bd80:	f003 fe48 	bl	800fa14 <iprintf>
 800bd84:	e034      	b.n	800bdf0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	e00a      	b.n	800bda2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	891a      	ldrh	r2, [r3, #8]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	891b      	ldrh	r3, [r3, #8]
 800bd94:	4413      	add	r3, r2
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	60fb      	str	r3, [r7, #12]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1f0      	bne.n	800bd8c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	891a      	ldrh	r2, [r3, #8]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	895b      	ldrh	r3, [r3, #10]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d006      	beq.n	800bdc4 <pbuf_cat+0x64>
 800bdb6:	4b10      	ldr	r3, [pc, #64]	@ (800bdf8 <pbuf_cat+0x98>)
 800bdb8:	f240 3262 	movw	r2, #866	@ 0x362
 800bdbc:	4911      	ldr	r1, [pc, #68]	@ (800be04 <pbuf_cat+0xa4>)
 800bdbe:	4810      	ldr	r0, [pc, #64]	@ (800be00 <pbuf_cat+0xa0>)
 800bdc0:	f003 fe28 	bl	800fa14 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d006      	beq.n	800bdda <pbuf_cat+0x7a>
 800bdcc:	4b0a      	ldr	r3, [pc, #40]	@ (800bdf8 <pbuf_cat+0x98>)
 800bdce:	f240 3263 	movw	r2, #867	@ 0x363
 800bdd2:	490d      	ldr	r1, [pc, #52]	@ (800be08 <pbuf_cat+0xa8>)
 800bdd4:	480a      	ldr	r0, [pc, #40]	@ (800be00 <pbuf_cat+0xa0>)
 800bdd6:	f003 fe1d 	bl	800fa14 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	891a      	ldrh	r2, [r3, #8]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	891b      	ldrh	r3, [r3, #8]
 800bde2:	4413      	add	r3, r2
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	08011918 	.word	0x08011918
 800bdfc:	08011b0c 	.word	0x08011b0c
 800be00:	08011978 	.word	0x08011978
 800be04:	08011b44 	.word	0x08011b44
 800be08:	08011b74 	.word	0x08011b74

0800be0c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ffa1 	bl	800bd60 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800be1e:	6838      	ldr	r0, [r7, #0]
 800be20:	f7ff ff76 	bl	800bd10 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800be24:	bf00      	nop
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]
 800be3a:	2300      	movs	r3, #0
 800be3c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d008      	beq.n	800be56 <pbuf_copy+0x2a>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d005      	beq.n	800be56 <pbuf_copy+0x2a>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	891a      	ldrh	r2, [r3, #8]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	891b      	ldrh	r3, [r3, #8]
 800be52:	429a      	cmp	r2, r3
 800be54:	d209      	bcs.n	800be6a <pbuf_copy+0x3e>
 800be56:	4b57      	ldr	r3, [pc, #348]	@ (800bfb4 <pbuf_copy+0x188>)
 800be58:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800be5c:	4956      	ldr	r1, [pc, #344]	@ (800bfb8 <pbuf_copy+0x18c>)
 800be5e:	4857      	ldr	r0, [pc, #348]	@ (800bfbc <pbuf_copy+0x190>)
 800be60:	f003 fdd8 	bl	800fa14 <iprintf>
 800be64:	f06f 030f 	mvn.w	r3, #15
 800be68:	e09f      	b.n	800bfaa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	895b      	ldrh	r3, [r3, #10]
 800be6e:	461a      	mov	r2, r3
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	1ad2      	subs	r2, r2, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	895b      	ldrh	r3, [r3, #10]
 800be78:	4619      	mov	r1, r3
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	1acb      	subs	r3, r1, r3
 800be7e:	429a      	cmp	r2, r3
 800be80:	d306      	bcc.n	800be90 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	895b      	ldrh	r3, [r3, #10]
 800be86:	461a      	mov	r2, r3
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	60fb      	str	r3, [r7, #12]
 800be8e:	e005      	b.n	800be9c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	895b      	ldrh	r3, [r3, #10]
 800be94:	461a      	mov	r2, r3
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	18d0      	adds	r0, r2, r3
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	4413      	add	r3, r2
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	4619      	mov	r1, r3
 800beb0:	f003 fe8b 	bl	800fbca <memcpy>
    offset_to += len;
 800beb4:	697a      	ldr	r2, [r7, #20]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	4413      	add	r3, r2
 800beba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	4413      	add	r3, r2
 800bec2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	895b      	ldrh	r3, [r3, #10]
 800bec8:	461a      	mov	r2, r3
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	4293      	cmp	r3, r2
 800bece:	d906      	bls.n	800bede <pbuf_copy+0xb2>
 800bed0:	4b38      	ldr	r3, [pc, #224]	@ (800bfb4 <pbuf_copy+0x188>)
 800bed2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800bed6:	493a      	ldr	r1, [pc, #232]	@ (800bfc0 <pbuf_copy+0x194>)
 800bed8:	4838      	ldr	r0, [pc, #224]	@ (800bfbc <pbuf_copy+0x190>)
 800beda:	f003 fd9b 	bl	800fa14 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	895b      	ldrh	r3, [r3, #10]
 800bee2:	461a      	mov	r2, r3
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d906      	bls.n	800bef8 <pbuf_copy+0xcc>
 800beea:	4b32      	ldr	r3, [pc, #200]	@ (800bfb4 <pbuf_copy+0x188>)
 800beec:	f240 32da 	movw	r2, #986	@ 0x3da
 800bef0:	4934      	ldr	r1, [pc, #208]	@ (800bfc4 <pbuf_copy+0x198>)
 800bef2:	4832      	ldr	r0, [pc, #200]	@ (800bfbc <pbuf_copy+0x190>)
 800bef4:	f003 fd8e 	bl	800fa14 <iprintf>
    if (offset_from >= p_from->len) {
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	895b      	ldrh	r3, [r3, #10]
 800befc:	461a      	mov	r2, r3
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d304      	bcc.n	800bf0e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bf04:	2300      	movs	r3, #0
 800bf06:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	895b      	ldrh	r3, [r3, #10]
 800bf12:	461a      	mov	r2, r3
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d114      	bne.n	800bf44 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10c      	bne.n	800bf44 <pbuf_copy+0x118>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d009      	beq.n	800bf44 <pbuf_copy+0x118>
 800bf30:	4b20      	ldr	r3, [pc, #128]	@ (800bfb4 <pbuf_copy+0x188>)
 800bf32:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bf36:	4924      	ldr	r1, [pc, #144]	@ (800bfc8 <pbuf_copy+0x19c>)
 800bf38:	4820      	ldr	r0, [pc, #128]	@ (800bfbc <pbuf_copy+0x190>)
 800bf3a:	f003 fd6b 	bl	800fa14 <iprintf>
 800bf3e:	f06f 030f 	mvn.w	r3, #15
 800bf42:	e032      	b.n	800bfaa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d013      	beq.n	800bf72 <pbuf_copy+0x146>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	895a      	ldrh	r2, [r3, #10]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	891b      	ldrh	r3, [r3, #8]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d10d      	bne.n	800bf72 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d009      	beq.n	800bf72 <pbuf_copy+0x146>
 800bf5e:	4b15      	ldr	r3, [pc, #84]	@ (800bfb4 <pbuf_copy+0x188>)
 800bf60:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bf64:	4919      	ldr	r1, [pc, #100]	@ (800bfcc <pbuf_copy+0x1a0>)
 800bf66:	4815      	ldr	r0, [pc, #84]	@ (800bfbc <pbuf_copy+0x190>)
 800bf68:	f003 fd54 	bl	800fa14 <iprintf>
 800bf6c:	f06f 0305 	mvn.w	r3, #5
 800bf70:	e01b      	b.n	800bfaa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d013      	beq.n	800bfa0 <pbuf_copy+0x174>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	895a      	ldrh	r2, [r3, #10]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	891b      	ldrh	r3, [r3, #8]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d10d      	bne.n	800bfa0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d009      	beq.n	800bfa0 <pbuf_copy+0x174>
 800bf8c:	4b09      	ldr	r3, [pc, #36]	@ (800bfb4 <pbuf_copy+0x188>)
 800bf8e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bf92:	490e      	ldr	r1, [pc, #56]	@ (800bfcc <pbuf_copy+0x1a0>)
 800bf94:	4809      	ldr	r0, [pc, #36]	@ (800bfbc <pbuf_copy+0x190>)
 800bf96:	f003 fd3d 	bl	800fa14 <iprintf>
 800bf9a:	f06f 0305 	mvn.w	r3, #5
 800bf9e:	e004      	b.n	800bfaa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f47f af61 	bne.w	800be6a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	08011918 	.word	0x08011918
 800bfb8:	08011bc0 	.word	0x08011bc0
 800bfbc:	08011978 	.word	0x08011978
 800bfc0:	08011bf0 	.word	0x08011bf0
 800bfc4:	08011c08 	.word	0x08011c08
 800bfc8:	08011c24 	.word	0x08011c24
 800bfcc:	08011c34 	.word	0x08011c34

0800bfd0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	603a      	str	r2, [r7, #0]
 800bfda:	71fb      	strb	r3, [r7, #7]
 800bfdc:	460b      	mov	r3, r1
 800bfde:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	8919      	ldrh	r1, [r3, #8]
 800bfe4:	88ba      	ldrh	r2, [r7, #4]
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7ff fb09 	bl	800b600 <pbuf_alloc>
 800bfee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d101      	bne.n	800bffa <pbuf_clone+0x2a>
    return NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	e011      	b.n	800c01e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f7ff ff15 	bl	800be2c <pbuf_copy>
 800c002:	4603      	mov	r3, r0
 800c004:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c006:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d006      	beq.n	800c01c <pbuf_clone+0x4c>
 800c00e:	4b06      	ldr	r3, [pc, #24]	@ (800c028 <pbuf_clone+0x58>)
 800c010:	f240 5224 	movw	r2, #1316	@ 0x524
 800c014:	4905      	ldr	r1, [pc, #20]	@ (800c02c <pbuf_clone+0x5c>)
 800c016:	4806      	ldr	r0, [pc, #24]	@ (800c030 <pbuf_clone+0x60>)
 800c018:	f003 fcfc 	bl	800fa14 <iprintf>
  return q;
 800c01c:	68fb      	ldr	r3, [r7, #12]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	08011918 	.word	0x08011918
 800c02c:	08011d8c 	.word	0x08011d8c
 800c030:	08011978 	.word	0x08011978

0800c034 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c040:	2007      	movs	r0, #7
 800c042:	f7fe ff05 	bl	800ae50 <memp_malloc>
 800c046:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d109      	bne.n	800c062 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d151      	bne.n	800c0f8 <sys_timeout_abs+0xc4>
 800c054:	4b2a      	ldr	r3, [pc, #168]	@ (800c100 <sys_timeout_abs+0xcc>)
 800c056:	22be      	movs	r2, #190	@ 0xbe
 800c058:	492a      	ldr	r1, [pc, #168]	@ (800c104 <sys_timeout_abs+0xd0>)
 800c05a:	482b      	ldr	r0, [pc, #172]	@ (800c108 <sys_timeout_abs+0xd4>)
 800c05c:	f003 fcda 	bl	800fa14 <iprintf>
    return;
 800c060:	e04a      	b.n	800c0f8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	68fa      	ldr	r2, [r7, #12]
 800c078:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c07a:	4b24      	ldr	r3, [pc, #144]	@ (800c10c <sys_timeout_abs+0xd8>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d103      	bne.n	800c08a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c082:	4a22      	ldr	r2, [pc, #136]	@ (800c10c <sys_timeout_abs+0xd8>)
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	6013      	str	r3, [r2, #0]
    return;
 800c088:	e037      	b.n	800c0fa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	685a      	ldr	r2, [r3, #4]
 800c08e:	4b1f      	ldr	r3, [pc, #124]	@ (800c10c <sys_timeout_abs+0xd8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	0fdb      	lsrs	r3, r3, #31
 800c098:	f003 0301 	and.w	r3, r3, #1
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d007      	beq.n	800c0b2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800c10c <sys_timeout_abs+0xd8>)
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c0aa:	4a18      	ldr	r2, [pc, #96]	@ (800c10c <sys_timeout_abs+0xd8>)
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	e023      	b.n	800c0fa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0b2:	4b16      	ldr	r3, [pc, #88]	@ (800c10c <sys_timeout_abs+0xd8>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	e01a      	b.n	800c0f0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00b      	beq.n	800c0da <sys_timeout_abs+0xa6>
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	0fdb      	lsrs	r3, r3, #31
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d007      	beq.n	800c0ea <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	693a      	ldr	r2, [r7, #16]
 800c0e6:	601a      	str	r2, [r3, #0]
        break;
 800c0e8:	e007      	b.n	800c0fa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1e1      	bne.n	800c0ba <sys_timeout_abs+0x86>
 800c0f6:	e000      	b.n	800c0fa <sys_timeout_abs+0xc6>
    return;
 800c0f8:	bf00      	nop
      }
    }
  }
}
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	08011da0 	.word	0x08011da0
 800c104:	08011dd4 	.word	0x08011dd4
 800c108:	08011e14 	.word	0x08011e14
 800c10c:	2000cf90 	.word	0x2000cf90

0800c110 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4798      	blx	r3

  now = sys_now();
 800c122:	f7f9 fc5d 	bl	80059e0 <sys_now>
 800c126:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	4b0f      	ldr	r3, [pc, #60]	@ (800c16c <lwip_cyclic_timer+0x5c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4413      	add	r3, r2
 800c132:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	0fdb      	lsrs	r3, r3, #31
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	b2db      	uxtb	r3, r3
 800c142:	2b00      	cmp	r3, #0
 800c144:	d009      	beq.n	800c15a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	4413      	add	r3, r2
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	4907      	ldr	r1, [pc, #28]	@ (800c170 <lwip_cyclic_timer+0x60>)
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff ff6e 	bl	800c034 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c158:	e004      	b.n	800c164 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	4904      	ldr	r1, [pc, #16]	@ (800c170 <lwip_cyclic_timer+0x60>)
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f7ff ff68 	bl	800c034 <sys_timeout_abs>
}
 800c164:	bf00      	nop
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	2000cf94 	.word	0x2000cf94
 800c170:	0800c111 	.word	0x0800c111

0800c174 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c17a:	2300      	movs	r3, #0
 800c17c:	607b      	str	r3, [r7, #4]
 800c17e:	e00e      	b.n	800c19e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c180:	4a0b      	ldr	r2, [pc, #44]	@ (800c1b0 <sys_timeouts_init+0x3c>)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	00db      	lsls	r3, r3, #3
 800c18c:	4a08      	ldr	r2, [pc, #32]	@ (800c1b0 <sys_timeouts_init+0x3c>)
 800c18e:	4413      	add	r3, r2
 800c190:	461a      	mov	r2, r3
 800c192:	4908      	ldr	r1, [pc, #32]	@ (800c1b4 <sys_timeouts_init+0x40>)
 800c194:	f000 f810 	bl	800c1b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3301      	adds	r3, #1
 800c19c:	607b      	str	r3, [r7, #4]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d9ed      	bls.n	800c180 <sys_timeouts_init+0xc>
  }
}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	08012a28 	.word	0x08012a28
 800c1b4:	0800c111 	.word	0x0800c111

0800c1b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1ca:	d306      	bcc.n	800c1da <sys_timeout+0x22>
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c1f8 <sys_timeout+0x40>)
 800c1ce:	f240 1229 	movw	r2, #297	@ 0x129
 800c1d2:	490a      	ldr	r1, [pc, #40]	@ (800c1fc <sys_timeout+0x44>)
 800c1d4:	480a      	ldr	r0, [pc, #40]	@ (800c200 <sys_timeout+0x48>)
 800c1d6:	f003 fc1d 	bl	800fa14 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c1da:	f7f9 fc01 	bl	80059e0 <sys_now>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	68b9      	ldr	r1, [r7, #8]
 800c1ea:	6978      	ldr	r0, [r7, #20]
 800c1ec:	f7ff ff22 	bl	800c034 <sys_timeout_abs>
#endif
}
 800c1f0:	bf00      	nop
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	08011da0 	.word	0x08011da0
 800c1fc:	08011e3c 	.word	0x08011e3c
 800c200:	08011e14 	.word	0x08011e14

0800c204 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c20a:	f7f9 fbe9 	bl	80059e0 <sys_now>
 800c20e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800c210:	4b17      	ldr	r3, [pc, #92]	@ (800c270 <sys_check_timeouts+0x6c>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d022      	beq.n	800c262 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	0fdb      	lsrs	r3, r3, #31
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d11a      	bne.n	800c266 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a0e      	ldr	r2, [pc, #56]	@ (800c270 <sys_check_timeouts+0x6c>)
 800c236:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	4a0a      	ldr	r2, [pc, #40]	@ (800c274 <sys_check_timeouts+0x70>)
 800c24a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c24c:	68b9      	ldr	r1, [r7, #8]
 800c24e:	2007      	movs	r0, #7
 800c250:	f7fe fe74 	bl	800af3c <memp_free>
    if (handler != NULL) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d0da      	beq.n	800c210 <sys_check_timeouts+0xc>
      handler(arg);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6838      	ldr	r0, [r7, #0]
 800c25e:	4798      	blx	r3
  do {
 800c260:	e7d6      	b.n	800c210 <sys_check_timeouts+0xc>
      return;
 800c262:	bf00      	nop
 800c264:	e000      	b.n	800c268 <sys_check_timeouts+0x64>
      return;
 800c266:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	2000cf90 	.word	0x2000cf90
 800c274:	2000cf94 	.word	0x2000cf94

0800c278 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c27e:	4b16      	ldr	r3, [pc, #88]	@ (800c2d8 <sys_timeouts_sleeptime+0x60>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d102      	bne.n	800c28c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c286:	f04f 33ff 	mov.w	r3, #4294967295
 800c28a:	e020      	b.n	800c2ce <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800c28c:	f7f9 fba8 	bl	80059e0 <sys_now>
 800c290:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c292:	4b11      	ldr	r3, [pc, #68]	@ (800c2d8 <sys_timeouts_sleeptime+0x60>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	685a      	ldr	r2, [r3, #4]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	0fdb      	lsrs	r3, r3, #31
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <sys_timeouts_sleeptime+0x34>
    return 0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e010      	b.n	800c2ce <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800c2ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d8 <sys_timeouts_sleeptime+0x60>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	685a      	ldr	r2, [r3, #4]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	da06      	bge.n	800c2cc <sys_timeouts_sleeptime+0x54>
 800c2be:	4b07      	ldr	r3, [pc, #28]	@ (800c2dc <sys_timeouts_sleeptime+0x64>)
 800c2c0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800c2c4:	4906      	ldr	r1, [pc, #24]	@ (800c2e0 <sys_timeouts_sleeptime+0x68>)
 800c2c6:	4807      	ldr	r0, [pc, #28]	@ (800c2e4 <sys_timeouts_sleeptime+0x6c>)
 800c2c8:	f003 fba4 	bl	800fa14 <iprintf>
    return ret;
 800c2cc:	683b      	ldr	r3, [r7, #0]
  }
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	2000cf90 	.word	0x2000cf90
 800c2dc:	08011da0 	.word	0x08011da0
 800c2e0:	08011e74 	.word	0x08011e74
 800c2e4:	08011e14 	.word	0x08011e14

0800c2e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c2ec:	f003 fa92 	bl	800f814 <rand>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	4b01      	ldr	r3, [pc, #4]	@ (800c308 <udp_init+0x20>)
 800c302:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c304:	bf00      	nop
 800c306:	bd80      	pop	{r7, pc}
 800c308:	2000002c 	.word	0x2000002c

0800c30c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c316:	4b17      	ldr	r3, [pc, #92]	@ (800c374 <udp_new_port+0x68>)
 800c318:	881b      	ldrh	r3, [r3, #0]
 800c31a:	1c5a      	adds	r2, r3, #1
 800c31c:	b291      	uxth	r1, r2
 800c31e:	4a15      	ldr	r2, [pc, #84]	@ (800c374 <udp_new_port+0x68>)
 800c320:	8011      	strh	r1, [r2, #0]
 800c322:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c326:	4293      	cmp	r3, r2
 800c328:	d103      	bne.n	800c332 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c32a:	4b12      	ldr	r3, [pc, #72]	@ (800c374 <udp_new_port+0x68>)
 800c32c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800c330:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c332:	4b11      	ldr	r3, [pc, #68]	@ (800c378 <udp_new_port+0x6c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	603b      	str	r3, [r7, #0]
 800c338:	e011      	b.n	800c35e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	8a5a      	ldrh	r2, [r3, #18]
 800c33e:	4b0d      	ldr	r3, [pc, #52]	@ (800c374 <udp_new_port+0x68>)
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d108      	bne.n	800c358 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c346:	88fb      	ldrh	r3, [r7, #6]
 800c348:	3301      	adds	r3, #1
 800c34a:	80fb      	strh	r3, [r7, #6]
 800c34c:	88fb      	ldrh	r3, [r7, #6]
 800c34e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c352:	d3e0      	bcc.n	800c316 <udp_new_port+0xa>
        return 0;
 800c354:	2300      	movs	r3, #0
 800c356:	e007      	b.n	800c368 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	603b      	str	r3, [r7, #0]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1ea      	bne.n	800c33a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c364:	4b03      	ldr	r3, [pc, #12]	@ (800c374 <udp_new_port+0x68>)
 800c366:	881b      	ldrh	r3, [r3, #0]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	2000002c 	.word	0x2000002c
 800c378:	2000cf98 	.word	0x2000cf98

0800c37c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	4613      	mov	r3, r2
 800c388:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d105      	bne.n	800c39c <udp_input_local_match+0x20>
 800c390:	4b27      	ldr	r3, [pc, #156]	@ (800c430 <udp_input_local_match+0xb4>)
 800c392:	2287      	movs	r2, #135	@ 0x87
 800c394:	4927      	ldr	r1, [pc, #156]	@ (800c434 <udp_input_local_match+0xb8>)
 800c396:	4828      	ldr	r0, [pc, #160]	@ (800c438 <udp_input_local_match+0xbc>)
 800c398:	f003 fb3c 	bl	800fa14 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d105      	bne.n	800c3ae <udp_input_local_match+0x32>
 800c3a2:	4b23      	ldr	r3, [pc, #140]	@ (800c430 <udp_input_local_match+0xb4>)
 800c3a4:	2288      	movs	r2, #136	@ 0x88
 800c3a6:	4925      	ldr	r1, [pc, #148]	@ (800c43c <udp_input_local_match+0xc0>)
 800c3a8:	4823      	ldr	r0, [pc, #140]	@ (800c438 <udp_input_local_match+0xbc>)
 800c3aa:	f003 fb33 	bl	800fa14 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	7a1b      	ldrb	r3, [r3, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00b      	beq.n	800c3ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	7a1a      	ldrb	r2, [r3, #8]
 800c3ba:	4b21      	ldr	r3, [pc, #132]	@ (800c440 <udp_input_local_match+0xc4>)
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d001      	beq.n	800c3ce <udp_input_local_match+0x52>
    return 0;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e02b      	b.n	800c426 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c3ce:	79fb      	ldrb	r3, [r7, #7]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d018      	beq.n	800c406 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d013      	beq.n	800c402 <udp_input_local_match+0x86>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00f      	beq.n	800c402 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c3e2:	4b17      	ldr	r3, [pc, #92]	@ (800c440 <udp_input_local_match+0xc4>)
 800c3e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ea:	d00a      	beq.n	800c402 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	4b13      	ldr	r3, [pc, #76]	@ (800c440 <udp_input_local_match+0xc4>)
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	405a      	eors	r2, r3
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	3308      	adds	r3, #8
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d110      	bne.n	800c424 <udp_input_local_match+0xa8>
          return 1;
 800c402:	2301      	movs	r3, #1
 800c404:	e00f      	b.n	800c426 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d009      	beq.n	800c420 <udp_input_local_match+0xa4>
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d005      	beq.n	800c420 <udp_input_local_match+0xa4>
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	4b09      	ldr	r3, [pc, #36]	@ (800c440 <udp_input_local_match+0xc4>)
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d101      	bne.n	800c424 <udp_input_local_match+0xa8>
        return 1;
 800c420:	2301      	movs	r3, #1
 800c422:	e000      	b.n	800c426 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	08011e88 	.word	0x08011e88
 800c434:	08011eb8 	.word	0x08011eb8
 800c438:	08011edc 	.word	0x08011edc
 800c43c:	08011f04 	.word	0x08011f04
 800c440:	20009d70 	.word	0x20009d70

0800c444 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c444:	b590      	push	{r4, r7, lr}
 800c446:	b08d      	sub	sp, #52	@ 0x34
 800c448:	af02      	add	r7, sp, #8
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d105      	bne.n	800c464 <udp_input+0x20>
 800c458:	4b7c      	ldr	r3, [pc, #496]	@ (800c64c <udp_input+0x208>)
 800c45a:	22cf      	movs	r2, #207	@ 0xcf
 800c45c:	497c      	ldr	r1, [pc, #496]	@ (800c650 <udp_input+0x20c>)
 800c45e:	487d      	ldr	r0, [pc, #500]	@ (800c654 <udp_input+0x210>)
 800c460:	f003 fad8 	bl	800fa14 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <udp_input+0x32>
 800c46a:	4b78      	ldr	r3, [pc, #480]	@ (800c64c <udp_input+0x208>)
 800c46c:	22d0      	movs	r2, #208	@ 0xd0
 800c46e:	497a      	ldr	r1, [pc, #488]	@ (800c658 <udp_input+0x214>)
 800c470:	4878      	ldr	r0, [pc, #480]	@ (800c654 <udp_input+0x210>)
 800c472:	f003 facf 	bl	800fa14 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	895b      	ldrh	r3, [r3, #10]
 800c47a:	2b07      	cmp	r3, #7
 800c47c:	d803      	bhi.n	800c486 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7ff fba0 	bl	800bbc4 <pbuf_free>
    goto end;
 800c484:	e0de      	b.n	800c644 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c48c:	4b73      	ldr	r3, [pc, #460]	@ (800c65c <udp_input+0x218>)
 800c48e:	695b      	ldr	r3, [r3, #20]
 800c490:	4a72      	ldr	r2, [pc, #456]	@ (800c65c <udp_input+0x218>)
 800c492:	6812      	ldr	r2, [r2, #0]
 800c494:	4611      	mov	r1, r2
 800c496:	4618      	mov	r0, r3
 800c498:	f001 ff76 	bl	800e388 <ip4_addr_isbroadcast_u32>
 800c49c:	4603      	mov	r3, r0
 800c49e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	881b      	ldrh	r3, [r3, #0]
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fd fffc 	bl	800a4a4 <lwip_htons>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	885b      	ldrh	r3, [r3, #2]
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fd fff4 	bl	800a4a4 <lwip_htons>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4cc:	4b64      	ldr	r3, [pc, #400]	@ (800c660 <udp_input+0x21c>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4d2:	e054      	b.n	800c57e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d6:	8a5b      	ldrh	r3, [r3, #18]
 800c4d8:	89fa      	ldrh	r2, [r7, #14]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d14a      	bne.n	800c574 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c4de:	7cfb      	ldrb	r3, [r7, #19]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4e6:	f7ff ff49 	bl	800c37c <udp_input_local_match>
 800c4ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d041      	beq.n	800c574 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	7c1b      	ldrb	r3, [r3, #16]
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d11d      	bne.n	800c538 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d102      	bne.n	800c508 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	61fb      	str	r3, [r7, #28]
 800c506:	e017      	b.n	800c538 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c508:	7cfb      	ldrb	r3, [r7, #19]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d014      	beq.n	800c538 <udp_input+0xf4>
 800c50e:	4b53      	ldr	r3, [pc, #332]	@ (800c65c <udp_input+0x218>)
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c516:	d10f      	bne.n	800c538 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	3304      	adds	r3, #4
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	429a      	cmp	r2, r3
 800c524:	d008      	beq.n	800c538 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	3304      	adds	r3, #4
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	d101      	bne.n	800c538 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c536:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53a:	8a9b      	ldrh	r3, [r3, #20]
 800c53c:	8a3a      	ldrh	r2, [r7, #16]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d118      	bne.n	800c574 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c544:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c546:	2b00      	cmp	r3, #0
 800c548:	d005      	beq.n	800c556 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	4b43      	ldr	r3, [pc, #268]	@ (800c65c <udp_input+0x218>)
 800c550:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c552:	429a      	cmp	r2, r3
 800c554:	d10e      	bne.n	800c574 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d014      	beq.n	800c586 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55e:	68da      	ldr	r2, [r3, #12]
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c564:	4b3e      	ldr	r3, [pc, #248]	@ (800c660 <udp_input+0x21c>)
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c56c:	4a3c      	ldr	r2, [pc, #240]	@ (800c660 <udp_input+0x21c>)
 800c56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c570:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c572:	e008      	b.n	800c586 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c576:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1a7      	bne.n	800c4d4 <udp_input+0x90>
 800c584:	e000      	b.n	800c588 <udp_input+0x144>
        break;
 800c586:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <udp_input+0x15a>
    for_us = 1;
 800c598:	2301      	movs	r3, #1
 800c59a:	76fb      	strb	r3, [r7, #27]
 800c59c:	e00a      	b.n	800c5b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	4b2d      	ldr	r3, [pc, #180]	@ (800c65c <udp_input+0x218>)
 800c5a6:	695b      	ldr	r3, [r3, #20]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	bf0c      	ite	eq
 800c5ac:	2301      	moveq	r3, #1
 800c5ae:	2300      	movne	r3, #0
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c5b4:	7efb      	ldrb	r3, [r7, #27]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d041      	beq.n	800c63e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c5ba:	2108      	movs	r1, #8
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7ff fa7b 	bl	800bab8 <pbuf_remove_header>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00a      	beq.n	800c5de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c5c8:	4b20      	ldr	r3, [pc, #128]	@ (800c64c <udp_input+0x208>)
 800c5ca:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c5ce:	4925      	ldr	r1, [pc, #148]	@ (800c664 <udp_input+0x220>)
 800c5d0:	4820      	ldr	r0, [pc, #128]	@ (800c654 <udp_input+0x210>)
 800c5d2:	f003 fa1f 	bl	800fa14 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff faf4 	bl	800bbc4 <pbuf_free>
      goto end;
 800c5dc:	e032      	b.n	800c644 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d012      	beq.n	800c60a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00a      	beq.n	800c602 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	699c      	ldr	r4, [r3, #24]
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	69d8      	ldr	r0, [r3, #28]
 800c5f4:	8a3b      	ldrh	r3, [r7, #16]
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c668 <udp_input+0x224>)
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c600:	e021      	b.n	800c646 <udp_input+0x202>
        pbuf_free(p);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff fade 	bl	800bbc4 <pbuf_free>
        goto end;
 800c608:	e01c      	b.n	800c644 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c60a:	7cfb      	ldrb	r3, [r7, #19]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d112      	bne.n	800c636 <udp_input+0x1f2>
 800c610:	4b12      	ldr	r3, [pc, #72]	@ (800c65c <udp_input+0x218>)
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c618:	2be0      	cmp	r3, #224	@ 0xe0
 800c61a:	d00c      	beq.n	800c636 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c61c:	4b0f      	ldr	r3, [pc, #60]	@ (800c65c <udp_input+0x218>)
 800c61e:	899b      	ldrh	r3, [r3, #12]
 800c620:	3308      	adds	r3, #8
 800c622:	b29b      	uxth	r3, r3
 800c624:	b21b      	sxth	r3, r3
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff fab8 	bl	800bb9e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c62e:	2103      	movs	r1, #3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f001 fb93 	bl	800dd5c <icmp_dest_unreach>
      pbuf_free(p);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7ff fac4 	bl	800bbc4 <pbuf_free>
  return;
 800c63c:	e003      	b.n	800c646 <udp_input+0x202>
    pbuf_free(p);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7ff fac0 	bl	800bbc4 <pbuf_free>
  return;
 800c644:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c646:	372c      	adds	r7, #44	@ 0x2c
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd90      	pop	{r4, r7, pc}
 800c64c:	08011e88 	.word	0x08011e88
 800c650:	08011f2c 	.word	0x08011f2c
 800c654:	08011edc 	.word	0x08011edc
 800c658:	08011f44 	.word	0x08011f44
 800c65c:	20009d70 	.word	0x20009d70
 800c660:	2000cf98 	.word	0x2000cf98
 800c664:	08011f60 	.word	0x08011f60
 800c668:	20009d80 	.word	0x20009d80

0800c66c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d109      	bne.n	800c690 <udp_send+0x24>
 800c67c:	4b11      	ldr	r3, [pc, #68]	@ (800c6c4 <udp_send+0x58>)
 800c67e:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800c682:	4911      	ldr	r1, [pc, #68]	@ (800c6c8 <udp_send+0x5c>)
 800c684:	4811      	ldr	r0, [pc, #68]	@ (800c6cc <udp_send+0x60>)
 800c686:	f003 f9c5 	bl	800fa14 <iprintf>
 800c68a:	f06f 030f 	mvn.w	r3, #15
 800c68e:	e015      	b.n	800c6bc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d109      	bne.n	800c6aa <udp_send+0x3e>
 800c696:	4b0b      	ldr	r3, [pc, #44]	@ (800c6c4 <udp_send+0x58>)
 800c698:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800c69c:	490c      	ldr	r1, [pc, #48]	@ (800c6d0 <udp_send+0x64>)
 800c69e:	480b      	ldr	r0, [pc, #44]	@ (800c6cc <udp_send+0x60>)
 800c6a0:	f003 f9b8 	bl	800fa14 <iprintf>
 800c6a4:	f06f 030f 	mvn.w	r3, #15
 800c6a8:	e008      	b.n	800c6bc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	1d1a      	adds	r2, r3, #4
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	8a9b      	ldrh	r3, [r3, #20]
 800c6b2:	6839      	ldr	r1, [r7, #0]
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 f80d 	bl	800c6d4 <udp_sendto>
 800c6ba:	4603      	mov	r3, r0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	08011e88 	.word	0x08011e88
 800c6c8:	08011f7c 	.word	0x08011f7c
 800c6cc:	08011edc 	.word	0x08011edc
 800c6d0:	08011f94 	.word	0x08011f94

0800c6d4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b088      	sub	sp, #32
 800c6d8:	af02      	add	r7, sp, #8
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d109      	bne.n	800c6fc <udp_sendto+0x28>
 800c6e8:	4b23      	ldr	r3, [pc, #140]	@ (800c778 <udp_sendto+0xa4>)
 800c6ea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c6ee:	4923      	ldr	r1, [pc, #140]	@ (800c77c <udp_sendto+0xa8>)
 800c6f0:	4823      	ldr	r0, [pc, #140]	@ (800c780 <udp_sendto+0xac>)
 800c6f2:	f003 f98f 	bl	800fa14 <iprintf>
 800c6f6:	f06f 030f 	mvn.w	r3, #15
 800c6fa:	e038      	b.n	800c76e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d109      	bne.n	800c716 <udp_sendto+0x42>
 800c702:	4b1d      	ldr	r3, [pc, #116]	@ (800c778 <udp_sendto+0xa4>)
 800c704:	f240 2219 	movw	r2, #537	@ 0x219
 800c708:	491e      	ldr	r1, [pc, #120]	@ (800c784 <udp_sendto+0xb0>)
 800c70a:	481d      	ldr	r0, [pc, #116]	@ (800c780 <udp_sendto+0xac>)
 800c70c:	f003 f982 	bl	800fa14 <iprintf>
 800c710:	f06f 030f 	mvn.w	r3, #15
 800c714:	e02b      	b.n	800c76e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d109      	bne.n	800c730 <udp_sendto+0x5c>
 800c71c:	4b16      	ldr	r3, [pc, #88]	@ (800c778 <udp_sendto+0xa4>)
 800c71e:	f240 221a 	movw	r2, #538	@ 0x21a
 800c722:	4919      	ldr	r1, [pc, #100]	@ (800c788 <udp_sendto+0xb4>)
 800c724:	4816      	ldr	r0, [pc, #88]	@ (800c780 <udp_sendto+0xac>)
 800c726:	f003 f975 	bl	800fa14 <iprintf>
 800c72a:	f06f 030f 	mvn.w	r3, #15
 800c72e:	e01e      	b.n	800c76e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	7a1b      	ldrb	r3, [r3, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d006      	beq.n	800c746 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	7a1b      	ldrb	r3, [r3, #8]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe ff0f 	bl	800b560 <netif_get_by_index>
 800c742:	6178      	str	r0, [r7, #20]
 800c744:	e003      	b.n	800c74e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f001 fb92 	bl	800de70 <ip4_route>
 800c74c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d102      	bne.n	800c75a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c754:	f06f 0303 	mvn.w	r3, #3
 800c758:	e009      	b.n	800c76e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c75a:	887a      	ldrh	r2, [r7, #2]
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	4613      	mov	r3, r2
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	68b9      	ldr	r1, [r7, #8]
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f000 f810 	bl	800c78c <udp_sendto_if>
 800c76c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3718      	adds	r7, #24
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	08011e88 	.word	0x08011e88
 800c77c:	08011fac 	.word	0x08011fac
 800c780:	08011edc 	.word	0x08011edc
 800c784:	08011fc4 	.word	0x08011fc4
 800c788:	08011fe0 	.word	0x08011fe0

0800c78c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b088      	sub	sp, #32
 800c790:	af02      	add	r7, sp, #8
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d109      	bne.n	800c7b4 <udp_sendto_if+0x28>
 800c7a0:	4b2e      	ldr	r3, [pc, #184]	@ (800c85c <udp_sendto_if+0xd0>)
 800c7a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c7a6:	492e      	ldr	r1, [pc, #184]	@ (800c860 <udp_sendto_if+0xd4>)
 800c7a8:	482e      	ldr	r0, [pc, #184]	@ (800c864 <udp_sendto_if+0xd8>)
 800c7aa:	f003 f933 	bl	800fa14 <iprintf>
 800c7ae:	f06f 030f 	mvn.w	r3, #15
 800c7b2:	e04f      	b.n	800c854 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d109      	bne.n	800c7ce <udp_sendto_if+0x42>
 800c7ba:	4b28      	ldr	r3, [pc, #160]	@ (800c85c <udp_sendto_if+0xd0>)
 800c7bc:	f240 2281 	movw	r2, #641	@ 0x281
 800c7c0:	4929      	ldr	r1, [pc, #164]	@ (800c868 <udp_sendto_if+0xdc>)
 800c7c2:	4828      	ldr	r0, [pc, #160]	@ (800c864 <udp_sendto_if+0xd8>)
 800c7c4:	f003 f926 	bl	800fa14 <iprintf>
 800c7c8:	f06f 030f 	mvn.w	r3, #15
 800c7cc:	e042      	b.n	800c854 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d109      	bne.n	800c7e8 <udp_sendto_if+0x5c>
 800c7d4:	4b21      	ldr	r3, [pc, #132]	@ (800c85c <udp_sendto_if+0xd0>)
 800c7d6:	f240 2282 	movw	r2, #642	@ 0x282
 800c7da:	4924      	ldr	r1, [pc, #144]	@ (800c86c <udp_sendto_if+0xe0>)
 800c7dc:	4821      	ldr	r0, [pc, #132]	@ (800c864 <udp_sendto_if+0xd8>)
 800c7de:	f003 f919 	bl	800fa14 <iprintf>
 800c7e2:	f06f 030f 	mvn.w	r3, #15
 800c7e6:	e035      	b.n	800c854 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d109      	bne.n	800c802 <udp_sendto_if+0x76>
 800c7ee:	4b1b      	ldr	r3, [pc, #108]	@ (800c85c <udp_sendto_if+0xd0>)
 800c7f0:	f240 2283 	movw	r2, #643	@ 0x283
 800c7f4:	491e      	ldr	r1, [pc, #120]	@ (800c870 <udp_sendto_if+0xe4>)
 800c7f6:	481b      	ldr	r0, [pc, #108]	@ (800c864 <udp_sendto_if+0xd8>)
 800c7f8:	f003 f90c 	bl	800fa14 <iprintf>
 800c7fc:	f06f 030f 	mvn.w	r3, #15
 800c800:	e028      	b.n	800c854 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d009      	beq.n	800c81c <udp_sendto_if+0x90>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d005      	beq.n	800c81c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c818:	2be0      	cmp	r3, #224	@ 0xe0
 800c81a:	d103      	bne.n	800c824 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c81c:	6a3b      	ldr	r3, [r7, #32]
 800c81e:	3304      	adds	r3, #4
 800c820:	617b      	str	r3, [r7, #20]
 800c822:	e00b      	b.n	800c83c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	3304      	adds	r3, #4
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d002      	beq.n	800c838 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c832:	f06f 0303 	mvn.w	r3, #3
 800c836:	e00d      	b.n	800c854 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c83c:	887a      	ldrh	r2, [r7, #2]
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	9301      	str	r3, [sp, #4]
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	4613      	mov	r3, r2
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	68b9      	ldr	r1, [r7, #8]
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f000 f811 	bl	800c874 <udp_sendto_if_src>
 800c852:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c854:	4618      	mov	r0, r3
 800c856:	3718      	adds	r7, #24
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	08011e88 	.word	0x08011e88
 800c860:	08011ffc 	.word	0x08011ffc
 800c864:	08011edc 	.word	0x08011edc
 800c868:	08012018 	.word	0x08012018
 800c86c:	08012034 	.word	0x08012034
 800c870:	08012054 	.word	0x08012054

0800c874 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08c      	sub	sp, #48	@ 0x30
 800c878:	af04      	add	r7, sp, #16
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d109      	bne.n	800c89c <udp_sendto_if_src+0x28>
 800c888:	4b65      	ldr	r3, [pc, #404]	@ (800ca20 <udp_sendto_if_src+0x1ac>)
 800c88a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c88e:	4965      	ldr	r1, [pc, #404]	@ (800ca24 <udp_sendto_if_src+0x1b0>)
 800c890:	4865      	ldr	r0, [pc, #404]	@ (800ca28 <udp_sendto_if_src+0x1b4>)
 800c892:	f003 f8bf 	bl	800fa14 <iprintf>
 800c896:	f06f 030f 	mvn.w	r3, #15
 800c89a:	e0bc      	b.n	800ca16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d109      	bne.n	800c8b6 <udp_sendto_if_src+0x42>
 800c8a2:	4b5f      	ldr	r3, [pc, #380]	@ (800ca20 <udp_sendto_if_src+0x1ac>)
 800c8a4:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800c8a8:	4960      	ldr	r1, [pc, #384]	@ (800ca2c <udp_sendto_if_src+0x1b8>)
 800c8aa:	485f      	ldr	r0, [pc, #380]	@ (800ca28 <udp_sendto_if_src+0x1b4>)
 800c8ac:	f003 f8b2 	bl	800fa14 <iprintf>
 800c8b0:	f06f 030f 	mvn.w	r3, #15
 800c8b4:	e0af      	b.n	800ca16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d109      	bne.n	800c8d0 <udp_sendto_if_src+0x5c>
 800c8bc:	4b58      	ldr	r3, [pc, #352]	@ (800ca20 <udp_sendto_if_src+0x1ac>)
 800c8be:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800c8c2:	495b      	ldr	r1, [pc, #364]	@ (800ca30 <udp_sendto_if_src+0x1bc>)
 800c8c4:	4858      	ldr	r0, [pc, #352]	@ (800ca28 <udp_sendto_if_src+0x1b4>)
 800c8c6:	f003 f8a5 	bl	800fa14 <iprintf>
 800c8ca:	f06f 030f 	mvn.w	r3, #15
 800c8ce:	e0a2      	b.n	800ca16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d109      	bne.n	800c8ea <udp_sendto_if_src+0x76>
 800c8d6:	4b52      	ldr	r3, [pc, #328]	@ (800ca20 <udp_sendto_if_src+0x1ac>)
 800c8d8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800c8dc:	4955      	ldr	r1, [pc, #340]	@ (800ca34 <udp_sendto_if_src+0x1c0>)
 800c8de:	4852      	ldr	r0, [pc, #328]	@ (800ca28 <udp_sendto_if_src+0x1b4>)
 800c8e0:	f003 f898 	bl	800fa14 <iprintf>
 800c8e4:	f06f 030f 	mvn.w	r3, #15
 800c8e8:	e095      	b.n	800ca16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d109      	bne.n	800c904 <udp_sendto_if_src+0x90>
 800c8f0:	4b4b      	ldr	r3, [pc, #300]	@ (800ca20 <udp_sendto_if_src+0x1ac>)
 800c8f2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800c8f6:	4950      	ldr	r1, [pc, #320]	@ (800ca38 <udp_sendto_if_src+0x1c4>)
 800c8f8:	484b      	ldr	r0, [pc, #300]	@ (800ca28 <udp_sendto_if_src+0x1b4>)
 800c8fa:	f003 f88b 	bl	800fa14 <iprintf>
 800c8fe:	f06f 030f 	mvn.w	r3, #15
 800c902:	e088      	b.n	800ca16 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	8a5b      	ldrh	r3, [r3, #18]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10f      	bne.n	800c92c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c90c:	68f9      	ldr	r1, [r7, #12]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	8a5b      	ldrh	r3, [r3, #18]
 800c912:	461a      	mov	r2, r3
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f893 	bl	800ca40 <udp_bind>
 800c91a:	4603      	mov	r3, r0
 800c91c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c91e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c926:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c92a:	e074      	b.n	800ca16 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	891b      	ldrh	r3, [r3, #8]
 800c930:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800c934:	4293      	cmp	r3, r2
 800c936:	d902      	bls.n	800c93e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c938:	f04f 33ff 	mov.w	r3, #4294967295
 800c93c:	e06b      	b.n	800ca16 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c93e:	2108      	movs	r1, #8
 800c940:	68b8      	ldr	r0, [r7, #8]
 800c942:	f7ff f8a9 	bl	800ba98 <pbuf_add_header>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d015      	beq.n	800c978 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c94c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c950:	2108      	movs	r1, #8
 800c952:	2022      	movs	r0, #34	@ 0x22
 800c954:	f7fe fe54 	bl	800b600 <pbuf_alloc>
 800c958:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d102      	bne.n	800c966 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c960:	f04f 33ff 	mov.w	r3, #4294967295
 800c964:	e057      	b.n	800ca16 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	891b      	ldrh	r3, [r3, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d006      	beq.n	800c97c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c96e:	68b9      	ldr	r1, [r7, #8]
 800c970:	69f8      	ldr	r0, [r7, #28]
 800c972:	f7ff fa4b 	bl	800be0c <pbuf_chain>
 800c976:	e001      	b.n	800c97c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	895b      	ldrh	r3, [r3, #10]
 800c980:	2b07      	cmp	r3, #7
 800c982:	d806      	bhi.n	800c992 <udp_sendto_if_src+0x11e>
 800c984:	4b26      	ldr	r3, [pc, #152]	@ (800ca20 <udp_sendto_if_src+0x1ac>)
 800c986:	f240 320d 	movw	r2, #781	@ 0x30d
 800c98a:	492c      	ldr	r1, [pc, #176]	@ (800ca3c <udp_sendto_if_src+0x1c8>)
 800c98c:	4826      	ldr	r0, [pc, #152]	@ (800ca28 <udp_sendto_if_src+0x1b4>)
 800c98e:	f003 f841 	bl	800fa14 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	8a5b      	ldrh	r3, [r3, #18]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fd fd81 	bl	800a4a4 <lwip_htons>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c9aa:	887b      	ldrh	r3, [r7, #2]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fd fd79 	bl	800a4a4 <lwip_htons>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	719a      	strb	r2, [r3, #6]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	891b      	ldrh	r3, [r3, #8]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fd fd6b 	bl	800a4a4 <lwip_htons>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c9d6:	2311      	movs	r3, #17
 800c9d8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	7adb      	ldrb	r3, [r3, #11]
 800c9de:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	7a9b      	ldrb	r3, [r3, #10]
 800c9e4:	7cb9      	ldrb	r1, [r7, #18]
 800c9e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9e8:	9202      	str	r2, [sp, #8]
 800c9ea:	7cfa      	ldrb	r2, [r7, #19]
 800c9ec:	9201      	str	r2, [sp, #4]
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9f6:	69f8      	ldr	r0, [r7, #28]
 800c9f8:	f001 fc18 	bl	800e22c <ip4_output_if_src>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ca00:	69fa      	ldr	r2, [r7, #28]
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d004      	beq.n	800ca12 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800ca08:	69f8      	ldr	r0, [r7, #28]
 800ca0a:	f7ff f8db 	bl	800bbc4 <pbuf_free>
    q = NULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800ca12:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3720      	adds	r7, #32
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	08011e88 	.word	0x08011e88
 800ca24:	08012074 	.word	0x08012074
 800ca28:	08011edc 	.word	0x08011edc
 800ca2c:	08012094 	.word	0x08012094
 800ca30:	080120b4 	.word	0x080120b4
 800ca34:	080120d8 	.word	0x080120d8
 800ca38:	080120fc 	.word	0x080120fc
 800ca3c:	08012120 	.word	0x08012120

0800ca40 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d101      	bne.n	800ca58 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ca54:	4b39      	ldr	r3, [pc, #228]	@ (800cb3c <udp_bind+0xfc>)
 800ca56:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d109      	bne.n	800ca72 <udp_bind+0x32>
 800ca5e:	4b38      	ldr	r3, [pc, #224]	@ (800cb40 <udp_bind+0x100>)
 800ca60:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800ca64:	4937      	ldr	r1, [pc, #220]	@ (800cb44 <udp_bind+0x104>)
 800ca66:	4838      	ldr	r0, [pc, #224]	@ (800cb48 <udp_bind+0x108>)
 800ca68:	f002 ffd4 	bl	800fa14 <iprintf>
 800ca6c:	f06f 030f 	mvn.w	r3, #15
 800ca70:	e060      	b.n	800cb34 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ca76:	4b35      	ldr	r3, [pc, #212]	@ (800cb4c <udp_bind+0x10c>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	617b      	str	r3, [r7, #20]
 800ca7c:	e009      	b.n	800ca92 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d102      	bne.n	800ca8c <udp_bind+0x4c>
      rebind = 1;
 800ca86:	2301      	movs	r3, #1
 800ca88:	74fb      	strb	r3, [r7, #19]
      break;
 800ca8a:	e005      	b.n	800ca98 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	617b      	str	r3, [r7, #20]
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1f2      	bne.n	800ca7e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ca98:	88fb      	ldrh	r3, [r7, #6]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d109      	bne.n	800cab2 <udp_bind+0x72>
    port = udp_new_port();
 800ca9e:	f7ff fc35 	bl	800c30c <udp_new_port>
 800caa2:	4603      	mov	r3, r0
 800caa4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800caa6:	88fb      	ldrh	r3, [r7, #6]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d12c      	bne.n	800cb06 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800caac:	f06f 0307 	mvn.w	r3, #7
 800cab0:	e040      	b.n	800cb34 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cab2:	4b26      	ldr	r3, [pc, #152]	@ (800cb4c <udp_bind+0x10c>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	617b      	str	r3, [r7, #20]
 800cab8:	e022      	b.n	800cb00 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d01b      	beq.n	800cafa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	8a5b      	ldrh	r3, [r3, #18]
 800cac6:	88fa      	ldrh	r2, [r7, #6]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d116      	bne.n	800cafa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d00d      	beq.n	800caf4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00a      	beq.n	800caf4 <udp_bind+0xb4>
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d006      	beq.n	800caf4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800cae6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d003      	beq.n	800caf4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d102      	bne.n	800cafa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800caf4:	f06f 0307 	mvn.w	r3, #7
 800caf8:	e01c      	b.n	800cb34 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	617b      	str	r3, [r7, #20]
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1d9      	bne.n	800caba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d002      	beq.n	800cb12 <udp_bind+0xd2>
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	e000      	b.n	800cb14 <udp_bind+0xd4>
 800cb12:	2300      	movs	r3, #0
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	88fa      	ldrh	r2, [r7, #6]
 800cb1c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800cb1e:	7cfb      	ldrb	r3, [r7, #19]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800cb24:	4b09      	ldr	r3, [pc, #36]	@ (800cb4c <udp_bind+0x10c>)
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800cb2c:	4a07      	ldr	r2, [pc, #28]	@ (800cb4c <udp_bind+0x10c>)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3718      	adds	r7, #24
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	08012a38 	.word	0x08012a38
 800cb40:	08011e88 	.word	0x08011e88
 800cb44:	08012150 	.word	0x08012150
 800cb48:	08011edc 	.word	0x08011edc
 800cb4c:	2000cf98 	.word	0x2000cf98

0800cb50 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d107      	bne.n	800cb72 <udp_recv+0x22>
 800cb62:	4b08      	ldr	r3, [pc, #32]	@ (800cb84 <udp_recv+0x34>)
 800cb64:	f240 428a 	movw	r2, #1162	@ 0x48a
 800cb68:	4907      	ldr	r1, [pc, #28]	@ (800cb88 <udp_recv+0x38>)
 800cb6a:	4808      	ldr	r0, [pc, #32]	@ (800cb8c <udp_recv+0x3c>)
 800cb6c:	f002 ff52 	bl	800fa14 <iprintf>
 800cb70:	e005      	b.n	800cb7e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	61da      	str	r2, [r3, #28]
}
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	08011e88 	.word	0x08011e88
 800cb88:	080121bc 	.word	0x080121bc
 800cb8c:	08011edc 	.word	0x08011edc

0800cb90 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d107      	bne.n	800cbae <udp_remove+0x1e>
 800cb9e:	4b19      	ldr	r3, [pc, #100]	@ (800cc04 <udp_remove+0x74>)
 800cba0:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800cba4:	4918      	ldr	r1, [pc, #96]	@ (800cc08 <udp_remove+0x78>)
 800cba6:	4819      	ldr	r0, [pc, #100]	@ (800cc0c <udp_remove+0x7c>)
 800cba8:	f002 ff34 	bl	800fa14 <iprintf>
 800cbac:	e026      	b.n	800cbfc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800cbae:	4b18      	ldr	r3, [pc, #96]	@ (800cc10 <udp_remove+0x80>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d105      	bne.n	800cbc4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800cbb8:	4b15      	ldr	r3, [pc, #84]	@ (800cc10 <udp_remove+0x80>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	4a14      	ldr	r2, [pc, #80]	@ (800cc10 <udp_remove+0x80>)
 800cbc0:	6013      	str	r3, [r2, #0]
 800cbc2:	e017      	b.n	800cbf4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cbc4:	4b12      	ldr	r3, [pc, #72]	@ (800cc10 <udp_remove+0x80>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	60fb      	str	r3, [r7, #12]
 800cbca:	e010      	b.n	800cbee <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d009      	beq.n	800cbe8 <udp_remove+0x58>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d104      	bne.n	800cbe8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	68da      	ldr	r2, [r3, #12]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	60da      	str	r2, [r3, #12]
        break;
 800cbe6:	e005      	b.n	800cbf4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1eb      	bne.n	800cbcc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800cbf4:	6879      	ldr	r1, [r7, #4]
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	f7fe f9a0 	bl	800af3c <memp_free>
}
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	08011e88 	.word	0x08011e88
 800cc08:	080121d4 	.word	0x080121d4
 800cc0c:	08011edc 	.word	0x08011edc
 800cc10:	2000cf98 	.word	0x2000cf98

0800cc14 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	f7fe f918 	bl	800ae50 <memp_malloc>
 800cc20:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d007      	beq.n	800cc38 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cc28:	2220      	movs	r2, #32
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f002 ff56 	bl	800fade <memset>
    pcb->ttl = UDP_TTL;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	22ff      	movs	r2, #255	@ 0xff
 800cc36:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800cc38:	687b      	ldr	r3, [r7, #4]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b084      	sub	sp, #16
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	4603      	mov	r3, r0
 800cc4a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800cc4c:	f7ff ffe2 	bl	800cc14 <udp_new>
 800cc50:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800cc52:	68fb      	ldr	r3, [r7, #12]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d01e      	beq.n	800ccaa <udp_netif_ip_addr_changed+0x4e>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d01a      	beq.n	800ccaa <udp_netif_ip_addr_changed+0x4e>
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d017      	beq.n	800ccaa <udp_netif_ip_addr_changed+0x4e>
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d013      	beq.n	800ccaa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc82:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb8 <udp_netif_ip_addr_changed+0x5c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	e00c      	b.n	800cca4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d103      	bne.n	800cc9e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	60fb      	str	r3, [r7, #12]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1ef      	bne.n	800cc8a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ccaa:	bf00      	nop
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	2000cf98 	.word	0x2000cf98

0800ccbc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ccc4:	4915      	ldr	r1, [pc, #84]	@ (800cd1c <etharp_free_entry+0x60>)
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	4413      	add	r3, r2
 800ccce:	00db      	lsls	r3, r3, #3
 800ccd0:	440b      	add	r3, r1
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d013      	beq.n	800cd00 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ccd8:	4910      	ldr	r1, [pc, #64]	@ (800cd1c <etharp_free_entry+0x60>)
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	4413      	add	r3, r2
 800cce2:	00db      	lsls	r3, r3, #3
 800cce4:	440b      	add	r3, r1
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fe ff6b 	bl	800bbc4 <pbuf_free>
    arp_table[i].q = NULL;
 800ccee:	490b      	ldr	r1, [pc, #44]	@ (800cd1c <etharp_free_entry+0x60>)
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	005b      	lsls	r3, r3, #1
 800ccf6:	4413      	add	r3, r2
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	440b      	add	r3, r1
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cd00:	4906      	ldr	r1, [pc, #24]	@ (800cd1c <etharp_free_entry+0x60>)
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	4613      	mov	r3, r2
 800cd06:	005b      	lsls	r3, r3, #1
 800cd08:	4413      	add	r3, r2
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	440b      	add	r3, r1
 800cd0e:	3314      	adds	r3, #20
 800cd10:	2200      	movs	r2, #0
 800cd12:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cd14:	bf00      	nop
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	2000cf9c 	.word	0x2000cf9c

0800cd20 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd26:	2300      	movs	r3, #0
 800cd28:	607b      	str	r3, [r7, #4]
 800cd2a:	e096      	b.n	800ce5a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cd2c:	494f      	ldr	r1, [pc, #316]	@ (800ce6c <etharp_tmr+0x14c>)
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	4613      	mov	r3, r2
 800cd32:	005b      	lsls	r3, r3, #1
 800cd34:	4413      	add	r3, r2
 800cd36:	00db      	lsls	r3, r3, #3
 800cd38:	440b      	add	r3, r1
 800cd3a:	3314      	adds	r3, #20
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cd40:	78fb      	ldrb	r3, [r7, #3]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 8086 	beq.w	800ce54 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cd48:	4948      	ldr	r1, [pc, #288]	@ (800ce6c <etharp_tmr+0x14c>)
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	4413      	add	r3, r2
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	440b      	add	r3, r1
 800cd56:	3312      	adds	r3, #18
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	b298      	uxth	r0, r3
 800cd5e:	4943      	ldr	r1, [pc, #268]	@ (800ce6c <etharp_tmr+0x14c>)
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	4613      	mov	r3, r2
 800cd64:	005b      	lsls	r3, r3, #1
 800cd66:	4413      	add	r3, r2
 800cd68:	00db      	lsls	r3, r3, #3
 800cd6a:	440b      	add	r3, r1
 800cd6c:	3312      	adds	r3, #18
 800cd6e:	4602      	mov	r2, r0
 800cd70:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd72:	493e      	ldr	r1, [pc, #248]	@ (800ce6c <etharp_tmr+0x14c>)
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	4613      	mov	r3, r2
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	4413      	add	r3, r2
 800cd7c:	00db      	lsls	r3, r3, #3
 800cd7e:	440b      	add	r3, r1
 800cd80:	3312      	adds	r3, #18
 800cd82:	881b      	ldrh	r3, [r3, #0]
 800cd84:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cd88:	d215      	bcs.n	800cdb6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd8a:	4938      	ldr	r1, [pc, #224]	@ (800ce6c <etharp_tmr+0x14c>)
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	4413      	add	r3, r2
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	440b      	add	r3, r1
 800cd98:	3314      	adds	r3, #20
 800cd9a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d10e      	bne.n	800cdbe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cda0:	4932      	ldr	r1, [pc, #200]	@ (800ce6c <etharp_tmr+0x14c>)
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	4613      	mov	r3, r2
 800cda6:	005b      	lsls	r3, r3, #1
 800cda8:	4413      	add	r3, r2
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	440b      	add	r3, r1
 800cdae:	3312      	adds	r3, #18
 800cdb0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cdb2:	2b04      	cmp	r3, #4
 800cdb4:	d903      	bls.n	800cdbe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff ff80 	bl	800ccbc <etharp_free_entry>
 800cdbc:	e04a      	b.n	800ce54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cdbe:	492b      	ldr	r1, [pc, #172]	@ (800ce6c <etharp_tmr+0x14c>)
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	005b      	lsls	r3, r3, #1
 800cdc6:	4413      	add	r3, r2
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	440b      	add	r3, r1
 800cdcc:	3314      	adds	r3, #20
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2b03      	cmp	r3, #3
 800cdd2:	d10a      	bne.n	800cdea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cdd4:	4925      	ldr	r1, [pc, #148]	@ (800ce6c <etharp_tmr+0x14c>)
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	005b      	lsls	r3, r3, #1
 800cddc:	4413      	add	r3, r2
 800cdde:	00db      	lsls	r3, r3, #3
 800cde0:	440b      	add	r3, r1
 800cde2:	3314      	adds	r3, #20
 800cde4:	2204      	movs	r2, #4
 800cde6:	701a      	strb	r2, [r3, #0]
 800cde8:	e034      	b.n	800ce54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cdea:	4920      	ldr	r1, [pc, #128]	@ (800ce6c <etharp_tmr+0x14c>)
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	005b      	lsls	r3, r3, #1
 800cdf2:	4413      	add	r3, r2
 800cdf4:	00db      	lsls	r3, r3, #3
 800cdf6:	440b      	add	r3, r1
 800cdf8:	3314      	adds	r3, #20
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	2b04      	cmp	r3, #4
 800cdfe:	d10a      	bne.n	800ce16 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ce00:	491a      	ldr	r1, [pc, #104]	@ (800ce6c <etharp_tmr+0x14c>)
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	4613      	mov	r3, r2
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	4413      	add	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	440b      	add	r3, r1
 800ce0e:	3314      	adds	r3, #20
 800ce10:	2202      	movs	r2, #2
 800ce12:	701a      	strb	r2, [r3, #0]
 800ce14:	e01e      	b.n	800ce54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ce16:	4915      	ldr	r1, [pc, #84]	@ (800ce6c <etharp_tmr+0x14c>)
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	005b      	lsls	r3, r3, #1
 800ce1e:	4413      	add	r3, r2
 800ce20:	00db      	lsls	r3, r3, #3
 800ce22:	440b      	add	r3, r1
 800ce24:	3314      	adds	r3, #20
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d113      	bne.n	800ce54 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ce2c:	490f      	ldr	r1, [pc, #60]	@ (800ce6c <etharp_tmr+0x14c>)
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	4613      	mov	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	4413      	add	r3, r2
 800ce36:	00db      	lsls	r3, r3, #3
 800ce38:	440b      	add	r3, r1
 800ce3a:	3308      	adds	r3, #8
 800ce3c:	6818      	ldr	r0, [r3, #0]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	4613      	mov	r3, r2
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	4413      	add	r3, r2
 800ce46:	00db      	lsls	r3, r3, #3
 800ce48:	4a08      	ldr	r2, [pc, #32]	@ (800ce6c <etharp_tmr+0x14c>)
 800ce4a:	4413      	add	r3, r2
 800ce4c:	3304      	adds	r3, #4
 800ce4e:	4619      	mov	r1, r3
 800ce50:	f000 fe6e 	bl	800db30 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3301      	adds	r3, #1
 800ce58:	607b      	str	r3, [r7, #4]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b09      	cmp	r3, #9
 800ce5e:	f77f af65 	ble.w	800cd2c <etharp_tmr+0xc>
      }
    }
  }
}
 800ce62:	bf00      	nop
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	2000cf9c 	.word	0x2000cf9c

0800ce70 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b08a      	sub	sp, #40	@ 0x28
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	607a      	str	r2, [r7, #4]
 800ce7c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ce7e:	230a      	movs	r3, #10
 800ce80:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ce82:	230a      	movs	r3, #10
 800ce84:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ce86:	230a      	movs	r3, #10
 800ce88:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ce8e:	230a      	movs	r3, #10
 800ce90:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	83bb      	strh	r3, [r7, #28]
 800ce96:	2300      	movs	r3, #0
 800ce98:	837b      	strh	r3, [r7, #26]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce9e:	2300      	movs	r3, #0
 800cea0:	843b      	strh	r3, [r7, #32]
 800cea2:	e0ae      	b.n	800d002 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cea4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cea8:	49a6      	ldr	r1, [pc, #664]	@ (800d144 <etharp_find_entry+0x2d4>)
 800ceaa:	4613      	mov	r3, r2
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	4413      	add	r3, r2
 800ceb0:	00db      	lsls	r3, r3, #3
 800ceb2:	440b      	add	r3, r1
 800ceb4:	3314      	adds	r3, #20
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ceba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cebe:	2b0a      	cmp	r3, #10
 800cec0:	d105      	bne.n	800cece <etharp_find_entry+0x5e>
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d102      	bne.n	800cece <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cec8:	8c3b      	ldrh	r3, [r7, #32]
 800ceca:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cecc:	e095      	b.n	800cffa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cece:	7dfb      	ldrb	r3, [r7, #23]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f000 8092 	beq.w	800cffa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d009      	beq.n	800cef0 <etharp_find_entry+0x80>
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d806      	bhi.n	800cef0 <etharp_find_entry+0x80>
 800cee2:	4b99      	ldr	r3, [pc, #612]	@ (800d148 <etharp_find_entry+0x2d8>)
 800cee4:	f240 1223 	movw	r2, #291	@ 0x123
 800cee8:	4998      	ldr	r1, [pc, #608]	@ (800d14c <etharp_find_entry+0x2dc>)
 800ceea:	4899      	ldr	r0, [pc, #612]	@ (800d150 <etharp_find_entry+0x2e0>)
 800ceec:	f002 fd92 	bl	800fa14 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d020      	beq.n	800cf38 <etharp_find_entry+0xc8>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6819      	ldr	r1, [r3, #0]
 800cefa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cefe:	4891      	ldr	r0, [pc, #580]	@ (800d144 <etharp_find_entry+0x2d4>)
 800cf00:	4613      	mov	r3, r2
 800cf02:	005b      	lsls	r3, r3, #1
 800cf04:	4413      	add	r3, r2
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	4403      	add	r3, r0
 800cf0a:	3304      	adds	r3, #4
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4299      	cmp	r1, r3
 800cf10:	d112      	bne.n	800cf38 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00c      	beq.n	800cf32 <etharp_find_entry+0xc2>
 800cf18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf1c:	4989      	ldr	r1, [pc, #548]	@ (800d144 <etharp_find_entry+0x2d4>)
 800cf1e:	4613      	mov	r3, r2
 800cf20:	005b      	lsls	r3, r3, #1
 800cf22:	4413      	add	r3, r2
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	440b      	add	r3, r1
 800cf28:	3308      	adds	r3, #8
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d102      	bne.n	800cf38 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cf32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf36:	e100      	b.n	800d13a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cf38:	7dfb      	ldrb	r3, [r7, #23]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d140      	bne.n	800cfc0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cf3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf42:	4980      	ldr	r1, [pc, #512]	@ (800d144 <etharp_find_entry+0x2d4>)
 800cf44:	4613      	mov	r3, r2
 800cf46:	005b      	lsls	r3, r3, #1
 800cf48:	4413      	add	r3, r2
 800cf4a:	00db      	lsls	r3, r3, #3
 800cf4c:	440b      	add	r3, r1
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d01a      	beq.n	800cf8a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cf54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf58:	497a      	ldr	r1, [pc, #488]	@ (800d144 <etharp_find_entry+0x2d4>)
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	4413      	add	r3, r2
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	440b      	add	r3, r1
 800cf64:	3312      	adds	r3, #18
 800cf66:	881b      	ldrh	r3, [r3, #0]
 800cf68:	8bba      	ldrh	r2, [r7, #28]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d845      	bhi.n	800cffa <etharp_find_entry+0x18a>
            old_queue = i;
 800cf6e:	8c3b      	ldrh	r3, [r7, #32]
 800cf70:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cf72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf76:	4973      	ldr	r1, [pc, #460]	@ (800d144 <etharp_find_entry+0x2d4>)
 800cf78:	4613      	mov	r3, r2
 800cf7a:	005b      	lsls	r3, r3, #1
 800cf7c:	4413      	add	r3, r2
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	440b      	add	r3, r1
 800cf82:	3312      	adds	r3, #18
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	83bb      	strh	r3, [r7, #28]
 800cf88:	e037      	b.n	800cffa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cf8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf8e:	496d      	ldr	r1, [pc, #436]	@ (800d144 <etharp_find_entry+0x2d4>)
 800cf90:	4613      	mov	r3, r2
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	4413      	add	r3, r2
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	440b      	add	r3, r1
 800cf9a:	3312      	adds	r3, #18
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	8b7a      	ldrh	r2, [r7, #26]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d82a      	bhi.n	800cffa <etharp_find_entry+0x18a>
            old_pending = i;
 800cfa4:	8c3b      	ldrh	r3, [r7, #32]
 800cfa6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800cfa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfac:	4965      	ldr	r1, [pc, #404]	@ (800d144 <etharp_find_entry+0x2d4>)
 800cfae:	4613      	mov	r3, r2
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	4413      	add	r3, r2
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3312      	adds	r3, #18
 800cfba:	881b      	ldrh	r3, [r3, #0]
 800cfbc:	837b      	strh	r3, [r7, #26]
 800cfbe:	e01c      	b.n	800cffa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cfc0:	7dfb      	ldrb	r3, [r7, #23]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d919      	bls.n	800cffa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cfc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfca:	495e      	ldr	r1, [pc, #376]	@ (800d144 <etharp_find_entry+0x2d4>)
 800cfcc:	4613      	mov	r3, r2
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	4413      	add	r3, r2
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	440b      	add	r3, r1
 800cfd6:	3312      	adds	r3, #18
 800cfd8:	881b      	ldrh	r3, [r3, #0]
 800cfda:	8b3a      	ldrh	r2, [r7, #24]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d80c      	bhi.n	800cffa <etharp_find_entry+0x18a>
            old_stable = i;
 800cfe0:	8c3b      	ldrh	r3, [r7, #32]
 800cfe2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800cfe4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfe8:	4956      	ldr	r1, [pc, #344]	@ (800d144 <etharp_find_entry+0x2d4>)
 800cfea:	4613      	mov	r3, r2
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	4413      	add	r3, r2
 800cff0:	00db      	lsls	r3, r3, #3
 800cff2:	440b      	add	r3, r1
 800cff4:	3312      	adds	r3, #18
 800cff6:	881b      	ldrh	r3, [r3, #0]
 800cff8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cffa:	8c3b      	ldrh	r3, [r7, #32]
 800cffc:	3301      	adds	r3, #1
 800cffe:	b29b      	uxth	r3, r3
 800d000:	843b      	strh	r3, [r7, #32]
 800d002:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d006:	2b09      	cmp	r3, #9
 800d008:	f77f af4c 	ble.w	800cea4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d00c:	7afb      	ldrb	r3, [r7, #11]
 800d00e:	f003 0302 	and.w	r3, r3, #2
 800d012:	2b00      	cmp	r3, #0
 800d014:	d108      	bne.n	800d028 <etharp_find_entry+0x1b8>
 800d016:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d01a:	2b0a      	cmp	r3, #10
 800d01c:	d107      	bne.n	800d02e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d01e:	7afb      	ldrb	r3, [r7, #11]
 800d020:	f003 0301 	and.w	r3, r3, #1
 800d024:	2b00      	cmp	r3, #0
 800d026:	d102      	bne.n	800d02e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d028:	f04f 33ff 	mov.w	r3, #4294967295
 800d02c:	e085      	b.n	800d13a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d02e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d032:	2b09      	cmp	r3, #9
 800d034:	dc02      	bgt.n	800d03c <etharp_find_entry+0x1cc>
    i = empty;
 800d036:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d038:	843b      	strh	r3, [r7, #32]
 800d03a:	e039      	b.n	800d0b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d03c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d040:	2b09      	cmp	r3, #9
 800d042:	dc14      	bgt.n	800d06e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d044:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d046:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d048:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d04c:	493d      	ldr	r1, [pc, #244]	@ (800d144 <etharp_find_entry+0x2d4>)
 800d04e:	4613      	mov	r3, r2
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	4413      	add	r3, r2
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	440b      	add	r3, r1
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d018      	beq.n	800d090 <etharp_find_entry+0x220>
 800d05e:	4b3a      	ldr	r3, [pc, #232]	@ (800d148 <etharp_find_entry+0x2d8>)
 800d060:	f240 126d 	movw	r2, #365	@ 0x16d
 800d064:	493b      	ldr	r1, [pc, #236]	@ (800d154 <etharp_find_entry+0x2e4>)
 800d066:	483a      	ldr	r0, [pc, #232]	@ (800d150 <etharp_find_entry+0x2e0>)
 800d068:	f002 fcd4 	bl	800fa14 <iprintf>
 800d06c:	e010      	b.n	800d090 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d06e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d072:	2b09      	cmp	r3, #9
 800d074:	dc02      	bgt.n	800d07c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d076:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d078:	843b      	strh	r3, [r7, #32]
 800d07a:	e009      	b.n	800d090 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d07c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d080:	2b09      	cmp	r3, #9
 800d082:	dc02      	bgt.n	800d08a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d084:	8bfb      	ldrh	r3, [r7, #30]
 800d086:	843b      	strh	r3, [r7, #32]
 800d088:	e002      	b.n	800d090 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d08a:	f04f 33ff 	mov.w	r3, #4294967295
 800d08e:	e054      	b.n	800d13a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d090:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d094:	2b09      	cmp	r3, #9
 800d096:	dd06      	ble.n	800d0a6 <etharp_find_entry+0x236>
 800d098:	4b2b      	ldr	r3, [pc, #172]	@ (800d148 <etharp_find_entry+0x2d8>)
 800d09a:	f240 127f 	movw	r2, #383	@ 0x17f
 800d09e:	492e      	ldr	r1, [pc, #184]	@ (800d158 <etharp_find_entry+0x2e8>)
 800d0a0:	482b      	ldr	r0, [pc, #172]	@ (800d150 <etharp_find_entry+0x2e0>)
 800d0a2:	f002 fcb7 	bl	800fa14 <iprintf>
    etharp_free_entry(i);
 800d0a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fe06 	bl	800ccbc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d0b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	dd06      	ble.n	800d0c6 <etharp_find_entry+0x256>
 800d0b8:	4b23      	ldr	r3, [pc, #140]	@ (800d148 <etharp_find_entry+0x2d8>)
 800d0ba:	f240 1283 	movw	r2, #387	@ 0x183
 800d0be:	4926      	ldr	r1, [pc, #152]	@ (800d158 <etharp_find_entry+0x2e8>)
 800d0c0:	4823      	ldr	r0, [pc, #140]	@ (800d150 <etharp_find_entry+0x2e0>)
 800d0c2:	f002 fca7 	bl	800fa14 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d0c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0ca:	491e      	ldr	r1, [pc, #120]	@ (800d144 <etharp_find_entry+0x2d4>)
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	4413      	add	r3, r2
 800d0d2:	00db      	lsls	r3, r3, #3
 800d0d4:	440b      	add	r3, r1
 800d0d6:	3314      	adds	r3, #20
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d006      	beq.n	800d0ec <etharp_find_entry+0x27c>
 800d0de:	4b1a      	ldr	r3, [pc, #104]	@ (800d148 <etharp_find_entry+0x2d8>)
 800d0e0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800d0e4:	491d      	ldr	r1, [pc, #116]	@ (800d15c <etharp_find_entry+0x2ec>)
 800d0e6:	481a      	ldr	r0, [pc, #104]	@ (800d150 <etharp_find_entry+0x2e0>)
 800d0e8:	f002 fc94 	bl	800fa14 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00b      	beq.n	800d10a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d0f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6819      	ldr	r1, [r3, #0]
 800d0fa:	4812      	ldr	r0, [pc, #72]	@ (800d144 <etharp_find_entry+0x2d4>)
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	005b      	lsls	r3, r3, #1
 800d100:	4413      	add	r3, r2
 800d102:	00db      	lsls	r3, r3, #3
 800d104:	4403      	add	r3, r0
 800d106:	3304      	adds	r3, #4
 800d108:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d10a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d10e:	490d      	ldr	r1, [pc, #52]	@ (800d144 <etharp_find_entry+0x2d4>)
 800d110:	4613      	mov	r3, r2
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	4413      	add	r3, r2
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	440b      	add	r3, r1
 800d11a:	3312      	adds	r3, #18
 800d11c:	2200      	movs	r2, #0
 800d11e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d120:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d124:	4907      	ldr	r1, [pc, #28]	@ (800d144 <etharp_find_entry+0x2d4>)
 800d126:	4613      	mov	r3, r2
 800d128:	005b      	lsls	r3, r3, #1
 800d12a:	4413      	add	r3, r2
 800d12c:	00db      	lsls	r3, r3, #3
 800d12e:	440b      	add	r3, r1
 800d130:	3308      	adds	r3, #8
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d136:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3728      	adds	r7, #40	@ 0x28
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	2000cf9c 	.word	0x2000cf9c
 800d148:	080121ec 	.word	0x080121ec
 800d14c:	08012224 	.word	0x08012224
 800d150:	08012264 	.word	0x08012264
 800d154:	0801228c 	.word	0x0801228c
 800d158:	080122a4 	.word	0x080122a4
 800d15c:	080122b8 	.word	0x080122b8

0800d160 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af02      	add	r7, sp, #8
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
 800d16c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d174:	2b06      	cmp	r3, #6
 800d176:	d006      	beq.n	800d186 <etharp_update_arp_entry+0x26>
 800d178:	4b48      	ldr	r3, [pc, #288]	@ (800d29c <etharp_update_arp_entry+0x13c>)
 800d17a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800d17e:	4948      	ldr	r1, [pc, #288]	@ (800d2a0 <etharp_update_arp_entry+0x140>)
 800d180:	4848      	ldr	r0, [pc, #288]	@ (800d2a4 <etharp_update_arp_entry+0x144>)
 800d182:	f002 fc47 	bl	800fa14 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d012      	beq.n	800d1b2 <etharp_update_arp_entry+0x52>
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00e      	beq.n	800d1b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68f9      	ldr	r1, [r7, #12]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f001 f8f4 	bl	800e388 <ip4_addr_isbroadcast_u32>
 800d1a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d105      	bne.n	800d1b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d1ae:	2be0      	cmp	r3, #224	@ 0xe0
 800d1b0:	d102      	bne.n	800d1b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d1b2:	f06f 030f 	mvn.w	r3, #15
 800d1b6:	e06c      	b.n	800d292 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d1b8:	78fb      	ldrb	r3, [r7, #3]
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	68b8      	ldr	r0, [r7, #8]
 800d1c0:	f7ff fe56 	bl	800ce70 <etharp_find_entry>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d1c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	da02      	bge.n	800d1d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d1d0:	8afb      	ldrh	r3, [r7, #22]
 800d1d2:	b25b      	sxtb	r3, r3
 800d1d4:	e05d      	b.n	800d292 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d1d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1da:	4933      	ldr	r1, [pc, #204]	@ (800d2a8 <etharp_update_arp_entry+0x148>)
 800d1dc:	4613      	mov	r3, r2
 800d1de:	005b      	lsls	r3, r3, #1
 800d1e0:	4413      	add	r3, r2
 800d1e2:	00db      	lsls	r3, r3, #3
 800d1e4:	440b      	add	r3, r1
 800d1e6:	3314      	adds	r3, #20
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d1ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1f0:	492d      	ldr	r1, [pc, #180]	@ (800d2a8 <etharp_update_arp_entry+0x148>)
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	005b      	lsls	r3, r3, #1
 800d1f6:	4413      	add	r3, r2
 800d1f8:	00db      	lsls	r3, r3, #3
 800d1fa:	440b      	add	r3, r1
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d202:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d206:	4613      	mov	r3, r2
 800d208:	005b      	lsls	r3, r3, #1
 800d20a:	4413      	add	r3, r2
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	3308      	adds	r3, #8
 800d210:	4a25      	ldr	r2, [pc, #148]	@ (800d2a8 <etharp_update_arp_entry+0x148>)
 800d212:	4413      	add	r3, r2
 800d214:	3304      	adds	r3, #4
 800d216:	2206      	movs	r2, #6
 800d218:	6879      	ldr	r1, [r7, #4]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f002 fcd5 	bl	800fbca <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d220:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d224:	4920      	ldr	r1, [pc, #128]	@ (800d2a8 <etharp_update_arp_entry+0x148>)
 800d226:	4613      	mov	r3, r2
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	4413      	add	r3, r2
 800d22c:	00db      	lsls	r3, r3, #3
 800d22e:	440b      	add	r3, r1
 800d230:	3312      	adds	r3, #18
 800d232:	2200      	movs	r2, #0
 800d234:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d236:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d23a:	491b      	ldr	r1, [pc, #108]	@ (800d2a8 <etharp_update_arp_entry+0x148>)
 800d23c:	4613      	mov	r3, r2
 800d23e:	005b      	lsls	r3, r3, #1
 800d240:	4413      	add	r3, r2
 800d242:	00db      	lsls	r3, r3, #3
 800d244:	440b      	add	r3, r1
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d021      	beq.n	800d290 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d24c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d250:	4915      	ldr	r1, [pc, #84]	@ (800d2a8 <etharp_update_arp_entry+0x148>)
 800d252:	4613      	mov	r3, r2
 800d254:	005b      	lsls	r3, r3, #1
 800d256:	4413      	add	r3, r2
 800d258:	00db      	lsls	r3, r3, #3
 800d25a:	440b      	add	r3, r1
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d260:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d264:	4910      	ldr	r1, [pc, #64]	@ (800d2a8 <etharp_update_arp_entry+0x148>)
 800d266:	4613      	mov	r3, r2
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	4413      	add	r3, r2
 800d26c:	00db      	lsls	r3, r3, #3
 800d26e:	440b      	add	r3, r1
 800d270:	2200      	movs	r2, #0
 800d272:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d27a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6939      	ldr	r1, [r7, #16]
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f002 f8cb 	bl	800f420 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d28a:	6938      	ldr	r0, [r7, #16]
 800d28c:	f7fe fc9a 	bl	800bbc4 <pbuf_free>
  }
  return ERR_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3718      	adds	r7, #24
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	080121ec 	.word	0x080121ec
 800d2a0:	080122e4 	.word	0x080122e4
 800d2a4:	08012264 	.word	0x08012264
 800d2a8:	2000cf9c 	.word	0x2000cf9c

0800d2ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	e01e      	b.n	800d2f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d2ba:	4913      	ldr	r1, [pc, #76]	@ (800d308 <etharp_cleanup_netif+0x5c>)
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	005b      	lsls	r3, r3, #1
 800d2c2:	4413      	add	r3, r2
 800d2c4:	00db      	lsls	r3, r3, #3
 800d2c6:	440b      	add	r3, r1
 800d2c8:	3314      	adds	r3, #20
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d2ce:	7afb      	ldrb	r3, [r7, #11]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00e      	beq.n	800d2f2 <etharp_cleanup_netif+0x46>
 800d2d4:	490c      	ldr	r1, [pc, #48]	@ (800d308 <etharp_cleanup_netif+0x5c>)
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	4613      	mov	r3, r2
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	4413      	add	r3, r2
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	440b      	add	r3, r1
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d102      	bne.n	800d2f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f7ff fce5 	bl	800ccbc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	60fb      	str	r3, [r7, #12]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2b09      	cmp	r3, #9
 800d2fc:	dddd      	ble.n	800d2ba <etharp_cleanup_netif+0xe>
    }
  }
}
 800d2fe:	bf00      	nop
 800d300:	bf00      	nop
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	2000cf9c 	.word	0x2000cf9c

0800d30c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d30c:	b5b0      	push	{r4, r5, r7, lr}
 800d30e:	b08a      	sub	sp, #40	@ 0x28
 800d310:	af04      	add	r7, sp, #16
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d107      	bne.n	800d32c <etharp_input+0x20>
 800d31c:	4b3d      	ldr	r3, [pc, #244]	@ (800d414 <etharp_input+0x108>)
 800d31e:	f240 228a 	movw	r2, #650	@ 0x28a
 800d322:	493d      	ldr	r1, [pc, #244]	@ (800d418 <etharp_input+0x10c>)
 800d324:	483d      	ldr	r0, [pc, #244]	@ (800d41c <etharp_input+0x110>)
 800d326:	f002 fb75 	bl	800fa14 <iprintf>
 800d32a:	e06f      	b.n	800d40c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	b29b      	uxth	r3, r3
 800d338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d33c:	d10c      	bne.n	800d358 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d342:	2b06      	cmp	r3, #6
 800d344:	d108      	bne.n	800d358 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d34a:	2b04      	cmp	r3, #4
 800d34c:	d104      	bne.n	800d358 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	885b      	ldrh	r3, [r3, #2]
 800d352:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d354:	2b08      	cmp	r3, #8
 800d356:	d003      	beq.n	800d360 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7fe fc33 	bl	800bbc4 <pbuf_free>
    return;
 800d35e:	e055      	b.n	800d40c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	330e      	adds	r3, #14
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	3318      	adds	r3, #24
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	3304      	adds	r3, #4
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d102      	bne.n	800d380 <etharp_input+0x74>
    for_us = 0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	75fb      	strb	r3, [r7, #23]
 800d37e:	e009      	b.n	800d394 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	3304      	adds	r3, #4
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	429a      	cmp	r2, r3
 800d38a:	bf0c      	ite	eq
 800d38c:	2301      	moveq	r3, #1
 800d38e:	2300      	movne	r3, #0
 800d390:	b2db      	uxtb	r3, r3
 800d392:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	f103 0208 	add.w	r2, r3, #8
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d001      	beq.n	800d3a4 <etharp_input+0x98>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	e000      	b.n	800d3a6 <etharp_input+0x9a>
 800d3a4:	2302      	movs	r3, #2
 800d3a6:	f107 010c 	add.w	r1, r7, #12
 800d3aa:	6838      	ldr	r0, [r7, #0]
 800d3ac:	f7ff fed8 	bl	800d160 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	88db      	ldrh	r3, [r3, #6]
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3ba:	d003      	beq.n	800d3c4 <etharp_input+0xb8>
 800d3bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3c0:	d01e      	beq.n	800d400 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d3c2:	e020      	b.n	800d406 <etharp_input+0xfa>
      if (for_us) {
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d01c      	beq.n	800d404 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d3e4:	2102      	movs	r1, #2
 800d3e6:	9103      	str	r1, [sp, #12]
 800d3e8:	f107 010c 	add.w	r1, r7, #12
 800d3ec:	9102      	str	r1, [sp, #8]
 800d3ee:	9201      	str	r2, [sp, #4]
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	462b      	mov	r3, r5
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	6838      	ldr	r0, [r7, #0]
 800d3fa:	f000 faeb 	bl	800d9d4 <etharp_raw>
      break;
 800d3fe:	e001      	b.n	800d404 <etharp_input+0xf8>
      break;
 800d400:	bf00      	nop
 800d402:	e000      	b.n	800d406 <etharp_input+0xfa>
      break;
 800d404:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f7fe fbdc 	bl	800bbc4 <pbuf_free>
}
 800d40c:	3718      	adds	r7, #24
 800d40e:	46bd      	mov	sp, r7
 800d410:	bdb0      	pop	{r4, r5, r7, pc}
 800d412:	bf00      	nop
 800d414:	080121ec 	.word	0x080121ec
 800d418:	0801233c 	.word	0x0801233c
 800d41c:	08012264 	.word	0x08012264

0800d420 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af02      	add	r7, sp, #8
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	4613      	mov	r3, r2
 800d42c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d42e:	79fa      	ldrb	r2, [r7, #7]
 800d430:	4944      	ldr	r1, [pc, #272]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d432:	4613      	mov	r3, r2
 800d434:	005b      	lsls	r3, r3, #1
 800d436:	4413      	add	r3, r2
 800d438:	00db      	lsls	r3, r3, #3
 800d43a:	440b      	add	r3, r1
 800d43c:	3314      	adds	r3, #20
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b01      	cmp	r3, #1
 800d442:	d806      	bhi.n	800d452 <etharp_output_to_arp_index+0x32>
 800d444:	4b40      	ldr	r3, [pc, #256]	@ (800d548 <etharp_output_to_arp_index+0x128>)
 800d446:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d44a:	4940      	ldr	r1, [pc, #256]	@ (800d54c <etharp_output_to_arp_index+0x12c>)
 800d44c:	4840      	ldr	r0, [pc, #256]	@ (800d550 <etharp_output_to_arp_index+0x130>)
 800d44e:	f002 fae1 	bl	800fa14 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d452:	79fa      	ldrb	r2, [r7, #7]
 800d454:	493b      	ldr	r1, [pc, #236]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d456:	4613      	mov	r3, r2
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	4413      	add	r3, r2
 800d45c:	00db      	lsls	r3, r3, #3
 800d45e:	440b      	add	r3, r1
 800d460:	3314      	adds	r3, #20
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b02      	cmp	r3, #2
 800d466:	d153      	bne.n	800d510 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d468:	79fa      	ldrb	r2, [r7, #7]
 800d46a:	4936      	ldr	r1, [pc, #216]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d46c:	4613      	mov	r3, r2
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	4413      	add	r3, r2
 800d472:	00db      	lsls	r3, r3, #3
 800d474:	440b      	add	r3, r1
 800d476:	3312      	adds	r3, #18
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d47e:	d919      	bls.n	800d4b4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d480:	79fa      	ldrb	r2, [r7, #7]
 800d482:	4613      	mov	r3, r2
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	4413      	add	r3, r2
 800d488:	00db      	lsls	r3, r3, #3
 800d48a:	4a2e      	ldr	r2, [pc, #184]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d48c:	4413      	add	r3, r2
 800d48e:	3304      	adds	r3, #4
 800d490:	4619      	mov	r1, r3
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f000 fb4c 	bl	800db30 <etharp_request>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d138      	bne.n	800d510 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d49e:	79fa      	ldrb	r2, [r7, #7]
 800d4a0:	4928      	ldr	r1, [pc, #160]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	4413      	add	r3, r2
 800d4a8:	00db      	lsls	r3, r3, #3
 800d4aa:	440b      	add	r3, r1
 800d4ac:	3314      	adds	r3, #20
 800d4ae:	2203      	movs	r2, #3
 800d4b0:	701a      	strb	r2, [r3, #0]
 800d4b2:	e02d      	b.n	800d510 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d4b4:	79fa      	ldrb	r2, [r7, #7]
 800d4b6:	4923      	ldr	r1, [pc, #140]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	4413      	add	r3, r2
 800d4be:	00db      	lsls	r3, r3, #3
 800d4c0:	440b      	add	r3, r1
 800d4c2:	3312      	adds	r3, #18
 800d4c4:	881b      	ldrh	r3, [r3, #0]
 800d4c6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d4ca:	d321      	bcc.n	800d510 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d4cc:	79fa      	ldrb	r2, [r7, #7]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	4413      	add	r3, r2
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	4a1b      	ldr	r2, [pc, #108]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d4d8:	4413      	add	r3, r2
 800d4da:	1d19      	adds	r1, r3, #4
 800d4dc:	79fa      	ldrb	r2, [r7, #7]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	005b      	lsls	r3, r3, #1
 800d4e2:	4413      	add	r3, r2
 800d4e4:	00db      	lsls	r3, r3, #3
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	4a16      	ldr	r2, [pc, #88]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d4ea:	4413      	add	r3, r2
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f000 fafb 	bl	800daec <etharp_request_dst>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d109      	bne.n	800d510 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d4fc:	79fa      	ldrb	r2, [r7, #7]
 800d4fe:	4911      	ldr	r1, [pc, #68]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d500:	4613      	mov	r3, r2
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	4413      	add	r3, r2
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	440b      	add	r3, r1
 800d50a:	3314      	adds	r3, #20
 800d50c:	2203      	movs	r2, #3
 800d50e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d516:	79fa      	ldrb	r2, [r7, #7]
 800d518:	4613      	mov	r3, r2
 800d51a:	005b      	lsls	r3, r3, #1
 800d51c:	4413      	add	r3, r2
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	3308      	adds	r3, #8
 800d522:	4a08      	ldr	r2, [pc, #32]	@ (800d544 <etharp_output_to_arp_index+0x124>)
 800d524:	4413      	add	r3, r2
 800d526:	3304      	adds	r3, #4
 800d528:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d52c:	9200      	str	r2, [sp, #0]
 800d52e:	460a      	mov	r2, r1
 800d530:	68b9      	ldr	r1, [r7, #8]
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f001 ff74 	bl	800f420 <ethernet_output>
 800d538:	4603      	mov	r3, r0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	2000cf9c 	.word	0x2000cf9c
 800d548:	080121ec 	.word	0x080121ec
 800d54c:	0801235c 	.word	0x0801235c
 800d550:	08012264 	.word	0x08012264

0800d554 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08a      	sub	sp, #40	@ 0x28
 800d558:	af02      	add	r7, sp, #8
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d106      	bne.n	800d578 <etharp_output+0x24>
 800d56a:	4b73      	ldr	r3, [pc, #460]	@ (800d738 <etharp_output+0x1e4>)
 800d56c:	f240 321e 	movw	r2, #798	@ 0x31e
 800d570:	4972      	ldr	r1, [pc, #456]	@ (800d73c <etharp_output+0x1e8>)
 800d572:	4873      	ldr	r0, [pc, #460]	@ (800d740 <etharp_output+0x1ec>)
 800d574:	f002 fa4e 	bl	800fa14 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d106      	bne.n	800d58c <etharp_output+0x38>
 800d57e:	4b6e      	ldr	r3, [pc, #440]	@ (800d738 <etharp_output+0x1e4>)
 800d580:	f240 321f 	movw	r2, #799	@ 0x31f
 800d584:	496f      	ldr	r1, [pc, #444]	@ (800d744 <etharp_output+0x1f0>)
 800d586:	486e      	ldr	r0, [pc, #440]	@ (800d740 <etharp_output+0x1ec>)
 800d588:	f002 fa44 	bl	800fa14 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d106      	bne.n	800d5a0 <etharp_output+0x4c>
 800d592:	4b69      	ldr	r3, [pc, #420]	@ (800d738 <etharp_output+0x1e4>)
 800d594:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d598:	496b      	ldr	r1, [pc, #428]	@ (800d748 <etharp_output+0x1f4>)
 800d59a:	4869      	ldr	r0, [pc, #420]	@ (800d740 <etharp_output+0x1ec>)
 800d59c:	f002 fa3a 	bl	800fa14 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68f9      	ldr	r1, [r7, #12]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 feee 	bl	800e388 <ip4_addr_isbroadcast_u32>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d002      	beq.n	800d5b8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d5b2:	4b66      	ldr	r3, [pc, #408]	@ (800d74c <etharp_output+0x1f8>)
 800d5b4:	61fb      	str	r3, [r7, #28]
 800d5b6:	e0af      	b.n	800d718 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d5c0:	2be0      	cmp	r3, #224	@ 0xe0
 800d5c2:	d118      	bne.n	800d5f6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d5cc:	235e      	movs	r3, #94	@ 0x5e
 800d5ce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	3302      	adds	r3, #2
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	3303      	adds	r3, #3
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d5ee:	f107 0310 	add.w	r3, r7, #16
 800d5f2:	61fb      	str	r3, [r7, #28]
 800d5f4:	e090      	b.n	800d718 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	3304      	adds	r3, #4
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	405a      	eors	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	3308      	adds	r3, #8
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4013      	ands	r3, r2
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d012      	beq.n	800d634 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d614:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d618:	4293      	cmp	r3, r2
 800d61a:	d00b      	beq.n	800d634 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	330c      	adds	r3, #12
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d003      	beq.n	800d62e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	330c      	adds	r3, #12
 800d62a:	61bb      	str	r3, [r7, #24]
 800d62c:	e002      	b.n	800d634 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d62e:	f06f 0303 	mvn.w	r3, #3
 800d632:	e07d      	b.n	800d730 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d634:	4b46      	ldr	r3, [pc, #280]	@ (800d750 <etharp_output+0x1fc>)
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	4619      	mov	r1, r3
 800d63a:	4a46      	ldr	r2, [pc, #280]	@ (800d754 <etharp_output+0x200>)
 800d63c:	460b      	mov	r3, r1
 800d63e:	005b      	lsls	r3, r3, #1
 800d640:	440b      	add	r3, r1
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	4413      	add	r3, r2
 800d646:	3314      	adds	r3, #20
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d925      	bls.n	800d69a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d64e:	4b40      	ldr	r3, [pc, #256]	@ (800d750 <etharp_output+0x1fc>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	4619      	mov	r1, r3
 800d654:	4a3f      	ldr	r2, [pc, #252]	@ (800d754 <etharp_output+0x200>)
 800d656:	460b      	mov	r3, r1
 800d658:	005b      	lsls	r3, r3, #1
 800d65a:	440b      	add	r3, r1
 800d65c:	00db      	lsls	r3, r3, #3
 800d65e:	4413      	add	r3, r2
 800d660:	3308      	adds	r3, #8
 800d662:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d664:	68fa      	ldr	r2, [r7, #12]
 800d666:	429a      	cmp	r2, r3
 800d668:	d117      	bne.n	800d69a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	4b38      	ldr	r3, [pc, #224]	@ (800d750 <etharp_output+0x1fc>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	4618      	mov	r0, r3
 800d674:	4937      	ldr	r1, [pc, #220]	@ (800d754 <etharp_output+0x200>)
 800d676:	4603      	mov	r3, r0
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	4403      	add	r3, r0
 800d67c:	00db      	lsls	r3, r3, #3
 800d67e:	440b      	add	r3, r1
 800d680:	3304      	adds	r3, #4
 800d682:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d684:	429a      	cmp	r2, r3
 800d686:	d108      	bne.n	800d69a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d688:	4b31      	ldr	r3, [pc, #196]	@ (800d750 <etharp_output+0x1fc>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	461a      	mov	r2, r3
 800d68e:	68b9      	ldr	r1, [r7, #8]
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f7ff fec5 	bl	800d420 <etharp_output_to_arp_index>
 800d696:	4603      	mov	r3, r0
 800d698:	e04a      	b.n	800d730 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d69a:	2300      	movs	r3, #0
 800d69c:	75fb      	strb	r3, [r7, #23]
 800d69e:	e031      	b.n	800d704 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d6a0:	7dfa      	ldrb	r2, [r7, #23]
 800d6a2:	492c      	ldr	r1, [pc, #176]	@ (800d754 <etharp_output+0x200>)
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	4413      	add	r3, r2
 800d6aa:	00db      	lsls	r3, r3, #3
 800d6ac:	440b      	add	r3, r1
 800d6ae:	3314      	adds	r3, #20
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d923      	bls.n	800d6fe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d6b6:	7dfa      	ldrb	r2, [r7, #23]
 800d6b8:	4926      	ldr	r1, [pc, #152]	@ (800d754 <etharp_output+0x200>)
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	005b      	lsls	r3, r3, #1
 800d6be:	4413      	add	r3, r2
 800d6c0:	00db      	lsls	r3, r3, #3
 800d6c2:	440b      	add	r3, r1
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d117      	bne.n	800d6fe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	6819      	ldr	r1, [r3, #0]
 800d6d2:	7dfa      	ldrb	r2, [r7, #23]
 800d6d4:	481f      	ldr	r0, [pc, #124]	@ (800d754 <etharp_output+0x200>)
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	4413      	add	r3, r2
 800d6dc:	00db      	lsls	r3, r3, #3
 800d6de:	4403      	add	r3, r0
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d6e4:	4299      	cmp	r1, r3
 800d6e6:	d10a      	bne.n	800d6fe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d6e8:	4a19      	ldr	r2, [pc, #100]	@ (800d750 <etharp_output+0x1fc>)
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	68b9      	ldr	r1, [r7, #8]
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7ff fe93 	bl	800d420 <etharp_output_to_arp_index>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	e018      	b.n	800d730 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
 800d700:	3301      	adds	r3, #1
 800d702:	75fb      	strb	r3, [r7, #23]
 800d704:	7dfb      	ldrb	r3, [r7, #23]
 800d706:	2b09      	cmp	r3, #9
 800d708:	d9ca      	bls.n	800d6a0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	69b9      	ldr	r1, [r7, #24]
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f000 f822 	bl	800d758 <etharp_query>
 800d714:	4603      	mov	r3, r0
 800d716:	e00b      	b.n	800d730 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d71e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	68b9      	ldr	r1, [r7, #8]
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f001 fe79 	bl	800f420 <ethernet_output>
 800d72e:	4603      	mov	r3, r0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3720      	adds	r7, #32
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	080121ec 	.word	0x080121ec
 800d73c:	0801233c 	.word	0x0801233c
 800d740:	08012264 	.word	0x08012264
 800d744:	0801238c 	.word	0x0801238c
 800d748:	0801232c 	.word	0x0801232c
 800d74c:	08012a3c 	.word	0x08012a3c
 800d750:	2000d08c 	.word	0x2000d08c
 800d754:	2000cf9c 	.word	0x2000cf9c

0800d758 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b08c      	sub	sp, #48	@ 0x30
 800d75c:	af02      	add	r7, sp, #8
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3326      	adds	r3, #38	@ 0x26
 800d768:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d76a:	23ff      	movs	r3, #255	@ 0xff
 800d76c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d770:	2300      	movs	r3, #0
 800d772:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	68f9      	ldr	r1, [r7, #12]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 fe04 	bl	800e388 <ip4_addr_isbroadcast_u32>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d10c      	bne.n	800d7a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d78e:	2be0      	cmp	r3, #224	@ 0xe0
 800d790:	d006      	beq.n	800d7a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d003      	beq.n	800d7a0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d102      	bne.n	800d7a6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d7a0:	f06f 030f 	mvn.w	r3, #15
 800d7a4:	e101      	b.n	800d9aa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	2101      	movs	r1, #1
 800d7aa:	68b8      	ldr	r0, [r7, #8]
 800d7ac:	f7ff fb60 	bl	800ce70 <etharp_find_entry>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d7b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	da02      	bge.n	800d7c2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d7bc:	8a7b      	ldrh	r3, [r7, #18]
 800d7be:	b25b      	sxtb	r3, r3
 800d7c0:	e0f3      	b.n	800d9aa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d7c2:	8a7b      	ldrh	r3, [r7, #18]
 800d7c4:	2b7e      	cmp	r3, #126	@ 0x7e
 800d7c6:	d906      	bls.n	800d7d6 <etharp_query+0x7e>
 800d7c8:	4b7a      	ldr	r3, [pc, #488]	@ (800d9b4 <etharp_query+0x25c>)
 800d7ca:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d7ce:	497a      	ldr	r1, [pc, #488]	@ (800d9b8 <etharp_query+0x260>)
 800d7d0:	487a      	ldr	r0, [pc, #488]	@ (800d9bc <etharp_query+0x264>)
 800d7d2:	f002 f91f 	bl	800fa14 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d7d6:	8a7b      	ldrh	r3, [r7, #18]
 800d7d8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d7da:	7c7a      	ldrb	r2, [r7, #17]
 800d7dc:	4978      	ldr	r1, [pc, #480]	@ (800d9c0 <etharp_query+0x268>)
 800d7de:	4613      	mov	r3, r2
 800d7e0:	005b      	lsls	r3, r3, #1
 800d7e2:	4413      	add	r3, r2
 800d7e4:	00db      	lsls	r3, r3, #3
 800d7e6:	440b      	add	r3, r1
 800d7e8:	3314      	adds	r3, #20
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d115      	bne.n	800d81c <etharp_query+0xc4>
    is_new_entry = 1;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d7f4:	7c7a      	ldrb	r2, [r7, #17]
 800d7f6:	4972      	ldr	r1, [pc, #456]	@ (800d9c0 <etharp_query+0x268>)
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	005b      	lsls	r3, r3, #1
 800d7fc:	4413      	add	r3, r2
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	440b      	add	r3, r1
 800d802:	3314      	adds	r3, #20
 800d804:	2201      	movs	r2, #1
 800d806:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d808:	7c7a      	ldrb	r2, [r7, #17]
 800d80a:	496d      	ldr	r1, [pc, #436]	@ (800d9c0 <etharp_query+0x268>)
 800d80c:	4613      	mov	r3, r2
 800d80e:	005b      	lsls	r3, r3, #1
 800d810:	4413      	add	r3, r2
 800d812:	00db      	lsls	r3, r3, #3
 800d814:	440b      	add	r3, r1
 800d816:	3308      	adds	r3, #8
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d81c:	7c7a      	ldrb	r2, [r7, #17]
 800d81e:	4968      	ldr	r1, [pc, #416]	@ (800d9c0 <etharp_query+0x268>)
 800d820:	4613      	mov	r3, r2
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	4413      	add	r3, r2
 800d826:	00db      	lsls	r3, r3, #3
 800d828:	440b      	add	r3, r1
 800d82a:	3314      	adds	r3, #20
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d011      	beq.n	800d856 <etharp_query+0xfe>
 800d832:	7c7a      	ldrb	r2, [r7, #17]
 800d834:	4962      	ldr	r1, [pc, #392]	@ (800d9c0 <etharp_query+0x268>)
 800d836:	4613      	mov	r3, r2
 800d838:	005b      	lsls	r3, r3, #1
 800d83a:	4413      	add	r3, r2
 800d83c:	00db      	lsls	r3, r3, #3
 800d83e:	440b      	add	r3, r1
 800d840:	3314      	adds	r3, #20
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	2b01      	cmp	r3, #1
 800d846:	d806      	bhi.n	800d856 <etharp_query+0xfe>
 800d848:	4b5a      	ldr	r3, [pc, #360]	@ (800d9b4 <etharp_query+0x25c>)
 800d84a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d84e:	495d      	ldr	r1, [pc, #372]	@ (800d9c4 <etharp_query+0x26c>)
 800d850:	485a      	ldr	r0, [pc, #360]	@ (800d9bc <etharp_query+0x264>)
 800d852:	f002 f8df 	bl	800fa14 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d856:	6a3b      	ldr	r3, [r7, #32]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d102      	bne.n	800d862 <etharp_query+0x10a>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d10c      	bne.n	800d87c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d862:	68b9      	ldr	r1, [r7, #8]
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f000 f963 	bl	800db30 <etharp_request>
 800d86a:	4603      	mov	r3, r0
 800d86c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d102      	bne.n	800d87c <etharp_query+0x124>
      return result;
 800d876:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d87a:	e096      	b.n	800d9aa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d106      	bne.n	800d890 <etharp_query+0x138>
 800d882:	4b4c      	ldr	r3, [pc, #304]	@ (800d9b4 <etharp_query+0x25c>)
 800d884:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d888:	494f      	ldr	r1, [pc, #316]	@ (800d9c8 <etharp_query+0x270>)
 800d88a:	484c      	ldr	r0, [pc, #304]	@ (800d9bc <etharp_query+0x264>)
 800d88c:	f002 f8c2 	bl	800fa14 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d890:	7c7a      	ldrb	r2, [r7, #17]
 800d892:	494b      	ldr	r1, [pc, #300]	@ (800d9c0 <etharp_query+0x268>)
 800d894:	4613      	mov	r3, r2
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	4413      	add	r3, r2
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	440b      	add	r3, r1
 800d89e:	3314      	adds	r3, #20
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d917      	bls.n	800d8d6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d8a6:	4a49      	ldr	r2, [pc, #292]	@ (800d9cc <etharp_query+0x274>)
 800d8a8:	7c7b      	ldrb	r3, [r7, #17]
 800d8aa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d8ac:	7c7a      	ldrb	r2, [r7, #17]
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	005b      	lsls	r3, r3, #1
 800d8b2:	4413      	add	r3, r2
 800d8b4:	00db      	lsls	r3, r3, #3
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	4a41      	ldr	r2, [pc, #260]	@ (800d9c0 <etharp_query+0x268>)
 800d8ba:	4413      	add	r3, r2
 800d8bc:	3304      	adds	r3, #4
 800d8be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d8c2:	9200      	str	r2, [sp, #0]
 800d8c4:	697a      	ldr	r2, [r7, #20]
 800d8c6:	6879      	ldr	r1, [r7, #4]
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f001 fda9 	bl	800f420 <ethernet_output>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8d4:	e067      	b.n	800d9a6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d8d6:	7c7a      	ldrb	r2, [r7, #17]
 800d8d8:	4939      	ldr	r1, [pc, #228]	@ (800d9c0 <etharp_query+0x268>)
 800d8da:	4613      	mov	r3, r2
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	4413      	add	r3, r2
 800d8e0:	00db      	lsls	r3, r3, #3
 800d8e2:	440b      	add	r3, r1
 800d8e4:	3314      	adds	r3, #20
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d15c      	bne.n	800d9a6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d8f4:	e01c      	b.n	800d930 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	895a      	ldrh	r2, [r3, #10]
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	891b      	ldrh	r3, [r3, #8]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d10a      	bne.n	800d918 <etharp_query+0x1c0>
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d006      	beq.n	800d918 <etharp_query+0x1c0>
 800d90a:	4b2a      	ldr	r3, [pc, #168]	@ (800d9b4 <etharp_query+0x25c>)
 800d90c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d910:	492f      	ldr	r1, [pc, #188]	@ (800d9d0 <etharp_query+0x278>)
 800d912:	482a      	ldr	r0, [pc, #168]	@ (800d9bc <etharp_query+0x264>)
 800d914:	f002 f87e 	bl	800fa14 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	7b1b      	ldrb	r3, [r3, #12]
 800d91c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <etharp_query+0x1d2>
        copy_needed = 1;
 800d924:	2301      	movs	r3, #1
 800d926:	61bb      	str	r3, [r7, #24]
        break;
 800d928:	e005      	b.n	800d936 <etharp_query+0x1de>
      }
      p = p->next;
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1df      	bne.n	800d8f6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d007      	beq.n	800d94c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d942:	200e      	movs	r0, #14
 800d944:	f7fe fb44 	bl	800bfd0 <pbuf_clone>
 800d948:	61f8      	str	r0, [r7, #28]
 800d94a:	e004      	b.n	800d956 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d950:	69f8      	ldr	r0, [r7, #28]
 800d952:	f7fe f9dd 	bl	800bd10 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d021      	beq.n	800d9a0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d95c:	7c7a      	ldrb	r2, [r7, #17]
 800d95e:	4918      	ldr	r1, [pc, #96]	@ (800d9c0 <etharp_query+0x268>)
 800d960:	4613      	mov	r3, r2
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	4413      	add	r3, r2
 800d966:	00db      	lsls	r3, r3, #3
 800d968:	440b      	add	r3, r1
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00a      	beq.n	800d986 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d970:	7c7a      	ldrb	r2, [r7, #17]
 800d972:	4913      	ldr	r1, [pc, #76]	@ (800d9c0 <etharp_query+0x268>)
 800d974:	4613      	mov	r3, r2
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	4413      	add	r3, r2
 800d97a:	00db      	lsls	r3, r3, #3
 800d97c:	440b      	add	r3, r1
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4618      	mov	r0, r3
 800d982:	f7fe f91f 	bl	800bbc4 <pbuf_free>
      }
      arp_table[i].q = p;
 800d986:	7c7a      	ldrb	r2, [r7, #17]
 800d988:	490d      	ldr	r1, [pc, #52]	@ (800d9c0 <etharp_query+0x268>)
 800d98a:	4613      	mov	r3, r2
 800d98c:	005b      	lsls	r3, r3, #1
 800d98e:	4413      	add	r3, r2
 800d990:	00db      	lsls	r3, r3, #3
 800d992:	440b      	add	r3, r1
 800d994:	69fa      	ldr	r2, [r7, #28]
 800d996:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d99e:	e002      	b.n	800d9a6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d9a0:	23ff      	movs	r3, #255	@ 0xff
 800d9a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d9a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3728      	adds	r7, #40	@ 0x28
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	080121ec 	.word	0x080121ec
 800d9b8:	08012398 	.word	0x08012398
 800d9bc:	08012264 	.word	0x08012264
 800d9c0:	2000cf9c 	.word	0x2000cf9c
 800d9c4:	080123a8 	.word	0x080123a8
 800d9c8:	0801238c 	.word	0x0801238c
 800d9cc:	2000d08c 	.word	0x2000d08c
 800d9d0:	080123d0 	.word	0x080123d0

0800d9d4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b08a      	sub	sp, #40	@ 0x28
 800d9d8:	af02      	add	r7, sp, #8
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
 800d9e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d106      	bne.n	800d9fa <etharp_raw+0x26>
 800d9ec:	4b3a      	ldr	r3, [pc, #232]	@ (800dad8 <etharp_raw+0x104>)
 800d9ee:	f240 4257 	movw	r2, #1111	@ 0x457
 800d9f2:	493a      	ldr	r1, [pc, #232]	@ (800dadc <etharp_raw+0x108>)
 800d9f4:	483a      	ldr	r0, [pc, #232]	@ (800dae0 <etharp_raw+0x10c>)
 800d9f6:	f002 f80d 	bl	800fa14 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d9fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d9fe:	211c      	movs	r1, #28
 800da00:	200e      	movs	r0, #14
 800da02:	f7fd fdfd 	bl	800b600 <pbuf_alloc>
 800da06:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d102      	bne.n	800da14 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800da0e:	f04f 33ff 	mov.w	r3, #4294967295
 800da12:	e05d      	b.n	800dad0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	895b      	ldrh	r3, [r3, #10]
 800da18:	2b1b      	cmp	r3, #27
 800da1a:	d806      	bhi.n	800da2a <etharp_raw+0x56>
 800da1c:	4b2e      	ldr	r3, [pc, #184]	@ (800dad8 <etharp_raw+0x104>)
 800da1e:	f240 4262 	movw	r2, #1122	@ 0x462
 800da22:	4930      	ldr	r1, [pc, #192]	@ (800dae4 <etharp_raw+0x110>)
 800da24:	482e      	ldr	r0, [pc, #184]	@ (800dae0 <etharp_raw+0x10c>)
 800da26:	f001 fff5 	bl	800fa14 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800da30:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800da32:	4618      	mov	r0, r3
 800da34:	f7fc fd36 	bl	800a4a4 <lwip_htons>
 800da38:	4603      	mov	r3, r0
 800da3a:	461a      	mov	r2, r3
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800da46:	2b06      	cmp	r3, #6
 800da48:	d006      	beq.n	800da58 <etharp_raw+0x84>
 800da4a:	4b23      	ldr	r3, [pc, #140]	@ (800dad8 <etharp_raw+0x104>)
 800da4c:	f240 4269 	movw	r2, #1129	@ 0x469
 800da50:	4925      	ldr	r1, [pc, #148]	@ (800dae8 <etharp_raw+0x114>)
 800da52:	4823      	ldr	r0, [pc, #140]	@ (800dae0 <etharp_raw+0x10c>)
 800da54:	f001 ffde 	bl	800fa14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	3308      	adds	r3, #8
 800da5c:	2206      	movs	r2, #6
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	4618      	mov	r0, r3
 800da62:	f002 f8b2 	bl	800fbca <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	3312      	adds	r3, #18
 800da6a:	2206      	movs	r2, #6
 800da6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da6e:	4618      	mov	r0, r3
 800da70:	f002 f8ab 	bl	800fbca <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	330e      	adds	r3, #14
 800da78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da7a:	6812      	ldr	r2, [r2, #0]
 800da7c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	3318      	adds	r3, #24
 800da82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da84:	6812      	ldr	r2, [r2, #0]
 800da86:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	2200      	movs	r2, #0
 800da8c:	701a      	strb	r2, [r3, #0]
 800da8e:	2200      	movs	r2, #0
 800da90:	f042 0201 	orr.w	r2, r2, #1
 800da94:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	2200      	movs	r2, #0
 800da9a:	f042 0208 	orr.w	r2, r2, #8
 800da9e:	709a      	strb	r2, [r3, #2]
 800daa0:	2200      	movs	r2, #0
 800daa2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	2206      	movs	r2, #6
 800daa8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	2204      	movs	r2, #4
 800daae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800dab0:	f640 0306 	movw	r3, #2054	@ 0x806
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68ba      	ldr	r2, [r7, #8]
 800daba:	69b9      	ldr	r1, [r7, #24]
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f001 fcaf 	bl	800f420 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800dac2:	69b8      	ldr	r0, [r7, #24]
 800dac4:	f7fe f87e 	bl	800bbc4 <pbuf_free>
  p = NULL;
 800dac8:	2300      	movs	r3, #0
 800daca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800dacc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3720      	adds	r7, #32
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	080121ec 	.word	0x080121ec
 800dadc:	0801233c 	.word	0x0801233c
 800dae0:	08012264 	.word	0x08012264
 800dae4:	080123ec 	.word	0x080123ec
 800dae8:	08012420 	.word	0x08012420

0800daec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b088      	sub	sp, #32
 800daf0:	af04      	add	r7, sp, #16
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db08:	2201      	movs	r2, #1
 800db0a:	9203      	str	r2, [sp, #12]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	9202      	str	r2, [sp, #8]
 800db10:	4a06      	ldr	r2, [pc, #24]	@ (800db2c <etharp_request_dst+0x40>)
 800db12:	9201      	str	r2, [sp, #4]
 800db14:	9300      	str	r3, [sp, #0]
 800db16:	4603      	mov	r3, r0
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f7ff ff5a 	bl	800d9d4 <etharp_raw>
 800db20:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	08012a44 	.word	0x08012a44

0800db30 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800db3a:	4a05      	ldr	r2, [pc, #20]	@ (800db50 <etharp_request+0x20>)
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7ff ffd4 	bl	800daec <etharp_request_dst>
 800db44:	4603      	mov	r3, r0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	08012a3c 	.word	0x08012a3c

0800db54 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b08e      	sub	sp, #56	@ 0x38
 800db58:	af04      	add	r7, sp, #16
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800db5e:	4b79      	ldr	r3, [pc, #484]	@ (800dd44 <icmp_input+0x1f0>)
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800db64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	f003 030f 	and.w	r3, r3, #15
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	b2db      	uxtb	r3, r3
 800db72:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800db74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db76:	2b13      	cmp	r3, #19
 800db78:	f240 80cd 	bls.w	800dd16 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	895b      	ldrh	r3, [r3, #10]
 800db80:	2b03      	cmp	r3, #3
 800db82:	f240 80ca 	bls.w	800dd1a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800db90:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800db94:	2b00      	cmp	r3, #0
 800db96:	f000 80b7 	beq.w	800dd08 <icmp_input+0x1b4>
 800db9a:	2b08      	cmp	r3, #8
 800db9c:	f040 80b7 	bne.w	800dd0e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800dba0:	4b69      	ldr	r3, [pc, #420]	@ (800dd48 <icmp_input+0x1f4>)
 800dba2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dba4:	4b67      	ldr	r3, [pc, #412]	@ (800dd44 <icmp_input+0x1f0>)
 800dba6:	695b      	ldr	r3, [r3, #20]
 800dba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dbac:	2be0      	cmp	r3, #224	@ 0xe0
 800dbae:	f000 80bb 	beq.w	800dd28 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dbb2:	4b64      	ldr	r3, [pc, #400]	@ (800dd44 <icmp_input+0x1f0>)
 800dbb4:	695b      	ldr	r3, [r3, #20]
 800dbb6:	4a63      	ldr	r2, [pc, #396]	@ (800dd44 <icmp_input+0x1f0>)
 800dbb8:	6812      	ldr	r2, [r2, #0]
 800dbba:	4611      	mov	r1, r2
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 fbe3 	bl	800e388 <ip4_addr_isbroadcast_u32>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f040 80b1 	bne.w	800dd2c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	891b      	ldrh	r3, [r3, #8]
 800dbce:	2b07      	cmp	r3, #7
 800dbd0:	f240 80a5 	bls.w	800dd1e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dbd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbd6:	330e      	adds	r3, #14
 800dbd8:	4619      	mov	r1, r3
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f7fd ff5c 	bl	800ba98 <pbuf_add_header>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d04b      	beq.n	800dc7e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	891a      	ldrh	r2, [r3, #8]
 800dbea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbec:	4413      	add	r3, r2
 800dbee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	891b      	ldrh	r3, [r3, #8]
 800dbf4:	8b7a      	ldrh	r2, [r7, #26]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	f0c0 809a 	bcc.w	800dd30 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dbfc:	8b7b      	ldrh	r3, [r7, #26]
 800dbfe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dc02:	4619      	mov	r1, r3
 800dc04:	200e      	movs	r0, #14
 800dc06:	f7fd fcfb 	bl	800b600 <pbuf_alloc>
 800dc0a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f000 8090 	beq.w	800dd34 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	895b      	ldrh	r3, [r3, #10]
 800dc18:	461a      	mov	r2, r3
 800dc1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc1c:	3308      	adds	r3, #8
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d203      	bcs.n	800dc2a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dc22:	6978      	ldr	r0, [r7, #20]
 800dc24:	f7fd ffce 	bl	800bbc4 <pbuf_free>
          goto icmperr;
 800dc28:	e085      	b.n	800dd36 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dc30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc32:	4618      	mov	r0, r3
 800dc34:	f001 ffc9 	bl	800fbca <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dc38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6978      	ldr	r0, [r7, #20]
 800dc3e:	f7fd ff3b 	bl	800bab8 <pbuf_remove_header>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d009      	beq.n	800dc5c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dc48:	4b40      	ldr	r3, [pc, #256]	@ (800dd4c <icmp_input+0x1f8>)
 800dc4a:	22b6      	movs	r2, #182	@ 0xb6
 800dc4c:	4940      	ldr	r1, [pc, #256]	@ (800dd50 <icmp_input+0x1fc>)
 800dc4e:	4841      	ldr	r0, [pc, #260]	@ (800dd54 <icmp_input+0x200>)
 800dc50:	f001 fee0 	bl	800fa14 <iprintf>
          pbuf_free(r);
 800dc54:	6978      	ldr	r0, [r7, #20]
 800dc56:	f7fd ffb5 	bl	800bbc4 <pbuf_free>
          goto icmperr;
 800dc5a:	e06c      	b.n	800dd36 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	6978      	ldr	r0, [r7, #20]
 800dc60:	f7fe f8e4 	bl	800be2c <pbuf_copy>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d003      	beq.n	800dc72 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dc6a:	6978      	ldr	r0, [r7, #20]
 800dc6c:	f7fd ffaa 	bl	800bbc4 <pbuf_free>
          goto icmperr;
 800dc70:	e061      	b.n	800dd36 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7fd ffa6 	bl	800bbc4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	607b      	str	r3, [r7, #4]
 800dc7c:	e00f      	b.n	800dc9e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc80:	330e      	adds	r3, #14
 800dc82:	4619      	mov	r1, r3
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7fd ff17 	bl	800bab8 <pbuf_remove_header>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d006      	beq.n	800dc9e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dc90:	4b2e      	ldr	r3, [pc, #184]	@ (800dd4c <icmp_input+0x1f8>)
 800dc92:	22c7      	movs	r2, #199	@ 0xc7
 800dc94:	4930      	ldr	r1, [pc, #192]	@ (800dd58 <icmp_input+0x204>)
 800dc96:	482f      	ldr	r0, [pc, #188]	@ (800dd54 <icmp_input+0x200>)
 800dc98:	f001 febc 	bl	800fa14 <iprintf>
          goto icmperr;
 800dc9c:	e04b      	b.n	800dd36 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dca4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dca6:	4619      	mov	r1, r3
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7fd fef5 	bl	800ba98 <pbuf_add_header>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d12b      	bne.n	800dd0c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dcc2:	4b20      	ldr	r3, [pc, #128]	@ (800dd44 <icmp_input+0x1f0>)
 800dcc4:	691a      	ldr	r2, [r3, #16]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	2200      	movs	r2, #0
 800dcce:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	709a      	strb	r2, [r3, #2]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	22ff      	movs	r2, #255	@ 0xff
 800dcde:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	729a      	strb	r2, [r3, #10]
 800dce6:	2200      	movs	r2, #0
 800dce8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	9302      	str	r3, [sp, #8]
 800dcee:	2301      	movs	r3, #1
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	23ff      	movs	r3, #255	@ 0xff
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	69f9      	ldr	r1, [r7, #28]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fa6b 	bl	800e1d8 <ip4_output_if>
 800dd02:	4603      	mov	r3, r0
 800dd04:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dd06:	e001      	b.n	800dd0c <icmp_input+0x1b8>
      break;
 800dd08:	bf00      	nop
 800dd0a:	e000      	b.n	800dd0e <icmp_input+0x1ba>
      break;
 800dd0c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7fd ff58 	bl	800bbc4 <pbuf_free>
  return;
 800dd14:	e013      	b.n	800dd3e <icmp_input+0x1ea>
    goto lenerr;
 800dd16:	bf00      	nop
 800dd18:	e002      	b.n	800dd20 <icmp_input+0x1cc>
    goto lenerr;
 800dd1a:	bf00      	nop
 800dd1c:	e000      	b.n	800dd20 <icmp_input+0x1cc>
        goto lenerr;
 800dd1e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7fd ff4f 	bl	800bbc4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd26:	e00a      	b.n	800dd3e <icmp_input+0x1ea>
        goto icmperr;
 800dd28:	bf00      	nop
 800dd2a:	e004      	b.n	800dd36 <icmp_input+0x1e2>
        goto icmperr;
 800dd2c:	bf00      	nop
 800dd2e:	e002      	b.n	800dd36 <icmp_input+0x1e2>
          goto icmperr;
 800dd30:	bf00      	nop
 800dd32:	e000      	b.n	800dd36 <icmp_input+0x1e2>
          goto icmperr;
 800dd34:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7fd ff44 	bl	800bbc4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd3c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dd3e:	3728      	adds	r7, #40	@ 0x28
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	20009d70 	.word	0x20009d70
 800dd48:	20009d84 	.word	0x20009d84
 800dd4c:	08012464 	.word	0x08012464
 800dd50:	0801249c 	.word	0x0801249c
 800dd54:	080124d4 	.word	0x080124d4
 800dd58:	080124fc 	.word	0x080124fc

0800dd5c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	460b      	mov	r3, r1
 800dd66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dd68:	78fb      	ldrb	r3, [r7, #3]
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	2103      	movs	r1, #3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f814 	bl	800dd9c <icmp_send_response>
}
 800dd74:	bf00      	nop
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	460b      	mov	r3, r1
 800dd86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dd88:	78fb      	ldrb	r3, [r7, #3]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	210b      	movs	r1, #11
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f804 	bl	800dd9c <icmp_send_response>
}
 800dd94:	bf00      	nop
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b08c      	sub	sp, #48	@ 0x30
 800dda0:	af04      	add	r7, sp, #16
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	460b      	mov	r3, r1
 800dda6:	70fb      	strb	r3, [r7, #3]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ddac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ddb0:	2124      	movs	r1, #36	@ 0x24
 800ddb2:	2022      	movs	r0, #34	@ 0x22
 800ddb4:	f7fd fc24 	bl	800b600 <pbuf_alloc>
 800ddb8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d04c      	beq.n	800de5a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	895b      	ldrh	r3, [r3, #10]
 800ddc4:	2b23      	cmp	r3, #35	@ 0x23
 800ddc6:	d806      	bhi.n	800ddd6 <icmp_send_response+0x3a>
 800ddc8:	4b26      	ldr	r3, [pc, #152]	@ (800de64 <icmp_send_response+0xc8>)
 800ddca:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ddce:	4926      	ldr	r1, [pc, #152]	@ (800de68 <icmp_send_response+0xcc>)
 800ddd0:	4826      	ldr	r0, [pc, #152]	@ (800de6c <icmp_send_response+0xd0>)
 800ddd2:	f001 fe1f 	bl	800fa14 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	78fa      	ldrb	r2, [r7, #3]
 800dde6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	78ba      	ldrb	r2, [r7, #2]
 800ddec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	711a      	strb	r2, [r3, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	719a      	strb	r2, [r3, #6]
 800ddfe:	2200      	movs	r2, #0
 800de00:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	f103 0008 	add.w	r0, r3, #8
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	221c      	movs	r2, #28
 800de10:	4619      	mov	r1, r3
 800de12:	f001 feda 	bl	800fbca <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800de1c:	f107 030c 	add.w	r3, r7, #12
 800de20:	4618      	mov	r0, r3
 800de22:	f000 f825 	bl	800de70 <ip4_route>
 800de26:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d011      	beq.n	800de52 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	2200      	movs	r2, #0
 800de32:	709a      	strb	r2, [r3, #2]
 800de34:	2200      	movs	r2, #0
 800de36:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800de38:	f107 020c 	add.w	r2, r7, #12
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	9302      	str	r3, [sp, #8]
 800de40:	2301      	movs	r3, #1
 800de42:	9301      	str	r3, [sp, #4]
 800de44:	2300      	movs	r3, #0
 800de46:	9300      	str	r3, [sp, #0]
 800de48:	23ff      	movs	r3, #255	@ 0xff
 800de4a:	2100      	movs	r1, #0
 800de4c:	69f8      	ldr	r0, [r7, #28]
 800de4e:	f000 f9c3 	bl	800e1d8 <ip4_output_if>
  }
  pbuf_free(q);
 800de52:	69f8      	ldr	r0, [r7, #28]
 800de54:	f7fd feb6 	bl	800bbc4 <pbuf_free>
 800de58:	e000      	b.n	800de5c <icmp_send_response+0xc0>
    return;
 800de5a:	bf00      	nop
}
 800de5c:	3720      	adds	r7, #32
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	08012464 	.word	0x08012464
 800de68:	08012530 	.word	0x08012530
 800de6c:	080124d4 	.word	0x080124d4

0800de70 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800de78:	4b33      	ldr	r3, [pc, #204]	@ (800df48 <ip4_route+0xd8>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	60fb      	str	r3, [r7, #12]
 800de7e:	e036      	b.n	800deee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de86:	f003 0301 	and.w	r3, r3, #1
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d02b      	beq.n	800dee8 <ip4_route+0x78>
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de96:	089b      	lsrs	r3, r3, #2
 800de98:	f003 0301 	and.w	r3, r3, #1
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d022      	beq.n	800dee8 <ip4_route+0x78>
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	3304      	adds	r3, #4
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d01d      	beq.n	800dee8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	3304      	adds	r3, #4
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	405a      	eors	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3308      	adds	r3, #8
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4013      	ands	r3, r2
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d101      	bne.n	800dec8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	e038      	b.n	800df3a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dece:	f003 0302 	and.w	r3, r3, #2
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d108      	bne.n	800dee8 <ip4_route+0x78>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	330c      	adds	r3, #12
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d101      	bne.n	800dee8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	e028      	b.n	800df3a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	60fb      	str	r3, [r7, #12]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1c5      	bne.n	800de80 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800def4:	4b15      	ldr	r3, [pc, #84]	@ (800df4c <ip4_route+0xdc>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d01a      	beq.n	800df32 <ip4_route+0xc2>
 800defc:	4b13      	ldr	r3, [pc, #76]	@ (800df4c <ip4_route+0xdc>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800df04:	f003 0301 	and.w	r3, r3, #1
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d012      	beq.n	800df32 <ip4_route+0xc2>
 800df0c:	4b0f      	ldr	r3, [pc, #60]	@ (800df4c <ip4_route+0xdc>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800df14:	f003 0304 	and.w	r3, r3, #4
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00a      	beq.n	800df32 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df1c:	4b0b      	ldr	r3, [pc, #44]	@ (800df4c <ip4_route+0xdc>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3304      	adds	r3, #4
 800df22:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df24:	2b00      	cmp	r3, #0
 800df26:	d004      	beq.n	800df32 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800df30:	d101      	bne.n	800df36 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	e001      	b.n	800df3a <ip4_route+0xca>
  }

  return netif_default;
 800df36:	4b05      	ldr	r3, [pc, #20]	@ (800df4c <ip4_route+0xdc>)
 800df38:	681b      	ldr	r3, [r3, #0]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3714      	adds	r7, #20
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr
 800df46:	bf00      	nop
 800df48:	2000cf84 	.word	0x2000cf84
 800df4c:	2000cf88 	.word	0x2000cf88

0800df50 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800df5e:	f003 0301 	and.w	r3, r3, #1
 800df62:	b2db      	uxtb	r3, r3
 800df64:	2b00      	cmp	r3, #0
 800df66:	d016      	beq.n	800df96 <ip4_input_accept+0x46>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3304      	adds	r3, #4
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d011      	beq.n	800df96 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df72:	4b0b      	ldr	r3, [pc, #44]	@ (800dfa0 <ip4_input_accept+0x50>)
 800df74:	695a      	ldr	r2, [r3, #20]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	3304      	adds	r3, #4
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d008      	beq.n	800df92 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800df80:	4b07      	ldr	r3, [pc, #28]	@ (800dfa0 <ip4_input_accept+0x50>)
 800df82:	695b      	ldr	r3, [r3, #20]
 800df84:	6879      	ldr	r1, [r7, #4]
 800df86:	4618      	mov	r0, r3
 800df88:	f000 f9fe 	bl	800e388 <ip4_addr_isbroadcast_u32>
 800df8c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d001      	beq.n	800df96 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800df92:	2301      	movs	r3, #1
 800df94:	e000      	b.n	800df98 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800df96:	2300      	movs	r3, #0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	20009d70 	.word	0x20009d70

0800dfa4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	091b      	lsrs	r3, r3, #4
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b04      	cmp	r3, #4
 800dfbe:	d004      	beq.n	800dfca <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7fd fdff 	bl	800bbc4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e0fd      	b.n	800e1c6 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	f003 030f 	and.w	r3, r3, #15
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	885b      	ldrh	r3, [r3, #2]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fc fa5f 	bl	800a4a4 <lwip_htons>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	891b      	ldrh	r3, [r3, #8]
 800dfee:	89ba      	ldrh	r2, [r7, #12]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d204      	bcs.n	800dffe <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dff4:	89bb      	ldrh	r3, [r7, #12]
 800dff6:	4619      	mov	r1, r3
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7fd fc5d 	bl	800b8b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	895b      	ldrh	r3, [r3, #10]
 800e002:	89fa      	ldrh	r2, [r7, #14]
 800e004:	429a      	cmp	r2, r3
 800e006:	d807      	bhi.n	800e018 <ip4_input+0x74>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	891b      	ldrh	r3, [r3, #8]
 800e00c:	89ba      	ldrh	r2, [r7, #12]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d802      	bhi.n	800e018 <ip4_input+0x74>
 800e012:	89fb      	ldrh	r3, [r7, #14]
 800e014:	2b13      	cmp	r3, #19
 800e016:	d804      	bhi.n	800e022 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7fd fdd3 	bl	800bbc4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	e0d1      	b.n	800e1c6 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	691b      	ldr	r3, [r3, #16]
 800e026:	4a6a      	ldr	r2, [pc, #424]	@ (800e1d0 <ip4_input+0x22c>)
 800e028:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	4a68      	ldr	r2, [pc, #416]	@ (800e1d0 <ip4_input+0x22c>)
 800e030:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e032:	4b67      	ldr	r3, [pc, #412]	@ (800e1d0 <ip4_input+0x22c>)
 800e034:	695b      	ldr	r3, [r3, #20]
 800e036:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e03a:	2be0      	cmp	r3, #224	@ 0xe0
 800e03c:	d112      	bne.n	800e064 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d007      	beq.n	800e05e <ip4_input+0xba>
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	3304      	adds	r3, #4
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <ip4_input+0xba>
      netif = inp;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	613b      	str	r3, [r7, #16]
 800e05c:	e02a      	b.n	800e0b4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e05e:	2300      	movs	r3, #0
 800e060:	613b      	str	r3, [r7, #16]
 800e062:	e027      	b.n	800e0b4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e064:	6838      	ldr	r0, [r7, #0]
 800e066:	f7ff ff73 	bl	800df50 <ip4_input_accept>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d002      	beq.n	800e076 <ip4_input+0xd2>
      netif = inp;
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	613b      	str	r3, [r7, #16]
 800e074:	e01e      	b.n	800e0b4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e076:	2300      	movs	r3, #0
 800e078:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e07a:	4b55      	ldr	r3, [pc, #340]	@ (800e1d0 <ip4_input+0x22c>)
 800e07c:	695b      	ldr	r3, [r3, #20]
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2b7f      	cmp	r3, #127	@ 0x7f
 800e082:	d017      	beq.n	800e0b4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e084:	4b53      	ldr	r3, [pc, #332]	@ (800e1d4 <ip4_input+0x230>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	613b      	str	r3, [r7, #16]
 800e08a:	e00e      	b.n	800e0aa <ip4_input+0x106>
          if (netif == inp) {
 800e08c:	693a      	ldr	r2, [r7, #16]
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	429a      	cmp	r2, r3
 800e092:	d006      	beq.n	800e0a2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e094:	6938      	ldr	r0, [r7, #16]
 800e096:	f7ff ff5b 	bl	800df50 <ip4_input_accept>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d108      	bne.n	800e0b2 <ip4_input+0x10e>
 800e0a0:	e000      	b.n	800e0a4 <ip4_input+0x100>
            continue;
 800e0a2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	613b      	str	r3, [r7, #16]
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1ed      	bne.n	800e08c <ip4_input+0xe8>
 800e0b0:	e000      	b.n	800e0b4 <ip4_input+0x110>
            break;
 800e0b2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0b4:	4b46      	ldr	r3, [pc, #280]	@ (800e1d0 <ip4_input+0x22c>)
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	6839      	ldr	r1, [r7, #0]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 f964 	bl	800e388 <ip4_addr_isbroadcast_u32>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d105      	bne.n	800e0d2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e0c6:	4b42      	ldr	r3, [pc, #264]	@ (800e1d0 <ip4_input+0x22c>)
 800e0c8:	691b      	ldr	r3, [r3, #16]
 800e0ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0ce:	2be0      	cmp	r3, #224	@ 0xe0
 800e0d0:	d104      	bne.n	800e0dc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7fd fd76 	bl	800bbc4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e074      	b.n	800e1c6 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d104      	bne.n	800e0ec <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f7fd fd6e 	bl	800bbc4 <pbuf_free>
    return ERR_OK;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	e06c      	b.n	800e1c6 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	88db      	ldrh	r3, [r3, #6]
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00b      	beq.n	800e116 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fdc6 	bl	800ec90 <ip4_reass>
 800e104:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d101      	bne.n	800e110 <ip4_input+0x16c>
      return ERR_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	e05a      	b.n	800e1c6 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e116:	4a2e      	ldr	r2, [pc, #184]	@ (800e1d0 <ip4_input+0x22c>)
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e11c:	4a2c      	ldr	r2, [pc, #176]	@ (800e1d0 <ip4_input+0x22c>)
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e122:	4a2b      	ldr	r2, [pc, #172]	@ (800e1d0 <ip4_input+0x22c>)
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	f003 030f 	and.w	r3, r3, #15
 800e130:	b2db      	uxtb	r3, r3
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	b2db      	uxtb	r3, r3
 800e136:	461a      	mov	r2, r3
 800e138:	4b25      	ldr	r3, [pc, #148]	@ (800e1d0 <ip4_input+0x22c>)
 800e13a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e13c:	89fb      	ldrh	r3, [r7, #14]
 800e13e:	4619      	mov	r1, r3
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7fd fcb9 	bl	800bab8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	7a5b      	ldrb	r3, [r3, #9]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d006      	beq.n	800e15c <ip4_input+0x1b8>
 800e14e:	2b11      	cmp	r3, #17
 800e150:	d109      	bne.n	800e166 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7fe f975 	bl	800c444 <udp_input>
        break;
 800e15a:	e021      	b.n	800e1a0 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7ff fcf8 	bl	800db54 <icmp_input>
        break;
 800e164:	e01c      	b.n	800e1a0 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e166:	4b1a      	ldr	r3, [pc, #104]	@ (800e1d0 <ip4_input+0x22c>)
 800e168:	695b      	ldr	r3, [r3, #20]
 800e16a:	6939      	ldr	r1, [r7, #16]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 f90b 	bl	800e388 <ip4_addr_isbroadcast_u32>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10f      	bne.n	800e198 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e178:	4b15      	ldr	r3, [pc, #84]	@ (800e1d0 <ip4_input+0x22c>)
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e180:	2be0      	cmp	r3, #224	@ 0xe0
 800e182:	d009      	beq.n	800e198 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e184:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e188:	4619      	mov	r1, r3
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f7fd fd07 	bl	800bb9e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e190:	2102      	movs	r1, #2
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7ff fde2 	bl	800dd5c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7fd fd13 	bl	800bbc4 <pbuf_free>
        break;
 800e19e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e1d0 <ip4_input+0x22c>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e1d0 <ip4_input+0x22c>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e1ac:	4b08      	ldr	r3, [pc, #32]	@ (800e1d0 <ip4_input+0x22c>)
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e1b2:	4b07      	ldr	r3, [pc, #28]	@ (800e1d0 <ip4_input+0x22c>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e1b8:	4b05      	ldr	r3, [pc, #20]	@ (800e1d0 <ip4_input+0x22c>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e1be:	4b04      	ldr	r3, [pc, #16]	@ (800e1d0 <ip4_input+0x22c>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3718      	adds	r7, #24
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20009d70 	.word	0x20009d70
 800e1d4:	2000cf84 	.word	0x2000cf84

0800e1d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b08a      	sub	sp, #40	@ 0x28
 800e1dc:	af04      	add	r7, sp, #16
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
 800e1e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d009      	beq.n	800e204 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d003      	beq.n	800e1fe <ip4_output_if+0x26>
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d102      	bne.n	800e204 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e200:	3304      	adds	r3, #4
 800e202:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e204:	78fa      	ldrb	r2, [r7, #3]
 800e206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e208:	9302      	str	r3, [sp, #8]
 800e20a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e20e:	9301      	str	r3, [sp, #4]
 800e210:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	4613      	mov	r3, r2
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	6979      	ldr	r1, [r7, #20]
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f000 f805 	bl	800e22c <ip4_output_if_src>
 800e222:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e224:	4618      	mov	r0, r3
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
 800e238:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	7b9b      	ldrb	r3, [r3, #14]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d006      	beq.n	800e250 <ip4_output_if_src+0x24>
 800e242:	4b4b      	ldr	r3, [pc, #300]	@ (800e370 <ip4_output_if_src+0x144>)
 800e244:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800e248:	494a      	ldr	r1, [pc, #296]	@ (800e374 <ip4_output_if_src+0x148>)
 800e24a:	484b      	ldr	r0, [pc, #300]	@ (800e378 <ip4_output_if_src+0x14c>)
 800e24c:	f001 fbe2 	bl	800fa14 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d060      	beq.n	800e318 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e256:	2314      	movs	r3, #20
 800e258:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e25a:	2114      	movs	r1, #20
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f7fd fc1b 	bl	800ba98 <pbuf_add_header>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e268:	f06f 0301 	mvn.w	r3, #1
 800e26c:	e07c      	b.n	800e368 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	895b      	ldrh	r3, [r3, #10]
 800e278:	2b13      	cmp	r3, #19
 800e27a:	d806      	bhi.n	800e28a <ip4_output_if_src+0x5e>
 800e27c:	4b3c      	ldr	r3, [pc, #240]	@ (800e370 <ip4_output_if_src+0x144>)
 800e27e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800e282:	493e      	ldr	r1, [pc, #248]	@ (800e37c <ip4_output_if_src+0x150>)
 800e284:	483c      	ldr	r0, [pc, #240]	@ (800e378 <ip4_output_if_src+0x14c>)
 800e286:	f001 fbc5 	bl	800fa14 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	78fa      	ldrb	r2, [r7, #3]
 800e28e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800e296:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e2a0:	8b7b      	ldrh	r3, [r7, #26]
 800e2a2:	089b      	lsrs	r3, r3, #2
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e2b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	891b      	ldrh	r3, [r3, #8]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7fc f8f0 	bl	800a4a4 <lwip_htons>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	719a      	strb	r2, [r3, #6]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e2d6:	4b2a      	ldr	r3, [pc, #168]	@ (800e380 <ip4_output_if_src+0x154>)
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fc f8e2 	bl	800a4a4 <lwip_htons>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e2e8:	4b25      	ldr	r3, [pc, #148]	@ (800e380 <ip4_output_if_src+0x154>)
 800e2ea:	881b      	ldrh	r3, [r3, #0]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	4b23      	ldr	r3, [pc, #140]	@ (800e380 <ip4_output_if_src+0x154>)
 800e2f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d104      	bne.n	800e304 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e2fa:	4b22      	ldr	r3, [pc, #136]	@ (800e384 <ip4_output_if_src+0x158>)
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	60da      	str	r2, [r3, #12]
 800e302:	e003      	b.n	800e30c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	2200      	movs	r2, #0
 800e310:	729a      	strb	r2, [r3, #10]
 800e312:	2200      	movs	r2, #0
 800e314:	72da      	strb	r2, [r3, #11]
 800e316:	e00f      	b.n	800e338 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	895b      	ldrh	r3, [r3, #10]
 800e31c:	2b13      	cmp	r3, #19
 800e31e:	d802      	bhi.n	800e326 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e320:	f06f 0301 	mvn.w	r3, #1
 800e324:	e020      	b.n	800e368 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	691b      	ldr	r3, [r3, #16]
 800e330:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e332:	f107 0314 	add.w	r3, r7, #20
 800e336:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00c      	beq.n	800e35a <ip4_output_if_src+0x12e>
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	891a      	ldrh	r2, [r3, #8]
 800e344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e346:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e348:	429a      	cmp	r2, r3
 800e34a:	d906      	bls.n	800e35a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f000 fe91 	bl	800f078 <ip4_frag>
 800e356:	4603      	mov	r3, r0
 800e358:	e006      	b.n	800e368 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e35c:	695b      	ldr	r3, [r3, #20]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	68f9      	ldr	r1, [r7, #12]
 800e362:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e364:	4798      	blx	r3
 800e366:	4603      	mov	r3, r0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3720      	adds	r7, #32
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	0801255c 	.word	0x0801255c
 800e374:	08012590 	.word	0x08012590
 800e378:	0801259c 	.word	0x0801259c
 800e37c:	080125c4 	.word	0x080125c4
 800e380:	2000d08e 	.word	0x2000d08e
 800e384:	08012a38 	.word	0x08012a38

0800e388 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e39c:	d002      	beq.n	800e3a4 <ip4_addr_isbroadcast_u32+0x1c>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e02a      	b.n	800e3fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e3ae:	f003 0302 	and.w	r3, r3, #2
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	e021      	b.n	800e3fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	3304      	adds	r3, #4
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d101      	bne.n	800e3ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	e019      	b.n	800e3fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	3304      	adds	r3, #4
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	405a      	eors	r2, r3
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	3308      	adds	r3, #8
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4013      	ands	r3, r2
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d10d      	bne.n	800e3fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	3308      	adds	r3, #8
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	43da      	mvns	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	3308      	adds	r3, #8
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d101      	bne.n	800e3fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e000      	b.n	800e3fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e3fc:	2300      	movs	r3, #0
  }
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 800e412:	f107 030c 	add.w	r3, r7, #12
 800e416:	4619      	mov	r1, r3
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 f80b 	bl	800e434 <ip4addr_aton>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	d001      	beq.n	800e428 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	e001      	b.n	800e42c <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 800e428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b08a      	sub	sp, #40	@ 0x28
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800e43e:	f107 030c 	add.w	r3, r7, #12
 800e442:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800e44c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e450:	3301      	adds	r3, #1
 800e452:	4a89      	ldr	r2, [pc, #548]	@ (800e678 <ip4addr_aton+0x244>)
 800e454:	4413      	add	r3, r2
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	f003 0304 	and.w	r3, r3, #4
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d101      	bne.n	800e464 <ip4addr_aton+0x30>
      return 0;
 800e460:	2300      	movs	r3, #0
 800e462:	e105      	b.n	800e670 <ip4addr_aton+0x23c>
    }
    val = 0;
 800e464:	2300      	movs	r3, #0
 800e466:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 800e468:	230a      	movs	r3, #10
 800e46a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 800e46e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e472:	2b30      	cmp	r3, #48	@ 0x30
 800e474:	d11c      	bne.n	800e4b0 <ip4addr_aton+0x7c>
      c = *++cp;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	3301      	adds	r3, #1
 800e47a:	607b      	str	r3, [r7, #4]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 800e484:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e488:	2b78      	cmp	r3, #120	@ 0x78
 800e48a:	d003      	beq.n	800e494 <ip4addr_aton+0x60>
 800e48c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e490:	2b58      	cmp	r3, #88	@ 0x58
 800e492:	d10a      	bne.n	800e4aa <ip4addr_aton+0x76>
        base = 16;
 800e494:	2310      	movs	r3, #16
 800e496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	3301      	adds	r3, #1
 800e49e:	607b      	str	r3, [r7, #4]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e4a8:	e002      	b.n	800e4b0 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 800e4aa:	2308      	movs	r3, #8
 800e4ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 800e4b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	4a70      	ldr	r2, [pc, #448]	@ (800e678 <ip4addr_aton+0x244>)
 800e4b8:	4413      	add	r3, r2
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	f003 0304 	and.w	r3, r3, #4
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d011      	beq.n	800e4e8 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 800e4c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e4c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4ca:	fb03 f202 	mul.w	r2, r3, r2
 800e4ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e4d2:	4413      	add	r3, r2
 800e4d4:	3b30      	subs	r3, #48	@ 0x30
 800e4d6:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	607b      	str	r3, [r7, #4]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e4e6:	e7e3      	b.n	800e4b0 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800e4e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e4ec:	2b10      	cmp	r3, #16
 800e4ee:	d127      	bne.n	800e540 <ip4addr_aton+0x10c>
 800e4f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	4a60      	ldr	r2, [pc, #384]	@ (800e678 <ip4addr_aton+0x244>)
 800e4f8:	4413      	add	r3, r2
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e500:	2b00      	cmp	r3, #0
 800e502:	d01d      	beq.n	800e540 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800e504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e506:	011b      	lsls	r3, r3, #4
 800e508:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800e50c:	f102 010a 	add.w	r1, r2, #10
 800e510:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800e514:	3201      	adds	r2, #1
 800e516:	4858      	ldr	r0, [pc, #352]	@ (800e678 <ip4addr_aton+0x244>)
 800e518:	4402      	add	r2, r0
 800e51a:	7812      	ldrb	r2, [r2, #0]
 800e51c:	f002 0203 	and.w	r2, r2, #3
 800e520:	2a02      	cmp	r2, #2
 800e522:	d101      	bne.n	800e528 <ip4addr_aton+0xf4>
 800e524:	2261      	movs	r2, #97	@ 0x61
 800e526:	e000      	b.n	800e52a <ip4addr_aton+0xf6>
 800e528:	2241      	movs	r2, #65	@ 0x41
 800e52a:	1a8a      	subs	r2, r1, r2
 800e52c:	4313      	orrs	r3, r2
 800e52e:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	3301      	adds	r3, #1
 800e534:	607b      	str	r3, [r7, #4]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 800e53e:	e7b7      	b.n	800e4b0 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 800e540:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e544:	2b2e      	cmp	r3, #46	@ 0x2e
 800e546:	d114      	bne.n	800e572 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800e548:	f107 030c 	add.w	r3, r7, #12
 800e54c:	330c      	adds	r3, #12
 800e54e:	69fa      	ldr	r2, [r7, #28]
 800e550:	429a      	cmp	r2, r3
 800e552:	d301      	bcc.n	800e558 <ip4addr_aton+0x124>
        return 0;
 800e554:	2300      	movs	r3, #0
 800e556:	e08b      	b.n	800e670 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	1d1a      	adds	r2, r3, #4
 800e55c:	61fa      	str	r2, [r7, #28]
 800e55e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e560:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3301      	adds	r3, #1
 800e566:	607b      	str	r3, [r7, #4]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 800e570:	e76c      	b.n	800e44c <ip4addr_aton+0x18>
    } else {
      break;
 800e572:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800e574:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00b      	beq.n	800e594 <ip4addr_aton+0x160>
 800e57c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e580:	3301      	adds	r3, #1
 800e582:	4a3d      	ldr	r2, [pc, #244]	@ (800e678 <ip4addr_aton+0x244>)
 800e584:	4413      	add	r3, r2
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	f003 0308 	and.w	r3, r3, #8
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d101      	bne.n	800e594 <ip4addr_aton+0x160>
    return 0;
 800e590:	2300      	movs	r3, #0
 800e592:	e06d      	b.n	800e670 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800e594:	f107 030c 	add.w	r3, r7, #12
 800e598:	69fa      	ldr	r2, [r7, #28]
 800e59a:	1ad3      	subs	r3, r2, r3
 800e59c:	109b      	asrs	r3, r3, #2
 800e59e:	3301      	adds	r3, #1
 800e5a0:	2b04      	cmp	r3, #4
 800e5a2:	d853      	bhi.n	800e64c <ip4addr_aton+0x218>
 800e5a4:	a201      	add	r2, pc, #4	@ (adr r2, 800e5ac <ip4addr_aton+0x178>)
 800e5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5aa:	bf00      	nop
 800e5ac:	0800e5c1 	.word	0x0800e5c1
 800e5b0:	0800e65b 	.word	0x0800e65b
 800e5b4:	0800e5c5 	.word	0x0800e5c5
 800e5b8:	0800e5e7 	.word	0x0800e5e7
 800e5bc:	0800e615 	.word	0x0800e615

    case 0:
      return 0;       /* initial nondigit */
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	e055      	b.n	800e670 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e5ca:	d301      	bcc.n	800e5d0 <ip4addr_aton+0x19c>
        return 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	e04f      	b.n	800e670 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2bff      	cmp	r3, #255	@ 0xff
 800e5d4:	d901      	bls.n	800e5da <ip4addr_aton+0x1a6>
        return 0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	e04a      	b.n	800e670 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	061b      	lsls	r3, r3, #24
 800e5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e5e4:	e03a      	b.n	800e65c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5ec:	d301      	bcc.n	800e5f2 <ip4addr_aton+0x1be>
        return 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	e03e      	b.n	800e670 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2bff      	cmp	r3, #255	@ 0xff
 800e5f6:	d802      	bhi.n	800e5fe <ip4addr_aton+0x1ca>
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	2bff      	cmp	r3, #255	@ 0xff
 800e5fc:	d901      	bls.n	800e602 <ip4addr_aton+0x1ce>
        return 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	e036      	b.n	800e670 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	061a      	lsls	r2, r3, #24
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	041b      	lsls	r3, r3, #16
 800e60a:	4313      	orrs	r3, r2
 800e60c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e60e:	4313      	orrs	r3, r2
 800e610:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e612:	e023      	b.n	800e65c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 800e614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e616:	2bff      	cmp	r3, #255	@ 0xff
 800e618:	d901      	bls.n	800e61e <ip4addr_aton+0x1ea>
        return 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	e028      	b.n	800e670 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2bff      	cmp	r3, #255	@ 0xff
 800e622:	d805      	bhi.n	800e630 <ip4addr_aton+0x1fc>
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	2bff      	cmp	r3, #255	@ 0xff
 800e628:	d802      	bhi.n	800e630 <ip4addr_aton+0x1fc>
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	2bff      	cmp	r3, #255	@ 0xff
 800e62e:	d901      	bls.n	800e634 <ip4addr_aton+0x200>
        return 0;
 800e630:	2300      	movs	r3, #0
 800e632:	e01d      	b.n	800e670 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	061a      	lsls	r2, r3, #24
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	041b      	lsls	r3, r3, #16
 800e63c:	431a      	orrs	r2, r3
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	021b      	lsls	r3, r3, #8
 800e642:	4313      	orrs	r3, r2
 800e644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e646:	4313      	orrs	r3, r2
 800e648:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e64a:	e007      	b.n	800e65c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 800e64c:	4b0b      	ldr	r3, [pc, #44]	@ (800e67c <ip4addr_aton+0x248>)
 800e64e:	22f9      	movs	r2, #249	@ 0xf9
 800e650:	490b      	ldr	r1, [pc, #44]	@ (800e680 <ip4addr_aton+0x24c>)
 800e652:	480c      	ldr	r0, [pc, #48]	@ (800e684 <ip4addr_aton+0x250>)
 800e654:	f001 f9de 	bl	800fa14 <iprintf>
      break;
 800e658:	e000      	b.n	800e65c <ip4addr_aton+0x228>
      break;
 800e65a:	bf00      	nop
  }
  if (addr) {
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d005      	beq.n	800e66e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800e662:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e664:	f7fb ff33 	bl	800a4ce <lwip_htonl>
 800e668:	4602      	mov	r2, r0
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800e66e:	2301      	movs	r3, #1
}
 800e670:	4618      	mov	r0, r3
 800e672:	3728      	adds	r7, #40	@ 0x28
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	08012ac3 	.word	0x08012ac3
 800e67c:	080125f4 	.word	0x080125f4
 800e680:	08012630 	.word	0x08012630
 800e684:	0801263c 	.word	0x0801263c

0800e688 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e68e:	2300      	movs	r3, #0
 800e690:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e692:	4b12      	ldr	r3, [pc, #72]	@ (800e6dc <ip_reass_tmr+0x54>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e698:	e018      	b.n	800e6cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	7fdb      	ldrb	r3, [r3, #31]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00b      	beq.n	800e6ba <ip_reass_tmr+0x32>
      r->timer--;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	7fdb      	ldrb	r3, [r3, #31]
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	b2da      	uxtb	r2, r3
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	60fb      	str	r3, [r7, #12]
 800e6b8:	e008      	b.n	800e6cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e6c4:	68b9      	ldr	r1, [r7, #8]
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 f80a 	bl	800e6e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1e3      	bne.n	800e69a <ip_reass_tmr+0x12>
    }
  }
}
 800e6d2:	bf00      	nop
 800e6d4:	bf00      	nop
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	2000d090 	.word	0x2000d090

0800e6e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b088      	sub	sp, #32
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e6ee:	683a      	ldr	r2, [r7, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d105      	bne.n	800e702 <ip_reass_free_complete_datagram+0x22>
 800e6f6:	4b45      	ldr	r3, [pc, #276]	@ (800e80c <ip_reass_free_complete_datagram+0x12c>)
 800e6f8:	22ab      	movs	r2, #171	@ 0xab
 800e6fa:	4945      	ldr	r1, [pc, #276]	@ (800e810 <ip_reass_free_complete_datagram+0x130>)
 800e6fc:	4845      	ldr	r0, [pc, #276]	@ (800e814 <ip_reass_free_complete_datagram+0x134>)
 800e6fe:	f001 f989 	bl	800fa14 <iprintf>
  if (prev != NULL) {
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00a      	beq.n	800e71e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d005      	beq.n	800e71e <ip_reass_free_complete_datagram+0x3e>
 800e712:	4b3e      	ldr	r3, [pc, #248]	@ (800e80c <ip_reass_free_complete_datagram+0x12c>)
 800e714:	22ad      	movs	r2, #173	@ 0xad
 800e716:	4940      	ldr	r1, [pc, #256]	@ (800e818 <ip_reass_free_complete_datagram+0x138>)
 800e718:	483e      	ldr	r0, [pc, #248]	@ (800e814 <ip_reass_free_complete_datagram+0x134>)
 800e71a:	f001 f97b 	bl	800fa14 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	889b      	ldrh	r3, [r3, #4]
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d12a      	bne.n	800e786 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	6858      	ldr	r0, [r3, #4]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	3308      	adds	r3, #8
 800e746:	2214      	movs	r2, #20
 800e748:	4619      	mov	r1, r3
 800e74a:	f001 fa3e 	bl	800fbca <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e74e:	2101      	movs	r1, #1
 800e750:	69b8      	ldr	r0, [r7, #24]
 800e752:	f7ff fb13 	bl	800dd7c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e756:	69b8      	ldr	r0, [r7, #24]
 800e758:	f7fd fac2 	bl	800bce0 <pbuf_clen>
 800e75c:	4603      	mov	r3, r0
 800e75e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e760:	8bfa      	ldrh	r2, [r7, #30]
 800e762:	8a7b      	ldrh	r3, [r7, #18]
 800e764:	4413      	add	r3, r2
 800e766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e76a:	db05      	blt.n	800e778 <ip_reass_free_complete_datagram+0x98>
 800e76c:	4b27      	ldr	r3, [pc, #156]	@ (800e80c <ip_reass_free_complete_datagram+0x12c>)
 800e76e:	22bc      	movs	r2, #188	@ 0xbc
 800e770:	492a      	ldr	r1, [pc, #168]	@ (800e81c <ip_reass_free_complete_datagram+0x13c>)
 800e772:	4828      	ldr	r0, [pc, #160]	@ (800e814 <ip_reass_free_complete_datagram+0x134>)
 800e774:	f001 f94e 	bl	800fa14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e778:	8bfa      	ldrh	r2, [r7, #30]
 800e77a:	8a7b      	ldrh	r3, [r7, #18]
 800e77c:	4413      	add	r3, r2
 800e77e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e780:	69b8      	ldr	r0, [r7, #24]
 800e782:	f7fd fa1f 	bl	800bbc4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e78c:	e01f      	b.n	800e7ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f7fd fa9e 	bl	800bce0 <pbuf_clen>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e7a8:	8bfa      	ldrh	r2, [r7, #30]
 800e7aa:	8a7b      	ldrh	r3, [r7, #18]
 800e7ac:	4413      	add	r3, r2
 800e7ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7b2:	db05      	blt.n	800e7c0 <ip_reass_free_complete_datagram+0xe0>
 800e7b4:	4b15      	ldr	r3, [pc, #84]	@ (800e80c <ip_reass_free_complete_datagram+0x12c>)
 800e7b6:	22cc      	movs	r2, #204	@ 0xcc
 800e7b8:	4918      	ldr	r1, [pc, #96]	@ (800e81c <ip_reass_free_complete_datagram+0x13c>)
 800e7ba:	4816      	ldr	r0, [pc, #88]	@ (800e814 <ip_reass_free_complete_datagram+0x134>)
 800e7bc:	f001 f92a 	bl	800fa14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e7c0:	8bfa      	ldrh	r2, [r7, #30]
 800e7c2:	8a7b      	ldrh	r3, [r7, #18]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f7fd f9fb 	bl	800bbc4 <pbuf_free>
  while (p != NULL) {
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1dc      	bne.n	800e78e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e7d4:	6839      	ldr	r1, [r7, #0]
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f8c2 	bl	800e960 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e7dc:	4b10      	ldr	r3, [pc, #64]	@ (800e820 <ip_reass_free_complete_datagram+0x140>)
 800e7de:	881b      	ldrh	r3, [r3, #0]
 800e7e0:	8bfa      	ldrh	r2, [r7, #30]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d905      	bls.n	800e7f2 <ip_reass_free_complete_datagram+0x112>
 800e7e6:	4b09      	ldr	r3, [pc, #36]	@ (800e80c <ip_reass_free_complete_datagram+0x12c>)
 800e7e8:	22d2      	movs	r2, #210	@ 0xd2
 800e7ea:	490e      	ldr	r1, [pc, #56]	@ (800e824 <ip_reass_free_complete_datagram+0x144>)
 800e7ec:	4809      	ldr	r0, [pc, #36]	@ (800e814 <ip_reass_free_complete_datagram+0x134>)
 800e7ee:	f001 f911 	bl	800fa14 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800e820 <ip_reass_free_complete_datagram+0x140>)
 800e7f4:	881a      	ldrh	r2, [r3, #0]
 800e7f6:	8bfb      	ldrh	r3, [r7, #30]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	4b08      	ldr	r3, [pc, #32]	@ (800e820 <ip_reass_free_complete_datagram+0x140>)
 800e7fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e800:	8bfb      	ldrh	r3, [r7, #30]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3720      	adds	r7, #32
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	08012664 	.word	0x08012664
 800e810:	080126a0 	.word	0x080126a0
 800e814:	080126ac 	.word	0x080126ac
 800e818:	080126d4 	.word	0x080126d4
 800e81c:	080126e8 	.word	0x080126e8
 800e820:	2000d094 	.word	0x2000d094
 800e824:	08012708 	.word	0x08012708

0800e828 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b08a      	sub	sp, #40	@ 0x28
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e832:	2300      	movs	r3, #0
 800e834:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e836:	2300      	movs	r3, #0
 800e838:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e83a:	2300      	movs	r3, #0
 800e83c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e83e:	2300      	movs	r3, #0
 800e840:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e842:	2300      	movs	r3, #0
 800e844:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e846:	4b28      	ldr	r3, [pc, #160]	@ (800e8e8 <ip_reass_remove_oldest_datagram+0xc0>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e84c:	e030      	b.n	800e8b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e850:	695a      	ldr	r2, [r3, #20]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	429a      	cmp	r2, r3
 800e858:	d10c      	bne.n	800e874 <ip_reass_remove_oldest_datagram+0x4c>
 800e85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e85c:	699a      	ldr	r2, [r3, #24]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	691b      	ldr	r3, [r3, #16]
 800e862:	429a      	cmp	r2, r3
 800e864:	d106      	bne.n	800e874 <ip_reass_remove_oldest_datagram+0x4c>
 800e866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e868:	899a      	ldrh	r2, [r3, #12]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	889b      	ldrh	r3, [r3, #4]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	429a      	cmp	r2, r3
 800e872:	d014      	beq.n	800e89e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	3301      	adds	r3, #1
 800e878:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d104      	bne.n	800e88a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e882:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	61bb      	str	r3, [r7, #24]
 800e888:	e009      	b.n	800e89e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	7fda      	ldrb	r2, [r3, #31]
 800e88e:	6a3b      	ldr	r3, [r7, #32]
 800e890:	7fdb      	ldrb	r3, [r3, #31]
 800e892:	429a      	cmp	r2, r3
 800e894:	d803      	bhi.n	800e89e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e898:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d001      	beq.n	800e8aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1cb      	bne.n	800e84e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d008      	beq.n	800e8ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e8bc:	69b9      	ldr	r1, [r7, #24]
 800e8be:	6a38      	ldr	r0, [r7, #32]
 800e8c0:	f7ff ff0e 	bl	800e6e0 <ip_reass_free_complete_datagram>
 800e8c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e8c6:	697a      	ldr	r2, [r7, #20]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e8ce:	697a      	ldr	r2, [r7, #20]
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	da02      	bge.n	800e8dc <ip_reass_remove_oldest_datagram+0xb4>
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	dcac      	bgt.n	800e836 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e8dc:	697b      	ldr	r3, [r7, #20]
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3728      	adds	r7, #40	@ 0x28
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	2000d090 	.word	0x2000d090

0800e8ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e8f6:	2001      	movs	r0, #1
 800e8f8:	f7fc faaa 	bl	800ae50 <memp_malloc>
 800e8fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d110      	bne.n	800e926 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7ff ff8e 	bl	800e828 <ip_reass_remove_oldest_datagram>
 800e90c:	4602      	mov	r2, r0
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	4293      	cmp	r3, r2
 800e912:	dc03      	bgt.n	800e91c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e914:	2001      	movs	r0, #1
 800e916:	f7fc fa9b 	bl	800ae50 <memp_malloc>
 800e91a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d101      	bne.n	800e926 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e922:	2300      	movs	r3, #0
 800e924:	e016      	b.n	800e954 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e926:	2220      	movs	r2, #32
 800e928:	2100      	movs	r1, #0
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f001 f8d7 	bl	800fade <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	220f      	movs	r2, #15
 800e934:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e936:	4b09      	ldr	r3, [pc, #36]	@ (800e95c <ip_reass_enqueue_new_datagram+0x70>)
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e93e:	4a07      	ldr	r2, [pc, #28]	@ (800e95c <ip_reass_enqueue_new_datagram+0x70>)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	3308      	adds	r3, #8
 800e948:	2214      	movs	r2, #20
 800e94a:	6879      	ldr	r1, [r7, #4]
 800e94c:	4618      	mov	r0, r3
 800e94e:	f001 f93c 	bl	800fbca <memcpy>
  return ipr;
 800e952:	68fb      	ldr	r3, [r7, #12]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	2000d090 	.word	0x2000d090

0800e960 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e96a:	4b10      	ldr	r3, [pc, #64]	@ (800e9ac <ip_reass_dequeue_datagram+0x4c>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	429a      	cmp	r2, r3
 800e972:	d104      	bne.n	800e97e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a0c      	ldr	r2, [pc, #48]	@ (800e9ac <ip_reass_dequeue_datagram+0x4c>)
 800e97a:	6013      	str	r3, [r2, #0]
 800e97c:	e00d      	b.n	800e99a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d106      	bne.n	800e992 <ip_reass_dequeue_datagram+0x32>
 800e984:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b0 <ip_reass_dequeue_datagram+0x50>)
 800e986:	f240 1245 	movw	r2, #325	@ 0x145
 800e98a:	490a      	ldr	r1, [pc, #40]	@ (800e9b4 <ip_reass_dequeue_datagram+0x54>)
 800e98c:	480a      	ldr	r0, [pc, #40]	@ (800e9b8 <ip_reass_dequeue_datagram+0x58>)
 800e98e:	f001 f841 	bl	800fa14 <iprintf>
    prev->next = ipr->next;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e99a:	6879      	ldr	r1, [r7, #4]
 800e99c:	2001      	movs	r0, #1
 800e99e:	f7fc facd 	bl	800af3c <memp_free>
}
 800e9a2:	bf00      	nop
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	2000d090 	.word	0x2000d090
 800e9b0:	08012664 	.word	0x08012664
 800e9b4:	0801272c 	.word	0x0801272c
 800e9b8:	080126ac 	.word	0x080126ac

0800e9bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08c      	sub	sp, #48	@ 0x30
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	885b      	ldrh	r3, [r3, #2]
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fb fd61 	bl	800a4a4 <lwip_htons>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	f003 030f 	and.w	r3, r3, #15
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	009b      	lsls	r3, r3, #2
 800e9f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e9f4:	7e7b      	ldrb	r3, [r7, #25]
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	8b7a      	ldrh	r2, [r7, #26]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d202      	bcs.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800ea02:	e135      	b.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ea04:	7e7b      	ldrb	r3, [r7, #25]
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	8b7a      	ldrh	r2, [r7, #26]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	88db      	ldrh	r3, [r3, #6]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fb fd45 	bl	800a4a4 <lwip_htons>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	00db      	lsls	r3, r3, #3
 800ea24:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800ea2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea2e:	2200      	movs	r2, #0
 800ea30:	701a      	strb	r2, [r3, #0]
 800ea32:	2200      	movs	r2, #0
 800ea34:	705a      	strb	r2, [r3, #1]
 800ea36:	2200      	movs	r2, #0
 800ea38:	709a      	strb	r2, [r3, #2]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ea3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea40:	8afa      	ldrh	r2, [r7, #22]
 800ea42:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ea44:	8afa      	ldrh	r2, [r7, #22]
 800ea46:	8b7b      	ldrh	r3, [r7, #26]
 800ea48:	4413      	add	r3, r2
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea4e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ea50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea52:	88db      	ldrh	r3, [r3, #6]
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	8afa      	ldrh	r2, [r7, #22]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d902      	bls.n	800ea62 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ea5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea60:	e106      	b.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea68:	e068      	b.n	800eb3c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ea70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea72:	889b      	ldrh	r3, [r3, #4]
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	889b      	ldrh	r3, [r3, #4]
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d235      	bcs.n	800eaec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ea80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea84:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ea86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d020      	beq.n	800eace <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ea8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8e:	889b      	ldrh	r3, [r3, #4]
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea94:	88db      	ldrh	r3, [r3, #6]
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d307      	bcc.n	800eaac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ea9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea9e:	88db      	ldrh	r3, [r3, #6]
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	889b      	ldrh	r3, [r3, #4]
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d902      	bls.n	800eab2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eaac:	f04f 33ff 	mov.w	r3, #4294967295
 800eab0:	e0de      	b.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800eab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab4:	68ba      	ldr	r2, [r7, #8]
 800eab6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800eab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaba:	88db      	ldrh	r3, [r3, #6]
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eac0:	889b      	ldrh	r3, [r3, #4]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d03d      	beq.n	800eb44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800eacc:	e03a      	b.n	800eb44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800eace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead0:	88db      	ldrh	r3, [r3, #6]
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	889b      	ldrh	r3, [r3, #4]
 800ead8:	b29b      	uxth	r3, r3
 800eada:	429a      	cmp	r2, r3
 800eadc:	d902      	bls.n	800eae4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eade:	f04f 33ff 	mov.w	r3, #4294967295
 800eae2:	e0c5      	b.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	605a      	str	r2, [r3, #4]
      break;
 800eaea:	e02b      	b.n	800eb44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800eaec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaee:	889b      	ldrh	r3, [r3, #4]
 800eaf0:	b29a      	uxth	r2, r3
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	889b      	ldrh	r3, [r3, #4]
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d102      	bne.n	800eb02 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eafc:	f04f 33ff 	mov.w	r3, #4294967295
 800eb00:	e0b6      	b.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800eb02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb04:	889b      	ldrh	r3, [r3, #4]
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	88db      	ldrh	r3, [r3, #6]
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d202      	bcs.n	800eb18 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eb12:	f04f 33ff 	mov.w	r3, #4294967295
 800eb16:	e0ab      	b.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800eb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d009      	beq.n	800eb32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800eb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb20:	88db      	ldrh	r3, [r3, #6]
 800eb22:	b29a      	uxth	r2, r3
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	889b      	ldrh	r3, [r3, #4]
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d001      	beq.n	800eb32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d193      	bne.n	800ea6a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800eb42:	e000      	b.n	800eb46 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800eb44:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800eb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d12d      	bne.n	800eba8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800eb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d01c      	beq.n	800eb8c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800eb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb54:	88db      	ldrh	r3, [r3, #6]
 800eb56:	b29a      	uxth	r2, r3
 800eb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5a:	889b      	ldrh	r3, [r3, #4]
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d906      	bls.n	800eb70 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800eb62:	4b45      	ldr	r3, [pc, #276]	@ (800ec78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eb64:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800eb68:	4944      	ldr	r1, [pc, #272]	@ (800ec7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800eb6a:	4845      	ldr	r0, [pc, #276]	@ (800ec80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eb6c:	f000 ff52 	bl	800fa14 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800eb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800eb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb78:	88db      	ldrh	r3, [r3, #6]
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7e:	889b      	ldrh	r3, [r3, #4]
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d010      	beq.n	800eba8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800eb86:	2300      	movs	r3, #0
 800eb88:	623b      	str	r3, [r7, #32]
 800eb8a:	e00d      	b.n	800eba8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d006      	beq.n	800eba2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800eb94:	4b38      	ldr	r3, [pc, #224]	@ (800ec78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eb96:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800eb9a:	493a      	ldr	r1, [pc, #232]	@ (800ec84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800eb9c:	4838      	ldr	r0, [pc, #224]	@ (800ec80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eb9e:	f000 ff39 	bl	800fa14 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d105      	bne.n	800ebba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	7f9b      	ldrb	r3, [r3, #30]
 800ebb2:	f003 0301 	and.w	r3, r3, #1
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d059      	beq.n	800ec6e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ebba:	6a3b      	ldr	r3, [r7, #32]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d04f      	beq.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d006      	beq.n	800ebd6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	889b      	ldrh	r3, [r3, #4]
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d002      	beq.n	800ebdc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	623b      	str	r3, [r7, #32]
 800ebda:	e041      	b.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ebdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebde:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ebe6:	e012      	b.n	800ec0e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800ebee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf0:	88db      	ldrh	r3, [r3, #6]
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf6:	889b      	ldrh	r3, [r3, #4]
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d002      	beq.n	800ec04 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	623b      	str	r3, [r7, #32]
            break;
 800ec02:	e007      	b.n	800ec14 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ec04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec06:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800ec08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ec0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d1e9      	bne.n	800ebe8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ec14:	6a3b      	ldr	r3, [r7, #32]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d022      	beq.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d106      	bne.n	800ec30 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ec22:	4b15      	ldr	r3, [pc, #84]	@ (800ec78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ec24:	f240 12df 	movw	r2, #479	@ 0x1df
 800ec28:	4917      	ldr	r1, [pc, #92]	@ (800ec88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ec2a:	4815      	ldr	r0, [pc, #84]	@ (800ec80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ec2c:	f000 fef2 	bl	800fa14 <iprintf>
          LWIP_ASSERT("sanity check",
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d106      	bne.n	800ec4a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ec3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ec78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ec3e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ec42:	4911      	ldr	r1, [pc, #68]	@ (800ec88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ec44:	480e      	ldr	r0, [pc, #56]	@ (800ec80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ec46:	f000 fee5 	bl	800fa14 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ec4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d006      	beq.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ec52:	4b09      	ldr	r3, [pc, #36]	@ (800ec78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ec54:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800ec58:	490c      	ldr	r1, [pc, #48]	@ (800ec8c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ec5a:	4809      	ldr	r0, [pc, #36]	@ (800ec80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ec5c:	f000 feda 	bl	800fa14 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ec60:	6a3b      	ldr	r3, [r7, #32]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	bf14      	ite	ne
 800ec66:	2301      	movne	r3, #1
 800ec68:	2300      	moveq	r3, #0
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	e000      	b.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ec6e:	2300      	movs	r3, #0
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3730      	adds	r7, #48	@ 0x30
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	08012664 	.word	0x08012664
 800ec7c:	08012748 	.word	0x08012748
 800ec80:	080126ac 	.word	0x080126ac
 800ec84:	08012768 	.word	0x08012768
 800ec88:	080127a0 	.word	0x080127a0
 800ec8c:	080127b0 	.word	0x080127b0

0800ec90 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08e      	sub	sp, #56	@ 0x38
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ec9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	f003 030f 	and.w	r3, r3, #15
 800eca6:	b2db      	uxtb	r3, r3
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	2b14      	cmp	r3, #20
 800ecae:	f040 8171 	bne.w	800ef94 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ecb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb4:	88db      	ldrh	r3, [r3, #6]
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fb fbf3 	bl	800a4a4 <lwip_htons>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	00db      	lsls	r3, r3, #3
 800ecc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ecca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eccc:	885b      	ldrh	r3, [r3, #2]
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fb fbe7 	bl	800a4a4 <lwip_htons>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ecda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	f003 030f 	and.w	r3, r3, #15
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800ecea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	f0c0 8150 	bcc.w	800ef98 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ecf8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7fc ffeb 	bl	800bce0 <pbuf_clen>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ed0e:	4b8c      	ldr	r3, [pc, #560]	@ (800ef40 <ip4_reass+0x2b0>)
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	461a      	mov	r2, r3
 800ed14:	8c3b      	ldrh	r3, [r7, #32]
 800ed16:	4413      	add	r3, r2
 800ed18:	2b0a      	cmp	r3, #10
 800ed1a:	dd10      	ble.n	800ed3e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ed1c:	8c3b      	ldrh	r3, [r7, #32]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed22:	f7ff fd81 	bl	800e828 <ip_reass_remove_oldest_datagram>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f000 8137 	beq.w	800ef9c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ed2e:	4b84      	ldr	r3, [pc, #528]	@ (800ef40 <ip4_reass+0x2b0>)
 800ed30:	881b      	ldrh	r3, [r3, #0]
 800ed32:	461a      	mov	r2, r3
 800ed34:	8c3b      	ldrh	r3, [r7, #32]
 800ed36:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ed38:	2b0a      	cmp	r3, #10
 800ed3a:	f300 812f 	bgt.w	800ef9c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ed3e:	4b81      	ldr	r3, [pc, #516]	@ (800ef44 <ip4_reass+0x2b4>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed44:	e015      	b.n	800ed72 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ed46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed48:	695a      	ldr	r2, [r3, #20]
 800ed4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d10c      	bne.n	800ed6c <ip4_reass+0xdc>
 800ed52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed54:	699a      	ldr	r2, [r3, #24]
 800ed56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d106      	bne.n	800ed6c <ip4_reass+0xdc>
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed60:	899a      	ldrh	r2, [r3, #12]
 800ed62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed64:	889b      	ldrh	r3, [r3, #4]
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d006      	beq.n	800ed7a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ed6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1e6      	bne.n	800ed46 <ip4_reass+0xb6>
 800ed78:	e000      	b.n	800ed7c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ed7a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d109      	bne.n	800ed96 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ed82:	8c3b      	ldrh	r3, [r7, #32]
 800ed84:	4619      	mov	r1, r3
 800ed86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed88:	f7ff fdb0 	bl	800e8ec <ip_reass_enqueue_new_datagram>
 800ed8c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d11c      	bne.n	800edce <ip4_reass+0x13e>
      goto nullreturn;
 800ed94:	e105      	b.n	800efa2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ed96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed98:	88db      	ldrh	r3, [r3, #6]
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fb fb81 	bl	800a4a4 <lwip_htons>
 800eda2:	4603      	mov	r3, r0
 800eda4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d110      	bne.n	800edce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800edac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edae:	89db      	ldrh	r3, [r3, #14]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fb fb77 	bl	800a4a4 <lwip_htons>
 800edb6:	4603      	mov	r3, r0
 800edb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d006      	beq.n	800edce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800edc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edc2:	3308      	adds	r3, #8
 800edc4:	2214      	movs	r2, #20
 800edc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800edc8:	4618      	mov	r0, r3
 800edca:	f000 fefe 	bl	800fbca <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800edce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd0:	88db      	ldrh	r3, [r3, #6]
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	f003 0320 	and.w	r3, r3, #32
 800edd8:	2b00      	cmp	r3, #0
 800edda:	bf0c      	ite	eq
 800eddc:	2301      	moveq	r3, #1
 800edde:	2300      	movne	r3, #0
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00e      	beq.n	800ee08 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800edea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800edec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edee:	4413      	add	r3, r2
 800edf0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800edf2:	8b7a      	ldrh	r2, [r7, #26]
 800edf4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800edf6:	429a      	cmp	r2, r3
 800edf8:	f0c0 80a0 	bcc.w	800ef3c <ip4_reass+0x2ac>
 800edfc:	8b7b      	ldrh	r3, [r7, #26]
 800edfe:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ee02:	4293      	cmp	r3, r2
 800ee04:	f200 809a 	bhi.w	800ef3c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ee08:	69fa      	ldr	r2, [r7, #28]
 800ee0a:	6879      	ldr	r1, [r7, #4]
 800ee0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee0e:	f7ff fdd5 	bl	800e9bc <ip_reass_chain_frag_into_datagram_and_validate>
 800ee12:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee1a:	f000 809b 	beq.w	800ef54 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ee1e:	4b48      	ldr	r3, [pc, #288]	@ (800ef40 <ip4_reass+0x2b0>)
 800ee20:	881a      	ldrh	r2, [r3, #0]
 800ee22:	8c3b      	ldrh	r3, [r7, #32]
 800ee24:	4413      	add	r3, r2
 800ee26:	b29a      	uxth	r2, r3
 800ee28:	4b45      	ldr	r3, [pc, #276]	@ (800ef40 <ip4_reass+0x2b0>)
 800ee2a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00d      	beq.n	800ee4e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ee32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ee34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee36:	4413      	add	r3, r2
 800ee38:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3c:	8a7a      	ldrh	r2, [r7, #18]
 800ee3e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ee40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee42:	7f9b      	ldrb	r3, [r3, #30]
 800ee44:	f043 0301 	orr.w	r3, r3, #1
 800ee48:	b2da      	uxtb	r2, r3
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee4c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d171      	bne.n	800ef38 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ee54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee56:	8b9b      	ldrh	r3, [r3, #28]
 800ee58:	3314      	adds	r3, #20
 800ee5a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ee5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ee66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee70:	3308      	adds	r3, #8
 800ee72:	2214      	movs	r2, #20
 800ee74:	4619      	mov	r1, r3
 800ee76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee78:	f000 fea7 	bl	800fbca <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ee7c:	8a3b      	ldrh	r3, [r7, #16]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fb fb10 	bl	800a4a4 <lwip_htons>
 800ee84:	4603      	mov	r3, r0
 800ee86:	461a      	mov	r2, r3
 800ee88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee8a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ee8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee8e:	2200      	movs	r2, #0
 800ee90:	719a      	strb	r2, [r3, #6]
 800ee92:	2200      	movs	r2, #0
 800ee94:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ee96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee98:	2200      	movs	r2, #0
 800ee9a:	729a      	strb	r2, [r3, #10]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eea6:	e00d      	b.n	800eec4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eeae:	2114      	movs	r1, #20
 800eeb0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eeb2:	f7fc fe01 	bl	800bab8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800eeb6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7fc ff51 	bl	800bd60 <pbuf_cat>
      r = iprh->next_pbuf;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800eec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1ee      	bne.n	800eea8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eeca:	4b1e      	ldr	r3, [pc, #120]	@ (800ef44 <ip4_reass+0x2b4>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d102      	bne.n	800eeda <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eed4:	2300      	movs	r3, #0
 800eed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eed8:	e010      	b.n	800eefc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eeda:	4b1a      	ldr	r3, [pc, #104]	@ (800ef44 <ip4_reass+0x2b4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eee0:	e007      	b.n	800eef2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d006      	beq.n	800eefa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eeec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1f4      	bne.n	800eee2 <ip4_reass+0x252>
 800eef8:	e000      	b.n	800eefc <ip4_reass+0x26c>
          break;
 800eefa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eefc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eefe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef00:	f7ff fd2e 	bl	800e960 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7fc feeb 	bl	800bce0 <pbuf_clen>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ef0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ef40 <ip4_reass+0x2b0>)
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	8c3a      	ldrh	r2, [r7, #32]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d906      	bls.n	800ef26 <ip4_reass+0x296>
 800ef18:	4b0b      	ldr	r3, [pc, #44]	@ (800ef48 <ip4_reass+0x2b8>)
 800ef1a:	f240 229b 	movw	r2, #667	@ 0x29b
 800ef1e:	490b      	ldr	r1, [pc, #44]	@ (800ef4c <ip4_reass+0x2bc>)
 800ef20:	480b      	ldr	r0, [pc, #44]	@ (800ef50 <ip4_reass+0x2c0>)
 800ef22:	f000 fd77 	bl	800fa14 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ef26:	4b06      	ldr	r3, [pc, #24]	@ (800ef40 <ip4_reass+0x2b0>)
 800ef28:	881a      	ldrh	r2, [r3, #0]
 800ef2a:	8c3b      	ldrh	r3, [r7, #32]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	4b03      	ldr	r3, [pc, #12]	@ (800ef40 <ip4_reass+0x2b0>)
 800ef32:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	e038      	b.n	800efaa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	e036      	b.n	800efaa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ef3c:	bf00      	nop
 800ef3e:	e00a      	b.n	800ef56 <ip4_reass+0x2c6>
 800ef40:	2000d094 	.word	0x2000d094
 800ef44:	2000d090 	.word	0x2000d090
 800ef48:	08012664 	.word	0x08012664
 800ef4c:	080127d4 	.word	0x080127d4
 800ef50:	080126ac 	.word	0x080126ac
    goto nullreturn_ipr;
 800ef54:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ef56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d106      	bne.n	800ef6a <ip4_reass+0x2da>
 800ef5c:	4b15      	ldr	r3, [pc, #84]	@ (800efb4 <ip4_reass+0x324>)
 800ef5e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800ef62:	4915      	ldr	r1, [pc, #84]	@ (800efb8 <ip4_reass+0x328>)
 800ef64:	4815      	ldr	r0, [pc, #84]	@ (800efbc <ip4_reass+0x32c>)
 800ef66:	f000 fd55 	bl	800fa14 <iprintf>
  if (ipr->p == NULL) {
 800ef6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d116      	bne.n	800efa0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ef72:	4b13      	ldr	r3, [pc, #76]	@ (800efc0 <ip4_reass+0x330>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d006      	beq.n	800ef8a <ip4_reass+0x2fa>
 800ef7c:	4b0d      	ldr	r3, [pc, #52]	@ (800efb4 <ip4_reass+0x324>)
 800ef7e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ef82:	4910      	ldr	r1, [pc, #64]	@ (800efc4 <ip4_reass+0x334>)
 800ef84:	480d      	ldr	r0, [pc, #52]	@ (800efbc <ip4_reass+0x32c>)
 800ef86:	f000 fd45 	bl	800fa14 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef8e:	f7ff fce7 	bl	800e960 <ip_reass_dequeue_datagram>
 800ef92:	e006      	b.n	800efa2 <ip4_reass+0x312>
    goto nullreturn;
 800ef94:	bf00      	nop
 800ef96:	e004      	b.n	800efa2 <ip4_reass+0x312>
    goto nullreturn;
 800ef98:	bf00      	nop
 800ef9a:	e002      	b.n	800efa2 <ip4_reass+0x312>
      goto nullreturn;
 800ef9c:	bf00      	nop
 800ef9e:	e000      	b.n	800efa2 <ip4_reass+0x312>
  }

nullreturn:
 800efa0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f7fc fe0e 	bl	800bbc4 <pbuf_free>
  return NULL;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3738      	adds	r7, #56	@ 0x38
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	08012664 	.word	0x08012664
 800efb8:	080127f0 	.word	0x080127f0
 800efbc:	080126ac 	.word	0x080126ac
 800efc0:	2000d090 	.word	0x2000d090
 800efc4:	080127fc 	.word	0x080127fc

0800efc8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800efcc:	2002      	movs	r0, #2
 800efce:	f7fb ff3f 	bl	800ae50 <memp_malloc>
 800efd2:	4603      	mov	r3, r0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d106      	bne.n	800eff4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800efe6:	4b07      	ldr	r3, [pc, #28]	@ (800f004 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800efe8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800efec:	4906      	ldr	r1, [pc, #24]	@ (800f008 <ip_frag_free_pbuf_custom_ref+0x30>)
 800efee:	4807      	ldr	r0, [pc, #28]	@ (800f00c <ip_frag_free_pbuf_custom_ref+0x34>)
 800eff0:	f000 fd10 	bl	800fa14 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800eff4:	6879      	ldr	r1, [r7, #4]
 800eff6:	2002      	movs	r0, #2
 800eff8:	f7fb ffa0 	bl	800af3c <memp_free>
}
 800effc:	bf00      	nop
 800effe:	3708      	adds	r7, #8
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	08012664 	.word	0x08012664
 800f008:	0801281c 	.word	0x0801281c
 800f00c:	080126ac 	.word	0x080126ac

0800f010 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d106      	bne.n	800f030 <ipfrag_free_pbuf_custom+0x20>
 800f022:	4b11      	ldr	r3, [pc, #68]	@ (800f068 <ipfrag_free_pbuf_custom+0x58>)
 800f024:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800f028:	4910      	ldr	r1, [pc, #64]	@ (800f06c <ipfrag_free_pbuf_custom+0x5c>)
 800f02a:	4811      	ldr	r0, [pc, #68]	@ (800f070 <ipfrag_free_pbuf_custom+0x60>)
 800f02c:	f000 fcf2 	bl	800fa14 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	429a      	cmp	r2, r3
 800f036:	d006      	beq.n	800f046 <ipfrag_free_pbuf_custom+0x36>
 800f038:	4b0b      	ldr	r3, [pc, #44]	@ (800f068 <ipfrag_free_pbuf_custom+0x58>)
 800f03a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800f03e:	490d      	ldr	r1, [pc, #52]	@ (800f074 <ipfrag_free_pbuf_custom+0x64>)
 800f040:	480b      	ldr	r0, [pc, #44]	@ (800f070 <ipfrag_free_pbuf_custom+0x60>)
 800f042:	f000 fce7 	bl	800fa14 <iprintf>
  if (pcr->original != NULL) {
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	695b      	ldr	r3, [r3, #20]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d004      	beq.n	800f058 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	4618      	mov	r0, r3
 800f054:	f7fc fdb6 	bl	800bbc4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f7ff ffbd 	bl	800efd8 <ip_frag_free_pbuf_custom_ref>
}
 800f05e:	bf00      	nop
 800f060:	3710      	adds	r7, #16
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	08012664 	.word	0x08012664
 800f06c:	08012828 	.word	0x08012828
 800f070:	080126ac 	.word	0x080126ac
 800f074:	08012834 	.word	0x08012834

0800f078 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b094      	sub	sp, #80	@ 0x50
 800f07c:	af02      	add	r7, sp, #8
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f084:	2300      	movs	r3, #0
 800f086:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f08e:	3b14      	subs	r3, #20
 800f090:	2b00      	cmp	r3, #0
 800f092:	da00      	bge.n	800f096 <ip4_frag+0x1e>
 800f094:	3307      	adds	r3, #7
 800f096:	10db      	asrs	r3, r3, #3
 800f098:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f09a:	2314      	movs	r3, #20
 800f09c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800f0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	f003 030f 	and.w	r3, r3, #15
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	2b14      	cmp	r3, #20
 800f0b8:	d002      	beq.n	800f0c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f0ba:	f06f 0305 	mvn.w	r3, #5
 800f0be:	e110      	b.n	800f2e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	895b      	ldrh	r3, [r3, #10]
 800f0c4:	2b13      	cmp	r3, #19
 800f0c6:	d809      	bhi.n	800f0dc <ip4_frag+0x64>
 800f0c8:	4b88      	ldr	r3, [pc, #544]	@ (800f2ec <ip4_frag+0x274>)
 800f0ca:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f0ce:	4988      	ldr	r1, [pc, #544]	@ (800f2f0 <ip4_frag+0x278>)
 800f0d0:	4888      	ldr	r0, [pc, #544]	@ (800f2f4 <ip4_frag+0x27c>)
 800f0d2:	f000 fc9f 	bl	800fa14 <iprintf>
 800f0d6:	f06f 0305 	mvn.w	r3, #5
 800f0da:	e102      	b.n	800f2e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0de:	88db      	ldrh	r3, [r3, #6]
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7fb f9de 	bl	800a4a4 <lwip_htons>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800f0ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f0ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f0f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f0f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	891b      	ldrh	r3, [r3, #8]
 800f102:	3b14      	subs	r3, #20
 800f104:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800f108:	e0e1      	b.n	800f2ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f10a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f10c:	00db      	lsls	r3, r3, #3
 800f10e:	b29b      	uxth	r3, r3
 800f110:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f114:	4293      	cmp	r3, r2
 800f116:	bf28      	it	cs
 800f118:	4613      	movcs	r3, r2
 800f11a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f11c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f120:	2114      	movs	r1, #20
 800f122:	200e      	movs	r0, #14
 800f124:	f7fc fa6c 	bl	800b600 <pbuf_alloc>
 800f128:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800f12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f000 80d5 	beq.w	800f2dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f134:	895b      	ldrh	r3, [r3, #10]
 800f136:	2b13      	cmp	r3, #19
 800f138:	d806      	bhi.n	800f148 <ip4_frag+0xd0>
 800f13a:	4b6c      	ldr	r3, [pc, #432]	@ (800f2ec <ip4_frag+0x274>)
 800f13c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800f140:	496d      	ldr	r1, [pc, #436]	@ (800f2f8 <ip4_frag+0x280>)
 800f142:	486c      	ldr	r0, [pc, #432]	@ (800f2f4 <ip4_frag+0x27c>)
 800f144:	f000 fc66 	bl	800fa14 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	2214      	movs	r2, #20
 800f14e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f150:	4618      	mov	r0, r3
 800f152:	f000 fd3a 	bl	800fbca <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800f15c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f15e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800f162:	e064      	b.n	800f22e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	895a      	ldrh	r2, [r3, #10]
 800f168:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f16a:	1ad3      	subs	r3, r2, r3
 800f16c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	895b      	ldrh	r3, [r3, #10]
 800f172:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f174:	429a      	cmp	r2, r3
 800f176:	d906      	bls.n	800f186 <ip4_frag+0x10e>
 800f178:	4b5c      	ldr	r3, [pc, #368]	@ (800f2ec <ip4_frag+0x274>)
 800f17a:	f240 322d 	movw	r2, #813	@ 0x32d
 800f17e:	495f      	ldr	r1, [pc, #380]	@ (800f2fc <ip4_frag+0x284>)
 800f180:	485c      	ldr	r0, [pc, #368]	@ (800f2f4 <ip4_frag+0x27c>)
 800f182:	f000 fc47 	bl	800fa14 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f186:	8bfa      	ldrh	r2, [r7, #30]
 800f188:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f18c:	4293      	cmp	r3, r2
 800f18e:	bf28      	it	cs
 800f190:	4613      	movcs	r3, r2
 800f192:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f196:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d105      	bne.n	800f1aa <ip4_frag+0x132>
        poff = 0;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	60fb      	str	r3, [r7, #12]
        continue;
 800f1a8:	e041      	b.n	800f22e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f1aa:	f7ff ff0d 	bl	800efc8 <ip_frag_alloc_pbuf_custom_ref>
 800f1ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d103      	bne.n	800f1be <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f1b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f1b8:	f7fc fd04 	bl	800bbc4 <pbuf_free>
        goto memerr;
 800f1bc:	e08f      	b.n	800f2de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f1be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f1c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f1c6:	4413      	add	r3, r2
 800f1c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800f1cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f1d0:	9201      	str	r2, [sp, #4]
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2241      	movs	r2, #65	@ 0x41
 800f1d8:	2000      	movs	r0, #0
 800f1da:	f7fc fb39 	bl	800b850 <pbuf_alloced_custom>
 800f1de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d106      	bne.n	800f1f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f1e6:	69b8      	ldr	r0, [r7, #24]
 800f1e8:	f7ff fef6 	bl	800efd8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f1ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f1ee:	f7fc fce9 	bl	800bbc4 <pbuf_free>
        goto memerr;
 800f1f2:	e074      	b.n	800f2de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f7fc fd8b 	bl	800bd10 <pbuf_ref>
      pcr->original = p;
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	4a3f      	ldr	r2, [pc, #252]	@ (800f300 <ip4_frag+0x288>)
 800f204:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f206:	6979      	ldr	r1, [r7, #20]
 800f208:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f20a:	f7fc fda9 	bl	800bd60 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f20e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800f212:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f216:	1ad3      	subs	r3, r2, r3
 800f218:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800f21c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f220:	2b00      	cmp	r3, #0
 800f222:	d004      	beq.n	800f22e <ip4_frag+0x1b6>
        poff = 0;
 800f224:	2300      	movs	r3, #0
 800f226:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f22e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f232:	2b00      	cmp	r3, #0
 800f234:	d196      	bne.n	800f164 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f236:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f238:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f23c:	4413      	add	r3, r2
 800f23e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f244:	f1a3 0213 	sub.w	r2, r3, #19
 800f248:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f24c:	429a      	cmp	r2, r3
 800f24e:	bfcc      	ite	gt
 800f250:	2301      	movgt	r3, #1
 800f252:	2300      	movle	r3, #0
 800f254:	b2db      	uxtb	r3, r3
 800f256:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f258:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f25c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f260:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <ip4_frag+0x1f6>
 800f268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d003      	beq.n	800f276 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f26e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f270:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f274:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f276:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fb f913 	bl	800a4a4 <lwip_htons>
 800f27e:	4603      	mov	r3, r0
 800f280:	461a      	mov	r2, r3
 800f282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f284:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f286:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f288:	3314      	adds	r3, #20
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fb f909 	bl	800a4a4 <lwip_htons>
 800f292:	4603      	mov	r3, r0
 800f294:	461a      	mov	r2, r3
 800f296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f298:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f29c:	2200      	movs	r2, #0
 800f29e:	729a      	strb	r2, [r3, #10]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	695b      	ldr	r3, [r3, #20]
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f2ac:	68b8      	ldr	r0, [r7, #8]
 800f2ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f2b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f2b2:	f7fc fc87 	bl	800bbc4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f2b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f2ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f2bc:	1ad3      	subs	r3, r2, r3
 800f2be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800f2c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f2c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f2c8:	4413      	add	r3, r2
 800f2ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800f2ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	f47f af19 	bne.w	800f10a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	e002      	b.n	800f2e2 <ip4_frag+0x26a>
      goto memerr;
 800f2dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f2de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3748      	adds	r7, #72	@ 0x48
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	08012664 	.word	0x08012664
 800f2f0:	08012840 	.word	0x08012840
 800f2f4:	080126ac 	.word	0x080126ac
 800f2f8:	0801285c 	.word	0x0801285c
 800f2fc:	0801287c 	.word	0x0801287c
 800f300:	0800f011 	.word	0x0800f011

0800f304 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b086      	sub	sp, #24
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f30e:	230e      	movs	r3, #14
 800f310:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	895b      	ldrh	r3, [r3, #10]
 800f316:	2b0e      	cmp	r3, #14
 800f318:	d96e      	bls.n	800f3f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	7bdb      	ldrb	r3, [r3, #15]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d106      	bne.n	800f330 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f328:	3301      	adds	r3, #1
 800f32a:	b2da      	uxtb	r2, r3
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	7b1a      	ldrb	r2, [r3, #12]
 800f33a:	7b5b      	ldrb	r3, [r3, #13]
 800f33c:	021b      	lsls	r3, r3, #8
 800f33e:	4313      	orrs	r3, r2
 800f340:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	f003 0301 	and.w	r3, r3, #1
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d023      	beq.n	800f396 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	2b01      	cmp	r3, #1
 800f354:	d10f      	bne.n	800f376 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	785b      	ldrb	r3, [r3, #1]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d11b      	bne.n	800f396 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f362:	2b5e      	cmp	r3, #94	@ 0x5e
 800f364:	d117      	bne.n	800f396 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	7b5b      	ldrb	r3, [r3, #13]
 800f36a:	f043 0310 	orr.w	r3, r3, #16
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	735a      	strb	r2, [r3, #13]
 800f374:	e00f      	b.n	800f396 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	2206      	movs	r2, #6
 800f37a:	4928      	ldr	r1, [pc, #160]	@ (800f41c <ethernet_input+0x118>)
 800f37c:	4618      	mov	r0, r3
 800f37e:	f000 fb9e 	bl	800fabe <memcmp>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d106      	bne.n	800f396 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	7b5b      	ldrb	r3, [r3, #13]
 800f38c:	f043 0308 	orr.w	r3, r3, #8
 800f390:	b2da      	uxtb	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f396:	89fb      	ldrh	r3, [r7, #14]
 800f398:	2b08      	cmp	r3, #8
 800f39a:	d003      	beq.n	800f3a4 <ethernet_input+0xa0>
 800f39c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800f3a0:	d014      	beq.n	800f3cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f3a2:	e032      	b.n	800f40a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f3aa:	f003 0308 	and.w	r3, r3, #8
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d024      	beq.n	800f3fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f3b2:	8afb      	ldrh	r3, [r7, #22]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f7fc fb7e 	bl	800bab8 <pbuf_remove_header>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d11e      	bne.n	800f400 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f3c2:	6839      	ldr	r1, [r7, #0]
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7fe fded 	bl	800dfa4 <ip4_input>
      break;
 800f3ca:	e013      	b.n	800f3f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f3d2:	f003 0308 	and.w	r3, r3, #8
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d014      	beq.n	800f404 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f3da:	8afb      	ldrh	r3, [r7, #22]
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7fc fb6a 	bl	800bab8 <pbuf_remove_header>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d10e      	bne.n	800f408 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f3ea:	6839      	ldr	r1, [r7, #0]
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f7fd ff8d 	bl	800d30c <etharp_input>
      break;
 800f3f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	e00c      	b.n	800f412 <ethernet_input+0x10e>
    goto free_and_return;
 800f3f8:	bf00      	nop
 800f3fa:	e006      	b.n	800f40a <ethernet_input+0x106>
        goto free_and_return;
 800f3fc:	bf00      	nop
 800f3fe:	e004      	b.n	800f40a <ethernet_input+0x106>
        goto free_and_return;
 800f400:	bf00      	nop
 800f402:	e002      	b.n	800f40a <ethernet_input+0x106>
        goto free_and_return;
 800f404:	bf00      	nop
 800f406:	e000      	b.n	800f40a <ethernet_input+0x106>
        goto free_and_return;
 800f408:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f7fc fbda 	bl	800bbc4 <pbuf_free>
  return ERR_OK;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3718      	adds	r7, #24
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	08012a3c 	.word	0x08012a3c

0800f420 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]
 800f42c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f42e:	8c3b      	ldrh	r3, [r7, #32]
 800f430:	4618      	mov	r0, r3
 800f432:	f7fb f837 	bl	800a4a4 <lwip_htons>
 800f436:	4603      	mov	r3, r0
 800f438:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f43a:	210e      	movs	r1, #14
 800f43c:	68b8      	ldr	r0, [r7, #8]
 800f43e:	f7fc fb2b 	bl	800ba98 <pbuf_add_header>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d125      	bne.n	800f494 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	8afa      	ldrh	r2, [r7, #22]
 800f452:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	2206      	movs	r2, #6
 800f458:	6839      	ldr	r1, [r7, #0]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 fbb5 	bl	800fbca <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	3306      	adds	r3, #6
 800f464:	2206      	movs	r2, #6
 800f466:	6879      	ldr	r1, [r7, #4]
 800f468:	4618      	mov	r0, r3
 800f46a:	f000 fbae 	bl	800fbca <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f474:	2b06      	cmp	r3, #6
 800f476:	d006      	beq.n	800f486 <ethernet_output+0x66>
 800f478:	4b0a      	ldr	r3, [pc, #40]	@ (800f4a4 <ethernet_output+0x84>)
 800f47a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800f47e:	490a      	ldr	r1, [pc, #40]	@ (800f4a8 <ethernet_output+0x88>)
 800f480:	480a      	ldr	r0, [pc, #40]	@ (800f4ac <ethernet_output+0x8c>)
 800f482:	f000 fac7 	bl	800fa14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	68b9      	ldr	r1, [r7, #8]
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	4798      	blx	r3
 800f490:	4603      	mov	r3, r0
 800f492:	e002      	b.n	800f49a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f494:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f496:	f06f 0301 	mvn.w	r3, #1
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3718      	adds	r7, #24
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	0801288c 	.word	0x0801288c
 800f4a8:	080128c4 	.word	0x080128c4
 800f4ac:	080128f8 	.word	0x080128f8

0800f4b0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b086      	sub	sp, #24
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	60bb      	str	r3, [r7, #8]
 800f4be:	2304      	movs	r3, #4
 800f4c0:	60fb      	str	r3, [r7, #12]
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	613b      	str	r3, [r7, #16]
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800f4ca:	f107 0308 	add.w	r3, r7, #8
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7f6 fef2 	bl	80062ba <osMessageCreate>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d102      	bne.n	800f4ea <sys_mbox_new+0x3a>
    return ERR_MEM;
 800f4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4e8:	e000      	b.n	800f4ec <sys_mbox_new+0x3c>

  return ERR_OK;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3718      	adds	r7, #24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4618      	mov	r0, r3
 800f502:	f7f6 ffb7 	bl	8006474 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7f6 ffc8 	bl	80064a0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6839      	ldr	r1, [r7, #0]
 800f528:	2200      	movs	r2, #0
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7f6 feee 	bl	800630c <osMessagePut>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d102      	bne.n	800f53c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800f536:	2300      	movs	r3, #0
 800f538:	73fb      	strb	r3, [r7, #15]
 800f53a:	e001      	b.n	800f540 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800f53c:	23ff      	movs	r3, #255	@ 0xff
 800f53e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800f540:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b08c      	sub	sp, #48	@ 0x30
 800f550:	af00      	add	r7, sp, #0
 800f552:	61f8      	str	r0, [r7, #28]
 800f554:	61b9      	str	r1, [r7, #24]
 800f556:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800f558:	f7f6 fccd 	bl	8005ef6 <osKernelSysTick>
 800f55c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d017      	beq.n	800f594 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	6819      	ldr	r1, [r3, #0]
 800f568:	f107 0320 	add.w	r3, r7, #32
 800f56c:	697a      	ldr	r2, [r7, #20]
 800f56e:	4618      	mov	r0, r3
 800f570:	f7f6 ff0c 	bl	800638c <osMessageGet>

    if(event.status == osEventMessage)
 800f574:	6a3b      	ldr	r3, [r7, #32]
 800f576:	2b10      	cmp	r3, #16
 800f578:	d109      	bne.n	800f58e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800f57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f57c:	461a      	mov	r2, r3
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800f582:	f7f6 fcb8 	bl	8005ef6 <osKernelSysTick>
 800f586:	4602      	mov	r2, r0
 800f588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	e019      	b.n	800f5c2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800f58e:	f04f 33ff 	mov.w	r3, #4294967295
 800f592:	e016      	b.n	800f5c2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	6819      	ldr	r1, [r3, #0]
 800f598:	463b      	mov	r3, r7
 800f59a:	f04f 32ff 	mov.w	r2, #4294967295
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7f6 fef4 	bl	800638c <osMessageGet>
 800f5a4:	f107 0320 	add.w	r3, r7, #32
 800f5a8:	463a      	mov	r2, r7
 800f5aa:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	69bb      	ldr	r3, [r7, #24]
 800f5b6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 800f5b8:	f7f6 fc9d 	bl	8005ef6 <osKernelSysTick>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3730      	adds	r7, #48	@ 0x30
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b086      	sub	sp, #24
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
 800f5d2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6819      	ldr	r1, [r3, #0]
 800f5d8:	f107 030c 	add.w	r3, r7, #12
 800f5dc:	2200      	movs	r2, #0
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7f6 fed4 	bl	800638c <osMessageGet>

  if(event.status == osEventMessage)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2b10      	cmp	r3, #16
 800f5e8:	d105      	bne.n	800f5f6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	e001      	b.n	800f5fa <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800f5f6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3718      	adds	r7, #24
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800f602:	b480      	push	{r7}
 800f604:	b083      	sub	sp, #12
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d101      	bne.n	800f616 <sys_mbox_valid+0x14>
    return 0;
 800f612:	2300      	movs	r3, #0
 800f614:	e000      	b.n	800f618 <sys_mbox_valid+0x16>
  else
    return 1;
 800f616:	2301      	movs	r3, #1
}
 800f618:	4618      	mov	r0, r3
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	601a      	str	r2, [r3, #0]
}
 800f632:	bf00      	nop
 800f634:	370c      	adds	r7, #12
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr

0800f63e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b084      	sub	sp, #16
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	460b      	mov	r3, r1
 800f648:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800f64a:	2300      	movs	r3, #0
 800f64c:	60bb      	str	r3, [r7, #8]
 800f64e:	2300      	movs	r3, #0
 800f650:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800f652:	f107 0308 	add.w	r3, r7, #8
 800f656:	2101      	movs	r1, #1
 800f658:	4618      	mov	r0, r3
 800f65a:	f7f6 fd65 	bl	8006128 <osSemaphoreCreate>
 800f65e:	4602      	mov	r2, r0
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d102      	bne.n	800f672 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800f66c:	f04f 33ff 	mov.w	r3, #4294967295
 800f670:	e009      	b.n	800f686 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 800f672:	78fb      	ldrb	r3, [r7, #3]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d105      	bne.n	800f684 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2100      	movs	r1, #0
 800f67e:	4618      	mov	r0, r3
 800f680:	f7f6 fd84 	bl	800618c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800f684:	2300      	movs	r3, #0
}
 800f686:	4618      	mov	r0, r3
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <sys_sem_signal>:
}

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b082      	sub	sp, #8
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7f6 fdc4 	bl	8006228 <osSemaphoreRelease>
}
 800f6a0:	bf00      	nop
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7f6 fded 	bl	8006294 <osSemaphoreDelete>
}
 800f6ba:	bf00      	nop
 800f6bc:	3708      	adds	r7, #8
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 800f6c2:	b480      	push	{r7}
 800f6c4:	b083      	sub	sp, #12
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d101      	bne.n	800f6d6 <sys_sem_valid+0x14>
    return 0;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	e000      	b.n	800f6d8 <sys_sem_valid+0x16>
  else
    return 1;
 800f6d6:	2301      	movs	r3, #1
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	601a      	str	r2, [r3, #0]
}
 800f6f2:	bf00      	nop
 800f6f4:	370c      	adds	r7, #12
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
	...

0800f700 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800f704:	4803      	ldr	r0, [pc, #12]	@ (800f714 <sys_init+0x14>)
 800f706:	f7f6 fc72 	bl	8005fee <osMutexCreate>
 800f70a:	4603      	mov	r3, r0
 800f70c:	4a02      	ldr	r2, [pc, #8]	@ (800f718 <sys_init+0x18>)
 800f70e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800f710:	bf00      	nop
 800f712:	bd80      	pop	{r7, pc}
 800f714:	08012a4c 	.word	0x08012a4c
 800f718:	2000d09c 	.word	0x2000d09c

0800f71c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800f724:	2300      	movs	r3, #0
 800f726:	60bb      	str	r3, [r7, #8]
 800f728:	2300      	movs	r3, #0
 800f72a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800f72c:	f107 0308 	add.w	r3, r7, #8
 800f730:	4618      	mov	r0, r3
 800f732:	f7f6 fc5c 	bl	8005fee <osMutexCreate>
 800f736:	4602      	mov	r2, r0
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d102      	bne.n	800f74a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800f744:	f04f 33ff 	mov.w	r3, #4294967295
 800f748:	e000      	b.n	800f74c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800f74a:	2300      	movs	r3, #0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f04f 31ff 	mov.w	r1, #4294967295
 800f764:	4618      	mov	r0, r3
 800f766:	f7f6 fc5b 	bl	8006020 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 800f76a:	bf00      	nop
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b082      	sub	sp, #8
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4618      	mov	r0, r3
 800f780:	f7f6 fc9c 	bl	80060bc <osMutexRelease>
}
 800f784:	bf00      	nop
 800f786:	3708      	adds	r7, #8
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08c      	sub	sp, #48	@ 0x30
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
 800f798:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800f79a:	f107 0314 	add.w	r3, r7, #20
 800f79e:	2200      	movs	r2, #0
 800f7a0:	601a      	str	r2, [r3, #0]
 800f7a2:	605a      	str	r2, [r3, #4]
 800f7a4:	609a      	str	r2, [r3, #8]
 800f7a6:	60da      	str	r2, [r3, #12]
 800f7a8:	611a      	str	r2, [r3, #16]
 800f7aa:	615a      	str	r2, [r3, #20]
 800f7ac:	619a      	str	r2, [r3, #24]
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	617b      	str	r3, [r7, #20]
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	61bb      	str	r3, [r7, #24]
 800f7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b8:	b21b      	sxth	r3, r3
 800f7ba:	83bb      	strh	r3, [r7, #28]
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 800f7c0:	f107 0314 	add.w	r3, r7, #20
 800f7c4:	6879      	ldr	r1, [r7, #4]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7f6 fba5 	bl	8005f16 <osThreadCreate>
 800f7cc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3730      	adds	r7, #48	@ 0x30
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800f7dc:	4b04      	ldr	r3, [pc, #16]	@ (800f7f0 <sys_arch_protect+0x18>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f04f 31ff 	mov.w	r1, #4294967295
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7f6 fc1b 	bl	8006020 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 800f7ea:	2301      	movs	r3, #1
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	2000d09c 	.word	0x2000d09c

0800f7f4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800f7fc:	4b04      	ldr	r3, [pc, #16]	@ (800f810 <sys_arch_unprotect+0x1c>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4618      	mov	r0, r3
 800f802:	f7f6 fc5b 	bl	80060bc <osMutexRelease>
}
 800f806:	bf00      	nop
 800f808:	3708      	adds	r7, #8
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	2000d09c 	.word	0x2000d09c

0800f814 <rand>:
 800f814:	4b16      	ldr	r3, [pc, #88]	@ (800f870 <rand+0x5c>)
 800f816:	b510      	push	{r4, lr}
 800f818:	681c      	ldr	r4, [r3, #0]
 800f81a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f81c:	b9b3      	cbnz	r3, 800f84c <rand+0x38>
 800f81e:	2018      	movs	r0, #24
 800f820:	f000 fa00 	bl	800fc24 <malloc>
 800f824:	4602      	mov	r2, r0
 800f826:	6320      	str	r0, [r4, #48]	@ 0x30
 800f828:	b920      	cbnz	r0, 800f834 <rand+0x20>
 800f82a:	4b12      	ldr	r3, [pc, #72]	@ (800f874 <rand+0x60>)
 800f82c:	4812      	ldr	r0, [pc, #72]	@ (800f878 <rand+0x64>)
 800f82e:	2152      	movs	r1, #82	@ 0x52
 800f830:	f000 f9da 	bl	800fbe8 <__assert_func>
 800f834:	4911      	ldr	r1, [pc, #68]	@ (800f87c <rand+0x68>)
 800f836:	4b12      	ldr	r3, [pc, #72]	@ (800f880 <rand+0x6c>)
 800f838:	e9c0 1300 	strd	r1, r3, [r0]
 800f83c:	4b11      	ldr	r3, [pc, #68]	@ (800f884 <rand+0x70>)
 800f83e:	6083      	str	r3, [r0, #8]
 800f840:	230b      	movs	r3, #11
 800f842:	8183      	strh	r3, [r0, #12]
 800f844:	2100      	movs	r1, #0
 800f846:	2001      	movs	r0, #1
 800f848:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f84c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f84e:	480e      	ldr	r0, [pc, #56]	@ (800f888 <rand+0x74>)
 800f850:	690b      	ldr	r3, [r1, #16]
 800f852:	694c      	ldr	r4, [r1, #20]
 800f854:	4a0d      	ldr	r2, [pc, #52]	@ (800f88c <rand+0x78>)
 800f856:	4358      	muls	r0, r3
 800f858:	fb02 0004 	mla	r0, r2, r4, r0
 800f85c:	fba3 3202 	umull	r3, r2, r3, r2
 800f860:	3301      	adds	r3, #1
 800f862:	eb40 0002 	adc.w	r0, r0, r2
 800f866:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f86a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f86e:	bd10      	pop	{r4, pc}
 800f870:	2000003c 	.word	0x2000003c
 800f874:	08012a54 	.word	0x08012a54
 800f878:	08012a6b 	.word	0x08012a6b
 800f87c:	abcd330e 	.word	0xabcd330e
 800f880:	e66d1234 	.word	0xe66d1234
 800f884:	0005deec 	.word	0x0005deec
 800f888:	5851f42d 	.word	0x5851f42d
 800f88c:	4c957f2d 	.word	0x4c957f2d

0800f890 <std>:
 800f890:	2300      	movs	r3, #0
 800f892:	b510      	push	{r4, lr}
 800f894:	4604      	mov	r4, r0
 800f896:	e9c0 3300 	strd	r3, r3, [r0]
 800f89a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f89e:	6083      	str	r3, [r0, #8]
 800f8a0:	8181      	strh	r1, [r0, #12]
 800f8a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f8a4:	81c2      	strh	r2, [r0, #14]
 800f8a6:	6183      	str	r3, [r0, #24]
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	2208      	movs	r2, #8
 800f8ac:	305c      	adds	r0, #92	@ 0x5c
 800f8ae:	f000 f916 	bl	800fade <memset>
 800f8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f8e8 <std+0x58>)
 800f8b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f8b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f8ec <std+0x5c>)
 800f8b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f8f0 <std+0x60>)
 800f8bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f8be:	4b0d      	ldr	r3, [pc, #52]	@ (800f8f4 <std+0x64>)
 800f8c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f8f8 <std+0x68>)
 800f8c4:	6224      	str	r4, [r4, #32]
 800f8c6:	429c      	cmp	r4, r3
 800f8c8:	d006      	beq.n	800f8d8 <std+0x48>
 800f8ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f8ce:	4294      	cmp	r4, r2
 800f8d0:	d002      	beq.n	800f8d8 <std+0x48>
 800f8d2:	33d0      	adds	r3, #208	@ 0xd0
 800f8d4:	429c      	cmp	r4, r3
 800f8d6:	d105      	bne.n	800f8e4 <std+0x54>
 800f8d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8e0:	f000 b970 	b.w	800fbc4 <__retarget_lock_init_recursive>
 800f8e4:	bd10      	pop	{r4, pc}
 800f8e6:	bf00      	nop
 800f8e8:	0800fa39 	.word	0x0800fa39
 800f8ec:	0800fa5b 	.word	0x0800fa5b
 800f8f0:	0800fa93 	.word	0x0800fa93
 800f8f4:	0800fab7 	.word	0x0800fab7
 800f8f8:	2000d0a0 	.word	0x2000d0a0

0800f8fc <stdio_exit_handler>:
 800f8fc:	4a02      	ldr	r2, [pc, #8]	@ (800f908 <stdio_exit_handler+0xc>)
 800f8fe:	4903      	ldr	r1, [pc, #12]	@ (800f90c <stdio_exit_handler+0x10>)
 800f900:	4803      	ldr	r0, [pc, #12]	@ (800f910 <stdio_exit_handler+0x14>)
 800f902:	f000 b869 	b.w	800f9d8 <_fwalk_sglue>
 800f906:	bf00      	nop
 800f908:	20000030 	.word	0x20000030
 800f90c:	08010439 	.word	0x08010439
 800f910:	20000040 	.word	0x20000040

0800f914 <cleanup_stdio>:
 800f914:	6841      	ldr	r1, [r0, #4]
 800f916:	4b0c      	ldr	r3, [pc, #48]	@ (800f948 <cleanup_stdio+0x34>)
 800f918:	4299      	cmp	r1, r3
 800f91a:	b510      	push	{r4, lr}
 800f91c:	4604      	mov	r4, r0
 800f91e:	d001      	beq.n	800f924 <cleanup_stdio+0x10>
 800f920:	f000 fd8a 	bl	8010438 <_fflush_r>
 800f924:	68a1      	ldr	r1, [r4, #8]
 800f926:	4b09      	ldr	r3, [pc, #36]	@ (800f94c <cleanup_stdio+0x38>)
 800f928:	4299      	cmp	r1, r3
 800f92a:	d002      	beq.n	800f932 <cleanup_stdio+0x1e>
 800f92c:	4620      	mov	r0, r4
 800f92e:	f000 fd83 	bl	8010438 <_fflush_r>
 800f932:	68e1      	ldr	r1, [r4, #12]
 800f934:	4b06      	ldr	r3, [pc, #24]	@ (800f950 <cleanup_stdio+0x3c>)
 800f936:	4299      	cmp	r1, r3
 800f938:	d004      	beq.n	800f944 <cleanup_stdio+0x30>
 800f93a:	4620      	mov	r0, r4
 800f93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f940:	f000 bd7a 	b.w	8010438 <_fflush_r>
 800f944:	bd10      	pop	{r4, pc}
 800f946:	bf00      	nop
 800f948:	2000d0a0 	.word	0x2000d0a0
 800f94c:	2000d108 	.word	0x2000d108
 800f950:	2000d170 	.word	0x2000d170

0800f954 <global_stdio_init.part.0>:
 800f954:	b510      	push	{r4, lr}
 800f956:	4b0b      	ldr	r3, [pc, #44]	@ (800f984 <global_stdio_init.part.0+0x30>)
 800f958:	4c0b      	ldr	r4, [pc, #44]	@ (800f988 <global_stdio_init.part.0+0x34>)
 800f95a:	4a0c      	ldr	r2, [pc, #48]	@ (800f98c <global_stdio_init.part.0+0x38>)
 800f95c:	601a      	str	r2, [r3, #0]
 800f95e:	4620      	mov	r0, r4
 800f960:	2200      	movs	r2, #0
 800f962:	2104      	movs	r1, #4
 800f964:	f7ff ff94 	bl	800f890 <std>
 800f968:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f96c:	2201      	movs	r2, #1
 800f96e:	2109      	movs	r1, #9
 800f970:	f7ff ff8e 	bl	800f890 <std>
 800f974:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f978:	2202      	movs	r2, #2
 800f97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f97e:	2112      	movs	r1, #18
 800f980:	f7ff bf86 	b.w	800f890 <std>
 800f984:	2000d1d8 	.word	0x2000d1d8
 800f988:	2000d0a0 	.word	0x2000d0a0
 800f98c:	0800f8fd 	.word	0x0800f8fd

0800f990 <__sfp_lock_acquire>:
 800f990:	4801      	ldr	r0, [pc, #4]	@ (800f998 <__sfp_lock_acquire+0x8>)
 800f992:	f000 b918 	b.w	800fbc6 <__retarget_lock_acquire_recursive>
 800f996:	bf00      	nop
 800f998:	2000d1dd 	.word	0x2000d1dd

0800f99c <__sfp_lock_release>:
 800f99c:	4801      	ldr	r0, [pc, #4]	@ (800f9a4 <__sfp_lock_release+0x8>)
 800f99e:	f000 b913 	b.w	800fbc8 <__retarget_lock_release_recursive>
 800f9a2:	bf00      	nop
 800f9a4:	2000d1dd 	.word	0x2000d1dd

0800f9a8 <__sinit>:
 800f9a8:	b510      	push	{r4, lr}
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	f7ff fff0 	bl	800f990 <__sfp_lock_acquire>
 800f9b0:	6a23      	ldr	r3, [r4, #32]
 800f9b2:	b11b      	cbz	r3, 800f9bc <__sinit+0x14>
 800f9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9b8:	f7ff bff0 	b.w	800f99c <__sfp_lock_release>
 800f9bc:	4b04      	ldr	r3, [pc, #16]	@ (800f9d0 <__sinit+0x28>)
 800f9be:	6223      	str	r3, [r4, #32]
 800f9c0:	4b04      	ldr	r3, [pc, #16]	@ (800f9d4 <__sinit+0x2c>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d1f5      	bne.n	800f9b4 <__sinit+0xc>
 800f9c8:	f7ff ffc4 	bl	800f954 <global_stdio_init.part.0>
 800f9cc:	e7f2      	b.n	800f9b4 <__sinit+0xc>
 800f9ce:	bf00      	nop
 800f9d0:	0800f915 	.word	0x0800f915
 800f9d4:	2000d1d8 	.word	0x2000d1d8

0800f9d8 <_fwalk_sglue>:
 800f9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9dc:	4607      	mov	r7, r0
 800f9de:	4688      	mov	r8, r1
 800f9e0:	4614      	mov	r4, r2
 800f9e2:	2600      	movs	r6, #0
 800f9e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f9e8:	f1b9 0901 	subs.w	r9, r9, #1
 800f9ec:	d505      	bpl.n	800f9fa <_fwalk_sglue+0x22>
 800f9ee:	6824      	ldr	r4, [r4, #0]
 800f9f0:	2c00      	cmp	r4, #0
 800f9f2:	d1f7      	bne.n	800f9e4 <_fwalk_sglue+0xc>
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9fa:	89ab      	ldrh	r3, [r5, #12]
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d907      	bls.n	800fa10 <_fwalk_sglue+0x38>
 800fa00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa04:	3301      	adds	r3, #1
 800fa06:	d003      	beq.n	800fa10 <_fwalk_sglue+0x38>
 800fa08:	4629      	mov	r1, r5
 800fa0a:	4638      	mov	r0, r7
 800fa0c:	47c0      	blx	r8
 800fa0e:	4306      	orrs	r6, r0
 800fa10:	3568      	adds	r5, #104	@ 0x68
 800fa12:	e7e9      	b.n	800f9e8 <_fwalk_sglue+0x10>

0800fa14 <iprintf>:
 800fa14:	b40f      	push	{r0, r1, r2, r3}
 800fa16:	b507      	push	{r0, r1, r2, lr}
 800fa18:	4906      	ldr	r1, [pc, #24]	@ (800fa34 <iprintf+0x20>)
 800fa1a:	ab04      	add	r3, sp, #16
 800fa1c:	6808      	ldr	r0, [r1, #0]
 800fa1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa22:	6881      	ldr	r1, [r0, #8]
 800fa24:	9301      	str	r3, [sp, #4]
 800fa26:	f000 f9dd 	bl	800fde4 <_vfiprintf_r>
 800fa2a:	b003      	add	sp, #12
 800fa2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa30:	b004      	add	sp, #16
 800fa32:	4770      	bx	lr
 800fa34:	2000003c 	.word	0x2000003c

0800fa38 <__sread>:
 800fa38:	b510      	push	{r4, lr}
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa40:	f000 f878 	bl	800fb34 <_read_r>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	bfab      	itete	ge
 800fa48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fa4a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa4c:	181b      	addge	r3, r3, r0
 800fa4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fa52:	bfac      	ite	ge
 800fa54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fa56:	81a3      	strhlt	r3, [r4, #12]
 800fa58:	bd10      	pop	{r4, pc}

0800fa5a <__swrite>:
 800fa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa5e:	461f      	mov	r7, r3
 800fa60:	898b      	ldrh	r3, [r1, #12]
 800fa62:	05db      	lsls	r3, r3, #23
 800fa64:	4605      	mov	r5, r0
 800fa66:	460c      	mov	r4, r1
 800fa68:	4616      	mov	r6, r2
 800fa6a:	d505      	bpl.n	800fa78 <__swrite+0x1e>
 800fa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa70:	2302      	movs	r3, #2
 800fa72:	2200      	movs	r2, #0
 800fa74:	f000 f84c 	bl	800fb10 <_lseek_r>
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa82:	81a3      	strh	r3, [r4, #12]
 800fa84:	4632      	mov	r2, r6
 800fa86:	463b      	mov	r3, r7
 800fa88:	4628      	mov	r0, r5
 800fa8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa8e:	f000 b863 	b.w	800fb58 <_write_r>

0800fa92 <__sseek>:
 800fa92:	b510      	push	{r4, lr}
 800fa94:	460c      	mov	r4, r1
 800fa96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa9a:	f000 f839 	bl	800fb10 <_lseek_r>
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	89a3      	ldrh	r3, [r4, #12]
 800faa2:	bf15      	itete	ne
 800faa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800faa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800faaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800faae:	81a3      	strheq	r3, [r4, #12]
 800fab0:	bf18      	it	ne
 800fab2:	81a3      	strhne	r3, [r4, #12]
 800fab4:	bd10      	pop	{r4, pc}

0800fab6 <__sclose>:
 800fab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faba:	f000 b819 	b.w	800faf0 <_close_r>

0800fabe <memcmp>:
 800fabe:	b510      	push	{r4, lr}
 800fac0:	3901      	subs	r1, #1
 800fac2:	4402      	add	r2, r0
 800fac4:	4290      	cmp	r0, r2
 800fac6:	d101      	bne.n	800facc <memcmp+0xe>
 800fac8:	2000      	movs	r0, #0
 800faca:	e005      	b.n	800fad8 <memcmp+0x1a>
 800facc:	7803      	ldrb	r3, [r0, #0]
 800face:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fad2:	42a3      	cmp	r3, r4
 800fad4:	d001      	beq.n	800fada <memcmp+0x1c>
 800fad6:	1b18      	subs	r0, r3, r4
 800fad8:	bd10      	pop	{r4, pc}
 800fada:	3001      	adds	r0, #1
 800fadc:	e7f2      	b.n	800fac4 <memcmp+0x6>

0800fade <memset>:
 800fade:	4402      	add	r2, r0
 800fae0:	4603      	mov	r3, r0
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d100      	bne.n	800fae8 <memset+0xa>
 800fae6:	4770      	bx	lr
 800fae8:	f803 1b01 	strb.w	r1, [r3], #1
 800faec:	e7f9      	b.n	800fae2 <memset+0x4>
	...

0800faf0 <_close_r>:
 800faf0:	b538      	push	{r3, r4, r5, lr}
 800faf2:	4d06      	ldr	r5, [pc, #24]	@ (800fb0c <_close_r+0x1c>)
 800faf4:	2300      	movs	r3, #0
 800faf6:	4604      	mov	r4, r0
 800faf8:	4608      	mov	r0, r1
 800fafa:	602b      	str	r3, [r5, #0]
 800fafc:	f7f1 fd5a 	bl	80015b4 <_close>
 800fb00:	1c43      	adds	r3, r0, #1
 800fb02:	d102      	bne.n	800fb0a <_close_r+0x1a>
 800fb04:	682b      	ldr	r3, [r5, #0]
 800fb06:	b103      	cbz	r3, 800fb0a <_close_r+0x1a>
 800fb08:	6023      	str	r3, [r4, #0]
 800fb0a:	bd38      	pop	{r3, r4, r5, pc}
 800fb0c:	2000d098 	.word	0x2000d098

0800fb10 <_lseek_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4d07      	ldr	r5, [pc, #28]	@ (800fb30 <_lseek_r+0x20>)
 800fb14:	4604      	mov	r4, r0
 800fb16:	4608      	mov	r0, r1
 800fb18:	4611      	mov	r1, r2
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	602a      	str	r2, [r5, #0]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	f7f1 fd6f 	bl	8001602 <_lseek>
 800fb24:	1c43      	adds	r3, r0, #1
 800fb26:	d102      	bne.n	800fb2e <_lseek_r+0x1e>
 800fb28:	682b      	ldr	r3, [r5, #0]
 800fb2a:	b103      	cbz	r3, 800fb2e <_lseek_r+0x1e>
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	bd38      	pop	{r3, r4, r5, pc}
 800fb30:	2000d098 	.word	0x2000d098

0800fb34 <_read_r>:
 800fb34:	b538      	push	{r3, r4, r5, lr}
 800fb36:	4d07      	ldr	r5, [pc, #28]	@ (800fb54 <_read_r+0x20>)
 800fb38:	4604      	mov	r4, r0
 800fb3a:	4608      	mov	r0, r1
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	2200      	movs	r2, #0
 800fb40:	602a      	str	r2, [r5, #0]
 800fb42:	461a      	mov	r2, r3
 800fb44:	f7f1 fcfd 	bl	8001542 <_read>
 800fb48:	1c43      	adds	r3, r0, #1
 800fb4a:	d102      	bne.n	800fb52 <_read_r+0x1e>
 800fb4c:	682b      	ldr	r3, [r5, #0]
 800fb4e:	b103      	cbz	r3, 800fb52 <_read_r+0x1e>
 800fb50:	6023      	str	r3, [r4, #0]
 800fb52:	bd38      	pop	{r3, r4, r5, pc}
 800fb54:	2000d098 	.word	0x2000d098

0800fb58 <_write_r>:
 800fb58:	b538      	push	{r3, r4, r5, lr}
 800fb5a:	4d07      	ldr	r5, [pc, #28]	@ (800fb78 <_write_r+0x20>)
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	4608      	mov	r0, r1
 800fb60:	4611      	mov	r1, r2
 800fb62:	2200      	movs	r2, #0
 800fb64:	602a      	str	r2, [r5, #0]
 800fb66:	461a      	mov	r2, r3
 800fb68:	f7f1 fd08 	bl	800157c <_write>
 800fb6c:	1c43      	adds	r3, r0, #1
 800fb6e:	d102      	bne.n	800fb76 <_write_r+0x1e>
 800fb70:	682b      	ldr	r3, [r5, #0]
 800fb72:	b103      	cbz	r3, 800fb76 <_write_r+0x1e>
 800fb74:	6023      	str	r3, [r4, #0]
 800fb76:	bd38      	pop	{r3, r4, r5, pc}
 800fb78:	2000d098 	.word	0x2000d098

0800fb7c <__libc_init_array>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	4d0d      	ldr	r5, [pc, #52]	@ (800fbb4 <__libc_init_array+0x38>)
 800fb80:	4c0d      	ldr	r4, [pc, #52]	@ (800fbb8 <__libc_init_array+0x3c>)
 800fb82:	1b64      	subs	r4, r4, r5
 800fb84:	10a4      	asrs	r4, r4, #2
 800fb86:	2600      	movs	r6, #0
 800fb88:	42a6      	cmp	r6, r4
 800fb8a:	d109      	bne.n	800fba0 <__libc_init_array+0x24>
 800fb8c:	4d0b      	ldr	r5, [pc, #44]	@ (800fbbc <__libc_init_array+0x40>)
 800fb8e:	4c0c      	ldr	r4, [pc, #48]	@ (800fbc0 <__libc_init_array+0x44>)
 800fb90:	f000 fe4a 	bl	8010828 <_init>
 800fb94:	1b64      	subs	r4, r4, r5
 800fb96:	10a4      	asrs	r4, r4, #2
 800fb98:	2600      	movs	r6, #0
 800fb9a:	42a6      	cmp	r6, r4
 800fb9c:	d105      	bne.n	800fbaa <__libc_init_array+0x2e>
 800fb9e:	bd70      	pop	{r4, r5, r6, pc}
 800fba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fba4:	4798      	blx	r3
 800fba6:	3601      	adds	r6, #1
 800fba8:	e7ee      	b.n	800fb88 <__libc_init_array+0xc>
 800fbaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbae:	4798      	blx	r3
 800fbb0:	3601      	adds	r6, #1
 800fbb2:	e7f2      	b.n	800fb9a <__libc_init_array+0x1e>
 800fbb4:	08012c3c 	.word	0x08012c3c
 800fbb8:	08012c3c 	.word	0x08012c3c
 800fbbc:	08012c3c 	.word	0x08012c3c
 800fbc0:	08012c40 	.word	0x08012c40

0800fbc4 <__retarget_lock_init_recursive>:
 800fbc4:	4770      	bx	lr

0800fbc6 <__retarget_lock_acquire_recursive>:
 800fbc6:	4770      	bx	lr

0800fbc8 <__retarget_lock_release_recursive>:
 800fbc8:	4770      	bx	lr

0800fbca <memcpy>:
 800fbca:	440a      	add	r2, r1
 800fbcc:	4291      	cmp	r1, r2
 800fbce:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbd2:	d100      	bne.n	800fbd6 <memcpy+0xc>
 800fbd4:	4770      	bx	lr
 800fbd6:	b510      	push	{r4, lr}
 800fbd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbe0:	4291      	cmp	r1, r2
 800fbe2:	d1f9      	bne.n	800fbd8 <memcpy+0xe>
 800fbe4:	bd10      	pop	{r4, pc}
	...

0800fbe8 <__assert_func>:
 800fbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbea:	4614      	mov	r4, r2
 800fbec:	461a      	mov	r2, r3
 800fbee:	4b09      	ldr	r3, [pc, #36]	@ (800fc14 <__assert_func+0x2c>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	68d8      	ldr	r0, [r3, #12]
 800fbf6:	b954      	cbnz	r4, 800fc0e <__assert_func+0x26>
 800fbf8:	4b07      	ldr	r3, [pc, #28]	@ (800fc18 <__assert_func+0x30>)
 800fbfa:	461c      	mov	r4, r3
 800fbfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc00:	9100      	str	r1, [sp, #0]
 800fc02:	462b      	mov	r3, r5
 800fc04:	4905      	ldr	r1, [pc, #20]	@ (800fc1c <__assert_func+0x34>)
 800fc06:	f000 fc3f 	bl	8010488 <fiprintf>
 800fc0a:	f000 fcf3 	bl	80105f4 <abort>
 800fc0e:	4b04      	ldr	r3, [pc, #16]	@ (800fc20 <__assert_func+0x38>)
 800fc10:	e7f4      	b.n	800fbfc <__assert_func+0x14>
 800fc12:	bf00      	nop
 800fc14:	2000003c 	.word	0x2000003c
 800fc18:	08012bff 	.word	0x08012bff
 800fc1c:	08012bd1 	.word	0x08012bd1
 800fc20:	08012bc4 	.word	0x08012bc4

0800fc24 <malloc>:
 800fc24:	4b02      	ldr	r3, [pc, #8]	@ (800fc30 <malloc+0xc>)
 800fc26:	4601      	mov	r1, r0
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	f000 b825 	b.w	800fc78 <_malloc_r>
 800fc2e:	bf00      	nop
 800fc30:	2000003c 	.word	0x2000003c

0800fc34 <sbrk_aligned>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	4e0f      	ldr	r6, [pc, #60]	@ (800fc74 <sbrk_aligned+0x40>)
 800fc38:	460c      	mov	r4, r1
 800fc3a:	6831      	ldr	r1, [r6, #0]
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	b911      	cbnz	r1, 800fc46 <sbrk_aligned+0x12>
 800fc40:	f000 fcc8 	bl	80105d4 <_sbrk_r>
 800fc44:	6030      	str	r0, [r6, #0]
 800fc46:	4621      	mov	r1, r4
 800fc48:	4628      	mov	r0, r5
 800fc4a:	f000 fcc3 	bl	80105d4 <_sbrk_r>
 800fc4e:	1c43      	adds	r3, r0, #1
 800fc50:	d103      	bne.n	800fc5a <sbrk_aligned+0x26>
 800fc52:	f04f 34ff 	mov.w	r4, #4294967295
 800fc56:	4620      	mov	r0, r4
 800fc58:	bd70      	pop	{r4, r5, r6, pc}
 800fc5a:	1cc4      	adds	r4, r0, #3
 800fc5c:	f024 0403 	bic.w	r4, r4, #3
 800fc60:	42a0      	cmp	r0, r4
 800fc62:	d0f8      	beq.n	800fc56 <sbrk_aligned+0x22>
 800fc64:	1a21      	subs	r1, r4, r0
 800fc66:	4628      	mov	r0, r5
 800fc68:	f000 fcb4 	bl	80105d4 <_sbrk_r>
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	d1f2      	bne.n	800fc56 <sbrk_aligned+0x22>
 800fc70:	e7ef      	b.n	800fc52 <sbrk_aligned+0x1e>
 800fc72:	bf00      	nop
 800fc74:	2000d1e0 	.word	0x2000d1e0

0800fc78 <_malloc_r>:
 800fc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc7c:	1ccd      	adds	r5, r1, #3
 800fc7e:	f025 0503 	bic.w	r5, r5, #3
 800fc82:	3508      	adds	r5, #8
 800fc84:	2d0c      	cmp	r5, #12
 800fc86:	bf38      	it	cc
 800fc88:	250c      	movcc	r5, #12
 800fc8a:	2d00      	cmp	r5, #0
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	db01      	blt.n	800fc94 <_malloc_r+0x1c>
 800fc90:	42a9      	cmp	r1, r5
 800fc92:	d904      	bls.n	800fc9e <_malloc_r+0x26>
 800fc94:	230c      	movs	r3, #12
 800fc96:	6033      	str	r3, [r6, #0]
 800fc98:	2000      	movs	r0, #0
 800fc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fd74 <_malloc_r+0xfc>
 800fca2:	f000 f869 	bl	800fd78 <__malloc_lock>
 800fca6:	f8d8 3000 	ldr.w	r3, [r8]
 800fcaa:	461c      	mov	r4, r3
 800fcac:	bb44      	cbnz	r4, 800fd00 <_malloc_r+0x88>
 800fcae:	4629      	mov	r1, r5
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	f7ff ffbf 	bl	800fc34 <sbrk_aligned>
 800fcb6:	1c43      	adds	r3, r0, #1
 800fcb8:	4604      	mov	r4, r0
 800fcba:	d158      	bne.n	800fd6e <_malloc_r+0xf6>
 800fcbc:	f8d8 4000 	ldr.w	r4, [r8]
 800fcc0:	4627      	mov	r7, r4
 800fcc2:	2f00      	cmp	r7, #0
 800fcc4:	d143      	bne.n	800fd4e <_malloc_r+0xd6>
 800fcc6:	2c00      	cmp	r4, #0
 800fcc8:	d04b      	beq.n	800fd62 <_malloc_r+0xea>
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	4639      	mov	r1, r7
 800fcce:	4630      	mov	r0, r6
 800fcd0:	eb04 0903 	add.w	r9, r4, r3
 800fcd4:	f000 fc7e 	bl	80105d4 <_sbrk_r>
 800fcd8:	4581      	cmp	r9, r0
 800fcda:	d142      	bne.n	800fd62 <_malloc_r+0xea>
 800fcdc:	6821      	ldr	r1, [r4, #0]
 800fcde:	1a6d      	subs	r5, r5, r1
 800fce0:	4629      	mov	r1, r5
 800fce2:	4630      	mov	r0, r6
 800fce4:	f7ff ffa6 	bl	800fc34 <sbrk_aligned>
 800fce8:	3001      	adds	r0, #1
 800fcea:	d03a      	beq.n	800fd62 <_malloc_r+0xea>
 800fcec:	6823      	ldr	r3, [r4, #0]
 800fcee:	442b      	add	r3, r5
 800fcf0:	6023      	str	r3, [r4, #0]
 800fcf2:	f8d8 3000 	ldr.w	r3, [r8]
 800fcf6:	685a      	ldr	r2, [r3, #4]
 800fcf8:	bb62      	cbnz	r2, 800fd54 <_malloc_r+0xdc>
 800fcfa:	f8c8 7000 	str.w	r7, [r8]
 800fcfe:	e00f      	b.n	800fd20 <_malloc_r+0xa8>
 800fd00:	6822      	ldr	r2, [r4, #0]
 800fd02:	1b52      	subs	r2, r2, r5
 800fd04:	d420      	bmi.n	800fd48 <_malloc_r+0xd0>
 800fd06:	2a0b      	cmp	r2, #11
 800fd08:	d917      	bls.n	800fd3a <_malloc_r+0xc2>
 800fd0a:	1961      	adds	r1, r4, r5
 800fd0c:	42a3      	cmp	r3, r4
 800fd0e:	6025      	str	r5, [r4, #0]
 800fd10:	bf18      	it	ne
 800fd12:	6059      	strne	r1, [r3, #4]
 800fd14:	6863      	ldr	r3, [r4, #4]
 800fd16:	bf08      	it	eq
 800fd18:	f8c8 1000 	streq.w	r1, [r8]
 800fd1c:	5162      	str	r2, [r4, r5]
 800fd1e:	604b      	str	r3, [r1, #4]
 800fd20:	4630      	mov	r0, r6
 800fd22:	f000 f82f 	bl	800fd84 <__malloc_unlock>
 800fd26:	f104 000b 	add.w	r0, r4, #11
 800fd2a:	1d23      	adds	r3, r4, #4
 800fd2c:	f020 0007 	bic.w	r0, r0, #7
 800fd30:	1ac2      	subs	r2, r0, r3
 800fd32:	bf1c      	itt	ne
 800fd34:	1a1b      	subne	r3, r3, r0
 800fd36:	50a3      	strne	r3, [r4, r2]
 800fd38:	e7af      	b.n	800fc9a <_malloc_r+0x22>
 800fd3a:	6862      	ldr	r2, [r4, #4]
 800fd3c:	42a3      	cmp	r3, r4
 800fd3e:	bf0c      	ite	eq
 800fd40:	f8c8 2000 	streq.w	r2, [r8]
 800fd44:	605a      	strne	r2, [r3, #4]
 800fd46:	e7eb      	b.n	800fd20 <_malloc_r+0xa8>
 800fd48:	4623      	mov	r3, r4
 800fd4a:	6864      	ldr	r4, [r4, #4]
 800fd4c:	e7ae      	b.n	800fcac <_malloc_r+0x34>
 800fd4e:	463c      	mov	r4, r7
 800fd50:	687f      	ldr	r7, [r7, #4]
 800fd52:	e7b6      	b.n	800fcc2 <_malloc_r+0x4a>
 800fd54:	461a      	mov	r2, r3
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	d1fb      	bne.n	800fd54 <_malloc_r+0xdc>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	6053      	str	r3, [r2, #4]
 800fd60:	e7de      	b.n	800fd20 <_malloc_r+0xa8>
 800fd62:	230c      	movs	r3, #12
 800fd64:	6033      	str	r3, [r6, #0]
 800fd66:	4630      	mov	r0, r6
 800fd68:	f000 f80c 	bl	800fd84 <__malloc_unlock>
 800fd6c:	e794      	b.n	800fc98 <_malloc_r+0x20>
 800fd6e:	6005      	str	r5, [r0, #0]
 800fd70:	e7d6      	b.n	800fd20 <_malloc_r+0xa8>
 800fd72:	bf00      	nop
 800fd74:	2000d1e4 	.word	0x2000d1e4

0800fd78 <__malloc_lock>:
 800fd78:	4801      	ldr	r0, [pc, #4]	@ (800fd80 <__malloc_lock+0x8>)
 800fd7a:	f7ff bf24 	b.w	800fbc6 <__retarget_lock_acquire_recursive>
 800fd7e:	bf00      	nop
 800fd80:	2000d1dc 	.word	0x2000d1dc

0800fd84 <__malloc_unlock>:
 800fd84:	4801      	ldr	r0, [pc, #4]	@ (800fd8c <__malloc_unlock+0x8>)
 800fd86:	f7ff bf1f 	b.w	800fbc8 <__retarget_lock_release_recursive>
 800fd8a:	bf00      	nop
 800fd8c:	2000d1dc 	.word	0x2000d1dc

0800fd90 <__sfputc_r>:
 800fd90:	6893      	ldr	r3, [r2, #8]
 800fd92:	3b01      	subs	r3, #1
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	b410      	push	{r4}
 800fd98:	6093      	str	r3, [r2, #8]
 800fd9a:	da08      	bge.n	800fdae <__sfputc_r+0x1e>
 800fd9c:	6994      	ldr	r4, [r2, #24]
 800fd9e:	42a3      	cmp	r3, r4
 800fda0:	db01      	blt.n	800fda6 <__sfputc_r+0x16>
 800fda2:	290a      	cmp	r1, #10
 800fda4:	d103      	bne.n	800fdae <__sfputc_r+0x1e>
 800fda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdaa:	f000 bb7f 	b.w	80104ac <__swbuf_r>
 800fdae:	6813      	ldr	r3, [r2, #0]
 800fdb0:	1c58      	adds	r0, r3, #1
 800fdb2:	6010      	str	r0, [r2, #0]
 800fdb4:	7019      	strb	r1, [r3, #0]
 800fdb6:	4608      	mov	r0, r1
 800fdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdbc:	4770      	bx	lr

0800fdbe <__sfputs_r>:
 800fdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	4614      	mov	r4, r2
 800fdc6:	18d5      	adds	r5, r2, r3
 800fdc8:	42ac      	cmp	r4, r5
 800fdca:	d101      	bne.n	800fdd0 <__sfputs_r+0x12>
 800fdcc:	2000      	movs	r0, #0
 800fdce:	e007      	b.n	800fde0 <__sfputs_r+0x22>
 800fdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdd4:	463a      	mov	r2, r7
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f7ff ffda 	bl	800fd90 <__sfputc_r>
 800fddc:	1c43      	adds	r3, r0, #1
 800fdde:	d1f3      	bne.n	800fdc8 <__sfputs_r+0xa>
 800fde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fde4 <_vfiprintf_r>:
 800fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	460d      	mov	r5, r1
 800fdea:	b09d      	sub	sp, #116	@ 0x74
 800fdec:	4614      	mov	r4, r2
 800fdee:	4698      	mov	r8, r3
 800fdf0:	4606      	mov	r6, r0
 800fdf2:	b118      	cbz	r0, 800fdfc <_vfiprintf_r+0x18>
 800fdf4:	6a03      	ldr	r3, [r0, #32]
 800fdf6:	b90b      	cbnz	r3, 800fdfc <_vfiprintf_r+0x18>
 800fdf8:	f7ff fdd6 	bl	800f9a8 <__sinit>
 800fdfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdfe:	07d9      	lsls	r1, r3, #31
 800fe00:	d405      	bmi.n	800fe0e <_vfiprintf_r+0x2a>
 800fe02:	89ab      	ldrh	r3, [r5, #12]
 800fe04:	059a      	lsls	r2, r3, #22
 800fe06:	d402      	bmi.n	800fe0e <_vfiprintf_r+0x2a>
 800fe08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe0a:	f7ff fedc 	bl	800fbc6 <__retarget_lock_acquire_recursive>
 800fe0e:	89ab      	ldrh	r3, [r5, #12]
 800fe10:	071b      	lsls	r3, r3, #28
 800fe12:	d501      	bpl.n	800fe18 <_vfiprintf_r+0x34>
 800fe14:	692b      	ldr	r3, [r5, #16]
 800fe16:	b99b      	cbnz	r3, 800fe40 <_vfiprintf_r+0x5c>
 800fe18:	4629      	mov	r1, r5
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	f000 fb84 	bl	8010528 <__swsetup_r>
 800fe20:	b170      	cbz	r0, 800fe40 <_vfiprintf_r+0x5c>
 800fe22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe24:	07dc      	lsls	r4, r3, #31
 800fe26:	d504      	bpl.n	800fe32 <_vfiprintf_r+0x4e>
 800fe28:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2c:	b01d      	add	sp, #116	@ 0x74
 800fe2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe32:	89ab      	ldrh	r3, [r5, #12]
 800fe34:	0598      	lsls	r0, r3, #22
 800fe36:	d4f7      	bmi.n	800fe28 <_vfiprintf_r+0x44>
 800fe38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe3a:	f7ff fec5 	bl	800fbc8 <__retarget_lock_release_recursive>
 800fe3e:	e7f3      	b.n	800fe28 <_vfiprintf_r+0x44>
 800fe40:	2300      	movs	r3, #0
 800fe42:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe44:	2320      	movs	r3, #32
 800fe46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe4e:	2330      	movs	r3, #48	@ 0x30
 800fe50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010000 <_vfiprintf_r+0x21c>
 800fe54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe58:	f04f 0901 	mov.w	r9, #1
 800fe5c:	4623      	mov	r3, r4
 800fe5e:	469a      	mov	sl, r3
 800fe60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe64:	b10a      	cbz	r2, 800fe6a <_vfiprintf_r+0x86>
 800fe66:	2a25      	cmp	r2, #37	@ 0x25
 800fe68:	d1f9      	bne.n	800fe5e <_vfiprintf_r+0x7a>
 800fe6a:	ebba 0b04 	subs.w	fp, sl, r4
 800fe6e:	d00b      	beq.n	800fe88 <_vfiprintf_r+0xa4>
 800fe70:	465b      	mov	r3, fp
 800fe72:	4622      	mov	r2, r4
 800fe74:	4629      	mov	r1, r5
 800fe76:	4630      	mov	r0, r6
 800fe78:	f7ff ffa1 	bl	800fdbe <__sfputs_r>
 800fe7c:	3001      	adds	r0, #1
 800fe7e:	f000 80a7 	beq.w	800ffd0 <_vfiprintf_r+0x1ec>
 800fe82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe84:	445a      	add	r2, fp
 800fe86:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe88:	f89a 3000 	ldrb.w	r3, [sl]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f000 809f 	beq.w	800ffd0 <_vfiprintf_r+0x1ec>
 800fe92:	2300      	movs	r3, #0
 800fe94:	f04f 32ff 	mov.w	r2, #4294967295
 800fe98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe9c:	f10a 0a01 	add.w	sl, sl, #1
 800fea0:	9304      	str	r3, [sp, #16]
 800fea2:	9307      	str	r3, [sp, #28]
 800fea4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fea8:	931a      	str	r3, [sp, #104]	@ 0x68
 800feaa:	4654      	mov	r4, sl
 800feac:	2205      	movs	r2, #5
 800feae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feb2:	4853      	ldr	r0, [pc, #332]	@ (8010000 <_vfiprintf_r+0x21c>)
 800feb4:	f7f0 f9c4 	bl	8000240 <memchr>
 800feb8:	9a04      	ldr	r2, [sp, #16]
 800feba:	b9d8      	cbnz	r0, 800fef4 <_vfiprintf_r+0x110>
 800febc:	06d1      	lsls	r1, r2, #27
 800febe:	bf44      	itt	mi
 800fec0:	2320      	movmi	r3, #32
 800fec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fec6:	0713      	lsls	r3, r2, #28
 800fec8:	bf44      	itt	mi
 800feca:	232b      	movmi	r3, #43	@ 0x2b
 800fecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fed0:	f89a 3000 	ldrb.w	r3, [sl]
 800fed4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fed6:	d015      	beq.n	800ff04 <_vfiprintf_r+0x120>
 800fed8:	9a07      	ldr	r2, [sp, #28]
 800feda:	4654      	mov	r4, sl
 800fedc:	2000      	movs	r0, #0
 800fede:	f04f 0c0a 	mov.w	ip, #10
 800fee2:	4621      	mov	r1, r4
 800fee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fee8:	3b30      	subs	r3, #48	@ 0x30
 800feea:	2b09      	cmp	r3, #9
 800feec:	d94b      	bls.n	800ff86 <_vfiprintf_r+0x1a2>
 800feee:	b1b0      	cbz	r0, 800ff1e <_vfiprintf_r+0x13a>
 800fef0:	9207      	str	r2, [sp, #28]
 800fef2:	e014      	b.n	800ff1e <_vfiprintf_r+0x13a>
 800fef4:	eba0 0308 	sub.w	r3, r0, r8
 800fef8:	fa09 f303 	lsl.w	r3, r9, r3
 800fefc:	4313      	orrs	r3, r2
 800fefe:	9304      	str	r3, [sp, #16]
 800ff00:	46a2      	mov	sl, r4
 800ff02:	e7d2      	b.n	800feaa <_vfiprintf_r+0xc6>
 800ff04:	9b03      	ldr	r3, [sp, #12]
 800ff06:	1d19      	adds	r1, r3, #4
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	9103      	str	r1, [sp, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	bfbb      	ittet	lt
 800ff10:	425b      	neglt	r3, r3
 800ff12:	f042 0202 	orrlt.w	r2, r2, #2
 800ff16:	9307      	strge	r3, [sp, #28]
 800ff18:	9307      	strlt	r3, [sp, #28]
 800ff1a:	bfb8      	it	lt
 800ff1c:	9204      	strlt	r2, [sp, #16]
 800ff1e:	7823      	ldrb	r3, [r4, #0]
 800ff20:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff22:	d10a      	bne.n	800ff3a <_vfiprintf_r+0x156>
 800ff24:	7863      	ldrb	r3, [r4, #1]
 800ff26:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff28:	d132      	bne.n	800ff90 <_vfiprintf_r+0x1ac>
 800ff2a:	9b03      	ldr	r3, [sp, #12]
 800ff2c:	1d1a      	adds	r2, r3, #4
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	9203      	str	r2, [sp, #12]
 800ff32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff36:	3402      	adds	r4, #2
 800ff38:	9305      	str	r3, [sp, #20]
 800ff3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010010 <_vfiprintf_r+0x22c>
 800ff3e:	7821      	ldrb	r1, [r4, #0]
 800ff40:	2203      	movs	r2, #3
 800ff42:	4650      	mov	r0, sl
 800ff44:	f7f0 f97c 	bl	8000240 <memchr>
 800ff48:	b138      	cbz	r0, 800ff5a <_vfiprintf_r+0x176>
 800ff4a:	9b04      	ldr	r3, [sp, #16]
 800ff4c:	eba0 000a 	sub.w	r0, r0, sl
 800ff50:	2240      	movs	r2, #64	@ 0x40
 800ff52:	4082      	lsls	r2, r0
 800ff54:	4313      	orrs	r3, r2
 800ff56:	3401      	adds	r4, #1
 800ff58:	9304      	str	r3, [sp, #16]
 800ff5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff5e:	4829      	ldr	r0, [pc, #164]	@ (8010004 <_vfiprintf_r+0x220>)
 800ff60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff64:	2206      	movs	r2, #6
 800ff66:	f7f0 f96b 	bl	8000240 <memchr>
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	d03f      	beq.n	800ffee <_vfiprintf_r+0x20a>
 800ff6e:	4b26      	ldr	r3, [pc, #152]	@ (8010008 <_vfiprintf_r+0x224>)
 800ff70:	bb1b      	cbnz	r3, 800ffba <_vfiprintf_r+0x1d6>
 800ff72:	9b03      	ldr	r3, [sp, #12]
 800ff74:	3307      	adds	r3, #7
 800ff76:	f023 0307 	bic.w	r3, r3, #7
 800ff7a:	3308      	adds	r3, #8
 800ff7c:	9303      	str	r3, [sp, #12]
 800ff7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff80:	443b      	add	r3, r7
 800ff82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff84:	e76a      	b.n	800fe5c <_vfiprintf_r+0x78>
 800ff86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff8a:	460c      	mov	r4, r1
 800ff8c:	2001      	movs	r0, #1
 800ff8e:	e7a8      	b.n	800fee2 <_vfiprintf_r+0xfe>
 800ff90:	2300      	movs	r3, #0
 800ff92:	3401      	adds	r4, #1
 800ff94:	9305      	str	r3, [sp, #20]
 800ff96:	4619      	mov	r1, r3
 800ff98:	f04f 0c0a 	mov.w	ip, #10
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffa2:	3a30      	subs	r2, #48	@ 0x30
 800ffa4:	2a09      	cmp	r2, #9
 800ffa6:	d903      	bls.n	800ffb0 <_vfiprintf_r+0x1cc>
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d0c6      	beq.n	800ff3a <_vfiprintf_r+0x156>
 800ffac:	9105      	str	r1, [sp, #20]
 800ffae:	e7c4      	b.n	800ff3a <_vfiprintf_r+0x156>
 800ffb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e7f0      	b.n	800ff9c <_vfiprintf_r+0x1b8>
 800ffba:	ab03      	add	r3, sp, #12
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	462a      	mov	r2, r5
 800ffc0:	4b12      	ldr	r3, [pc, #72]	@ (801000c <_vfiprintf_r+0x228>)
 800ffc2:	a904      	add	r1, sp, #16
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	f3af 8000 	nop.w
 800ffca:	4607      	mov	r7, r0
 800ffcc:	1c78      	adds	r0, r7, #1
 800ffce:	d1d6      	bne.n	800ff7e <_vfiprintf_r+0x19a>
 800ffd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ffd2:	07d9      	lsls	r1, r3, #31
 800ffd4:	d405      	bmi.n	800ffe2 <_vfiprintf_r+0x1fe>
 800ffd6:	89ab      	ldrh	r3, [r5, #12]
 800ffd8:	059a      	lsls	r2, r3, #22
 800ffda:	d402      	bmi.n	800ffe2 <_vfiprintf_r+0x1fe>
 800ffdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ffde:	f7ff fdf3 	bl	800fbc8 <__retarget_lock_release_recursive>
 800ffe2:	89ab      	ldrh	r3, [r5, #12]
 800ffe4:	065b      	lsls	r3, r3, #25
 800ffe6:	f53f af1f 	bmi.w	800fe28 <_vfiprintf_r+0x44>
 800ffea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ffec:	e71e      	b.n	800fe2c <_vfiprintf_r+0x48>
 800ffee:	ab03      	add	r3, sp, #12
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	462a      	mov	r2, r5
 800fff4:	4b05      	ldr	r3, [pc, #20]	@ (801000c <_vfiprintf_r+0x228>)
 800fff6:	a904      	add	r1, sp, #16
 800fff8:	4630      	mov	r0, r6
 800fffa:	f000 f879 	bl	80100f0 <_printf_i>
 800fffe:	e7e4      	b.n	800ffca <_vfiprintf_r+0x1e6>
 8010000:	08012c00 	.word	0x08012c00
 8010004:	08012c0a 	.word	0x08012c0a
 8010008:	00000000 	.word	0x00000000
 801000c:	0800fdbf 	.word	0x0800fdbf
 8010010:	08012c06 	.word	0x08012c06

08010014 <_printf_common>:
 8010014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010018:	4616      	mov	r6, r2
 801001a:	4698      	mov	r8, r3
 801001c:	688a      	ldr	r2, [r1, #8]
 801001e:	690b      	ldr	r3, [r1, #16]
 8010020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010024:	4293      	cmp	r3, r2
 8010026:	bfb8      	it	lt
 8010028:	4613      	movlt	r3, r2
 801002a:	6033      	str	r3, [r6, #0]
 801002c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010030:	4607      	mov	r7, r0
 8010032:	460c      	mov	r4, r1
 8010034:	b10a      	cbz	r2, 801003a <_printf_common+0x26>
 8010036:	3301      	adds	r3, #1
 8010038:	6033      	str	r3, [r6, #0]
 801003a:	6823      	ldr	r3, [r4, #0]
 801003c:	0699      	lsls	r1, r3, #26
 801003e:	bf42      	ittt	mi
 8010040:	6833      	ldrmi	r3, [r6, #0]
 8010042:	3302      	addmi	r3, #2
 8010044:	6033      	strmi	r3, [r6, #0]
 8010046:	6825      	ldr	r5, [r4, #0]
 8010048:	f015 0506 	ands.w	r5, r5, #6
 801004c:	d106      	bne.n	801005c <_printf_common+0x48>
 801004e:	f104 0a19 	add.w	sl, r4, #25
 8010052:	68e3      	ldr	r3, [r4, #12]
 8010054:	6832      	ldr	r2, [r6, #0]
 8010056:	1a9b      	subs	r3, r3, r2
 8010058:	42ab      	cmp	r3, r5
 801005a:	dc26      	bgt.n	80100aa <_printf_common+0x96>
 801005c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010060:	6822      	ldr	r2, [r4, #0]
 8010062:	3b00      	subs	r3, #0
 8010064:	bf18      	it	ne
 8010066:	2301      	movne	r3, #1
 8010068:	0692      	lsls	r2, r2, #26
 801006a:	d42b      	bmi.n	80100c4 <_printf_common+0xb0>
 801006c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010070:	4641      	mov	r1, r8
 8010072:	4638      	mov	r0, r7
 8010074:	47c8      	blx	r9
 8010076:	3001      	adds	r0, #1
 8010078:	d01e      	beq.n	80100b8 <_printf_common+0xa4>
 801007a:	6823      	ldr	r3, [r4, #0]
 801007c:	6922      	ldr	r2, [r4, #16]
 801007e:	f003 0306 	and.w	r3, r3, #6
 8010082:	2b04      	cmp	r3, #4
 8010084:	bf02      	ittt	eq
 8010086:	68e5      	ldreq	r5, [r4, #12]
 8010088:	6833      	ldreq	r3, [r6, #0]
 801008a:	1aed      	subeq	r5, r5, r3
 801008c:	68a3      	ldr	r3, [r4, #8]
 801008e:	bf0c      	ite	eq
 8010090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010094:	2500      	movne	r5, #0
 8010096:	4293      	cmp	r3, r2
 8010098:	bfc4      	itt	gt
 801009a:	1a9b      	subgt	r3, r3, r2
 801009c:	18ed      	addgt	r5, r5, r3
 801009e:	2600      	movs	r6, #0
 80100a0:	341a      	adds	r4, #26
 80100a2:	42b5      	cmp	r5, r6
 80100a4:	d11a      	bne.n	80100dc <_printf_common+0xc8>
 80100a6:	2000      	movs	r0, #0
 80100a8:	e008      	b.n	80100bc <_printf_common+0xa8>
 80100aa:	2301      	movs	r3, #1
 80100ac:	4652      	mov	r2, sl
 80100ae:	4641      	mov	r1, r8
 80100b0:	4638      	mov	r0, r7
 80100b2:	47c8      	blx	r9
 80100b4:	3001      	adds	r0, #1
 80100b6:	d103      	bne.n	80100c0 <_printf_common+0xac>
 80100b8:	f04f 30ff 	mov.w	r0, #4294967295
 80100bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100c0:	3501      	adds	r5, #1
 80100c2:	e7c6      	b.n	8010052 <_printf_common+0x3e>
 80100c4:	18e1      	adds	r1, r4, r3
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	2030      	movs	r0, #48	@ 0x30
 80100ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80100ce:	4422      	add	r2, r4
 80100d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80100d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80100d8:	3302      	adds	r3, #2
 80100da:	e7c7      	b.n	801006c <_printf_common+0x58>
 80100dc:	2301      	movs	r3, #1
 80100de:	4622      	mov	r2, r4
 80100e0:	4641      	mov	r1, r8
 80100e2:	4638      	mov	r0, r7
 80100e4:	47c8      	blx	r9
 80100e6:	3001      	adds	r0, #1
 80100e8:	d0e6      	beq.n	80100b8 <_printf_common+0xa4>
 80100ea:	3601      	adds	r6, #1
 80100ec:	e7d9      	b.n	80100a2 <_printf_common+0x8e>
	...

080100f0 <_printf_i>:
 80100f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100f4:	7e0f      	ldrb	r7, [r1, #24]
 80100f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80100f8:	2f78      	cmp	r7, #120	@ 0x78
 80100fa:	4691      	mov	r9, r2
 80100fc:	4680      	mov	r8, r0
 80100fe:	460c      	mov	r4, r1
 8010100:	469a      	mov	sl, r3
 8010102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010106:	d807      	bhi.n	8010118 <_printf_i+0x28>
 8010108:	2f62      	cmp	r7, #98	@ 0x62
 801010a:	d80a      	bhi.n	8010122 <_printf_i+0x32>
 801010c:	2f00      	cmp	r7, #0
 801010e:	f000 80d2 	beq.w	80102b6 <_printf_i+0x1c6>
 8010112:	2f58      	cmp	r7, #88	@ 0x58
 8010114:	f000 80b9 	beq.w	801028a <_printf_i+0x19a>
 8010118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801011c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010120:	e03a      	b.n	8010198 <_printf_i+0xa8>
 8010122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010126:	2b15      	cmp	r3, #21
 8010128:	d8f6      	bhi.n	8010118 <_printf_i+0x28>
 801012a:	a101      	add	r1, pc, #4	@ (adr r1, 8010130 <_printf_i+0x40>)
 801012c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010130:	08010189 	.word	0x08010189
 8010134:	0801019d 	.word	0x0801019d
 8010138:	08010119 	.word	0x08010119
 801013c:	08010119 	.word	0x08010119
 8010140:	08010119 	.word	0x08010119
 8010144:	08010119 	.word	0x08010119
 8010148:	0801019d 	.word	0x0801019d
 801014c:	08010119 	.word	0x08010119
 8010150:	08010119 	.word	0x08010119
 8010154:	08010119 	.word	0x08010119
 8010158:	08010119 	.word	0x08010119
 801015c:	0801029d 	.word	0x0801029d
 8010160:	080101c7 	.word	0x080101c7
 8010164:	08010257 	.word	0x08010257
 8010168:	08010119 	.word	0x08010119
 801016c:	08010119 	.word	0x08010119
 8010170:	080102bf 	.word	0x080102bf
 8010174:	08010119 	.word	0x08010119
 8010178:	080101c7 	.word	0x080101c7
 801017c:	08010119 	.word	0x08010119
 8010180:	08010119 	.word	0x08010119
 8010184:	0801025f 	.word	0x0801025f
 8010188:	6833      	ldr	r3, [r6, #0]
 801018a:	1d1a      	adds	r2, r3, #4
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	6032      	str	r2, [r6, #0]
 8010190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010198:	2301      	movs	r3, #1
 801019a:	e09d      	b.n	80102d8 <_printf_i+0x1e8>
 801019c:	6833      	ldr	r3, [r6, #0]
 801019e:	6820      	ldr	r0, [r4, #0]
 80101a0:	1d19      	adds	r1, r3, #4
 80101a2:	6031      	str	r1, [r6, #0]
 80101a4:	0606      	lsls	r6, r0, #24
 80101a6:	d501      	bpl.n	80101ac <_printf_i+0xbc>
 80101a8:	681d      	ldr	r5, [r3, #0]
 80101aa:	e003      	b.n	80101b4 <_printf_i+0xc4>
 80101ac:	0645      	lsls	r5, r0, #25
 80101ae:	d5fb      	bpl.n	80101a8 <_printf_i+0xb8>
 80101b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80101b4:	2d00      	cmp	r5, #0
 80101b6:	da03      	bge.n	80101c0 <_printf_i+0xd0>
 80101b8:	232d      	movs	r3, #45	@ 0x2d
 80101ba:	426d      	negs	r5, r5
 80101bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101c0:	4859      	ldr	r0, [pc, #356]	@ (8010328 <_printf_i+0x238>)
 80101c2:	230a      	movs	r3, #10
 80101c4:	e011      	b.n	80101ea <_printf_i+0xfa>
 80101c6:	6821      	ldr	r1, [r4, #0]
 80101c8:	6833      	ldr	r3, [r6, #0]
 80101ca:	0608      	lsls	r0, r1, #24
 80101cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80101d0:	d402      	bmi.n	80101d8 <_printf_i+0xe8>
 80101d2:	0649      	lsls	r1, r1, #25
 80101d4:	bf48      	it	mi
 80101d6:	b2ad      	uxthmi	r5, r5
 80101d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80101da:	4853      	ldr	r0, [pc, #332]	@ (8010328 <_printf_i+0x238>)
 80101dc:	6033      	str	r3, [r6, #0]
 80101de:	bf14      	ite	ne
 80101e0:	230a      	movne	r3, #10
 80101e2:	2308      	moveq	r3, #8
 80101e4:	2100      	movs	r1, #0
 80101e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80101ea:	6866      	ldr	r6, [r4, #4]
 80101ec:	60a6      	str	r6, [r4, #8]
 80101ee:	2e00      	cmp	r6, #0
 80101f0:	bfa2      	ittt	ge
 80101f2:	6821      	ldrge	r1, [r4, #0]
 80101f4:	f021 0104 	bicge.w	r1, r1, #4
 80101f8:	6021      	strge	r1, [r4, #0]
 80101fa:	b90d      	cbnz	r5, 8010200 <_printf_i+0x110>
 80101fc:	2e00      	cmp	r6, #0
 80101fe:	d04b      	beq.n	8010298 <_printf_i+0x1a8>
 8010200:	4616      	mov	r6, r2
 8010202:	fbb5 f1f3 	udiv	r1, r5, r3
 8010206:	fb03 5711 	mls	r7, r3, r1, r5
 801020a:	5dc7      	ldrb	r7, [r0, r7]
 801020c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010210:	462f      	mov	r7, r5
 8010212:	42bb      	cmp	r3, r7
 8010214:	460d      	mov	r5, r1
 8010216:	d9f4      	bls.n	8010202 <_printf_i+0x112>
 8010218:	2b08      	cmp	r3, #8
 801021a:	d10b      	bne.n	8010234 <_printf_i+0x144>
 801021c:	6823      	ldr	r3, [r4, #0]
 801021e:	07df      	lsls	r7, r3, #31
 8010220:	d508      	bpl.n	8010234 <_printf_i+0x144>
 8010222:	6923      	ldr	r3, [r4, #16]
 8010224:	6861      	ldr	r1, [r4, #4]
 8010226:	4299      	cmp	r1, r3
 8010228:	bfde      	ittt	le
 801022a:	2330      	movle	r3, #48	@ 0x30
 801022c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010230:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010234:	1b92      	subs	r2, r2, r6
 8010236:	6122      	str	r2, [r4, #16]
 8010238:	f8cd a000 	str.w	sl, [sp]
 801023c:	464b      	mov	r3, r9
 801023e:	aa03      	add	r2, sp, #12
 8010240:	4621      	mov	r1, r4
 8010242:	4640      	mov	r0, r8
 8010244:	f7ff fee6 	bl	8010014 <_printf_common>
 8010248:	3001      	adds	r0, #1
 801024a:	d14a      	bne.n	80102e2 <_printf_i+0x1f2>
 801024c:	f04f 30ff 	mov.w	r0, #4294967295
 8010250:	b004      	add	sp, #16
 8010252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010256:	6823      	ldr	r3, [r4, #0]
 8010258:	f043 0320 	orr.w	r3, r3, #32
 801025c:	6023      	str	r3, [r4, #0]
 801025e:	4833      	ldr	r0, [pc, #204]	@ (801032c <_printf_i+0x23c>)
 8010260:	2778      	movs	r7, #120	@ 0x78
 8010262:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010266:	6823      	ldr	r3, [r4, #0]
 8010268:	6831      	ldr	r1, [r6, #0]
 801026a:	061f      	lsls	r7, r3, #24
 801026c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010270:	d402      	bmi.n	8010278 <_printf_i+0x188>
 8010272:	065f      	lsls	r7, r3, #25
 8010274:	bf48      	it	mi
 8010276:	b2ad      	uxthmi	r5, r5
 8010278:	6031      	str	r1, [r6, #0]
 801027a:	07d9      	lsls	r1, r3, #31
 801027c:	bf44      	itt	mi
 801027e:	f043 0320 	orrmi.w	r3, r3, #32
 8010282:	6023      	strmi	r3, [r4, #0]
 8010284:	b11d      	cbz	r5, 801028e <_printf_i+0x19e>
 8010286:	2310      	movs	r3, #16
 8010288:	e7ac      	b.n	80101e4 <_printf_i+0xf4>
 801028a:	4827      	ldr	r0, [pc, #156]	@ (8010328 <_printf_i+0x238>)
 801028c:	e7e9      	b.n	8010262 <_printf_i+0x172>
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	f023 0320 	bic.w	r3, r3, #32
 8010294:	6023      	str	r3, [r4, #0]
 8010296:	e7f6      	b.n	8010286 <_printf_i+0x196>
 8010298:	4616      	mov	r6, r2
 801029a:	e7bd      	b.n	8010218 <_printf_i+0x128>
 801029c:	6833      	ldr	r3, [r6, #0]
 801029e:	6825      	ldr	r5, [r4, #0]
 80102a0:	6961      	ldr	r1, [r4, #20]
 80102a2:	1d18      	adds	r0, r3, #4
 80102a4:	6030      	str	r0, [r6, #0]
 80102a6:	062e      	lsls	r6, r5, #24
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	d501      	bpl.n	80102b0 <_printf_i+0x1c0>
 80102ac:	6019      	str	r1, [r3, #0]
 80102ae:	e002      	b.n	80102b6 <_printf_i+0x1c6>
 80102b0:	0668      	lsls	r0, r5, #25
 80102b2:	d5fb      	bpl.n	80102ac <_printf_i+0x1bc>
 80102b4:	8019      	strh	r1, [r3, #0]
 80102b6:	2300      	movs	r3, #0
 80102b8:	6123      	str	r3, [r4, #16]
 80102ba:	4616      	mov	r6, r2
 80102bc:	e7bc      	b.n	8010238 <_printf_i+0x148>
 80102be:	6833      	ldr	r3, [r6, #0]
 80102c0:	1d1a      	adds	r2, r3, #4
 80102c2:	6032      	str	r2, [r6, #0]
 80102c4:	681e      	ldr	r6, [r3, #0]
 80102c6:	6862      	ldr	r2, [r4, #4]
 80102c8:	2100      	movs	r1, #0
 80102ca:	4630      	mov	r0, r6
 80102cc:	f7ef ffb8 	bl	8000240 <memchr>
 80102d0:	b108      	cbz	r0, 80102d6 <_printf_i+0x1e6>
 80102d2:	1b80      	subs	r0, r0, r6
 80102d4:	6060      	str	r0, [r4, #4]
 80102d6:	6863      	ldr	r3, [r4, #4]
 80102d8:	6123      	str	r3, [r4, #16]
 80102da:	2300      	movs	r3, #0
 80102dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102e0:	e7aa      	b.n	8010238 <_printf_i+0x148>
 80102e2:	6923      	ldr	r3, [r4, #16]
 80102e4:	4632      	mov	r2, r6
 80102e6:	4649      	mov	r1, r9
 80102e8:	4640      	mov	r0, r8
 80102ea:	47d0      	blx	sl
 80102ec:	3001      	adds	r0, #1
 80102ee:	d0ad      	beq.n	801024c <_printf_i+0x15c>
 80102f0:	6823      	ldr	r3, [r4, #0]
 80102f2:	079b      	lsls	r3, r3, #30
 80102f4:	d413      	bmi.n	801031e <_printf_i+0x22e>
 80102f6:	68e0      	ldr	r0, [r4, #12]
 80102f8:	9b03      	ldr	r3, [sp, #12]
 80102fa:	4298      	cmp	r0, r3
 80102fc:	bfb8      	it	lt
 80102fe:	4618      	movlt	r0, r3
 8010300:	e7a6      	b.n	8010250 <_printf_i+0x160>
 8010302:	2301      	movs	r3, #1
 8010304:	4632      	mov	r2, r6
 8010306:	4649      	mov	r1, r9
 8010308:	4640      	mov	r0, r8
 801030a:	47d0      	blx	sl
 801030c:	3001      	adds	r0, #1
 801030e:	d09d      	beq.n	801024c <_printf_i+0x15c>
 8010310:	3501      	adds	r5, #1
 8010312:	68e3      	ldr	r3, [r4, #12]
 8010314:	9903      	ldr	r1, [sp, #12]
 8010316:	1a5b      	subs	r3, r3, r1
 8010318:	42ab      	cmp	r3, r5
 801031a:	dcf2      	bgt.n	8010302 <_printf_i+0x212>
 801031c:	e7eb      	b.n	80102f6 <_printf_i+0x206>
 801031e:	2500      	movs	r5, #0
 8010320:	f104 0619 	add.w	r6, r4, #25
 8010324:	e7f5      	b.n	8010312 <_printf_i+0x222>
 8010326:	bf00      	nop
 8010328:	08012c11 	.word	0x08012c11
 801032c:	08012c22 	.word	0x08012c22

08010330 <__sflush_r>:
 8010330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010338:	0716      	lsls	r6, r2, #28
 801033a:	4605      	mov	r5, r0
 801033c:	460c      	mov	r4, r1
 801033e:	d454      	bmi.n	80103ea <__sflush_r+0xba>
 8010340:	684b      	ldr	r3, [r1, #4]
 8010342:	2b00      	cmp	r3, #0
 8010344:	dc02      	bgt.n	801034c <__sflush_r+0x1c>
 8010346:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010348:	2b00      	cmp	r3, #0
 801034a:	dd48      	ble.n	80103de <__sflush_r+0xae>
 801034c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801034e:	2e00      	cmp	r6, #0
 8010350:	d045      	beq.n	80103de <__sflush_r+0xae>
 8010352:	2300      	movs	r3, #0
 8010354:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010358:	682f      	ldr	r7, [r5, #0]
 801035a:	6a21      	ldr	r1, [r4, #32]
 801035c:	602b      	str	r3, [r5, #0]
 801035e:	d030      	beq.n	80103c2 <__sflush_r+0x92>
 8010360:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010362:	89a3      	ldrh	r3, [r4, #12]
 8010364:	0759      	lsls	r1, r3, #29
 8010366:	d505      	bpl.n	8010374 <__sflush_r+0x44>
 8010368:	6863      	ldr	r3, [r4, #4]
 801036a:	1ad2      	subs	r2, r2, r3
 801036c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801036e:	b10b      	cbz	r3, 8010374 <__sflush_r+0x44>
 8010370:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010372:	1ad2      	subs	r2, r2, r3
 8010374:	2300      	movs	r3, #0
 8010376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010378:	6a21      	ldr	r1, [r4, #32]
 801037a:	4628      	mov	r0, r5
 801037c:	47b0      	blx	r6
 801037e:	1c43      	adds	r3, r0, #1
 8010380:	89a3      	ldrh	r3, [r4, #12]
 8010382:	d106      	bne.n	8010392 <__sflush_r+0x62>
 8010384:	6829      	ldr	r1, [r5, #0]
 8010386:	291d      	cmp	r1, #29
 8010388:	d82b      	bhi.n	80103e2 <__sflush_r+0xb2>
 801038a:	4a2a      	ldr	r2, [pc, #168]	@ (8010434 <__sflush_r+0x104>)
 801038c:	410a      	asrs	r2, r1
 801038e:	07d6      	lsls	r6, r2, #31
 8010390:	d427      	bmi.n	80103e2 <__sflush_r+0xb2>
 8010392:	2200      	movs	r2, #0
 8010394:	6062      	str	r2, [r4, #4]
 8010396:	04d9      	lsls	r1, r3, #19
 8010398:	6922      	ldr	r2, [r4, #16]
 801039a:	6022      	str	r2, [r4, #0]
 801039c:	d504      	bpl.n	80103a8 <__sflush_r+0x78>
 801039e:	1c42      	adds	r2, r0, #1
 80103a0:	d101      	bne.n	80103a6 <__sflush_r+0x76>
 80103a2:	682b      	ldr	r3, [r5, #0]
 80103a4:	b903      	cbnz	r3, 80103a8 <__sflush_r+0x78>
 80103a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80103a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80103aa:	602f      	str	r7, [r5, #0]
 80103ac:	b1b9      	cbz	r1, 80103de <__sflush_r+0xae>
 80103ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80103b2:	4299      	cmp	r1, r3
 80103b4:	d002      	beq.n	80103bc <__sflush_r+0x8c>
 80103b6:	4628      	mov	r0, r5
 80103b8:	f000 f924 	bl	8010604 <_free_r>
 80103bc:	2300      	movs	r3, #0
 80103be:	6363      	str	r3, [r4, #52]	@ 0x34
 80103c0:	e00d      	b.n	80103de <__sflush_r+0xae>
 80103c2:	2301      	movs	r3, #1
 80103c4:	4628      	mov	r0, r5
 80103c6:	47b0      	blx	r6
 80103c8:	4602      	mov	r2, r0
 80103ca:	1c50      	adds	r0, r2, #1
 80103cc:	d1c9      	bne.n	8010362 <__sflush_r+0x32>
 80103ce:	682b      	ldr	r3, [r5, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d0c6      	beq.n	8010362 <__sflush_r+0x32>
 80103d4:	2b1d      	cmp	r3, #29
 80103d6:	d001      	beq.n	80103dc <__sflush_r+0xac>
 80103d8:	2b16      	cmp	r3, #22
 80103da:	d11e      	bne.n	801041a <__sflush_r+0xea>
 80103dc:	602f      	str	r7, [r5, #0]
 80103de:	2000      	movs	r0, #0
 80103e0:	e022      	b.n	8010428 <__sflush_r+0xf8>
 80103e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103e6:	b21b      	sxth	r3, r3
 80103e8:	e01b      	b.n	8010422 <__sflush_r+0xf2>
 80103ea:	690f      	ldr	r7, [r1, #16]
 80103ec:	2f00      	cmp	r7, #0
 80103ee:	d0f6      	beq.n	80103de <__sflush_r+0xae>
 80103f0:	0793      	lsls	r3, r2, #30
 80103f2:	680e      	ldr	r6, [r1, #0]
 80103f4:	bf08      	it	eq
 80103f6:	694b      	ldreq	r3, [r1, #20]
 80103f8:	600f      	str	r7, [r1, #0]
 80103fa:	bf18      	it	ne
 80103fc:	2300      	movne	r3, #0
 80103fe:	eba6 0807 	sub.w	r8, r6, r7
 8010402:	608b      	str	r3, [r1, #8]
 8010404:	f1b8 0f00 	cmp.w	r8, #0
 8010408:	dde9      	ble.n	80103de <__sflush_r+0xae>
 801040a:	6a21      	ldr	r1, [r4, #32]
 801040c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801040e:	4643      	mov	r3, r8
 8010410:	463a      	mov	r2, r7
 8010412:	4628      	mov	r0, r5
 8010414:	47b0      	blx	r6
 8010416:	2800      	cmp	r0, #0
 8010418:	dc08      	bgt.n	801042c <__sflush_r+0xfc>
 801041a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801041e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010422:	81a3      	strh	r3, [r4, #12]
 8010424:	f04f 30ff 	mov.w	r0, #4294967295
 8010428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801042c:	4407      	add	r7, r0
 801042e:	eba8 0800 	sub.w	r8, r8, r0
 8010432:	e7e7      	b.n	8010404 <__sflush_r+0xd4>
 8010434:	dfbffffe 	.word	0xdfbffffe

08010438 <_fflush_r>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	690b      	ldr	r3, [r1, #16]
 801043c:	4605      	mov	r5, r0
 801043e:	460c      	mov	r4, r1
 8010440:	b913      	cbnz	r3, 8010448 <_fflush_r+0x10>
 8010442:	2500      	movs	r5, #0
 8010444:	4628      	mov	r0, r5
 8010446:	bd38      	pop	{r3, r4, r5, pc}
 8010448:	b118      	cbz	r0, 8010452 <_fflush_r+0x1a>
 801044a:	6a03      	ldr	r3, [r0, #32]
 801044c:	b90b      	cbnz	r3, 8010452 <_fflush_r+0x1a>
 801044e:	f7ff faab 	bl	800f9a8 <__sinit>
 8010452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d0f3      	beq.n	8010442 <_fflush_r+0xa>
 801045a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801045c:	07d0      	lsls	r0, r2, #31
 801045e:	d404      	bmi.n	801046a <_fflush_r+0x32>
 8010460:	0599      	lsls	r1, r3, #22
 8010462:	d402      	bmi.n	801046a <_fflush_r+0x32>
 8010464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010466:	f7ff fbae 	bl	800fbc6 <__retarget_lock_acquire_recursive>
 801046a:	4628      	mov	r0, r5
 801046c:	4621      	mov	r1, r4
 801046e:	f7ff ff5f 	bl	8010330 <__sflush_r>
 8010472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010474:	07da      	lsls	r2, r3, #31
 8010476:	4605      	mov	r5, r0
 8010478:	d4e4      	bmi.n	8010444 <_fflush_r+0xc>
 801047a:	89a3      	ldrh	r3, [r4, #12]
 801047c:	059b      	lsls	r3, r3, #22
 801047e:	d4e1      	bmi.n	8010444 <_fflush_r+0xc>
 8010480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010482:	f7ff fba1 	bl	800fbc8 <__retarget_lock_release_recursive>
 8010486:	e7dd      	b.n	8010444 <_fflush_r+0xc>

08010488 <fiprintf>:
 8010488:	b40e      	push	{r1, r2, r3}
 801048a:	b503      	push	{r0, r1, lr}
 801048c:	4601      	mov	r1, r0
 801048e:	ab03      	add	r3, sp, #12
 8010490:	4805      	ldr	r0, [pc, #20]	@ (80104a8 <fiprintf+0x20>)
 8010492:	f853 2b04 	ldr.w	r2, [r3], #4
 8010496:	6800      	ldr	r0, [r0, #0]
 8010498:	9301      	str	r3, [sp, #4]
 801049a:	f7ff fca3 	bl	800fde4 <_vfiprintf_r>
 801049e:	b002      	add	sp, #8
 80104a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104a4:	b003      	add	sp, #12
 80104a6:	4770      	bx	lr
 80104a8:	2000003c 	.word	0x2000003c

080104ac <__swbuf_r>:
 80104ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ae:	460e      	mov	r6, r1
 80104b0:	4614      	mov	r4, r2
 80104b2:	4605      	mov	r5, r0
 80104b4:	b118      	cbz	r0, 80104be <__swbuf_r+0x12>
 80104b6:	6a03      	ldr	r3, [r0, #32]
 80104b8:	b90b      	cbnz	r3, 80104be <__swbuf_r+0x12>
 80104ba:	f7ff fa75 	bl	800f9a8 <__sinit>
 80104be:	69a3      	ldr	r3, [r4, #24]
 80104c0:	60a3      	str	r3, [r4, #8]
 80104c2:	89a3      	ldrh	r3, [r4, #12]
 80104c4:	071a      	lsls	r2, r3, #28
 80104c6:	d501      	bpl.n	80104cc <__swbuf_r+0x20>
 80104c8:	6923      	ldr	r3, [r4, #16]
 80104ca:	b943      	cbnz	r3, 80104de <__swbuf_r+0x32>
 80104cc:	4621      	mov	r1, r4
 80104ce:	4628      	mov	r0, r5
 80104d0:	f000 f82a 	bl	8010528 <__swsetup_r>
 80104d4:	b118      	cbz	r0, 80104de <__swbuf_r+0x32>
 80104d6:	f04f 37ff 	mov.w	r7, #4294967295
 80104da:	4638      	mov	r0, r7
 80104dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104de:	6823      	ldr	r3, [r4, #0]
 80104e0:	6922      	ldr	r2, [r4, #16]
 80104e2:	1a98      	subs	r0, r3, r2
 80104e4:	6963      	ldr	r3, [r4, #20]
 80104e6:	b2f6      	uxtb	r6, r6
 80104e8:	4283      	cmp	r3, r0
 80104ea:	4637      	mov	r7, r6
 80104ec:	dc05      	bgt.n	80104fa <__swbuf_r+0x4e>
 80104ee:	4621      	mov	r1, r4
 80104f0:	4628      	mov	r0, r5
 80104f2:	f7ff ffa1 	bl	8010438 <_fflush_r>
 80104f6:	2800      	cmp	r0, #0
 80104f8:	d1ed      	bne.n	80104d6 <__swbuf_r+0x2a>
 80104fa:	68a3      	ldr	r3, [r4, #8]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	60a3      	str	r3, [r4, #8]
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	6022      	str	r2, [r4, #0]
 8010506:	701e      	strb	r6, [r3, #0]
 8010508:	6962      	ldr	r2, [r4, #20]
 801050a:	1c43      	adds	r3, r0, #1
 801050c:	429a      	cmp	r2, r3
 801050e:	d004      	beq.n	801051a <__swbuf_r+0x6e>
 8010510:	89a3      	ldrh	r3, [r4, #12]
 8010512:	07db      	lsls	r3, r3, #31
 8010514:	d5e1      	bpl.n	80104da <__swbuf_r+0x2e>
 8010516:	2e0a      	cmp	r6, #10
 8010518:	d1df      	bne.n	80104da <__swbuf_r+0x2e>
 801051a:	4621      	mov	r1, r4
 801051c:	4628      	mov	r0, r5
 801051e:	f7ff ff8b 	bl	8010438 <_fflush_r>
 8010522:	2800      	cmp	r0, #0
 8010524:	d0d9      	beq.n	80104da <__swbuf_r+0x2e>
 8010526:	e7d6      	b.n	80104d6 <__swbuf_r+0x2a>

08010528 <__swsetup_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4b29      	ldr	r3, [pc, #164]	@ (80105d0 <__swsetup_r+0xa8>)
 801052c:	4605      	mov	r5, r0
 801052e:	6818      	ldr	r0, [r3, #0]
 8010530:	460c      	mov	r4, r1
 8010532:	b118      	cbz	r0, 801053c <__swsetup_r+0x14>
 8010534:	6a03      	ldr	r3, [r0, #32]
 8010536:	b90b      	cbnz	r3, 801053c <__swsetup_r+0x14>
 8010538:	f7ff fa36 	bl	800f9a8 <__sinit>
 801053c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010540:	0719      	lsls	r1, r3, #28
 8010542:	d422      	bmi.n	801058a <__swsetup_r+0x62>
 8010544:	06da      	lsls	r2, r3, #27
 8010546:	d407      	bmi.n	8010558 <__swsetup_r+0x30>
 8010548:	2209      	movs	r2, #9
 801054a:	602a      	str	r2, [r5, #0]
 801054c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	f04f 30ff 	mov.w	r0, #4294967295
 8010556:	e033      	b.n	80105c0 <__swsetup_r+0x98>
 8010558:	0758      	lsls	r0, r3, #29
 801055a:	d512      	bpl.n	8010582 <__swsetup_r+0x5a>
 801055c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801055e:	b141      	cbz	r1, 8010572 <__swsetup_r+0x4a>
 8010560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010564:	4299      	cmp	r1, r3
 8010566:	d002      	beq.n	801056e <__swsetup_r+0x46>
 8010568:	4628      	mov	r0, r5
 801056a:	f000 f84b 	bl	8010604 <_free_r>
 801056e:	2300      	movs	r3, #0
 8010570:	6363      	str	r3, [r4, #52]	@ 0x34
 8010572:	89a3      	ldrh	r3, [r4, #12]
 8010574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010578:	81a3      	strh	r3, [r4, #12]
 801057a:	2300      	movs	r3, #0
 801057c:	6063      	str	r3, [r4, #4]
 801057e:	6923      	ldr	r3, [r4, #16]
 8010580:	6023      	str	r3, [r4, #0]
 8010582:	89a3      	ldrh	r3, [r4, #12]
 8010584:	f043 0308 	orr.w	r3, r3, #8
 8010588:	81a3      	strh	r3, [r4, #12]
 801058a:	6923      	ldr	r3, [r4, #16]
 801058c:	b94b      	cbnz	r3, 80105a2 <__swsetup_r+0x7a>
 801058e:	89a3      	ldrh	r3, [r4, #12]
 8010590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010598:	d003      	beq.n	80105a2 <__swsetup_r+0x7a>
 801059a:	4621      	mov	r1, r4
 801059c:	4628      	mov	r0, r5
 801059e:	f000 f8a1 	bl	80106e4 <__smakebuf_r>
 80105a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105a6:	f013 0201 	ands.w	r2, r3, #1
 80105aa:	d00a      	beq.n	80105c2 <__swsetup_r+0x9a>
 80105ac:	2200      	movs	r2, #0
 80105ae:	60a2      	str	r2, [r4, #8]
 80105b0:	6962      	ldr	r2, [r4, #20]
 80105b2:	4252      	negs	r2, r2
 80105b4:	61a2      	str	r2, [r4, #24]
 80105b6:	6922      	ldr	r2, [r4, #16]
 80105b8:	b942      	cbnz	r2, 80105cc <__swsetup_r+0xa4>
 80105ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80105be:	d1c5      	bne.n	801054c <__swsetup_r+0x24>
 80105c0:	bd38      	pop	{r3, r4, r5, pc}
 80105c2:	0799      	lsls	r1, r3, #30
 80105c4:	bf58      	it	pl
 80105c6:	6962      	ldrpl	r2, [r4, #20]
 80105c8:	60a2      	str	r2, [r4, #8]
 80105ca:	e7f4      	b.n	80105b6 <__swsetup_r+0x8e>
 80105cc:	2000      	movs	r0, #0
 80105ce:	e7f7      	b.n	80105c0 <__swsetup_r+0x98>
 80105d0:	2000003c 	.word	0x2000003c

080105d4 <_sbrk_r>:
 80105d4:	b538      	push	{r3, r4, r5, lr}
 80105d6:	4d06      	ldr	r5, [pc, #24]	@ (80105f0 <_sbrk_r+0x1c>)
 80105d8:	2300      	movs	r3, #0
 80105da:	4604      	mov	r4, r0
 80105dc:	4608      	mov	r0, r1
 80105de:	602b      	str	r3, [r5, #0]
 80105e0:	f7f1 f81c 	bl	800161c <_sbrk>
 80105e4:	1c43      	adds	r3, r0, #1
 80105e6:	d102      	bne.n	80105ee <_sbrk_r+0x1a>
 80105e8:	682b      	ldr	r3, [r5, #0]
 80105ea:	b103      	cbz	r3, 80105ee <_sbrk_r+0x1a>
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	bd38      	pop	{r3, r4, r5, pc}
 80105f0:	2000d098 	.word	0x2000d098

080105f4 <abort>:
 80105f4:	b508      	push	{r3, lr}
 80105f6:	2006      	movs	r0, #6
 80105f8:	f000 f8d8 	bl	80107ac <raise>
 80105fc:	2001      	movs	r0, #1
 80105fe:	f7f0 ff95 	bl	800152c <_exit>
	...

08010604 <_free_r>:
 8010604:	b538      	push	{r3, r4, r5, lr}
 8010606:	4605      	mov	r5, r0
 8010608:	2900      	cmp	r1, #0
 801060a:	d041      	beq.n	8010690 <_free_r+0x8c>
 801060c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010610:	1f0c      	subs	r4, r1, #4
 8010612:	2b00      	cmp	r3, #0
 8010614:	bfb8      	it	lt
 8010616:	18e4      	addlt	r4, r4, r3
 8010618:	f7ff fbae 	bl	800fd78 <__malloc_lock>
 801061c:	4a1d      	ldr	r2, [pc, #116]	@ (8010694 <_free_r+0x90>)
 801061e:	6813      	ldr	r3, [r2, #0]
 8010620:	b933      	cbnz	r3, 8010630 <_free_r+0x2c>
 8010622:	6063      	str	r3, [r4, #4]
 8010624:	6014      	str	r4, [r2, #0]
 8010626:	4628      	mov	r0, r5
 8010628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801062c:	f7ff bbaa 	b.w	800fd84 <__malloc_unlock>
 8010630:	42a3      	cmp	r3, r4
 8010632:	d908      	bls.n	8010646 <_free_r+0x42>
 8010634:	6820      	ldr	r0, [r4, #0]
 8010636:	1821      	adds	r1, r4, r0
 8010638:	428b      	cmp	r3, r1
 801063a:	bf01      	itttt	eq
 801063c:	6819      	ldreq	r1, [r3, #0]
 801063e:	685b      	ldreq	r3, [r3, #4]
 8010640:	1809      	addeq	r1, r1, r0
 8010642:	6021      	streq	r1, [r4, #0]
 8010644:	e7ed      	b.n	8010622 <_free_r+0x1e>
 8010646:	461a      	mov	r2, r3
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	b10b      	cbz	r3, 8010650 <_free_r+0x4c>
 801064c:	42a3      	cmp	r3, r4
 801064e:	d9fa      	bls.n	8010646 <_free_r+0x42>
 8010650:	6811      	ldr	r1, [r2, #0]
 8010652:	1850      	adds	r0, r2, r1
 8010654:	42a0      	cmp	r0, r4
 8010656:	d10b      	bne.n	8010670 <_free_r+0x6c>
 8010658:	6820      	ldr	r0, [r4, #0]
 801065a:	4401      	add	r1, r0
 801065c:	1850      	adds	r0, r2, r1
 801065e:	4283      	cmp	r3, r0
 8010660:	6011      	str	r1, [r2, #0]
 8010662:	d1e0      	bne.n	8010626 <_free_r+0x22>
 8010664:	6818      	ldr	r0, [r3, #0]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	6053      	str	r3, [r2, #4]
 801066a:	4408      	add	r0, r1
 801066c:	6010      	str	r0, [r2, #0]
 801066e:	e7da      	b.n	8010626 <_free_r+0x22>
 8010670:	d902      	bls.n	8010678 <_free_r+0x74>
 8010672:	230c      	movs	r3, #12
 8010674:	602b      	str	r3, [r5, #0]
 8010676:	e7d6      	b.n	8010626 <_free_r+0x22>
 8010678:	6820      	ldr	r0, [r4, #0]
 801067a:	1821      	adds	r1, r4, r0
 801067c:	428b      	cmp	r3, r1
 801067e:	bf04      	itt	eq
 8010680:	6819      	ldreq	r1, [r3, #0]
 8010682:	685b      	ldreq	r3, [r3, #4]
 8010684:	6063      	str	r3, [r4, #4]
 8010686:	bf04      	itt	eq
 8010688:	1809      	addeq	r1, r1, r0
 801068a:	6021      	streq	r1, [r4, #0]
 801068c:	6054      	str	r4, [r2, #4]
 801068e:	e7ca      	b.n	8010626 <_free_r+0x22>
 8010690:	bd38      	pop	{r3, r4, r5, pc}
 8010692:	bf00      	nop
 8010694:	2000d1e4 	.word	0x2000d1e4

08010698 <__swhatbuf_r>:
 8010698:	b570      	push	{r4, r5, r6, lr}
 801069a:	460c      	mov	r4, r1
 801069c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106a0:	2900      	cmp	r1, #0
 80106a2:	b096      	sub	sp, #88	@ 0x58
 80106a4:	4615      	mov	r5, r2
 80106a6:	461e      	mov	r6, r3
 80106a8:	da0d      	bge.n	80106c6 <__swhatbuf_r+0x2e>
 80106aa:	89a3      	ldrh	r3, [r4, #12]
 80106ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80106b0:	f04f 0100 	mov.w	r1, #0
 80106b4:	bf14      	ite	ne
 80106b6:	2340      	movne	r3, #64	@ 0x40
 80106b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80106bc:	2000      	movs	r0, #0
 80106be:	6031      	str	r1, [r6, #0]
 80106c0:	602b      	str	r3, [r5, #0]
 80106c2:	b016      	add	sp, #88	@ 0x58
 80106c4:	bd70      	pop	{r4, r5, r6, pc}
 80106c6:	466a      	mov	r2, sp
 80106c8:	f000 f878 	bl	80107bc <_fstat_r>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	dbec      	blt.n	80106aa <__swhatbuf_r+0x12>
 80106d0:	9901      	ldr	r1, [sp, #4]
 80106d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80106d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80106da:	4259      	negs	r1, r3
 80106dc:	4159      	adcs	r1, r3
 80106de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80106e2:	e7eb      	b.n	80106bc <__swhatbuf_r+0x24>

080106e4 <__smakebuf_r>:
 80106e4:	898b      	ldrh	r3, [r1, #12]
 80106e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106e8:	079d      	lsls	r5, r3, #30
 80106ea:	4606      	mov	r6, r0
 80106ec:	460c      	mov	r4, r1
 80106ee:	d507      	bpl.n	8010700 <__smakebuf_r+0x1c>
 80106f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80106f4:	6023      	str	r3, [r4, #0]
 80106f6:	6123      	str	r3, [r4, #16]
 80106f8:	2301      	movs	r3, #1
 80106fa:	6163      	str	r3, [r4, #20]
 80106fc:	b003      	add	sp, #12
 80106fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010700:	ab01      	add	r3, sp, #4
 8010702:	466a      	mov	r2, sp
 8010704:	f7ff ffc8 	bl	8010698 <__swhatbuf_r>
 8010708:	9f00      	ldr	r7, [sp, #0]
 801070a:	4605      	mov	r5, r0
 801070c:	4639      	mov	r1, r7
 801070e:	4630      	mov	r0, r6
 8010710:	f7ff fab2 	bl	800fc78 <_malloc_r>
 8010714:	b948      	cbnz	r0, 801072a <__smakebuf_r+0x46>
 8010716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801071a:	059a      	lsls	r2, r3, #22
 801071c:	d4ee      	bmi.n	80106fc <__smakebuf_r+0x18>
 801071e:	f023 0303 	bic.w	r3, r3, #3
 8010722:	f043 0302 	orr.w	r3, r3, #2
 8010726:	81a3      	strh	r3, [r4, #12]
 8010728:	e7e2      	b.n	80106f0 <__smakebuf_r+0xc>
 801072a:	89a3      	ldrh	r3, [r4, #12]
 801072c:	6020      	str	r0, [r4, #0]
 801072e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010732:	81a3      	strh	r3, [r4, #12]
 8010734:	9b01      	ldr	r3, [sp, #4]
 8010736:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801073a:	b15b      	cbz	r3, 8010754 <__smakebuf_r+0x70>
 801073c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010740:	4630      	mov	r0, r6
 8010742:	f000 f84d 	bl	80107e0 <_isatty_r>
 8010746:	b128      	cbz	r0, 8010754 <__smakebuf_r+0x70>
 8010748:	89a3      	ldrh	r3, [r4, #12]
 801074a:	f023 0303 	bic.w	r3, r3, #3
 801074e:	f043 0301 	orr.w	r3, r3, #1
 8010752:	81a3      	strh	r3, [r4, #12]
 8010754:	89a3      	ldrh	r3, [r4, #12]
 8010756:	431d      	orrs	r5, r3
 8010758:	81a5      	strh	r5, [r4, #12]
 801075a:	e7cf      	b.n	80106fc <__smakebuf_r+0x18>

0801075c <_raise_r>:
 801075c:	291f      	cmp	r1, #31
 801075e:	b538      	push	{r3, r4, r5, lr}
 8010760:	4605      	mov	r5, r0
 8010762:	460c      	mov	r4, r1
 8010764:	d904      	bls.n	8010770 <_raise_r+0x14>
 8010766:	2316      	movs	r3, #22
 8010768:	6003      	str	r3, [r0, #0]
 801076a:	f04f 30ff 	mov.w	r0, #4294967295
 801076e:	bd38      	pop	{r3, r4, r5, pc}
 8010770:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010772:	b112      	cbz	r2, 801077a <_raise_r+0x1e>
 8010774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010778:	b94b      	cbnz	r3, 801078e <_raise_r+0x32>
 801077a:	4628      	mov	r0, r5
 801077c:	f000 f852 	bl	8010824 <_getpid_r>
 8010780:	4622      	mov	r2, r4
 8010782:	4601      	mov	r1, r0
 8010784:	4628      	mov	r0, r5
 8010786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801078a:	f000 b839 	b.w	8010800 <_kill_r>
 801078e:	2b01      	cmp	r3, #1
 8010790:	d00a      	beq.n	80107a8 <_raise_r+0x4c>
 8010792:	1c59      	adds	r1, r3, #1
 8010794:	d103      	bne.n	801079e <_raise_r+0x42>
 8010796:	2316      	movs	r3, #22
 8010798:	6003      	str	r3, [r0, #0]
 801079a:	2001      	movs	r0, #1
 801079c:	e7e7      	b.n	801076e <_raise_r+0x12>
 801079e:	2100      	movs	r1, #0
 80107a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80107a4:	4620      	mov	r0, r4
 80107a6:	4798      	blx	r3
 80107a8:	2000      	movs	r0, #0
 80107aa:	e7e0      	b.n	801076e <_raise_r+0x12>

080107ac <raise>:
 80107ac:	4b02      	ldr	r3, [pc, #8]	@ (80107b8 <raise+0xc>)
 80107ae:	4601      	mov	r1, r0
 80107b0:	6818      	ldr	r0, [r3, #0]
 80107b2:	f7ff bfd3 	b.w	801075c <_raise_r>
 80107b6:	bf00      	nop
 80107b8:	2000003c 	.word	0x2000003c

080107bc <_fstat_r>:
 80107bc:	b538      	push	{r3, r4, r5, lr}
 80107be:	4d07      	ldr	r5, [pc, #28]	@ (80107dc <_fstat_r+0x20>)
 80107c0:	2300      	movs	r3, #0
 80107c2:	4604      	mov	r4, r0
 80107c4:	4608      	mov	r0, r1
 80107c6:	4611      	mov	r1, r2
 80107c8:	602b      	str	r3, [r5, #0]
 80107ca:	f7f0 feff 	bl	80015cc <_fstat>
 80107ce:	1c43      	adds	r3, r0, #1
 80107d0:	d102      	bne.n	80107d8 <_fstat_r+0x1c>
 80107d2:	682b      	ldr	r3, [r5, #0]
 80107d4:	b103      	cbz	r3, 80107d8 <_fstat_r+0x1c>
 80107d6:	6023      	str	r3, [r4, #0]
 80107d8:	bd38      	pop	{r3, r4, r5, pc}
 80107da:	bf00      	nop
 80107dc:	2000d098 	.word	0x2000d098

080107e0 <_isatty_r>:
 80107e0:	b538      	push	{r3, r4, r5, lr}
 80107e2:	4d06      	ldr	r5, [pc, #24]	@ (80107fc <_isatty_r+0x1c>)
 80107e4:	2300      	movs	r3, #0
 80107e6:	4604      	mov	r4, r0
 80107e8:	4608      	mov	r0, r1
 80107ea:	602b      	str	r3, [r5, #0]
 80107ec:	f7f0 fefe 	bl	80015ec <_isatty>
 80107f0:	1c43      	adds	r3, r0, #1
 80107f2:	d102      	bne.n	80107fa <_isatty_r+0x1a>
 80107f4:	682b      	ldr	r3, [r5, #0]
 80107f6:	b103      	cbz	r3, 80107fa <_isatty_r+0x1a>
 80107f8:	6023      	str	r3, [r4, #0]
 80107fa:	bd38      	pop	{r3, r4, r5, pc}
 80107fc:	2000d098 	.word	0x2000d098

08010800 <_kill_r>:
 8010800:	b538      	push	{r3, r4, r5, lr}
 8010802:	4d07      	ldr	r5, [pc, #28]	@ (8010820 <_kill_r+0x20>)
 8010804:	2300      	movs	r3, #0
 8010806:	4604      	mov	r4, r0
 8010808:	4608      	mov	r0, r1
 801080a:	4611      	mov	r1, r2
 801080c:	602b      	str	r3, [r5, #0]
 801080e:	f7f0 fe7b 	bl	8001508 <_kill>
 8010812:	1c43      	adds	r3, r0, #1
 8010814:	d102      	bne.n	801081c <_kill_r+0x1c>
 8010816:	682b      	ldr	r3, [r5, #0]
 8010818:	b103      	cbz	r3, 801081c <_kill_r+0x1c>
 801081a:	6023      	str	r3, [r4, #0]
 801081c:	bd38      	pop	{r3, r4, r5, pc}
 801081e:	bf00      	nop
 8010820:	2000d098 	.word	0x2000d098

08010824 <_getpid_r>:
 8010824:	f7f0 be68 	b.w	80014f8 <_getpid>

08010828 <_init>:
 8010828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801082a:	bf00      	nop
 801082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801082e:	bc08      	pop	{r3}
 8010830:	469e      	mov	lr, r3
 8010832:	4770      	bx	lr

08010834 <_fini>:
 8010834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010836:	bf00      	nop
 8010838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801083a:	bc08      	pop	{r3}
 801083c:	469e      	mov	lr, r3
 801083e:	4770      	bx	lr
