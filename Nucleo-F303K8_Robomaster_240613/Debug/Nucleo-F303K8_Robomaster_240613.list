
Nucleo-F303K8_Robomaster_240613.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002e4c  08002e4c  00003e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e7c  08002e7c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e7c  08002e7c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e7c  08002e7c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e7c  08002e7c  00003e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e80  08002e80  00003e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e84  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000cc  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005ab1  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012c2  00000000  00000000  00009aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000528  00000000  00000000  0000adb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c1  00000000  00000000  0000b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ed4  00000000  00000000  0000b699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000067b2  00000000  00000000  0002556d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009832a  00000000  00000000  0002bd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c4049  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001370  00000000  00000000  000c408c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  000c53fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e34 	.word	0x08002e34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e34 	.word	0x08002e34

080001c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t id;
uint32_t dlc;
uint8_t data[8];

// 受信時割り込み（実質的な処理）
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	@ 0x30
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80001d0:	f107 0308 	add.w	r3, r7, #8
 80001d4:	f107 0210 	add.w	r2, r7, #16
 80001d8:	2100      	movs	r1, #0
 80001da:	6878      	ldr	r0, [r7, #4]
 80001dc:	f000 fdf4 	bl	8000dc8 <HAL_CAN_GetRxMessage>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d122      	bne.n	800022c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		id = (RxHeader.IDE == CAN_ID_STD) ? RxHeader.StdId : RxHeader.ExtId; // ID
 80001e6:	69bb      	ldr	r3, [r7, #24]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d101      	bne.n	80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 80001ec:	693b      	ldr	r3, [r7, #16]
 80001ee:	e000      	b.n	80001f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000264 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80001f4:	6013      	str	r3, [r2, #0]
		dlc = RxHeader.DLC; // DLC
 80001f6:	6a3b      	ldr	r3, [r7, #32]
 80001f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000268 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80001fa:	6013      	str	r3, [r2, #0]
		data[0] = RxData[0]; // Data
 80001fc:	7a3a      	ldrb	r2, [r7, #8]
 80001fe:	4b1b      	ldr	r3, [pc, #108]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000200:	701a      	strb	r2, [r3, #0]
		data[1] = RxData[1];
 8000202:	7a7a      	ldrb	r2, [r7, #9]
 8000204:	4b19      	ldr	r3, [pc, #100]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000206:	705a      	strb	r2, [r3, #1]
		data[2] = RxData[2];
 8000208:	7aba      	ldrb	r2, [r7, #10]
 800020a:	4b18      	ldr	r3, [pc, #96]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800020c:	709a      	strb	r2, [r3, #2]
		data[3] = RxData[3];
 800020e:	7afa      	ldrb	r2, [r7, #11]
 8000210:	4b16      	ldr	r3, [pc, #88]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000212:	70da      	strb	r2, [r3, #3]
		data[4] = RxData[4];
 8000214:	7b3a      	ldrb	r2, [r7, #12]
 8000216:	4b15      	ldr	r3, [pc, #84]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000218:	711a      	strb	r2, [r3, #4]
		data[5] = RxData[5];
 800021a:	7b7a      	ldrb	r2, [r7, #13]
 800021c:	4b13      	ldr	r3, [pc, #76]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800021e:	715a      	strb	r2, [r3, #5]
		data[6] = RxData[6];
 8000220:	7bba      	ldrb	r2, [r7, #14]
 8000222:	4b12      	ldr	r3, [pc, #72]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000224:	719a      	strb	r2, [r3, #6]
		data[7] = RxData[7];
 8000226:	7bfa      	ldrb	r2, [r7, #15]
 8000228:	4b10      	ldr	r3, [pc, #64]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800022a:	71da      	strb	r2, [r3, #7]
	}
	// CAN IDをマスクして変数の格納先指定
	// 例: id = 0x202 ==> id & 0x00F = 2
	if(id >= 0x200) {
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000234:	d311      	bcc.n	800025a <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
		uint32_t motor_id = id & 0x00F;
 8000236:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f003 030f 	and.w	r3, r3, #15
 800023e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		rpm[motor_id] = data[2] << 8 | data[3];
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000242:	789b      	ldrb	r3, [r3, #2]
 8000244:	021b      	lsls	r3, r3, #8
 8000246:	b21a      	sxth	r2, r3
 8000248:	4b08      	ldr	r3, [pc, #32]	@ (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800024a:	78db      	ldrb	r3, [r3, #3]
 800024c:	b21b      	sxth	r3, r3
 800024e:	4313      	orrs	r3, r2
 8000250:	b219      	sxth	r1, r3
 8000252:	4a07      	ldr	r2, [pc, #28]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		// モータ1の目標角速度
//		rpm_target[1] = -5000;
//		// -16384 <= torque_input <= 16384
//		torque_input[1] = (int16_t)(1.0 * (rpm_target[1] - rpm[1]));
	}
}
 800025a:	bf00      	nop
 800025c:	3730      	adds	r7, #48	@ 0x30
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	200000c4 	.word	0x200000c4
 8000268:	200000c8 	.word	0x200000c8
 800026c:	200000cc 	.word	0x200000cc
 8000270:	20000050 	.word	0x20000050

08000274 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800027a:	f000 fa31 	bl	80006e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800027e:	f000 f88f 	bl	80003a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000282:	f000 f905 	bl	8000490 <MX_GPIO_Init>
	MX_CAN_Init();
 8000286:	f000 f8cd 	bl	8000424 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	// 送信用初期設定
	TxHeader.StdId = 0x200;                 // CAN ID
 800028a:	4b3e      	ldr	r3, [pc, #248]	@ (8000384 <main+0x110>)
 800028c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000290:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;            // フレー�?タイプ�?��?ータフレー�?
 8000292:	4b3c      	ldr	r3, [pc, #240]	@ (8000384 <main+0x110>)
 8000294:	2200      	movs	r2, #0
 8000296:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;              // 標準ID(11?��ﾞｯ?�?)
 8000298:	4b3a      	ldr	r3, [pc, #232]	@ (8000384 <main+0x110>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;                       // �?ータ長は8バイトに
 800029e:	4b39      	ldr	r3, [pc, #228]	@ (8000384 <main+0x110>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;  // ???
 80002a4:	4b37      	ldr	r3, [pc, #220]	@ (8000384 <main+0x110>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	751a      	strb	r2, [r3, #20]

	// 受信用初期設定
	// フィルタ設定初期設定
	uint32_t fId = 0x200 << 21;        // フィルターID
 80002aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ae:	607b      	str	r3, [r7, #4]
	uint32_t fMask = (0x200 << 21) | 0x4; // フィルターマスク（0x4はビット埋め用）
 80002b0:	4b35      	ldr	r3, [pc, #212]	@ (8000388 <main+0x114>)
 80002b2:	603b      	str	r3, [r7, #0]
	filter.FilterIdHigh = fId >> 16;             // フィルターIDの上位16ビット
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	0c1b      	lsrs	r3, r3, #16
 80002b8:	4a34      	ldr	r2, [pc, #208]	@ (800038c <main+0x118>)
 80002ba:	6013      	str	r3, [r2, #0]
	filter.FilterIdLow = fId;                   // フィルターIDの下位16ビット
 80002bc:	4a33      	ldr	r2, [pc, #204]	@ (800038c <main+0x118>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6053      	str	r3, [r2, #4]
	filter.FilterMaskIdHigh = fMask >> 16;           // フィルターマスクの上位16ビット
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	0c1b      	lsrs	r3, r3, #16
 80002c6:	4a31      	ldr	r2, [pc, #196]	@ (800038c <main+0x118>)
 80002c8:	6093      	str	r3, [r2, #8]
	filter.FilterMaskIdLow = fMask;                 // フィルターマスクの下位16ビット
 80002ca:	4a30      	ldr	r2, [pc, #192]	@ (800038c <main+0x118>)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	60d3      	str	r3, [r2, #12]
	filter.FilterScale = CAN_FILTERSCALE_32BIT; // 32モード
 80002d0:	4b2e      	ldr	r3, [pc, #184]	@ (800038c <main+0x118>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	61da      	str	r2, [r3, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // FIFO0へ格納
 80002d6:	4b2d      	ldr	r3, [pc, #180]	@ (800038c <main+0x118>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
	filter.FilterBank = 0;
 80002dc:	4b2b      	ldr	r3, [pc, #172]	@ (800038c <main+0x118>)
 80002de:	2200      	movs	r2, #0
 80002e0:	615a      	str	r2, [r3, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK; // IDマスクモード
 80002e2:	4b2a      	ldr	r3, [pc, #168]	@ (800038c <main+0x118>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
	filter.SlaveStartFilterBank = 14;
 80002e8:	4b28      	ldr	r3, [pc, #160]	@ (800038c <main+0x118>)
 80002ea:	220e      	movs	r2, #14
 80002ec:	625a      	str	r2, [r3, #36]	@ 0x24
	filter.FilterActivation = ENABLE;
 80002ee:	4b27      	ldr	r3, [pc, #156]	@ (800038c <main+0x118>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	621a      	str	r2, [r3, #32]
	// フィルタ初期設定適用
	HAL_CAN_ConfigFilter(&hcan, &filter);
 80002f4:	4925      	ldr	r1, [pc, #148]	@ (800038c <main+0x118>)
 80002f6:	4826      	ldr	r0, [pc, #152]	@ (8000390 <main+0x11c>)
 80002f8:	f000 fb53 	bl	80009a2 <HAL_CAN_ConfigFilter>

	// 割り込み有効
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002fc:	2102      	movs	r1, #2
 80002fe:	4824      	ldr	r0, [pc, #144]	@ (8000390 <main+0x11c>)
 8000300:	f000 fe84 	bl	800100c <HAL_CAN_ActivateNotification>

	// CANスタート
	HAL_CAN_Start(&hcan);
 8000304:	4822      	ldr	r0, [pc, #136]	@ (8000390 <main+0x11c>)
 8000306:	f000 fc16 	bl	8000b36 <HAL_CAN_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		// データ送信
		torque_input[1] = 1000;
 800030a:	4b22      	ldr	r3, [pc, #136]	@ (8000394 <main+0x120>)
 800030c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000310:	805a      	strh	r2, [r3, #2]
		torque_input[2] = 1000;
 8000312:	4b20      	ldr	r3, [pc, #128]	@ (8000394 <main+0x120>)
 8000314:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000318:	809a      	strh	r2, [r3, #4]
		if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)) {
 800031a:	481d      	ldr	r0, [pc, #116]	@ (8000390 <main+0x11c>)
 800031c:	f000 fd1f 	bl	8000d5e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0f1      	beq.n	800030a <main+0x96>
			TxData[0] = (torque_input[1] >> 8) & 0xFF;
 8000326:	4b1b      	ldr	r3, [pc, #108]	@ (8000394 <main+0x120>)
 8000328:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800032c:	121b      	asrs	r3, r3, #8
 800032e:	b21b      	sxth	r3, r3
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b19      	ldr	r3, [pc, #100]	@ (8000398 <main+0x124>)
 8000334:	701a      	strb	r2, [r3, #0]
			TxData[1] = torque_input[1] & 0xFF;
 8000336:	4b17      	ldr	r3, [pc, #92]	@ (8000394 <main+0x120>)
 8000338:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4b16      	ldr	r3, [pc, #88]	@ (8000398 <main+0x124>)
 8000340:	705a      	strb	r2, [r3, #1]
			TxData[2] = (torque_input[2] >> 8) & 0xFF;
 8000342:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <main+0x120>)
 8000344:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000348:	121b      	asrs	r3, r3, #8
 800034a:	b21b      	sxth	r3, r3
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <main+0x124>)
 8000350:	709a      	strb	r2, [r3, #2]
			TxData[3] = torque_input[2] & 0xFF;
 8000352:	4b10      	ldr	r3, [pc, #64]	@ (8000394 <main+0x120>)
 8000354:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <main+0x124>)
 800035c:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <main+0x124>)
 8000360:	2200      	movs	r2, #0
 8000362:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000364:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <main+0x124>)
 8000366:	2200      	movs	r2, #0
 8000368:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <main+0x124>)
 800036c:	2200      	movs	r2, #0
 800036e:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000370:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <main+0x124>)
 8000372:	2200      	movs	r2, #0
 8000374:	71da      	strb	r2, [r3, #7]
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000376:	4b09      	ldr	r3, [pc, #36]	@ (800039c <main+0x128>)
 8000378:	4a07      	ldr	r2, [pc, #28]	@ (8000398 <main+0x124>)
 800037a:	4902      	ldr	r1, [pc, #8]	@ (8000384 <main+0x110>)
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <main+0x11c>)
 800037e:	f000 fc1e 	bl	8000bbe <HAL_CAN_AddTxMessage>
		torque_input[1] = 1000;
 8000382:	e7c2      	b.n	800030a <main+0x96>
 8000384:	20000078 	.word	0x20000078
 8000388:	40000004 	.word	0x40000004
 800038c:	2000009c 	.word	0x2000009c
 8000390:	20000028 	.word	0x20000028
 8000394:	20000064 	.word	0x20000064
 8000398:	20000094 	.word	0x20000094
 800039c:	20000090 	.word	0x20000090

080003a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b090      	sub	sp, #64	@ 0x40
 80003a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	2228      	movs	r2, #40	@ 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 fd14 	bl	8002ddc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c2:	2302      	movs	r3, #2
 80003c4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c6:	2301      	movs	r3, #1
 80003c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ca:	2310      	movs	r3, #16
 80003cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ce:	2302      	movs	r3, #2
 80003d0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d2:	2300      	movs	r3, #0
 80003d4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80003d6:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80003da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003dc:	f107 0318 	add.w	r3, r7, #24
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 faed 	bl	80019c0 <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x50>
		Error_Handler();
 80003ec:	f000 f88c 	bl	8000508 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f4:	2302      	movs	r3, #2
 80003f6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000400:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2102      	movs	r1, #2
 800040a:	4618      	mov	r0, r3
 800040c:	f002 fb16 	bl	8002a3c <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x7a>
		Error_Handler();
 8000416:	f000 f877 	bl	8000508 <Error_Handler>
	}
}
 800041a:	bf00      	nop
 800041c:	3740      	adds	r7, #64	@ 0x40
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000428:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <MX_CAN_Init+0x64>)
 800042a:	4a18      	ldr	r2, [pc, #96]	@ (800048c <MX_CAN_Init+0x68>)
 800042c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 3;
 800042e:	4b16      	ldr	r3, [pc, #88]	@ (8000488 <MX_CAN_Init+0x64>)
 8000430:	2203      	movs	r2, #3
 8000432:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000434:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <MX_CAN_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800043a:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <MX_CAN_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000440:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <MX_CAN_Init+0x64>)
 8000442:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000446:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000448:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <MX_CAN_Init+0x64>)
 800044a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800044e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000450:	4b0d      	ldr	r3, [pc, #52]	@ (8000488 <MX_CAN_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000456:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <MX_CAN_Init+0x64>)
 8000458:	2200      	movs	r2, #0
 800045a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800045c:	4b0a      	ldr	r3, [pc, #40]	@ (8000488 <MX_CAN_Init+0x64>)
 800045e:	2200      	movs	r2, #0
 8000460:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000462:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <MX_CAN_Init+0x64>)
 8000464:	2200      	movs	r2, #0
 8000466:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000468:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <MX_CAN_Init+0x64>)
 800046a:	2200      	movs	r2, #0
 800046c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800046e:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_CAN_Init+0x64>)
 8000470:	2200      	movs	r2, #0
 8000472:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000474:	4804      	ldr	r0, [pc, #16]	@ (8000488 <MX_CAN_Init+0x64>)
 8000476:	f000 f999 	bl	80007ac <HAL_CAN_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_CAN_Init+0x60>
		Error_Handler();
 8000480:	f000 f842 	bl	8000508 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000028 	.word	0x20000028
 800048c:	40006400 	.word	0x40006400

08000490 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80004a6:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <MX_GPIO_Init+0x74>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a16      	ldr	r2, [pc, #88]	@ (8000504 <MX_GPIO_Init+0x74>)
 80004ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <MX_GPIO_Init+0x74>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_GPIO_Init+0x74>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a10      	ldr	r2, [pc, #64]	@ (8000504 <MX_GPIO_Init+0x74>)
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <MX_GPIO_Init+0x74>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin | VCP_RX_Pin;
 80004d6:	f248 0304 	movw	r3, #32772	@ 0x8004
 80004da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	2302      	movs	r3, #2
 80004de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e4:	2303      	movs	r3, #3
 80004e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004e8:	2307      	movs	r3, #7
 80004ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4619      	mov	r1, r3
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f6:	f001 f8f1 	bl	80016dc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80004fa:	bf00      	nop
 80004fc:	3720      	adds	r7, #32
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <Error_Handler+0x8>

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <HAL_MspInit+0x44>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_MspInit+0x44>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_MspInit+0x44>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <HAL_MspInit+0x44>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <HAL_MspInit+0x44>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <HAL_MspInit+0x44>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1c      	ldr	r2, [pc, #112]	@ (80005ec <HAL_CAN_MspInit+0x90>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d131      	bne.n	80005e2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057e:	4b1c      	ldr	r3, [pc, #112]	@ (80005f0 <HAL_CAN_MspInit+0x94>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a1b      	ldr	r2, [pc, #108]	@ (80005f0 <HAL_CAN_MspInit+0x94>)
 8000584:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <HAL_CAN_MspInit+0x94>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <HAL_CAN_MspInit+0x94>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a15      	ldr	r2, [pc, #84]	@ (80005f0 <HAL_CAN_MspInit+0x94>)
 800059c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <HAL_CAN_MspInit+0x94>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005bc:	2303      	movs	r3, #3
 80005be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005c0:	2309      	movs	r3, #9
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f001 f885 	bl	80016dc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2014      	movs	r0, #20
 80005d8:	f001 f849 	bl	800166e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80005dc:	2014      	movs	r0, #20
 80005de:	f001 f862 	bl	80016a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	@ 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40006400 	.word	0x40006400
 80005f0:	40021000 	.word	0x40021000

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <NMI_Handler+0x4>

080005fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <MemManage_Handler+0x4>

0800060c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <UsageFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064a:	f000 f88f 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000658:	4802      	ldr	r0, [pc, #8]	@ (8000664 <CAN_RX0_IRQHandler+0x10>)
 800065a:	f000 fcfd 	bl	8001058 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000028 	.word	0x20000028

08000668 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <SystemInit+0x20>)
 800066e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000672:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <SystemInit+0x20>)
 8000674:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800068c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000690:	f7ff ffea 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480c      	ldr	r0, [pc, #48]	@ (80006c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490d      	ldr	r1, [pc, #52]	@ (80006cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0a      	ldr	r4, [pc, #40]	@ (80006d8 <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ba:	f002 fb97 	bl	8002dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006be:	f7ff fdd9 	bl	8000274 <main>

080006c2 <LoopForever>:

LoopForever:
    b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d0:	08002e84 	.word	0x08002e84
  ldr r2, =_sbss
 80006d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d8:	200000d8 	.word	0x200000d8

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>
	...

080006e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_Init+0x28>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <HAL_Init+0x28>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 ffb1 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 f808 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fc:	f7ff ff0a 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <HAL_InitTick+0x54>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <HAL_InitTick+0x58>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ffc9 	bl	80016c2 <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 ff91 	bl	800166e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	@ (8000768 <HAL_InitTick+0x5c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	200000d4 	.word	0x200000d4

08000794 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;  
 8000798:	4b03      	ldr	r3, [pc, #12]	@ (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200000d4 	.word	0x200000d4

080007ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e0ed      	b.n	800099a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d102      	bne.n	80007d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff fec6 	bl	800055c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f042 0201 	orr.w	r2, r2, #1
 80007de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007e0:	f7ff ffd8 	bl	8000794 <HAL_GetTick>
 80007e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007e6:	e012      	b.n	800080e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007e8:	f7ff ffd4 	bl	8000794 <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	2b0a      	cmp	r3, #10
 80007f4:	d90b      	bls.n	800080e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2205      	movs	r2, #5
 8000806:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e0c5      	b.n	800099a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0e5      	beq.n	80007e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f022 0202 	bic.w	r2, r2, #2
 800082a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800082c:	f7ff ffb2 	bl	8000794 <HAL_GetTick>
 8000830:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000832:	e012      	b.n	800085a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000834:	f7ff ffae 	bl	8000794 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	2b0a      	cmp	r3, #10
 8000840:	d90b      	bls.n	800085a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000846:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2205      	movs	r2, #5
 8000852:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e09f      	b.n	800099a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 0302 	and.w	r3, r3, #2
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1e5      	bne.n	8000834 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7e1b      	ldrb	r3, [r3, #24]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d108      	bne.n	8000882 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	e007      	b.n	8000892 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000890:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7e5b      	ldrb	r3, [r3, #25]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d108      	bne.n	80008ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e007      	b.n	80008bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80008ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7e9b      	ldrb	r3, [r3, #26]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d108      	bne.n	80008d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f042 0220 	orr.w	r2, r2, #32
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	e007      	b.n	80008e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f022 0220 	bic.w	r2, r2, #32
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7edb      	ldrb	r3, [r3, #27]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d108      	bne.n	8000900 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f022 0210 	bic.w	r2, r2, #16
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e007      	b.n	8000910 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0210 	orr.w	r2, r2, #16
 800090e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7f1b      	ldrb	r3, [r3, #28]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d108      	bne.n	800092a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f042 0208 	orr.w	r2, r2, #8
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	e007      	b.n	800093a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f022 0208 	bic.w	r2, r2, #8
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7f5b      	ldrb	r3, [r3, #29]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d108      	bne.n	8000954 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f042 0204 	orr.w	r2, r2, #4
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	e007      	b.n	8000964 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 0204 	bic.w	r2, r2, #4
 8000962:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	431a      	orrs	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	431a      	orrs	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	ea42 0103 	orr.w	r1, r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	430a      	orrs	r2, r1
 8000988:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b087      	sub	sp, #28
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009b8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009ba:	7cfb      	ldrb	r3, [r7, #19]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d003      	beq.n	80009c8 <HAL_CAN_ConfigFilter+0x26>
 80009c0:	7cfb      	ldrb	r3, [r7, #19]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	f040 80aa 	bne.w	8000b1c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009ce:	f043 0201 	orr.w	r2, r3, #1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	2201      	movs	r2, #1
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d123      	bne.n	8000a4a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3248      	adds	r2, #72	@ 0x48
 8000a2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a40:	6979      	ldr	r1, [r7, #20]
 8000a42:	3348      	adds	r3, #72	@ 0x48
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	440b      	add	r3, r1
 8000a48:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d122      	bne.n	8000a98 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3248      	adds	r2, #72	@ 0x48
 8000a78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a8e:	6979      	ldr	r1, [r7, #20]
 8000a90:	3348      	adds	r3, #72	@ 0x48
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d109      	bne.n	8000ab4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ab2:	e007      	b.n	8000ac4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d109      	bne.n	8000ae0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000ade:	e007      	b.n	8000af0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d107      	bne.n	8000b08 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b0e:	f023 0201 	bic.w	r2, r3, #1
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e006      	b.n	8000b2a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
  }
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	371c      	adds	r7, #28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d12e      	bne.n	8000ba8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b62:	f7ff fe17 	bl	8000794 <HAL_GetTick>
 8000b66:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b68:	e012      	b.n	8000b90 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b6a:	f7ff fe13 	bl	8000794 <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b0a      	cmp	r3, #10
 8000b76:	d90b      	bls.n	8000b90 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b7c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2205      	movs	r2, #5
 8000b88:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e012      	b.n	8000bb6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1e5      	bne.n	8000b6a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e006      	b.n	8000bb6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
  }
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b089      	sub	sp, #36	@ 0x24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bdc:	7ffb      	ldrb	r3, [r7, #31]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d003      	beq.n	8000bea <HAL_CAN_AddTxMessage+0x2c>
 8000be2:	7ffb      	ldrb	r3, [r7, #31]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	f040 80ad 	bne.w	8000d44 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10a      	bne.n	8000c0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d105      	bne.n	8000c0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 8095 	beq.w	8000d34 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	0e1b      	lsrs	r3, r3, #24
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c14:	2201      	movs	r2, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	409a      	lsls	r2, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10d      	bne.n	8000c42 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c30:	68f9      	ldr	r1, [r7, #12]
 8000c32:	6809      	ldr	r1, [r1, #0]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3318      	adds	r3, #24
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	440b      	add	r3, r1
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e00f      	b.n	8000c62 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c52:	68f9      	ldr	r1, [r7, #12]
 8000c54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	440b      	add	r3, r1
 8000c60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3318      	adds	r3, #24
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	440b      	add	r3, r1
 8000c72:	3304      	adds	r3, #4
 8000c74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	7d1b      	ldrb	r3, [r3, #20]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d111      	bne.n	8000ca2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3318      	adds	r3, #24
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4413      	add	r3, r2
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	6811      	ldr	r1, [r2, #0]
 8000c92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3318      	adds	r3, #24
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3307      	adds	r3, #7
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	061a      	lsls	r2, r3, #24
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3306      	adds	r3, #6
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	041b      	lsls	r3, r3, #16
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3305      	adds	r3, #5
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	3204      	adds	r2, #4
 8000cc2:	7812      	ldrb	r2, [r2, #0]
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	6811      	ldr	r1, [r2, #0]
 8000cca:	ea43 0200 	orr.w	r2, r3, r0
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000cd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3303      	adds	r3, #3
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	061a      	lsls	r2, r3, #24
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	431a      	orrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	6811      	ldr	r1, [r2, #0]
 8000d00:	ea43 0200 	orr.w	r2, r3, r0
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	440b      	add	r3, r1
 8000d0a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3318      	adds	r3, #24
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	4413      	add	r3, r2
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	6811      	ldr	r1, [r2, #0]
 8000d22:	f043 0201 	orr.w	r2, r3, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3318      	adds	r3, #24
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	440b      	add	r3, r1
 8000d2e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	e00e      	b.n	8000d52 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e006      	b.n	8000d52 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
  }
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	@ 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d70:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d002      	beq.n	8000d7e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000d78:	7afb      	ldrb	r3, [r7, #11]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d11d      	bne.n	8000dba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3301      	adds	r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ddc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d003      	beq.n	8000dec <HAL_CAN_GetRxMessage+0x24>
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	f040 8103 	bne.w	8000ff2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10e      	bne.n	8000e10 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d116      	bne.n	8000e2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e04:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e0f7      	b.n	8001000 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d107      	bne.n	8000e2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0e8      	b.n	8001000 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	331b      	adds	r3, #27
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4413      	add	r3, r2
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0204 	and.w	r2, r3, #4
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10c      	bne.n	8000e66 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	331b      	adds	r3, #27
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4413      	add	r3, r2
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	0d5b      	lsrs	r3, r3, #21
 8000e5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e00b      	b.n	8000e7e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	331b      	adds	r3, #27
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	4413      	add	r3, r2
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	331b      	adds	r3, #27
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	4413      	add	r3, r2
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0202 	and.w	r2, r3, #2
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	331b      	adds	r3, #27
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2208      	movs	r2, #8
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	e00b      	b.n	8000ecc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	331b      	adds	r3, #27
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 020f 	and.w	r2, r3, #15
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	331b      	adds	r3, #27
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3304      	adds	r3, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	331b      	adds	r3, #27
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	4413      	add	r3, r2
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	0c1b      	lsrs	r3, r3, #16
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	4413      	add	r3, r2
 8000f06:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	0a1a      	lsrs	r2, r3, #8
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	4413      	add	r3, r2
 8000f36:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0c1a      	lsrs	r2, r3, #16
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	3302      	adds	r3, #2
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4413      	add	r3, r2
 8000f50:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0e1a      	lsrs	r2, r3, #24
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3303      	adds	r3, #3
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4413      	add	r3, r2
 8000f6a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	3304      	adds	r3, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	4413      	add	r3, r2
 8000f82:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0a1a      	lsrs	r2, r3, #8
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	3305      	adds	r3, #5
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	0c1a      	lsrs	r2, r3, #16
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	3306      	adds	r3, #6
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	0e1a      	lsrs	r2, r3, #24
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3307      	adds	r3, #7
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d108      	bne.n	8000fde <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0220 	orr.w	r2, r2, #32
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	e007      	b.n	8000fee <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0220 	orr.w	r2, r2, #32
 8000fec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e006      	b.n	8001000 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
  }
}
 8001000:	4618      	mov	r0, r3
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d002      	beq.n	800102a <HAL_CAN_ActivateNotification+0x1e>
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d109      	bne.n	800103e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6959      	ldr	r1, [r3, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e006      	b.n	800104c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001042:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
  }
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d07c      	beq.n	8001198 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d023      	beq.n	80010f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f983 	bl	80013c6 <HAL_CAN_TxMailbox0CompleteCallback>
 80010c0:	e016      	b.n	80010f0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d4:	e00c      	b.n	80010f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e8:	e002      	b.n	80010f0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f989 	bl	8001402 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d024      	beq.n	8001144 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001102:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f963 	bl	80013da <HAL_CAN_TxMailbox1CompleteCallback>
 8001114:	e016      	b.n	8001144 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800111c:	2b00      	cmp	r3, #0
 800111e:	d004      	beq.n	800112a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
 8001128:	e00c      	b.n	8001144 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
 800113c:	e002      	b.n	8001144 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f969 	bl	8001416 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d024      	beq.n	8001198 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001156:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f943 	bl	80013ee <HAL_CAN_TxMailbox2CompleteCallback>
 8001168:	e016      	b.n	8001198 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
 800117c:	e00c      	b.n	8001198 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001190:	e002      	b.n	8001198 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f949 	bl	800142a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00c      	beq.n	80011bc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2210      	movs	r2, #16
 80011ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2208      	movs	r2, #8
 80011d6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f930 	bl	800143e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d009      	beq.n	80011fc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7fe ffe6 	bl	80001c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00c      	beq.n	8001220 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2210      	movs	r2, #16
 800121e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2208      	movs	r2, #8
 800123a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f912 	bl	8001466 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	2b00      	cmp	r3, #0
 800124a:	d009      	beq.n	8001260 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f8f9 	bl	8001452 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2210      	movs	r2, #16
 800127a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f8fc 	bl	800147a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00b      	beq.n	80012a4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2208      	movs	r2, #8
 800129c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f8f5 	bl	800148e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d07b      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d072      	beq.n	800139e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d008      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d008      	beq.n	800130c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001312:	2b00      	cmp	r3, #0
 8001314:	d043      	beq.n	800139e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800131c:	2b00      	cmp	r3, #0
 800131e:	d03e      	beq.n	800139e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001326:	2b60      	cmp	r3, #96	@ 0x60
 8001328:	d02b      	beq.n	8001382 <HAL_CAN_IRQHandler+0x32a>
 800132a:	2b60      	cmp	r3, #96	@ 0x60
 800132c:	d82e      	bhi.n	800138c <HAL_CAN_IRQHandler+0x334>
 800132e:	2b50      	cmp	r3, #80	@ 0x50
 8001330:	d022      	beq.n	8001378 <HAL_CAN_IRQHandler+0x320>
 8001332:	2b50      	cmp	r3, #80	@ 0x50
 8001334:	d82a      	bhi.n	800138c <HAL_CAN_IRQHandler+0x334>
 8001336:	2b40      	cmp	r3, #64	@ 0x40
 8001338:	d019      	beq.n	800136e <HAL_CAN_IRQHandler+0x316>
 800133a:	2b40      	cmp	r3, #64	@ 0x40
 800133c:	d826      	bhi.n	800138c <HAL_CAN_IRQHandler+0x334>
 800133e:	2b30      	cmp	r3, #48	@ 0x30
 8001340:	d010      	beq.n	8001364 <HAL_CAN_IRQHandler+0x30c>
 8001342:	2b30      	cmp	r3, #48	@ 0x30
 8001344:	d822      	bhi.n	800138c <HAL_CAN_IRQHandler+0x334>
 8001346:	2b10      	cmp	r3, #16
 8001348:	d002      	beq.n	8001350 <HAL_CAN_IRQHandler+0x2f8>
 800134a:	2b20      	cmp	r3, #32
 800134c:	d005      	beq.n	800135a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800134e:	e01d      	b.n	800138c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001358:	e019      	b.n	800138e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001362:	e014      	b.n	800138e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800136c:	e00f      	b.n	800138e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001376:	e00a      	b.n	800138e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001380:	e005      	b.n	800138e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800138a:	e000      	b.n	800138e <HAL_CAN_IRQHandler+0x336>
            break;
 800138c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800139c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2204      	movs	r2, #4
 80013a4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f872 	bl	80014a2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4907      	ldr	r1, [pc, #28]	@ (8001554 <__NVIC_EnableIRQ+0x38>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	@ (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	@ (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	@ 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	@ 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff8e 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff29 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff3e 	bl	8001500 <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff8e 	bl	80015ac <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5d 	bl	8001558 <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff31 	bl	800151c <__NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffa2 	bl	8001614 <SysTick_Config>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	e14e      	b.n	800198a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8140 	beq.w	8001984 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d005      	beq.n	800171c <HAL_GPIO_Init+0x40>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d130      	bne.n	800177e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001752:	2201      	movs	r2, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f003 0201 	and.w	r2, r3, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b03      	cmp	r3, #3
 8001788:	d017      	beq.n	80017ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d123      	bne.n	800180e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	6939      	ldr	r1, [r7, #16]
 800180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0203 	and.w	r2, r3, #3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 809a 	beq.w	8001984 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001850:	4b55      	ldr	r3, [pc, #340]	@ (80019a8 <HAL_GPIO_Init+0x2cc>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a54      	ldr	r2, [pc, #336]	@ (80019a8 <HAL_GPIO_Init+0x2cc>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b52      	ldr	r3, [pc, #328]	@ (80019a8 <HAL_GPIO_Init+0x2cc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001868:	4a50      	ldr	r2, [pc, #320]	@ (80019ac <HAL_GPIO_Init+0x2d0>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001892:	d013      	beq.n	80018bc <HAL_GPIO_Init+0x1e0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a46      	ldr	r2, [pc, #280]	@ (80019b0 <HAL_GPIO_Init+0x2d4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d00d      	beq.n	80018b8 <HAL_GPIO_Init+0x1dc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a45      	ldr	r2, [pc, #276]	@ (80019b4 <HAL_GPIO_Init+0x2d8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d007      	beq.n	80018b4 <HAL_GPIO_Init+0x1d8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a44      	ldr	r2, [pc, #272]	@ (80019b8 <HAL_GPIO_Init+0x2dc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_GPIO_Init+0x1d4>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b0:	2305      	movs	r3, #5
 80018b2:	e004      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018bc:	2300      	movs	r3, #0
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	f002 0203 	and.w	r2, r2, #3
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	4093      	lsls	r3, r2
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ce:	4937      	ldr	r1, [pc, #220]	@ (80019ac <HAL_GPIO_Init+0x2d0>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018dc:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <HAL_GPIO_Init+0x2e0>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001900:	4a2e      	ldr	r2, [pc, #184]	@ (80019bc <HAL_GPIO_Init+0x2e0>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_GPIO_Init+0x2e0>)
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800192a:	4a24      	ldr	r2, [pc, #144]	@ (80019bc <HAL_GPIO_Init+0x2e0>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <HAL_GPIO_Init+0x2e0>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001954:	4a19      	ldr	r2, [pc, #100]	@ (80019bc <HAL_GPIO_Init+0x2e0>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <HAL_GPIO_Init+0x2e0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800197e:	4a0f      	ldr	r2, [pc, #60]	@ (80019bc <HAL_GPIO_Init+0x2e0>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	f47f aea9 	bne.w	80016ec <HAL_GPIO_Init+0x10>
  }
}
 800199a:	bf00      	nop
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010000 	.word	0x40010000
 80019b0:	48000400 	.word	0x48000400
 80019b4:	48000800 	.word	0x48000800
 80019b8:	48000c00 	.word	0x48000c00
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f001 b823 	b.w	8002a2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 817d 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019fc:	4bbc      	ldr	r3, [pc, #752]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d00c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a08:	4bb9      	ldr	r3, [pc, #740]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d15c      	bne.n	8001ace <HAL_RCC_OscConfig+0x10e>
 8001a14:	4bb6      	ldr	r3, [pc, #728]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a20:	d155      	bne.n	8001ace <HAL_RCC_OscConfig+0x10e>
 8001a22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a26:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	095b      	lsrs	r3, r3, #5
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d102      	bne.n	8001a54 <HAL_RCC_OscConfig+0x94>
 8001a4e:	4ba8      	ldr	r3, [pc, #672]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	e015      	b.n	8001a80 <HAL_RCC_OscConfig+0xc0>
 8001a54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a58:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a6c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a7c:	4b9c      	ldr	r3, [pc, #624]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a84:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a8c:	fa92 f2a2 	rbit	r2, r2
 8001a90:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001a94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a98:	fab2 f282 	clz	r2, r2
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	f042 0220 	orr.w	r2, r2, #32
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	f002 021f 	and.w	r2, r2, #31
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 811f 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x334>
 8001ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 8116 	bne.w	8001cf4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f000 bfaf 	b.w	8002a2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x12e>
 8001ae0:	4b83      	ldr	r3, [pc, #524]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a82      	ldr	r2, [pc, #520]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e036      	b.n	8001b5c <HAL_RCC_OscConfig+0x19c>
 8001aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x158>
 8001afe:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7b      	ldr	r2, [pc, #492]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b79      	ldr	r3, [pc, #484]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a78      	ldr	r2, [pc, #480]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e021      	b.n	8001b5c <HAL_RCC_OscConfig+0x19c>
 8001b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x184>
 8001b2a:	4b71      	ldr	r3, [pc, #452]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a70      	ldr	r2, [pc, #448]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b6e      	ldr	r3, [pc, #440]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6d      	ldr	r2, [pc, #436]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0x19c>
 8001b44:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a69      	ldr	r2, [pc, #420]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b67      	ldr	r3, [pc, #412]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a66      	ldr	r2, [pc, #408]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b5c:	4b64      	ldr	r3, [pc, #400]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b60:	f023 020f 	bic.w	r2, r3, #15
 8001b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	495f      	ldr	r1, [pc, #380]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d059      	beq.n	8001c3a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7fe fe05 	bl	8000794 <HAL_GetTick>
 8001b8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b90:	f7fe fe00 	bl	8000794 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	@ 0x64
 8001b9e:	d902      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	f000 bf43 	b.w	8002a2c <HAL_RCC_OscConfig+0x106c>
 8001ba6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001baa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001bba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x218>
 8001bd2:	4b47      	ldr	r3, [pc, #284]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	e015      	b.n	8001c04 <HAL_RCC_OscConfig+0x244>
 8001bd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bdc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001bec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001bf4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c00:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c08:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001c0c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c10:	fa92 f2a2 	rbit	r2, r2
 8001c14:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001c18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f002 021f 	and.w	r2, r2, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ab      	beq.n	8001b90 <HAL_RCC_OscConfig+0x1d0>
 8001c38:	e05d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7fe fdab 	bl	8000794 <HAL_GetTick>
 8001c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c44:	f7fe fda6 	bl	8000794 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	@ 0x64
 8001c52:	d902      	bls.n	8001c5a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	f000 bee9 	b.w	8002a2c <HAL_RCC_OscConfig+0x106c>
 8001c5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c5e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001c6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2cc>
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	e015      	b.n	8001cb8 <HAL_RCC_OscConfig+0x2f8>
 8001c8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c90:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ca0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ca4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ca8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_RCC_OscConfig+0x330>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cbc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001cc0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001cc4:	fa92 f2a2 	rbit	r2, r2
 8001cc8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001ccc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	f002 021f 	and.w	r2, r2, #31
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ab      	bne.n	8001c44 <HAL_RCC_OscConfig+0x284>
 8001cec:	e003      	b.n	8001cf6 <HAL_RCC_OscConfig+0x336>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 817d 	beq.w	8002006 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d0c:	4ba6      	ldr	r3, [pc, #664]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d18:	4ba3      	ldr	r3, [pc, #652]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d172      	bne.n	8001e0a <HAL_RCC_OscConfig+0x44a>
 8001d24:	4ba0      	ldr	r3, [pc, #640]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d16c      	bne.n	8001e0a <HAL_RCC_OscConfig+0x44a>
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001d42:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3a0>
 8001d5a:	4b93      	ldr	r3, [pc, #588]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e013      	b.n	8001d88 <HAL_RCC_OscConfig+0x3c8>
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d72:	2302      	movs	r3, #2
 8001d74:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001d78:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d84:	4b88      	ldr	r3, [pc, #544]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d92:	fa92 f2a2 	rbit	r2, r2
 8001d96:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d9a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00a      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x410>
 8001dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d002      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f000 be2e 	b.w	8002a2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b75      	ldr	r3, [pc, #468]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ddc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	21f8      	movs	r1, #248	@ 0xf8
 8001de6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001dee:	fa91 f1a1 	rbit	r1, r1
 8001df2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001df6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001dfa:	fab1 f181 	clz	r1, r1
 8001dfe:	b2c9      	uxtb	r1, r1
 8001e00:	408b      	lsls	r3, r1
 8001e02:	4969      	ldr	r1, [pc, #420]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e08:	e0fd      	b.n	8002006 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8088 	beq.w	8001f2c <HAL_RCC_OscConfig+0x56c>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001e2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	461a      	mov	r2, r3
 8001e44:	2301      	movs	r3, #1
 8001e46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7fe fca4 	bl	8000794 <HAL_GetTick>
 8001e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e52:	f7fe fc9f 	bl	8000794 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d902      	bls.n	8001e68 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f000 bde2 	b.w	8002a2c <HAL_RCC_OscConfig+0x106c>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001e7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4d8>
 8001e92:	4b45      	ldr	r3, [pc, #276]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e013      	b.n	8001ec0 <HAL_RCC_OscConfig+0x500>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001eaa:	2302      	movs	r3, #2
 8001eac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001eb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001ec6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001eca:	fa92 f2a2 	rbit	r2, r2
 8001ece:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ed2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001ed6:	fab2 f282 	clz	r2, r2
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f042 0220 	orr.w	r2, r2, #32
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f002 021f 	and.w	r2, r2, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0af      	beq.n	8001e52 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	21f8      	movs	r1, #248	@ 0xf8
 8001f08:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f10:	fa91 f1a1 	rbit	r1, r1
 8001f14:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001f18:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f1c:	fab1 f181 	clz	r1, r1
 8001f20:	b2c9      	uxtb	r1, r1
 8001f22:	408b      	lsls	r3, r1
 8001f24:	4920      	ldr	r1, [pc, #128]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
 8001f2a:	e06c      	b.n	8002006 <HAL_RCC_OscConfig+0x646>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001f3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	461a      	mov	r2, r3
 8001f54:	2300      	movs	r3, #0
 8001f56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fc1c 	bl	8000794 <HAL_GetTick>
 8001f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f62:	f7fe fc17 	bl	8000794 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d902      	bls.n	8001f78 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	f000 bd5a 	b.w	8002a2c <HAL_RCC_OscConfig+0x106c>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d104      	bne.n	8001fac <HAL_RCC_OscConfig+0x5ec>
 8001fa2:	4b01      	ldr	r3, [pc, #4]	@ (8001fa8 <HAL_RCC_OscConfig+0x5e8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e015      	b.n	8001fd4 <HAL_RCC_OscConfig+0x614>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001fc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001fd0:	4bc8      	ldr	r3, [pc, #800]	@ (80022f4 <HAL_RCC_OscConfig+0x934>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001fda:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001fde:	fa92 f2a2 	rbit	r2, r2
 8001fe2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001fe6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001fea:	fab2 f282 	clz	r2, r2
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f002 021f 	and.w	r2, r2, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ad      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8110 	beq.w	800223c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d079      	beq.n	8002120 <HAL_RCC_OscConfig+0x760>
 800202c:	2301      	movs	r3, #1
 800202e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800203e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4bab      	ldr	r3, [pc, #684]	@ (80022f8 <HAL_RCC_OscConfig+0x938>)
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	461a      	mov	r2, r3
 8002052:	2301      	movs	r3, #1
 8002054:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7fe fb9d 	bl	8000794 <HAL_GetTick>
 800205a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002060:	f7fe fb98 	bl	8000794 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d902      	bls.n	8002076 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	f000 bcdb 	b.w	8002a2c <HAL_RCC_OscConfig+0x106c>
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002090:	2202      	movs	r2, #2
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002098:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f2a3 	rbit	r2, r3
 80020a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f2a3 	rbit	r2, r3
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d0:	4b88      	ldr	r3, [pc, #544]	@ (80022f4 <HAL_RCC_OscConfig+0x934>)
 80020d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020dc:	2102      	movs	r1, #2
 80020de:	6019      	str	r1, [r3, #0]
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f1a3 	rbit	r1, r3
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020f6:	6019      	str	r1, [r3, #0]
  return result;
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0a0      	beq.n	8002060 <HAL_RCC_OscConfig+0x6a0>
 800211e:	e08d      	b.n	800223c <HAL_RCC_OscConfig+0x87c>
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002128:	2201      	movs	r2, #1
 800212a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002142:	601a      	str	r2, [r3, #0]
  return result;
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800214c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	4b68      	ldr	r3, [pc, #416]	@ (80022f8 <HAL_RCC_OscConfig+0x938>)
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	461a      	mov	r2, r3
 800215e:	2300      	movs	r3, #0
 8002160:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7fe fb17 	bl	8000794 <HAL_GetTick>
 8002166:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216c:	f7fe fb12 	bl	8000794 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d902      	bls.n	8002182 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	f000 bc55 	b.w	8002a2c <HAL_RCC_OscConfig+0x106c>
 8002182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002186:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800218a:	2202      	movs	r2, #2
 800218c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021ae:	2202      	movs	r2, #2
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	fa93 f2a3 	rbit	r2, r3
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021d2:	2202      	movs	r2, #2
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80021ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ee:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <HAL_RCC_OscConfig+0x934>)
 80021f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021fa:	2102      	movs	r1, #2
 80021fc:	6019      	str	r1, [r3, #0]
 80021fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002202:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f1a3 	rbit	r1, r3
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002214:	6019      	str	r1, [r3, #0]
  return result;
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d197      	bne.n	800216c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002240:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 81a1 	beq.w	8002594 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002258:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <HAL_RCC_OscConfig+0x934>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d116      	bne.n	8002292 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <HAL_RCC_OscConfig+0x934>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <HAL_RCC_OscConfig+0x934>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226e:	61d3      	str	r3, [r2, #28]
 8002270:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <HAL_RCC_OscConfig+0x934>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800228a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800228c:	2301      	movs	r3, #1
 800228e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <HAL_RCC_OscConfig+0x93c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11a      	bne.n	80022d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229e:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <HAL_RCC_OscConfig+0x93c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <HAL_RCC_OscConfig+0x93c>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7fe fa73 	bl	8000794 <HAL_GetTick>
 80022ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	e009      	b.n	80022c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7fe fa6e 	bl	8000794 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	@ 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e3b1      	b.n	8002a2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <HAL_RCC_OscConfig+0x93c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ef      	beq.n	80022b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10d      	bne.n	8002300 <HAL_RCC_OscConfig+0x940>
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_RCC_OscConfig+0x934>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a02      	ldr	r2, [pc, #8]	@ (80022f4 <HAL_RCC_OscConfig+0x934>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	e03c      	b.n	800236c <HAL_RCC_OscConfig+0x9ac>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	10908120 	.word	0x10908120
 80022fc:	40007000 	.word	0x40007000
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0x96a>
 8002310:	4bc1      	ldr	r3, [pc, #772]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4ac0      	ldr	r2, [pc, #768]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	4bbe      	ldr	r3, [pc, #760]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4abd      	ldr	r2, [pc, #756]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002322:	f023 0304 	bic.w	r3, r3, #4
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e020      	b.n	800236c <HAL_RCC_OscConfig+0x9ac>
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x994>
 800233a:	4bb7      	ldr	r3, [pc, #732]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4ab6      	ldr	r2, [pc, #728]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6213      	str	r3, [r2, #32]
 8002346:	4bb4      	ldr	r3, [pc, #720]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4ab3      	ldr	r2, [pc, #716]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0x9ac>
 8002354:	4bb0      	ldr	r3, [pc, #704]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4aaf      	ldr	r2, [pc, #700]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	4bad      	ldr	r3, [pc, #692]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4aac      	ldr	r2, [pc, #688]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002366:	f023 0304 	bic.w	r3, r3, #4
 800236a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8081 	beq.w	8002480 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7fe fa09 	bl	8000794 <HAL_GetTick>
 8002382:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7fe fa04 	bl	8000794 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e345      	b.n	8002a2c <HAL_RCC_OscConfig+0x106c>
 80023a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023a8:	2202      	movs	r2, #2
 80023aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	fa93 f2a3 	rbit	r2, r3
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023cc:	2202      	movs	r2, #2
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fa93 f2a3 	rbit	r2, r3
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023e6:	601a      	str	r2, [r3, #0]
  return result;
 80023e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d102      	bne.n	800240c <HAL_RCC_OscConfig+0xa4c>
 8002406:	4b84      	ldr	r3, [pc, #528]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	e013      	b.n	8002434 <HAL_RCC_OscConfig+0xa74>
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002414:	2202      	movs	r2, #2
 8002416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	4b79      	ldr	r3, [pc, #484]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002438:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800243c:	2102      	movs	r1, #2
 800243e:	6011      	str	r1, [r2, #0]
 8002440:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002444:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	fa92 f1a2 	rbit	r1, r2
 800244e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002452:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002456:	6011      	str	r1, [r2, #0]
  return result;
 8002458:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	fab2 f282 	clz	r2, r2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f002 021f 	and.w	r2, r2, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d084      	beq.n	8002388 <HAL_RCC_OscConfig+0x9c8>
 800247e:	e07f      	b.n	8002580 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7fe f988 	bl	8000794 <HAL_GetTick>
 8002484:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	e00b      	b.n	80024a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe f983 	bl	8000794 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e2c4      	b.n	8002a2c <HAL_RCC_OscConfig+0x106c>
 80024a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024aa:	2202      	movs	r2, #2
 80024ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	fa93 f2a3 	rbit	r2, r3
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024e8:	601a      	str	r2, [r3, #0]
  return result;
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f043 0302 	orr.w	r3, r3, #2
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d102      	bne.n	800250e <HAL_RCC_OscConfig+0xb4e>
 8002508:	4b43      	ldr	r3, [pc, #268]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	e013      	b.n	8002536 <HAL_RCC_OscConfig+0xb76>
 800250e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002512:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002516:	2202      	movs	r2, #2
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	4b39      	ldr	r3, [pc, #228]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800253a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800253e:	2102      	movs	r1, #2
 8002540:	6011      	str	r1, [r2, #0]
 8002542:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002546:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	fa92 f1a2 	rbit	r1, r2
 8002550:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002554:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002558:	6011      	str	r1, [r2, #0]
  return result;
 800255a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800255e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	fab2 f282 	clz	r2, r2
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f002 021f 	and.w	r2, r2, #31
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f202 	lsl.w	r2, r1, r2
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d184      	bne.n	800248a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002580:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	4a22      	ldr	r2, [pc, #136]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002592:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002598:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8242 	beq.w	8002a2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <HAL_RCC_OscConfig+0xc58>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	f000 8213 	beq.w	80029da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	f040 8162 	bne.w	800288a <HAL_RCC_OscConfig+0xeca>
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	fa93 f2a3 	rbit	r2, r3
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025ea:	601a      	str	r2, [r3, #0]
  return result;
 80025ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002600:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	461a      	mov	r2, r3
 8002608:	2300      	movs	r3, #0
 800260a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe f8c2 	bl	8000794 <HAL_GetTick>
 8002610:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	e00c      	b.n	8002630 <HAL_RCC_OscConfig+0xc70>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe f8ba 	bl	8000794 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1fd      	b.n	8002a2c <HAL_RCC_OscConfig+0x106c>
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002638:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800263c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002642:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fa93 f2a3 	rbit	r2, r3
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002654:	601a      	str	r2, [r3, #0]
  return result;
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800265e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d102      	bne.n	800267a <HAL_RCC_OscConfig+0xcba>
 8002674:	4bb0      	ldr	r3, [pc, #704]	@ (8002938 <HAL_RCC_OscConfig+0xf78>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	e027      	b.n	80026ca <HAL_RCC_OscConfig+0xd0a>
 800267a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002682:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fa93 f2a3 	rbit	r2, r3
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	4b9c      	ldr	r3, [pc, #624]	@ (8002938 <HAL_RCC_OscConfig+0xf78>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ce:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026d6:	6011      	str	r1, [r2, #0]
 80026d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026dc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	fa92 f1a2 	rbit	r1, r2
 80026e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ea:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026ee:	6011      	str	r1, [r2, #0]
  return result;
 80026f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	fab2 f282 	clz	r2, r2
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f002 021f 	and.w	r2, r2, #31
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f202 	lsl.w	r2, r1, r2
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d182      	bne.n	800261c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002716:	4b88      	ldr	r3, [pc, #544]	@ (8002938 <HAL_RCC_OscConfig+0xf78>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800271e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002722:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800272a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	430b      	orrs	r3, r1
 8002738:	497f      	ldr	r1, [pc, #508]	@ (8002938 <HAL_RCC_OscConfig+0xf78>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002746:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002762:	601a      	str	r2, [r3, #0]
  return result;
 8002764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002768:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800276c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002778:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	461a      	mov	r2, r3
 8002780:	2301      	movs	r3, #1
 8002782:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe f806 	bl	8000794 <HAL_GetTick>
 8002788:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278c:	e009      	b.n	80027a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe f801 	bl	8000794 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e144      	b.n	8002a2c <HAL_RCC_OscConfig+0x106c>
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027c6:	601a      	str	r2, [r3, #0]
  return result;
 80027c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027cc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_OscConfig+0xe2c>
 80027e6:	4b54      	ldr	r3, [pc, #336]	@ (8002938 <HAL_RCC_OscConfig+0xf78>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	e027      	b.n	800283c <HAL_RCC_OscConfig+0xe7c>
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80027f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	fa93 f2a3 	rbit	r2, r3
 8002808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800281a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	fa93 f2a3 	rbit	r2, r3
 800282e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002832:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	4b3f      	ldr	r3, [pc, #252]	@ (8002938 <HAL_RCC_OscConfig+0xf78>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002840:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002844:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002848:	6011      	str	r1, [r2, #0]
 800284a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800284e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	fa92 f1a2 	rbit	r1, r2
 8002858:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800285c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002860:	6011      	str	r1, [r2, #0]
  return result;
 8002862:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002866:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	fab2 f282 	clz	r2, r2
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	f042 0220 	orr.w	r2, r2, #32
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f002 021f 	and.w	r2, r2, #31
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d082      	beq.n	800278e <HAL_RCC_OscConfig+0xdce>
 8002888:	e0cf      	b.n	8002a2a <HAL_RCC_OscConfig+0x106a>
 800288a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002892:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028ae:	601a      	str	r2, [r3, #0]
  return result;
 80028b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	461a      	mov	r2, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fd ff60 	bl	8000794 <HAL_GetTick>
 80028d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d8:	e009      	b.n	80028ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028da:	f7fd ff5b 	bl	8000794 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e09e      	b.n	8002a2c <HAL_RCC_OscConfig+0x106c>
 80028ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002912:	601a      	str	r2, [r3, #0]
  return result;
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800291c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d104      	bne.n	800293c <HAL_RCC_OscConfig+0xf7c>
 8002932:	4b01      	ldr	r3, [pc, #4]	@ (8002938 <HAL_RCC_OscConfig+0xf78>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	e029      	b.n	800298c <HAL_RCC_OscConfig+0xfcc>
 8002938:	40021000 	.word	0x40021000
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002944:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800296a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002974:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002982:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	4b2b      	ldr	r3, [pc, #172]	@ (8002a38 <HAL_RCC_OscConfig+0x1078>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002990:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002994:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002998:	6011      	str	r1, [r2, #0]
 800299a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800299e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	fa92 f1a2 	rbit	r1, r2
 80029a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ac:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029b0:	6011      	str	r1, [r2, #0]
  return result;
 80029b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	fab2 f282 	clz	r2, r2
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	f042 0220 	orr.w	r2, r2, #32
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	f002 021f 	and.w	r2, r2, #31
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d180      	bne.n	80028da <HAL_RCC_OscConfig+0xf1a>
 80029d8:	e027      	b.n	8002a2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e01e      	b.n	8002a2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ee:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_RCC_OscConfig+0x1078>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029fa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d10b      	bne.n	8002a26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d001      	beq.n	8002a2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b09e      	sub	sp, #120	@ 0x78
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e162      	b.n	8002d1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b90      	ldr	r3, [pc, #576]	@ (8002c98 <HAL_RCC_ClockConfig+0x25c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d910      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b8d      	ldr	r3, [pc, #564]	@ (8002c98 <HAL_RCC_ClockConfig+0x25c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 0207 	bic.w	r2, r3, #7
 8002a6a:	498b      	ldr	r1, [pc, #556]	@ (8002c98 <HAL_RCC_ClockConfig+0x25c>)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b89      	ldr	r3, [pc, #548]	@ (8002c98 <HAL_RCC_ClockConfig+0x25c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e14a      	b.n	8002d1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b82      	ldr	r3, [pc, #520]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	497f      	ldr	r1, [pc, #508]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80dc 	beq.w	8002c68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d13c      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xf6>
 8002ab8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002abc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d102      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xa6>
 8002adc:	4b6f      	ldr	r3, [pc, #444]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	e00f      	b.n	8002b02 <HAL_RCC_ClockConfig+0xc6>
 8002ae2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8002af0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002af4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002af6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002afe:	4b67      	ldr	r3, [pc, #412]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b0a:	fa92 f2a2 	rbit	r2, r2
 8002b0e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b12:	fab2 f282 	clz	r2, r2
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f042 0220 	orr.w	r2, r2, #32
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	f002 021f 	and.w	r2, r2, #31
 8002b22:	2101      	movs	r1, #1
 8002b24:	fa01 f202 	lsl.w	r2, r1, r2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d17b      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0f3      	b.n	8002d1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d13c      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x178>
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b3e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d102      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x128>
 8002b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	e00f      	b.n	8002b84 <HAL_RCC_ClockConfig+0x148>
 8002b64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b80:	4b46      	ldr	r3, [pc, #280]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b88:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b8c:	fa92 f2a2 	rbit	r2, r2
 8002b90:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002b92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f002 021f 	and.w	r2, r2, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d13a      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0b2      	b.n	8002d1a <HAL_RCC_ClockConfig+0x2de>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d102      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x1a0>
 8002bd6:	4b31      	ldr	r3, [pc, #196]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e00d      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1bc>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be8:	2302      	movs	r3, #2
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	61ba      	str	r2, [r7, #24]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	fa92 f2a2 	rbit	r2, r2
 8002c02:	617a      	str	r2, [r7, #20]
  return result;
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	fab2 f282 	clz	r2, r2
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f042 0220 	orr.w	r2, r2, #32
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	f002 021f 	and.w	r2, r2, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e079      	b.n	8002d1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	491a      	ldr	r1, [pc, #104]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7fd fdac 	bl	8000794 <HAL_GetTick>
 8002c3c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fd fda8 	bl	8000794 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e061      	b.n	8002d1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <HAL_RCC_ClockConfig+0x260>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_RCC_ClockConfig+0x25c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d214      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <HAL_RCC_ClockConfig+0x25c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	4906      	ldr	r1, [pc, #24]	@ (8002c98 <HAL_RCC_ClockConfig+0x25c>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <HAL_RCC_ClockConfig+0x25c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e040      	b.n	8002d1a <HAL_RCC_ClockConfig+0x2de>
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <HAL_RCC_ClockConfig+0x2e8>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	491a      	ldr	r1, [pc, #104]	@ (8002d24 <HAL_RCC_ClockConfig+0x2e8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cca:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <HAL_RCC_ClockConfig+0x2e8>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4912      	ldr	r1, [pc, #72]	@ (8002d24 <HAL_RCC_ClockConfig+0x2e8>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cde:	f000 f829 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <HAL_RCC_ClockConfig+0x2e8>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cec:	22f0      	movs	r2, #240	@ 0xf0
 8002cee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	fa92 f2a2 	rbit	r2, r2
 8002cf6:	60fa      	str	r2, [r7, #12]
  return result;
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	fab2 f282 	clz	r2, r2
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	40d3      	lsrs	r3, r2
 8002d02:	4a09      	ldr	r2, [pc, #36]	@ (8002d28 <HAL_RCC_ClockConfig+0x2ec>)
 8002d04:	5cd3      	ldrb	r3, [r2, r3]
 8002d06:	fa21 f303 	lsr.w	r3, r1, r3
 8002d0a:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <HAL_RCC_ClockConfig+0x2f0>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d0e:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <HAL_RCC_ClockConfig+0x2f4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fcfa 	bl	800070c <HAL_InitTick>
  
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3778      	adds	r7, #120	@ 0x78
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08002e4c 	.word	0x08002e4c
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20000004 	.word	0x20000004

08002d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x30>
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x36>
 8002d62:	e026      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d64:	4b19      	ldr	r3, [pc, #100]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d66:	613b      	str	r3, [r7, #16]
      break;
 8002d68:	e026      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	0c9b      	lsrs	r3, r3, #18
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	4a17      	ldr	r2, [pc, #92]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d74:	5cd3      	ldrb	r3, [r2, r3]
 8002d76:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	4a14      	ldr	r2, [pc, #80]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d82:	5cd3      	ldrb	r3, [r2, r3]
 8002d84:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d90:	4a0e      	ldr	r2, [pc, #56]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e004      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
      break;
 8002db0:	e002      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002db4:	613b      	str	r3, [r7, #16]
      break;
 8002db6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db8:	693b      	ldr	r3, [r7, #16]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	007a1200 	.word	0x007a1200
 8002dd0:	08002e5c 	.word	0x08002e5c
 8002dd4:	08002e6c 	.word	0x08002e6c
 8002dd8:	003d0900 	.word	0x003d0900

08002ddc <memset>:
 8002ddc:	4402      	add	r2, r0
 8002dde:	4603      	mov	r3, r0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	4d0d      	ldr	r5, [pc, #52]	@ (8002e24 <__libc_init_array+0x38>)
 8002df0:	4c0d      	ldr	r4, [pc, #52]	@ (8002e28 <__libc_init_array+0x3c>)
 8002df2:	1b64      	subs	r4, r4, r5
 8002df4:	10a4      	asrs	r4, r4, #2
 8002df6:	2600      	movs	r6, #0
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	4d0b      	ldr	r5, [pc, #44]	@ (8002e2c <__libc_init_array+0x40>)
 8002dfe:	4c0c      	ldr	r4, [pc, #48]	@ (8002e30 <__libc_init_array+0x44>)
 8002e00:	f000 f818 	bl	8002e34 <_init>
 8002e04:	1b64      	subs	r4, r4, r5
 8002e06:	10a4      	asrs	r4, r4, #2
 8002e08:	2600      	movs	r6, #0
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08002e7c 	.word	0x08002e7c
 8002e28:	08002e7c 	.word	0x08002e7c
 8002e2c:	08002e7c 	.word	0x08002e7c
 8002e30:	08002e80 	.word	0x08002e80

08002e34 <_init>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	bf00      	nop
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

08002e40 <_fini>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr
