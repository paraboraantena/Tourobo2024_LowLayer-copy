
shoki_CAN_MD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b84  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005d48  08005d48  00006d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d60  08005d60  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d60  08005d60  00006d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d68  08005d68  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d6c  08005d6c  00006d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005d70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08005d7c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08005d7c  000071d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f142  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e0  00000000  00000000  0001617e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00018260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba1  00000000  00000000  00019130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002239c  00000000  00000000  00019cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011db1  00000000  00000000  0003c06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d378e  00000000  00000000  0004de1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001215ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f8c  00000000  00000000  001215f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0012557c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005d30 	.word	0x08005d30

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005d30 	.word	0x08005d30

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN PV */
uint32_t id;
uint32_t dlc;
uint8_t data[8];
uint8_t failure = 0;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan2) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08c      	sub	sp, #48	@ 0x30
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	f107 0214 	add.w	r2, r7, #20
 8000504:	2100      	movs	r1, #0
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f001 fa37 	bl	800197a <HAL_CAN_GetRxMessage>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d122      	bne.n	8000558 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		id = (RxHeader.IDE == CAN_ID_STD) ? RxHeader.StdId : RxHeader.ExtId;   // ID
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d101      	bne.n	800051c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	e000      	b.n	800051e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000520:	6013      	str	r3, [r2, #0]
		dlc = RxHeader.DLC;                                                   // DLC
 8000522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000524:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000526:	6013      	str	r3, [r2, #0]
		data[0] = RxData[0];                                                 // Data
 8000528:	7b3a      	ldrb	r2, [r7, #12]
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800052c:	701a      	strb	r2, [r3, #0]
		data[1] = RxData[1];
 800052e:	7b7a      	ldrb	r2, [r7, #13]
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000532:	705a      	strb	r2, [r3, #1]
		data[2] = RxData[2];
 8000534:	7bba      	ldrb	r2, [r7, #14]
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000538:	709a      	strb	r2, [r3, #2]
		data[3] = RxData[3];
 800053a:	7bfa      	ldrb	r2, [r7, #15]
 800053c:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800053e:	70da      	strb	r2, [r3, #3]
		data[4] = RxData[4];
 8000540:	7c3a      	ldrb	r2, [r7, #16]
 8000542:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000544:	711a      	strb	r2, [r3, #4]
		data[5] = RxData[5];
 8000546:	7c7a      	ldrb	r2, [r7, #17]
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800054a:	715a      	strb	r2, [r3, #5]
		data[6] = RxData[6];
 800054c:	7cba      	ldrb	r2, [r7, #18]
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000550:	719a      	strb	r2, [r3, #6]
		data[7] = RxData[7];
 8000552:	7cfa      	ldrb	r2, [r7, #19]
 8000554:	4b04      	ldr	r3, [pc, #16]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000556:	71da      	strb	r2, [r3, #7]

	}
}
 8000558:	bf00      	nop
 800055a:	3730      	adds	r7, #48	@ 0x30
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200001c4 	.word	0x200001c4
 8000564:	200001c8 	.word	0x200001c8
 8000568:	200001cc 	.word	0x200001cc

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fe6b 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f85d 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 faef 	bl	8000b5c <MX_GPIO_Init>
  MX_I2C3_Init();
 800057e:	f000 f8fd 	bl	800077c <MX_I2C3_Init>
  MX_CAN2_Init();
 8000582:	f000 f8c5 	bl	8000710 <MX_CAN2_Init>
  MX_TIM1_Init();
 8000586:	f000 f927 	bl	80007d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800058a:	f000 f9d1 	bl	8000930 <MX_TIM2_Init>
  MX_TIM3_Init();
 800058e:	f000 fa33 	bl	80009f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000592:	f000 fa95 	bl	8000ac0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = 0;  // フィルターID(???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��? ?16ビッ ?)
 8000596:	2300      	movs	r3, #0
 8000598:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterIdLow = 0;   // フィルターID(???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��? ?16ビッ ?)
 800059a:	2300      	movs	r3, #0
 800059c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	filter.FilterMaskIdHigh = 0; // フィルターマスク(???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��? ?16ビッ ?)
 800059e:	2300      	movs	r3, #0
 80005a0:	633b      	str	r3, [r7, #48]	@ 0x30
	filter.FilterMaskIdLow = 0; // フィルターマスク(???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��? ?16ビッ ?)
 80005a2:	2300      	movs	r3, #0
 80005a4:	637b      	str	r3, [r7, #52]	@ 0x34
	filter.FilterScale = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80005a6:	2301      	movs	r3, #1
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80005aa:	2300      	movs	r3, #0
 80005ac:	63bb      	str	r3, [r7, #56]	@ 0x38
	filter.FilterBank = 0;                        // フィルターバンクNo
 80005ae:	2300      	movs	r3, #0
 80005b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	filter.FilterMode = CAN_FILTERMODE_IDMASK;    // フィルターモー ?
 80005b2:	2300      	movs	r3, #0
 80005b4:	643b      	str	r3, [r7, #64]	@ 0x40
	filter.SlaveStartFilterBank = 0;                      // スレーブCANの開始フィルターバンクNo
 80005b6:	2300      	movs	r3, #0
 80005b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	filter.FilterActivation = ENABLE;                   // フィルター無効?  有効
 80005ba:	2301      	movs	r3, #1
 80005bc:	64bb      	str	r3, [r7, #72]	@ 0x48
	HAL_CAN_ConfigFilter(&hcan2, &filter);
 80005be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005c2:	4619      	mov	r1, r3
 80005c4:	481a      	ldr	r0, [pc, #104]	@ (8000630 <main+0xc4>)
 80005c6:	f000 ffaf 	bl	8001528 <HAL_CAN_ConfigFilter>

	// CANスター ?
	HAL_CAN_Start(&hcan2);
 80005ca:	4819      	ldr	r0, [pc, #100]	@ (8000630 <main+0xc4>)
 80005cc:	f001 f88c 	bl	80016e8 <HAL_CAN_Start>
	// 割り込み有効
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005d0:	2102      	movs	r1, #2
 80005d2:	4817      	ldr	r0, [pc, #92]	@ (8000630 <main+0xc4>)
 80005d4:	f001 faf3 	bl	8001bbe <HAL_CAN_ActivateNotification>
	uint32_t TxMailbox;
	uint8_t TxData[8];

	for (;;) {

		if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan2)) {
 80005d8:	4815      	ldr	r0, [pc, #84]	@ (8000630 <main+0xc4>)
 80005da:	f001 f999 	bl	8001910 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f9      	beq.n	80005d8 <main+0x6c>
			TxHeader.StdId = 0x440;                 // CAN ID
 80005e4:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80005e8:	613b      	str	r3, [r7, #16]
			TxHeader.RTR = CAN_RTR_DATA; // フレー???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?タイプ�????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?ータフレー???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
			TxHeader.IDE = CAN_ID_STD; // 標準ID(11????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
			TxHeader.DLC = 8;             // ???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?ータ長は8バイトに
 80005f2:	2308      	movs	r3, #8
 80005f4:	623b      	str	r3, [r7, #32]
			TxHeader.TransmitGlobalTime = DISABLE;  // ???
 80005f6:	2300      	movs	r3, #0
 80005f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			TxData[0] = 0x22;
 80005fc:	2322      	movs	r3, #34	@ 0x22
 80005fe:	713b      	strb	r3, [r7, #4]
			TxData[1] = 0x22;
 8000600:	2322      	movs	r3, #34	@ 0x22
 8000602:	717b      	strb	r3, [r7, #5]
			TxData[2] = 0x22;
 8000604:	2322      	movs	r3, #34	@ 0x22
 8000606:	71bb      	strb	r3, [r7, #6]
			TxData[3] = 0x22;
 8000608:	2322      	movs	r3, #34	@ 0x22
 800060a:	71fb      	strb	r3, [r7, #7]
			TxData[4] = 0x22;
 800060c:	2322      	movs	r3, #34	@ 0x22
 800060e:	723b      	strb	r3, [r7, #8]
			TxData[5] = 0x22;
 8000610:	2322      	movs	r3, #34	@ 0x22
 8000612:	727b      	strb	r3, [r7, #9]
			TxData[6] = 0x22;
 8000614:	2322      	movs	r3, #34	@ 0x22
 8000616:	72bb      	strb	r3, [r7, #10]
			TxData[7] = 0x22;
 8000618:	2322      	movs	r3, #34	@ 0x22
 800061a:	72fb      	strb	r3, [r7, #11]
			HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	1d3a      	adds	r2, r7, #4
 8000622:	f107 0110 	add.w	r1, r7, #16
 8000626:	4802      	ldr	r0, [pc, #8]	@ (8000630 <main+0xc4>)
 8000628:	f001 f8a2 	bl	8001770 <HAL_CAN_AddTxMessage>
		if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan2)) {
 800062c:	e7d4      	b.n	80005d8 <main+0x6c>
 800062e:	bf00      	nop
 8000630:	20000028 	.word	0x20000028

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2234      	movs	r2, #52	@ 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fb48 	bl	8005cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <SystemClock_Config+0xd4>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <SystemClock_Config+0xd4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	4a22      	ldr	r2, [pc, #136]	@ (800070c <SystemClock_Config+0xd8>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80006ac:	235a      	movs	r3, #90	@ 0x5a
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 f949 	bl	8004958 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006cc:	f000 fb08 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fdfc 	bl	80042ec <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006fa:	f000 faf1 	bl	8000ce0 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_CAN2_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <MX_CAN2_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_CAN2_Init+0x64>)
 800071c:	2203      	movs	r2, #3
 800071e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_CAN2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_CAN2_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_CAN2_Init+0x64>)
 800072e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000732:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_CAN2_Init+0x64>)
 8000736:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800073a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <MX_CAN2_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_CAN2_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_CAN2_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_CAN2_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_CAN2_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_CAN2_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_CAN2_Init+0x64>)
 8000762:	f000 fde5 	bl	8001330 <HAL_CAN_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 fab8 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028
 8000778:	40006800 	.word	0x40006800

0800077c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_I2C3_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <MX_I2C3_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_I2C3_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_I2C3_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_I2C3_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_I2C3_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_I2C3_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_I2C3_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_I2C3_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_I2C3_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_I2C3_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_I2C3_Init+0x50>)
 80007ba:	f001 ff69 	bl	8002690 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 fa8c 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000050 	.word	0x20000050
 80007d0:	40005c00 	.word	0x40005c00
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	@ 0x58
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2220      	movs	r2, #32
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f005 fa61 	bl	8005cd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000816:	4b44      	ldr	r3, [pc, #272]	@ (8000928 <MX_TIM1_Init+0x150>)
 8000818:	4a44      	ldr	r2, [pc, #272]	@ (800092c <MX_TIM1_Init+0x154>)
 800081a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800081c:	4b42      	ldr	r3, [pc, #264]	@ (8000928 <MX_TIM1_Init+0x150>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b41      	ldr	r3, [pc, #260]	@ (8000928 <MX_TIM1_Init+0x150>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000828:	4b3f      	ldr	r3, [pc, #252]	@ (8000928 <MX_TIM1_Init+0x150>)
 800082a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800082e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b3d      	ldr	r3, [pc, #244]	@ (8000928 <MX_TIM1_Init+0x150>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000836:	4b3c      	ldr	r3, [pc, #240]	@ (8000928 <MX_TIM1_Init+0x150>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b3a      	ldr	r3, [pc, #232]	@ (8000928 <MX_TIM1_Init+0x150>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000842:	4839      	ldr	r0, [pc, #228]	@ (8000928 <MX_TIM1_Init+0x150>)
 8000844:	f004 fb26 	bl	8004e94 <HAL_TIM_Base_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800084e:	f000 fa47 	bl	8000ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000858:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800085c:	4619      	mov	r1, r3
 800085e:	4832      	ldr	r0, [pc, #200]	@ (8000928 <MX_TIM1_Init+0x150>)
 8000860:	f004 fd68 	bl	8005334 <HAL_TIM_ConfigClockSource>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800086a:	f000 fa39 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800086e:	482e      	ldr	r0, [pc, #184]	@ (8000928 <MX_TIM1_Init+0x150>)
 8000870:	f004 fb5f 	bl	8004f32 <HAL_TIM_PWM_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800087a:	f000 fa31 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000886:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800088a:	4619      	mov	r1, r3
 800088c:	4826      	ldr	r0, [pc, #152]	@ (8000928 <MX_TIM1_Init+0x150>)
 800088e:	f005 f941 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000898:	f000 fa22 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089c:	2360      	movs	r3, #96	@ 0x60
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008bc:	2204      	movs	r2, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4819      	ldr	r0, [pc, #100]	@ (8000928 <MX_TIM1_Init+0x150>)
 80008c2:	f004 fc75 	bl	80051b0 <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80008cc:	f000 fa08 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d4:	2208      	movs	r2, #8
 80008d6:	4619      	mov	r1, r3
 80008d8:	4813      	ldr	r0, [pc, #76]	@ (8000928 <MX_TIM1_Init+0x150>)
 80008da:	f004 fc69 	bl	80051b0 <HAL_TIM_PWM_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80008e4:	f000 f9fc 	bl	8000ce0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000900:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM1_Init+0x150>)
 800090c:	f005 f97e 	bl	8005c0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000916:	f000 f9e3 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM1_Init+0x150>)
 800091c:	f000 fb5a 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000920:	bf00      	nop
 8000922:	3758      	adds	r7, #88	@ 0x58
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000a4 	.word	0x200000a4
 800092c:	40010000 	.word	0x40010000

08000930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000952:	4b28      	ldr	r3, [pc, #160]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 8000954:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000958:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800095a:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b24      	ldr	r3, [pc, #144]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000966:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800097a:	481e      	ldr	r0, [pc, #120]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 800097c:	f004 fad9 	bl	8004f32 <HAL_TIM_PWM_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000986:	f000 f9ab 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	4619      	mov	r1, r3
 8000998:	4816      	ldr	r0, [pc, #88]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 800099a:	f005 f8bb 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009a4:	f000 f99c 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a8:	2360      	movs	r3, #96	@ 0x60
 80009aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2208      	movs	r2, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 80009c0:	f004 fbf6 	bl	80051b0 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80009ca:	f000 f989 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	220c      	movs	r2, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 80009d6:	f004 fbeb 	bl	80051b0 <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009e0:	f000 f97e 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <MX_TIM2_Init+0xc4>)
 80009e6:	f000 faf5 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	@ 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000ec 	.word	0x200000ec

080009f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a1c:	4a27      	ldr	r2, [pc, #156]	@ (8000abc <MX_TIM3_Init+0xc4>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a20:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a40:	481d      	ldr	r0, [pc, #116]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a42:	f004 fa76 	bl	8004f32 <HAL_TIM_PWM_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f000 f948 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4816      	ldr	r0, [pc, #88]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a60:	f005 f858 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a6a:	f000 f939 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	@ 0x60
 8000a70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2208      	movs	r2, #8
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a86:	f004 fb93 	bl	80051b0 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a90:	f000 f926 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	220c      	movs	r2, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000a9c:	f004 fb88 	bl	80051b0 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000aa6:	f000 f91b 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aaa:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM3_Init+0xc0>)
 8000aac:	f000 fa92 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	@ 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000134 	.word	0x20000134
 8000abc:	40000400 	.word	0x40000400

08000ac0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_TIM4_Init+0x94>)
 8000ade:	4a1e      	ldr	r2, [pc, #120]	@ (8000b58 <MX_TIM4_Init+0x98>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_TIM4_Init+0x94>)
 8000ae4:	2259      	movs	r2, #89	@ 0x59
 8000ae6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_TIM4_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_TIM4_Init+0x94>)
 8000af0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_TIM4_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <MX_TIM4_Init+0x94>)
 8000afe:	2280      	movs	r2, #128	@ 0x80
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b02:	4814      	ldr	r0, [pc, #80]	@ (8000b54 <MX_TIM4_Init+0x94>)
 8000b04:	f004 f9c6 	bl	8004e94 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 f8e7 	bl	8000ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_TIM4_Init+0x94>)
 8000b20:	f004 fc08 	bl	8005334 <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f000 f8d9 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <MX_TIM4_Init+0x94>)
 8000b3c:	f004 ffea 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b46:	f000 f8cb 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000017c 	.word	0x2000017c
 8000b58:	40000800 	.word	0x40000800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b56      	ldr	r3, [pc, #344]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a55      	ldr	r2, [pc, #340]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b53      	ldr	r3, [pc, #332]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a4e      	ldr	r2, [pc, #312]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b48      	ldr	r3, [pc, #288]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a47      	ldr	r2, [pc, #284]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b45      	ldr	r3, [pc, #276]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b41      	ldr	r3, [pc, #260]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a40      	ldr	r2, [pc, #256]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd0 <MX_GPIO_Init+0x174>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CW2_Pin|CCW2_Pin|SOLV5_Pin|SOLV3_Pin
 8000be2:	2200      	movs	r2, #0
 8000be4:	f641 418c 	movw	r1, #7308	@ 0x1c8c
 8000be8:	483a      	ldr	r0, [pc, #232]	@ (8000cd4 <MX_GPIO_Init+0x178>)
 8000bea:	f001 fd13 	bl	8002614 <HAL_GPIO_WritePin>
                          |SOLV2_Pin|SOLV1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CW3_Pin|CCW3_Pin|SOLV4_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f248 0130 	movw	r1, #32816	@ 0x8030
 8000bf4:	4838      	ldr	r0, [pc, #224]	@ (8000cd8 <MX_GPIO_Init+0x17c>)
 8000bf6:	f001 fd0d 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOLV6_Pin|CCW1_Pin|CW1_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f248 0160 	movw	r1, #32864	@ 0x8060
 8000c00:	4836      	ldr	r0, [pc, #216]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000c02:	f001 fd07 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CW2_Pin CCW2_Pin SOLV5_Pin SOLV3_Pin
                           SOLV2_Pin SOLV1_Pin */
  GPIO_InitStruct.Pin = CW2_Pin|CCW2_Pin|SOLV5_Pin|SOLV3_Pin
 8000c06:	f641 438c 	movw	r3, #7308	@ 0x1c8c
 8000c0a:	617b      	str	r3, [r7, #20]
                          |SOLV2_Pin|SOLV1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482d      	ldr	r0, [pc, #180]	@ (8000cd4 <MX_GPIO_Init+0x178>)
 8000c20:	f001 fb64 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2A_Pin ENC2B_Pin ENC3A_Pin ENC3B_Pin */
  GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin|ENC3A_Pin|ENC3B_Pin;
 8000c24:	23c6      	movs	r3, #198	@ 0xc6
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4827      	ldr	r0, [pc, #156]	@ (8000cd8 <MX_GPIO_Init+0x17c>)
 8000c3a:	f001 fb57 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CW3_Pin CCW3_Pin SOLV4_Pin */
  GPIO_InitStruct.Pin = CW3_Pin|CCW3_Pin|SOLV4_Pin;
 8000c3e:	f248 0330 	movw	r3, #32816	@ 0x8030
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4820      	ldr	r0, [pc, #128]	@ (8000cd8 <MX_GPIO_Init+0x17c>)
 8000c58:	f001 fb48 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLV6_Pin CCW1_Pin CW1_Pin */
  GPIO_InitStruct.Pin = SOLV6_Pin|CCW1_Pin|CW1_Pin;
 8000c5c:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4819      	ldr	r0, [pc, #100]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000c76:	f001 fb39 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1A_Pin ENC1B_Pin */
  GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8000c7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4812      	ldr	r0, [pc, #72]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000c92:	f001 fb2b 	bl	80022ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2007      	movs	r0, #7
 8000c9c:	f001 fabf 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ca0:	2007      	movs	r0, #7
 8000ca2:	f001 fad8 	bl	8002256 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2008      	movs	r0, #8
 8000cac:	f001 fab7 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cb0:	2008      	movs	r0, #8
 8000cb2:	f001 fad0 	bl	8002256 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2017      	movs	r0, #23
 8000cbc:	f001 faaf 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cc0:	2017      	movs	r0, #23
 8000cc2:	f001 fac8 	bl	8002256 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <Error_Handler+0x8>

08000cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a24      	ldr	r2, [pc, #144]	@ (8000dec <HAL_CAN_MspInit+0xb0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d142      	bne.n	8000de4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <HAL_CAN_MspInit+0xb4>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a22      	ldr	r2, [pc, #136]	@ (8000df0 <HAL_CAN_MspInit+0xb4>)
 8000d68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <HAL_CAN_MspInit+0xb4>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <HAL_CAN_MspInit+0xb4>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	4a1b      	ldr	r2, [pc, #108]	@ (8000df0 <HAL_CAN_MspInit+0xb4>)
 8000d84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_CAN_MspInit+0xb4>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_CAN_MspInit+0xb4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <HAL_CAN_MspInit+0xb4>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_CAN_MspInit+0xb4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000db2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000dc4:	2309      	movs	r3, #9
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <HAL_CAN_MspInit+0xb8>)
 8000dd0:	f001 fa8c 	bl	80022ec <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2040      	movs	r0, #64	@ 0x40
 8000dda:	f001 fa20 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000dde:	2040      	movs	r0, #64	@ 0x40
 8000de0:	f001 fa39 	bl	8002256 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	@ 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40006800 	.word	0x40006800
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400

08000df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a31      	ldr	r2, [pc, #196]	@ (8000edc <HAL_I2C_MspInit+0xe4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d15b      	bne.n	8000ed2 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a28      	ldr	r2, [pc, #160]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e58:	2312      	movs	r3, #18
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e64:	2304      	movs	r3, #4
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481d      	ldr	r0, [pc, #116]	@ (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e70:	f001 fa3c 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7a:	2312      	movs	r3, #18
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e86:	2304      	movs	r3, #4
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4815      	ldr	r0, [pc, #84]	@ (8000ee8 <HAL_I2C_MspInit+0xf0>)
 8000e92:	f001 fa2b 	bl	80022ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000ea0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2048      	movs	r0, #72	@ 0x48
 8000eb8:	f001 f9b1 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000ebc:	2048      	movs	r0, #72	@ 0x48
 8000ebe:	f001 f9ca 	bl	8002256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2049      	movs	r0, #73	@ 0x49
 8000ec8:	f001 f9a9 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000ecc:	2049      	movs	r0, #73	@ 0x49
 8000ece:	f001 f9c2 	bl	8002256 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	@ 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40005c00 	.word	0x40005c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a18      	ldr	r2, [pc, #96]	@ (8000f5c <HAL_TIM_Base_MspInit+0x70>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10e      	bne.n	8000f1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <HAL_TIM_Base_MspInit+0x74>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	4a16      	ldr	r2, [pc, #88]	@ (8000f60 <HAL_TIM_Base_MspInit+0x74>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_TIM_Base_MspInit+0x74>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f1a:	e01a      	b.n	8000f52 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <HAL_TIM_Base_MspInit+0x78>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d115      	bne.n	8000f52 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_TIM_Base_MspInit+0x74>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f60 <HAL_TIM_Base_MspInit+0x74>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_TIM_Base_MspInit+0x74>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	201e      	movs	r0, #30
 8000f48:	f001 f969 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f4c:	201e      	movs	r0, #30
 8000f4e:	f001 f982 	bl	8002256 <HAL_NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40000800 	.word	0x40000800

08000f68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f78:	d10e      	bne.n	8000f98 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <HAL_TIM_PWM_MspInit+0x64>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <HAL_TIM_PWM_MspInit+0x64>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <HAL_TIM_PWM_MspInit+0x64>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f96:	e012      	b.n	8000fbe <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <HAL_TIM_PWM_MspInit+0x68>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10d      	bne.n	8000fbe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <HAL_TIM_PWM_MspInit+0x64>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <HAL_TIM_PWM_MspInit+0x64>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_TIM_PWM_MspInit+0x64>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40000400 	.word	0x40000400

08000fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a37      	ldr	r2, [pc, #220]	@ (80010d0 <HAL_TIM_MspPostInit+0xfc>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d11f      	bne.n	8001036 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b36      	ldr	r3, [pc, #216]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a35      	ldr	r2, [pc, #212]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b33      	ldr	r3, [pc, #204]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001012:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	482a      	ldr	r0, [pc, #168]	@ (80010d8 <HAL_TIM_MspPostInit+0x104>)
 8001030:	f001 f95c 	bl	80022ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001034:	e047      	b.n	80010c6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800103e:	d11f      	bne.n	8001080 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001048:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001050:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800105c:	f240 4304 	movw	r3, #1028	@ 0x404
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800106e:	2301      	movs	r3, #1
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4818      	ldr	r0, [pc, #96]	@ (80010dc <HAL_TIM_MspPostInit+0x108>)
 800107a:	f001 f937 	bl	80022ec <HAL_GPIO_Init>
}
 800107e:	e022      	b.n	80010c6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a16      	ldr	r2, [pc, #88]	@ (80010e0 <HAL_TIM_MspPostInit+0x10c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d11d      	bne.n	80010c6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <HAL_TIM_MspPostInit+0x100>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010a6:	2303      	movs	r3, #3
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010b6:	2302      	movs	r3, #2
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4806      	ldr	r0, [pc, #24]	@ (80010dc <HAL_TIM_MspPostInit+0x108>)
 80010c2:	f001 f913 	bl	80022ec <HAL_GPIO_Init>
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	@ 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010000 	.word	0x40010000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40000400 	.word	0x40000400

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <NMI_Handler+0x4>

080010ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <MemManage_Handler+0x4>

080010fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <UsageFault_Handler+0x4>

0800110c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113a:	f000 f8d9 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2A_Pin);
 8001146:	2002      	movs	r0, #2
 8001148:	f001 fa7e 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2B_Pin);
 8001154:	2004      	movs	r0, #4
 8001156:	f001 fa77 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}

0800115e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3A_Pin);
 8001162:	2040      	movs	r0, #64	@ 0x40
 8001164:	f001 fa70 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC3B_Pin);
 8001168:	2080      	movs	r0, #128	@ 0x80
 800116a:	f001 fa6d 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1A_Pin);
 800116e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001172:	f001 fa69 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1B_Pin);
 8001176:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800117a:	f001 fa65 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <TIM4_IRQHandler+0x10>)
 800118a:	f003 ff21 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000017c 	.word	0x2000017c

08001198 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800119c:	4802      	ldr	r0, [pc, #8]	@ (80011a8 <CAN2_RX0_IRQHandler+0x10>)
 800119e:	f000 fd34 	bl	8001c0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000028 	.word	0x20000028

080011ac <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80011b0:	4802      	ldr	r0, [pc, #8]	@ (80011bc <I2C3_EV_IRQHandler+0x10>)
 80011b2:	f001 fbc6 	bl	8002942 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000050 	.word	0x20000050

080011c0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80011c4:	4802      	ldr	r0, [pc, #8]	@ (80011d0 <I2C3_ER_IRQHandler+0x10>)
 80011c6:	f001 fd0f 	bl	8002be8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000050 	.word	0x20000050

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001230 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011fc:	f7ff ffea 	bl	80011d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	@ (8001238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	@ (8001244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001226:	f004 fd5f 	bl	8005ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff f99f 	bl	800056c <main>
  bx  lr    
 800122e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800123c:	08005d70 	.word	0x08005d70
  ldr r2, =_sbss
 8001240:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001244:	200001d8 	.word	0x200001d8

08001248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <HAL_Init+0x40>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <HAL_Init+0x40>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_Init+0x40>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 ffc7 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	200f      	movs	r0, #15
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fd34 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 ffdf 	bl	8002272 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 ffa7 	bl	800221e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	@ (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	200001d4 	.word	0x200001d4

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200001d4 	.word	0x200001d4

08001330 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e0ed      	b.n	800151e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fcf4 	bl	8000d3c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001364:	f7ff ffd8 	bl	8001318 <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800136a:	e012      	b.n	8001392 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800136c:	f7ff ffd4 	bl	8001318 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b0a      	cmp	r3, #10
 8001378:	d90b      	bls.n	8001392 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2205      	movs	r2, #5
 800138a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0c5      	b.n	800151e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e5      	beq.n	800136c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0202 	bic.w	r2, r2, #2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b0:	f7ff ffb2 	bl	8001318 <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013b6:	e012      	b.n	80013de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013b8:	f7ff ffae 	bl	8001318 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b0a      	cmp	r3, #10
 80013c4:	d90b      	bls.n	80013de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2205      	movs	r2, #5
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e09f      	b.n	800151e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1e5      	bne.n	80013b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e1b      	ldrb	r3, [r3, #24]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e007      	b.n	8001416 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7e5b      	ldrb	r3, [r3, #25]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e007      	b.n	8001440 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800143e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7e9b      	ldrb	r3, [r3, #26]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d108      	bne.n	800145a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0220 	orr.w	r2, r2, #32
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e007      	b.n	800146a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0220 	bic.w	r2, r2, #32
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7edb      	ldrb	r3, [r3, #27]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0210 	bic.w	r2, r2, #16
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e007      	b.n	8001494 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0210 	orr.w	r2, r2, #16
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7f1b      	ldrb	r3, [r3, #28]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d108      	bne.n	80014ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0208 	orr.w	r2, r2, #8
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e007      	b.n	80014be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0208 	bic.w	r2, r2, #8
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7f5b      	ldrb	r3, [r3, #29]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d108      	bne.n	80014d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0204 	orr.w	r2, r2, #4
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e007      	b.n	80014e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0204 	bic.w	r2, r2, #4
 80014e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	ea42 0103 	orr.w	r1, r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001540:	7cfb      	ldrb	r3, [r7, #19]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d003      	beq.n	800154e <HAL_CAN_ConfigFilter+0x26>
 8001546:	7cfb      	ldrb	r3, [r7, #19]
 8001548:	2b02      	cmp	r3, #2
 800154a:	f040 80be 	bne.w	80016ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800154e:	4b65      	ldr	r3, [pc, #404]	@ (80016e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001550:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001568:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	431a      	orrs	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2201      	movs	r2, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	401a      	ands	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d123      	bne.n	80015f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3248      	adds	r2, #72	@ 0x48
 80015d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ee:	6979      	ldr	r1, [r7, #20]
 80015f0:	3348      	adds	r3, #72	@ 0x48
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d122      	bne.n	8001646 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	431a      	orrs	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001620:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3248      	adds	r2, #72	@ 0x48
 8001626:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800163a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800163c:	6979      	ldr	r1, [r7, #20]
 800163e:	3348      	adds	r3, #72	@ 0x48
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	401a      	ands	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001660:	e007      	b.n	8001672 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	431a      	orrs	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	401a      	ands	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800168c:	e007      	b.n	800169e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	431a      	orrs	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016bc:	f023 0201 	bic.w	r2, r3, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e006      	b.n	80016d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
  }
}
 80016d8:	4618      	mov	r0, r3
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40006400 	.word	0x40006400

080016e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d12e      	bne.n	800175a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001714:	f7ff fe00 	bl	8001318 <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800171a:	e012      	b.n	8001742 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800171c:	f7ff fdfc 	bl	8001318 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b0a      	cmp	r3, #10
 8001728:	d90b      	bls.n	8001742 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2205      	movs	r2, #5
 800173a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e012      	b.n	8001768 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1e5      	bne.n	800171c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e006      	b.n	8001768 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
  }
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800178e:	7ffb      	ldrb	r3, [r7, #31]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d003      	beq.n	800179c <HAL_CAN_AddTxMessage+0x2c>
 8001794:	7ffb      	ldrb	r3, [r7, #31]
 8001796:	2b02      	cmp	r3, #2
 8001798:	f040 80ad 	bne.w	80018f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10a      	bne.n	80017bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8095 	beq.w	80018e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	0e1b      	lsrs	r3, r3, #24
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017c6:	2201      	movs	r2, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017e2:	68f9      	ldr	r1, [r7, #12]
 80017e4:	6809      	ldr	r1, [r1, #0]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3318      	adds	r3, #24
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	440b      	add	r3, r1
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e00f      	b.n	8001814 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001808:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3318      	adds	r3, #24
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	440b      	add	r3, r1
 8001812:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6819      	ldr	r1, [r3, #0]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3318      	adds	r3, #24
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	440b      	add	r3, r1
 8001824:	3304      	adds	r3, #4
 8001826:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	7d1b      	ldrb	r3, [r3, #20]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d111      	bne.n	8001854 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3318      	adds	r3, #24
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	4413      	add	r3, r2
 800183c:	3304      	adds	r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	6811      	ldr	r1, [r2, #0]
 8001844:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3318      	adds	r3, #24
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	440b      	add	r3, r1
 8001850:	3304      	adds	r3, #4
 8001852:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3307      	adds	r3, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	061a      	lsls	r2, r3, #24
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3306      	adds	r3, #6
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	041b      	lsls	r3, r3, #16
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3305      	adds	r3, #5
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	4313      	orrs	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	3204      	adds	r2, #4
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	4610      	mov	r0, r2
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	ea43 0200 	orr.w	r2, r3, r0
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	440b      	add	r3, r1
 8001886:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800188a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3303      	adds	r3, #3
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	061a      	lsls	r2, r3, #24
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3302      	adds	r3, #2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3301      	adds	r3, #1
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	4313      	orrs	r3, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	4610      	mov	r0, r2
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	6811      	ldr	r1, [r2, #0]
 80018b2:	ea43 0200 	orr.w	r2, r3, r0
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	440b      	add	r3, r1
 80018bc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80018c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3318      	adds	r3, #24
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	4413      	add	r3, r2
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	6811      	ldr	r1, [r2, #0]
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3318      	adds	r3, #24
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	440b      	add	r3, r1
 80018e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e00e      	b.n	8001904 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e006      	b.n	8001904 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
  }
}
 8001904:	4618      	mov	r0, r3
 8001906:	3724      	adds	r7, #36	@ 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001922:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001924:	7afb      	ldrb	r3, [r7, #11]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d002      	beq.n	8001930 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800192a:	7afb      	ldrb	r3, [r7, #11]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d11d      	bne.n	800196c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3301      	adds	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800197a:	b480      	push	{r7}
 800197c:	b087      	sub	sp, #28
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d003      	beq.n	800199e <HAL_CAN_GetRxMessage+0x24>
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b02      	cmp	r3, #2
 800199a:	f040 8103 	bne.w	8001ba4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10e      	bne.n	80019c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0f7      	b.n	8001bb2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d107      	bne.n	80019e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0e8      	b.n	8001bb2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	331b      	adds	r3, #27
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0204 	and.w	r2, r3, #4
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	331b      	adds	r3, #27
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0d5b      	lsrs	r3, r3, #21
 8001a0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	331b      	adds	r3, #27
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	08db      	lsrs	r3, r3, #3
 8001a28:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	331b      	adds	r3, #27
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	4413      	add	r3, r2
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0202 	and.w	r2, r3, #2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	331b      	adds	r3, #27
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4413      	add	r3, r2
 8001a52:	3304      	adds	r3, #4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2208      	movs	r2, #8
 8001a62:	611a      	str	r2, [r3, #16]
 8001a64:	e00b      	b.n	8001a7e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	331b      	adds	r3, #27
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 020f 	and.w	r2, r3, #15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	331b      	adds	r3, #27
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4413      	add	r3, r2
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	331b      	adds	r3, #27
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0a1a      	lsrs	r2, r3, #8
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0c1a      	lsrs	r2, r3, #16
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	3302      	adds	r3, #2
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0e1a      	lsrs	r2, r3, #24
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3304      	adds	r3, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0a1a      	lsrs	r2, r3, #8
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3305      	adds	r3, #5
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0c1a      	lsrs	r2, r3, #16
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3306      	adds	r3, #6
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0e1a      	lsrs	r2, r3, #24
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	3307      	adds	r3, #7
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d108      	bne.n	8001b90 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0220 	orr.w	r2, r2, #32
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	e007      	b.n	8001ba0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0220 	orr.w	r2, r2, #32
 8001b9e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e006      	b.n	8001bb2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
  }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d002      	beq.n	8001bdc <HAL_CAN_ActivateNotification+0x1e>
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d109      	bne.n	8001bf0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6959      	ldr	r1, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e006      	b.n	8001bfe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b08a      	sub	sp, #40	@ 0x28
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d07c      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d023      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f983 	bl	8001f78 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c72:	e016      	b.n	8001ca2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d004      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c86:	e00c      	b.n	8001ca2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d004      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9a:	e002      	b.n	8001ca2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f989 	bl	8001fb4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d024      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f963 	bl	8001f8c <HAL_CAN_TxMailbox1CompleteCallback>
 8001cc6:	e016      	b.n	8001cf6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cda:	e00c      	b.n	8001cf6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cee:	e002      	b.n	8001cf6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f969 	bl	8001fc8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d024      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f943 	bl	8001fa0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d1a:	e016      	b.n	8001d4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2e:	e00c      	b.n	8001d4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d42:	e002      	b.n	8001d4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f949 	bl	8001fdc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2208      	movs	r2, #8
 8001d88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f930 	bl	8001ff0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7fe fba3 	bl	80004f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2210      	movs	r2, #16
 8001dd0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2208      	movs	r2, #8
 8001dec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f912 	bl	8002018 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8f9 	bl	8002004 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8fc 	bl	800202c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8f5 	bl	8002040 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d07b      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d072      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d043      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d03e      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ed8:	2b60      	cmp	r3, #96	@ 0x60
 8001eda:	d02b      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x32a>
 8001edc:	2b60      	cmp	r3, #96	@ 0x60
 8001ede:	d82e      	bhi.n	8001f3e <HAL_CAN_IRQHandler+0x334>
 8001ee0:	2b50      	cmp	r3, #80	@ 0x50
 8001ee2:	d022      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x320>
 8001ee4:	2b50      	cmp	r3, #80	@ 0x50
 8001ee6:	d82a      	bhi.n	8001f3e <HAL_CAN_IRQHandler+0x334>
 8001ee8:	2b40      	cmp	r3, #64	@ 0x40
 8001eea:	d019      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x316>
 8001eec:	2b40      	cmp	r3, #64	@ 0x40
 8001eee:	d826      	bhi.n	8001f3e <HAL_CAN_IRQHandler+0x334>
 8001ef0:	2b30      	cmp	r3, #48	@ 0x30
 8001ef2:	d010      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x30c>
 8001ef4:	2b30      	cmp	r3, #48	@ 0x30
 8001ef6:	d822      	bhi.n	8001f3e <HAL_CAN_IRQHandler+0x334>
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d002      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x2f8>
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d005      	beq.n	8001f0c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f00:	e01d      	b.n	8001f3e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f0a:	e019      	b.n	8001f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f14:	e014      	b.n	8001f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	f043 0320 	orr.w	r3, r3, #32
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f1e:	e00f      	b.n	8001f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f28:	e00a      	b.n	8001f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f32:	e005      	b.n	8001f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f3c:	e000      	b.n	8001f40 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f3e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2204      	movs	r2, #4
 8001f56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f872 	bl	8002054 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	@ 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	@ (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	@ (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	@ (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	@ 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff29 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff3e 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff8e 	bl	800215c <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff31 	bl	80020cc <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffa2 	bl	80021c4 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2280      	movs	r2, #128	@ 0x80
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00c      	b.n	80022c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2205      	movs	r2, #5
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022dc:	b2db      	uxtb	r3, r3
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	e165      	b.n	80025d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	f040 8154 	bne.w	80025ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d005      	beq.n	800233e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	2b02      	cmp	r3, #2
 800233c:	d130      	bne.n	80023a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 0201 	and.w	r2, r3, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d017      	beq.n	80023dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d123      	bne.n	8002430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0203 	and.w	r2, r3, #3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80ae 	beq.w	80025ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b5d      	ldr	r3, [pc, #372]	@ (80025ec <HAL_GPIO_Init+0x300>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	4a5c      	ldr	r2, [pc, #368]	@ (80025ec <HAL_GPIO_Init+0x300>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002480:	6453      	str	r3, [r2, #68]	@ 0x44
 8002482:	4b5a      	ldr	r3, [pc, #360]	@ (80025ec <HAL_GPIO_Init+0x300>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248e:	4a58      	ldr	r2, [pc, #352]	@ (80025f0 <HAL_GPIO_Init+0x304>)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	220f      	movs	r2, #15
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4f      	ldr	r2, [pc, #316]	@ (80025f4 <HAL_GPIO_Init+0x308>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d025      	beq.n	8002506 <HAL_GPIO_Init+0x21a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4e      	ldr	r2, [pc, #312]	@ (80025f8 <HAL_GPIO_Init+0x30c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01f      	beq.n	8002502 <HAL_GPIO_Init+0x216>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4d      	ldr	r2, [pc, #308]	@ (80025fc <HAL_GPIO_Init+0x310>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d019      	beq.n	80024fe <HAL_GPIO_Init+0x212>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002600 <HAL_GPIO_Init+0x314>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0x20e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002604 <HAL_GPIO_Init+0x318>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_GPIO_Init+0x20a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002608 <HAL_GPIO_Init+0x31c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0x206>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a49      	ldr	r2, [pc, #292]	@ (800260c <HAL_GPIO_Init+0x320>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_GPIO_Init+0x202>
 80024ea:	2306      	movs	r3, #6
 80024ec:	e00c      	b.n	8002508 <HAL_GPIO_Init+0x21c>
 80024ee:	2307      	movs	r3, #7
 80024f0:	e00a      	b.n	8002508 <HAL_GPIO_Init+0x21c>
 80024f2:	2305      	movs	r3, #5
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x21c>
 80024f6:	2304      	movs	r3, #4
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x21c>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x21c>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x21c>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x21c>
 8002506:	2300      	movs	r3, #0
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	@ (80025f0 <HAL_GPIO_Init+0x304>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b3a      	ldr	r3, [pc, #232]	@ (8002610 <HAL_GPIO_Init+0x324>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a31      	ldr	r2, [pc, #196]	@ (8002610 <HAL_GPIO_Init+0x324>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b2f      	ldr	r3, [pc, #188]	@ (8002610 <HAL_GPIO_Init+0x324>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a26      	ldr	r2, [pc, #152]	@ (8002610 <HAL_GPIO_Init+0x324>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257a:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <HAL_GPIO_Init+0x324>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259e:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <HAL_GPIO_Init+0x324>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <HAL_GPIO_Init+0x324>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c8:	4a11      	ldr	r2, [pc, #68]	@ (8002610 <HAL_GPIO_Init+0x324>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3301      	adds	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	f67f ae96 	bls.w	8002308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	@ 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40021400 	.word	0x40021400
 800260c:	40021800 	.word	0x40021800
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002652:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265e:	4a05      	ldr	r2, [pc, #20]	@ (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f806 	bl	8002678 <HAL_GPIO_EXTI_Callback>
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40013c00 	.word	0x40013c00

08002678 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e12b      	b.n	80028fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fb9e 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	@ 0x24
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f4:	f001 feec 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 80026f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a81      	ldr	r2, [pc, #516]	@ (8002904 <HAL_I2C_Init+0x274>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d807      	bhi.n	8002714 <HAL_I2C_Init+0x84>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a80      	ldr	r2, [pc, #512]	@ (8002908 <HAL_I2C_Init+0x278>)
 8002708:	4293      	cmp	r3, r2
 800270a:	bf94      	ite	ls
 800270c:	2301      	movls	r3, #1
 800270e:	2300      	movhi	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e006      	b.n	8002722 <HAL_I2C_Init+0x92>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a7d      	ldr	r2, [pc, #500]	@ (800290c <HAL_I2C_Init+0x27c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	bf94      	ite	ls
 800271c:	2301      	movls	r3, #1
 800271e:	2300      	movhi	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0e7      	b.n	80028fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a78      	ldr	r2, [pc, #480]	@ (8002910 <HAL_I2C_Init+0x280>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0c9b      	lsrs	r3, r3, #18
 8002734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a6a      	ldr	r2, [pc, #424]	@ (8002904 <HAL_I2C_Init+0x274>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d802      	bhi.n	8002764 <HAL_I2C_Init+0xd4>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3301      	adds	r3, #1
 8002762:	e009      	b.n	8002778 <HAL_I2C_Init+0xe8>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	4a69      	ldr	r2, [pc, #420]	@ (8002914 <HAL_I2C_Init+0x284>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	3301      	adds	r3, #1
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800278a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	495c      	ldr	r1, [pc, #368]	@ (8002904 <HAL_I2C_Init+0x274>)
 8002794:	428b      	cmp	r3, r1
 8002796:	d819      	bhi.n	80027cc <HAL_I2C_Init+0x13c>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e59      	subs	r1, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a6:	1c59      	adds	r1, r3, #1
 80027a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027ac:	400b      	ands	r3, r1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_I2C_Init+0x138>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1e59      	subs	r1, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c6:	e051      	b.n	800286c <HAL_I2C_Init+0x1dc>
 80027c8:	2304      	movs	r3, #4
 80027ca:	e04f      	b.n	800286c <HAL_I2C_Init+0x1dc>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <HAL_I2C_Init+0x168>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	440b      	add	r3, r1
 80027e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e012      	b.n	800281e <HAL_I2C_Init+0x18e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	0099      	lsls	r1, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Init+0x196>
 8002822:	2301      	movs	r3, #1
 8002824:	e022      	b.n	800286c <HAL_I2C_Init+0x1dc>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10e      	bne.n	800284c <HAL_I2C_Init+0x1bc>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1e58      	subs	r0, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	440b      	add	r3, r1
 800283c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800284a:	e00f      	b.n	800286c <HAL_I2C_Init+0x1dc>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	0099      	lsls	r1, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	6809      	ldr	r1, [r1, #0]
 8002870:	4313      	orrs	r3, r2
 8002872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800289a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6911      	ldr	r1, [r2, #16]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	000186a0 	.word	0x000186a0
 8002908:	001e847f 	.word	0x001e847f
 800290c:	003d08ff 	.word	0x003d08ff
 8002910:	431bde83 	.word	0x431bde83
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292a:	2b80      	cmp	r3, #128	@ 0x80
 800292c:	d103      	bne.n	8002936 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b088      	sub	sp, #32
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002962:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b10      	cmp	r3, #16
 8002970:	d003      	beq.n	800297a <HAL_I2C_EV_IRQHandler+0x38>
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b40      	cmp	r3, #64	@ 0x40
 8002976:	f040 80b1 	bne.w	8002adc <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10d      	bne.n	80029b0 <HAL_I2C_EV_IRQHandler+0x6e>
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800299a:	d003      	beq.n	80029a4 <HAL_I2C_EV_IRQHandler+0x62>
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80029a2:	d101      	bne.n	80029a8 <HAL_I2C_EV_IRQHandler+0x66>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_I2C_EV_IRQHandler+0x68>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	f000 8114 	beq.w	8002bd8 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_I2C_EV_IRQHandler+0x90>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f001 fc75 	bl	80042b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fd7a 	bl	80034c4 <I2C_Master_SB>
 80029d0:	e083      	b.n	8002ada <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_I2C_EV_IRQHandler+0xac>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fdf2 	bl	80035d0 <I2C_Master_ADD10>
 80029ec:	e075      	b.n	8002ada <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_I2C_EV_IRQHandler+0xc8>
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fe0e 	bl	8003624 <I2C_Master_ADDR>
 8002a08:	e067      	b.n	8002ada <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d036      	beq.n	8002a82 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a22:	f000 80db 	beq.w	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <HAL_I2C_EV_IRQHandler+0x10a>
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_I2C_EV_IRQHandler+0x10a>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f9d6 	bl	8002df6 <I2C_MasterTransmit_TXE>
 8002a4a:	e046      	b.n	8002ada <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80c2 	beq.w	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80bc 	beq.w	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	2b21      	cmp	r3, #33	@ 0x21
 8002a68:	d103      	bne.n	8002a72 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa5f 	bl	8002f2e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a70:	e0b4      	b.n	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b40      	cmp	r3, #64	@ 0x40
 8002a76:	f040 80b1 	bne.w	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 facd 	bl	800301a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a80:	e0ac      	b.n	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a90:	f000 80a4 	beq.w	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <HAL_I2C_EV_IRQHandler+0x178>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_I2C_EV_IRQHandler+0x178>
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fb49 	bl	800314a <I2C_MasterReceive_RXNE>
 8002ab8:	e00f      	b.n	8002ada <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 808b 	beq.w	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8085 	beq.w	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fc01 	bl	80032da <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad8:	e080      	b.n	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
 8002ada:	e07f      	b.n	8002bdc <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	e007      	b.n	8002afe <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d011      	beq.n	8002b2c <HAL_I2C_EV_IRQHandler+0x1ea>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00c      	beq.n	8002b2c <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 ffcc 	bl	8003ac2 <I2C_Slave_ADDR>
 8002b2a:	e05a      	b.n	8002be2 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_I2C_EV_IRQHandler+0x206>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f001 f807 	bl	8003b54 <I2C_Slave_STOPF>
 8002b46:	e04c      	b.n	8002be2 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b48:	7bbb      	ldrb	r3, [r7, #14]
 8002b4a:	2b21      	cmp	r3, #33	@ 0x21
 8002b4c:	d002      	beq.n	8002b54 <HAL_I2C_EV_IRQHandler+0x212>
 8002b4e:	7bbb      	ldrb	r3, [r7, #14]
 8002b50:	2b29      	cmp	r3, #41	@ 0x29
 8002b52:	d120      	bne.n	8002b96 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <HAL_I2C_EV_IRQHandler+0x238>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_I2C_EV_IRQHandler+0x238>
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fee7 	bl	8003946 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b78:	e032      	b.n	8002be0 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02d      	beq.n	8002be0 <HAL_I2C_EV_IRQHandler+0x29e>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d028      	beq.n	8002be0 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 ff16 	bl	80039c0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b94:	e024      	b.n	8002be0 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x27a>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x27a>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 ff24 	bl	8003a02 <I2C_SlaveReceive_RXNE>
 8002bba:	e012      	b.n	8002be2 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 ff54 	bl	8003a7e <I2C_SlaveReceive_BTF>
 8002bd6:	e004      	b.n	8002be2 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002bd8:	bf00      	nop
 8002bda:	e002      	b.n	8002be2 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bdc:	bf00      	nop
 8002bde:	e000      	b.n	8002be2 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002be0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	@ 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c0a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00d      	beq.n	8002c32 <HAL_I2C_ER_IRQHandler+0x4a>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c30:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <HAL_I2C_ER_IRQHandler+0x70>
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002c56:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d03e      	beq.n	8002ce0 <HAL_I2C_ER_IRQHandler+0xf8>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d039      	beq.n	8002ce0 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002c6c:	7efb      	ldrb	r3, [r7, #27]
 8002c6e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c86:	7ebb      	ldrb	r3, [r7, #26]
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d112      	bne.n	8002cb2 <HAL_I2C_ER_IRQHandler+0xca>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <HAL_I2C_ER_IRQHandler+0xca>
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	2b21      	cmp	r3, #33	@ 0x21
 8002c96:	d008      	beq.n	8002caa <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	2b29      	cmp	r3, #41	@ 0x29
 8002c9c:	d005      	beq.n	8002caa <HAL_I2C_ER_IRQHandler+0xc2>
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b28      	cmp	r3, #40	@ 0x28
 8002ca2:	d106      	bne.n	8002cb2 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b21      	cmp	r3, #33	@ 0x21
 8002ca8:	d103      	bne.n	8002cb2 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f001 f882 	bl	8003db4 <I2C_Slave_AF>
 8002cb0:	e016      	b.n	8002ce0 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cba:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cc4:	7efb      	ldrb	r3, [r7, #27]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d002      	beq.n	8002cd0 <HAL_I2C_ER_IRQHandler+0xe8>
 8002cca:	7efb      	ldrb	r3, [r7, #27]
 8002ccc:	2b40      	cmp	r3, #64	@ 0x40
 8002cce:	d107      	bne.n	8002ce0 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cde:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <HAL_I2C_ER_IRQHandler+0x11e>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	f043 0308 	orr.w	r3, r3, #8
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002d04:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f001 f8bf 	bl	8003e9c <I2C_ITError>
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3728      	adds	r7, #40	@ 0x28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
 8002d82:	4613      	mov	r3, r2
 8002d84:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e0c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d150      	bne.n	8002ebe <I2C_MasterTransmit_TXE+0xc8>
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b21      	cmp	r3, #33	@ 0x21
 8002e20:	d14d      	bne.n	8002ebe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d01d      	beq.n	8002e64 <I2C_MasterTransmit_TXE+0x6e>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d01a      	beq.n	8002e64 <I2C_MasterTransmit_TXE+0x6e>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e34:	d016      	beq.n	8002e64 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e44:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2211      	movs	r2, #17
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff62 	bl	8002d26 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e62:	e060      	b.n	8002f26 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e72:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e82:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d107      	bne.n	8002eae <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff7d 	bl	8002da6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eac:	e03b      	b.n	8002f26 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff35 	bl	8002d26 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ebc:	e033      	b.n	8002f26 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b21      	cmp	r3, #33	@ 0x21
 8002ec2:	d005      	beq.n	8002ed0 <I2C_MasterTransmit_TXE+0xda>
 8002ec4:	7bbb      	ldrb	r3, [r7, #14]
 8002ec6:	2b40      	cmp	r3, #64	@ 0x40
 8002ec8:	d12d      	bne.n	8002f26 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b22      	cmp	r3, #34	@ 0x22
 8002ece:	d12a      	bne.n	8002f26 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002eea:	e01c      	b.n	8002f26 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b40      	cmp	r3, #64	@ 0x40
 8002ef6:	d103      	bne.n	8002f00 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f88e 	bl	800301a <I2C_MemoryTransmit_TXE_BTF>
}
 8002efe:	e012      	b.n	8002f26 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f24:	e7ff      	b.n	8002f26 <I2C_MasterTransmit_TXE+0x130>
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b21      	cmp	r3, #33	@ 0x21
 8002f46:	d164      	bne.n	8003012 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f76:	e04c      	b.n	8003012 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d01d      	beq.n	8002fba <I2C_MasterTransmit_BTF+0x8c>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d01a      	beq.n	8002fba <I2C_MasterTransmit_BTF+0x8c>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f8a:	d016      	beq.n	8002fba <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f9a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2211      	movs	r2, #17
 8002fa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff feb7 	bl	8002d26 <HAL_I2C_MasterTxCpltCallback>
}
 8002fb8:	e02b      	b.n	8003012 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fc8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b40      	cmp	r3, #64	@ 0x40
 8002ff2:	d107      	bne.n	8003004 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fed2 	bl	8002da6 <HAL_I2C_MemTxCpltCallback>
}
 8003002:	e006      	b.n	8003012 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff fe8a 	bl	8002d26 <HAL_I2C_MasterTxCpltCallback>
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003028:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11d      	bne.n	800306e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d10b      	bne.n	8003052 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800303e:	b2da      	uxtb	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304a:	1c9a      	adds	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003050:	e077      	b.n	8003142 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003056:	b29b      	uxth	r3, r3
 8003058:	121b      	asrs	r3, r3, #8
 800305a:	b2da      	uxtb	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800306c:	e069      	b.n	8003142 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003072:	2b01      	cmp	r3, #1
 8003074:	d10b      	bne.n	800308e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307a:	b2da      	uxtb	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800308c:	e059      	b.n	8003142 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003092:	2b02      	cmp	r3, #2
 8003094:	d152      	bne.n	800313c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b22      	cmp	r3, #34	@ 0x22
 800309a:	d10d      	bne.n	80030b8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030aa:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030b6:	e044      	b.n	8003142 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d015      	beq.n	80030ee <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b21      	cmp	r3, #33	@ 0x21
 80030c6:	d112      	bne.n	80030ee <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80030ec:	e029      	b.n	8003142 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d124      	bne.n	8003142 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b21      	cmp	r3, #33	@ 0x21
 80030fc:	d121      	bne.n	8003142 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800310c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff fe36 	bl	8002da6 <HAL_I2C_MemTxCpltCallback>
}
 800313a:	e002      	b.n	8003142 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff fbeb 	bl	8002918 <I2C_Flush_DR>
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b22      	cmp	r3, #34	@ 0x22
 800315c:	f040 80b9 	bne.w	80032d2 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d921      	bls.n	80031b8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	f040 8096 	bne.w	80032d2 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031b4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80031b6:	e08c      	b.n	80032d2 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d07f      	beq.n	80032c0 <I2C_MasterReceive_RXNE+0x176>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d002      	beq.n	80031cc <I2C_MasterReceive_RXNE+0x82>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d179      	bne.n	80032c0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f001 f83f 	bl	8004250 <I2C_WaitOnSTOPRequestThroughIT>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d14c      	bne.n	8003272 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b40      	cmp	r3, #64	@ 0x40
 8003230:	d10a      	bne.n	8003248 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fdba 	bl	8002dba <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003246:	e044      	b.n	80032d2 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d002      	beq.n	800325c <I2C_MasterReceive_RXNE+0x112>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b20      	cmp	r3, #32
 800325a:	d103      	bne.n	8003264 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	@ 0x30
 8003262:	e002      	b.n	800326a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2212      	movs	r2, #18
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fd65 	bl	8002d3a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003270:	e02f      	b.n	80032d2 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003280:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fd88 	bl	8002dce <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032be:	e008      	b.n	80032d2 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ce:	605a      	str	r2, [r3, #4]
}
 80032d0:	e7ff      	b.n	80032d2 <I2C_MasterReceive_RXNE+0x188>
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d11b      	bne.n	800332a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003300:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003328:	e0c8      	b.n	80034bc <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b03      	cmp	r3, #3
 8003332:	d129      	bne.n	8003388 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003342:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d00a      	beq.n	8003360 <I2C_MasterReceive_BTF+0x86>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d007      	beq.n	8003360 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800335e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003386:	e099      	b.n	80034bc <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	f040 8081 	bne.w	8003496 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d002      	beq.n	80033a0 <I2C_MasterReceive_BTF+0xc6>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b10      	cmp	r3, #16
 800339e:	d108      	bne.n	80033b2 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e019      	b.n	80033e6 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d002      	beq.n	80033be <I2C_MasterReceive_BTF+0xe4>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d108      	bne.n	80033d0 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e00a      	b.n	80033e6 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d007      	beq.n	80033e6 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003440:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b40      	cmp	r3, #64	@ 0x40
 8003454:	d10a      	bne.n	800346c <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fca8 	bl	8002dba <HAL_I2C_MemRxCpltCallback>
}
 800346a:	e027      	b.n	80034bc <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b08      	cmp	r3, #8
 8003478:	d002      	beq.n	8003480 <I2C_MasterReceive_BTF+0x1a6>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b20      	cmp	r3, #32
 800347e:	d103      	bne.n	8003488 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	@ 0x30
 8003486:	e002      	b.n	800348e <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2212      	movs	r2, #18
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fc53 	bl	8002d3a <HAL_I2C_MasterRxCpltCallback>
}
 8003494:	e012      	b.n	80034bc <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b40      	cmp	r3, #64	@ 0x40
 80034d6:	d117      	bne.n	8003508 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034f0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80034f2:	e067      	b.n	80035c4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	611a      	str	r2, [r3, #16]
}
 8003506:	e05d      	b.n	80035c4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003510:	d133      	bne.n	800357a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b21      	cmp	r3, #33	@ 0x21
 800351c:	d109      	bne.n	8003532 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800352e:	611a      	str	r2, [r3, #16]
 8003530:	e008      	b.n	8003544 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <I2C_Master_SB+0x92>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355a:	2b00      	cmp	r3, #0
 800355c:	d032      	beq.n	80035c4 <I2C_Master_SB+0x100>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02d      	beq.n	80035c4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003576:	605a      	str	r2, [r3, #4]
}
 8003578:	e024      	b.n	80035c4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10e      	bne.n	80035a0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	b29b      	uxth	r3, r3
 8003588:	11db      	asrs	r3, r3, #7
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0306 	and.w	r3, r3, #6
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f063 030f 	orn	r3, r3, #15
 8003596:	b2da      	uxtb	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	611a      	str	r2, [r3, #16]
}
 800359e:	e011      	b.n	80035c4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10d      	bne.n	80035c4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	11db      	asrs	r3, r3, #7
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f003 0306 	and.w	r3, r3, #6
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f063 030e 	orn	r3, r3, #14
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	611a      	str	r2, [r3, #16]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <I2C_Master_ADD10+0x26>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <I2C_Master_ADD10+0x48>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003616:	605a      	str	r2, [r3, #4]
  }
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003624:	b480      	push	{r7}
 8003626:	b091      	sub	sp, #68	@ 0x44
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003632:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b22      	cmp	r3, #34	@ 0x22
 800364c:	f040 8169 	bne.w	8003922 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10f      	bne.n	8003678 <I2C_Master_ADDR+0x54>
 8003658:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d10b      	bne.n	8003678 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003660:	2300      	movs	r3, #0
 8003662:	633b      	str	r3, [r7, #48]	@ 0x30
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	633b      	str	r3, [r7, #48]	@ 0x30
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	633b      	str	r3, [r7, #48]	@ 0x30
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	e160      	b.n	800393a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11d      	bne.n	80036bc <I2C_Master_ADDR+0x98>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003688:	d118      	bne.n	80036bc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368a:	2300      	movs	r3, #0
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ae:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80036ba:	e13e      	b.n	800393a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d113      	bne.n	80036ee <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c6:	2300      	movs	r3, #0
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036da:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	e115      	b.n	800391a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 808a 	bne.w	800380e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80036fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003700:	d137      	bne.n	8003772 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003710:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800371c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003720:	d113      	bne.n	800374a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003730:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	e0e7      	b.n	800391a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	623b      	str	r3, [r7, #32]
 800375e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e0d3      	b.n	800391a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003774:	2b08      	cmp	r3, #8
 8003776:	d02e      	beq.n	80037d6 <I2C_Master_ADDR+0x1b2>
 8003778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377a:	2b20      	cmp	r3, #32
 800377c:	d02b      	beq.n	80037d6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800377e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003780:	2b12      	cmp	r3, #18
 8003782:	d102      	bne.n	800378a <I2C_Master_ADDR+0x166>
 8003784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003786:	2b01      	cmp	r3, #1
 8003788:	d125      	bne.n	80037d6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800378a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378c:	2b04      	cmp	r3, #4
 800378e:	d00e      	beq.n	80037ae <I2C_Master_ADDR+0x18a>
 8003790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003792:	2b02      	cmp	r3, #2
 8003794:	d00b      	beq.n	80037ae <I2C_Master_ADDR+0x18a>
 8003796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003798:	2b10      	cmp	r3, #16
 800379a:	d008      	beq.n	80037ae <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e007      	b.n	80037be <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	e0a1      	b.n	800391a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e085      	b.n	800391a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d14d      	bne.n	80038b4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381a:	2b04      	cmp	r3, #4
 800381c:	d016      	beq.n	800384c <I2C_Master_ADDR+0x228>
 800381e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003820:	2b02      	cmp	r3, #2
 8003822:	d013      	beq.n	800384c <I2C_Master_ADDR+0x228>
 8003824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003826:	2b10      	cmp	r3, #16
 8003828:	d010      	beq.n	800384c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003838:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e007      	b.n	800385c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800385a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800386a:	d117      	bne.n	800389c <I2C_Master_ADDR+0x278>
 800386c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003872:	d00b      	beq.n	800388c <I2C_Master_ADDR+0x268>
 8003874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003876:	2b01      	cmp	r3, #1
 8003878:	d008      	beq.n	800388c <I2C_Master_ADDR+0x268>
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	2b08      	cmp	r3, #8
 800387e:	d005      	beq.n	800388c <I2C_Master_ADDR+0x268>
 8003880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003882:	2b10      	cmp	r3, #16
 8003884:	d002      	beq.n	800388c <I2C_Master_ADDR+0x268>
 8003886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003888:	2b20      	cmp	r3, #32
 800388a:	d107      	bne.n	800389c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800389a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	e032      	b.n	800391a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038c2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038d2:	d117      	bne.n	8003904 <I2C_Master_ADDR+0x2e0>
 80038d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038da:	d00b      	beq.n	80038f4 <I2C_Master_ADDR+0x2d0>
 80038dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d008      	beq.n	80038f4 <I2C_Master_ADDR+0x2d0>
 80038e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d005      	beq.n	80038f4 <I2C_Master_ADDR+0x2d0>
 80038e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d002      	beq.n	80038f4 <I2C_Master_ADDR+0x2d0>
 80038ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d107      	bne.n	8003904 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003902:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003920:	e00b      	b.n	800393a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
}
 8003938:	e7ff      	b.n	800393a <I2C_Master_ADDR+0x316>
 800393a:	bf00      	nop
 800393c:	3744      	adds	r7, #68	@ 0x44
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003954:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02b      	beq.n	80039b8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	781a      	ldrb	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d114      	bne.n	80039b8 <I2C_SlaveTransmit_TXE+0x72>
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b29      	cmp	r3, #41	@ 0x29
 8003992:	d111      	bne.n	80039b8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2221      	movs	r2, #33	@ 0x21
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2228      	movs	r2, #40	@ 0x28
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff f9cb 	bl	8002d4e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d011      	beq.n	80039f6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02c      	beq.n	8003a76 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d114      	bne.n	8003a76 <I2C_SlaveReceive_RXNE+0x74>
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a50:	d111      	bne.n	8003a76 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a60:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2222      	movs	r2, #34	@ 0x22
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2228      	movs	r2, #40	@ 0x28
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff f976 	bl	8002d62 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003adc:	2b28      	cmp	r3, #40	@ 0x28
 8003ade:	d125      	bne.n	8003b2c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aee:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	81bb      	strh	r3, [r7, #12]
 8003b0e:	e002      	b.n	8003b16 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b1e:	89ba      	ldrh	r2, [r7, #12]
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff f926 	bl	8002d76 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b2a:	e00e      	b.n	8003b4a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b62:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b72:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b74:	2300      	movs	r3, #0
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb0:	d172      	bne.n	8003c98 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b22      	cmp	r3, #34	@ 0x22
 8003bb6:	d002      	beq.n	8003bbe <I2C_Slave_STOPF+0x6a>
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bbc:	d135      	bne.n	8003c2a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bf0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fb69 	bl	80022ce <HAL_DMA_GetState>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d049      	beq.n	8003c96 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	4a69      	ldr	r2, [pc, #420]	@ (8003dac <I2C_Slave_STOPF+0x258>)
 8003c08:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fb3b 	bl	800228a <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d03d      	beq.n	8003c96 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c28:	e035      	b.n	8003c96 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f043 0204 	orr.w	r2, r3, #4
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fb33 	bl	80022ce <HAL_DMA_GetState>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d014      	beq.n	8003c98 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c72:	4a4e      	ldr	r2, [pc, #312]	@ (8003dac <I2C_Slave_STOPF+0x258>)
 8003c74:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fb05 	bl	800228a <HAL_DMA_Abort_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c90:	4610      	mov	r0, r2
 8003c92:	4798      	blx	r3
 8003c94:	e000      	b.n	8003c98 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c96:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d03e      	beq.n	8003d20 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d112      	bne.n	8003cd6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d112      	bne.n	8003d0a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	f043 0204 	orr.w	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8b7 	bl	8003e9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d2e:	e039      	b.n	8003da4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d34:	d109      	bne.n	8003d4a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2228      	movs	r2, #40	@ 0x28
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff f80c 	bl	8002d62 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b28      	cmp	r3, #40	@ 0x28
 8003d54:	d111      	bne.n	8003d7a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a15      	ldr	r2, [pc, #84]	@ (8003db0 <I2C_Slave_STOPF+0x25c>)
 8003d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff f80d 	bl	8002d92 <HAL_I2C_ListenCpltCallback>
}
 8003d78:	e014      	b.n	8003da4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	2b22      	cmp	r3, #34	@ 0x22
 8003d80:	d002      	beq.n	8003d88 <I2C_Slave_STOPF+0x234>
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b22      	cmp	r3, #34	@ 0x22
 8003d86:	d10d      	bne.n	8003da4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fe ffdf 	bl	8002d62 <HAL_I2C_SlaveRxCpltCallback>
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	08004101 	.word	0x08004101
 8003db0:	ffff0000 	.word	0xffff0000

08003db4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d002      	beq.n	8003dd6 <I2C_Slave_AF+0x22>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d129      	bne.n	8003e2a <I2C_Slave_AF+0x76>
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b28      	cmp	r3, #40	@ 0x28
 8003dda:	d126      	bne.n	8003e2a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a2e      	ldr	r2, [pc, #184]	@ (8003e98 <I2C_Slave_AF+0xe4>)
 8003de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003df0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dfa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe ffb5 	bl	8002d92 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003e28:	e031      	b.n	8003e8e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b21      	cmp	r3, #33	@ 0x21
 8003e2e:	d129      	bne.n	8003e84 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a19      	ldr	r2, [pc, #100]	@ (8003e98 <I2C_Slave_AF+0xe4>)
 8003e34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2221      	movs	r2, #33	@ 0x21
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e5a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e64:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e74:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe fd4e 	bl	8002918 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7fe ff66 	bl	8002d4e <HAL_I2C_SlaveTxCpltCallback>
}
 8003e82:	e004      	b.n	8003e8e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e8c:	615a      	str	r2, [r3, #20]
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	ffff0000 	.word	0xffff0000

08003e9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eaa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003eb4:	7bbb      	ldrb	r3, [r7, #14]
 8003eb6:	2b10      	cmp	r3, #16
 8003eb8:	d002      	beq.n	8003ec0 <I2C_ITError+0x24>
 8003eba:	7bbb      	ldrb	r3, [r7, #14]
 8003ebc:	2b40      	cmp	r3, #64	@ 0x40
 8003ebe:	d10a      	bne.n	8003ed6 <I2C_ITError+0x3a>
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b22      	cmp	r3, #34	@ 0x22
 8003ec4:	d107      	bne.n	8003ed6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003edc:	2b28      	cmp	r3, #40	@ 0x28
 8003ede:	d107      	bne.n	8003ef0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2228      	movs	r2, #40	@ 0x28
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003eee:	e015      	b.n	8003f1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003efa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003efe:	d00a      	beq.n	8003f16 <I2C_ITError+0x7a>
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b60      	cmp	r3, #96	@ 0x60
 8003f04:	d007      	beq.n	8003f16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f2a:	d162      	bne.n	8003ff2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d020      	beq.n	8003f8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4e:	4a6a      	ldr	r2, [pc, #424]	@ (80040f8 <I2C_ITError+0x25c>)
 8003f50:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe f997 	bl	800228a <HAL_DMA_Abort_IT>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8089 	beq.w	8004076 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f86:	4610      	mov	r0, r2
 8003f88:	4798      	blx	r3
 8003f8a:	e074      	b.n	8004076 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	4a59      	ldr	r2, [pc, #356]	@ (80040f8 <I2C_ITError+0x25c>)
 8003f92:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe f976 	bl	800228a <HAL_DMA_Abort_IT>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d068      	beq.n	8004076 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d10b      	bne.n	8003fca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fec:	4610      	mov	r0, r2
 8003fee:	4798      	blx	r3
 8003ff0:	e041      	b.n	8004076 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b60      	cmp	r3, #96	@ 0x60
 8003ffc:	d125      	bne.n	800404a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	d10b      	bne.n	8004032 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fe fecd 	bl	8002de2 <HAL_I2C_AbortCpltCallback>
 8004048:	e015      	b.n	8004076 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004054:	2b40      	cmp	r3, #64	@ 0x40
 8004056:	d10b      	bne.n	8004070 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fe feac 	bl	8002dce <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004096:	2b00      	cmp	r3, #0
 8004098:	d104      	bne.n	80040a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d113      	bne.n	80040f0 <I2C_ITError+0x254>
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b28      	cmp	r3, #40	@ 0x28
 80040cc:	d110      	bne.n	80040f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a0a      	ldr	r2, [pc, #40]	@ (80040fc <I2C_ITError+0x260>)
 80040d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fe fe51 	bl	8002d92 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	08004101 	.word	0x08004101
 80040fc:	ffff0000 	.word	0xffff0000

08004100 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004110:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004118:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800411a:	4b4b      	ldr	r3, [pc, #300]	@ (8004248 <I2C_DMAAbort+0x148>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	08db      	lsrs	r3, r3, #3
 8004120:	4a4a      	ldr	r2, [pc, #296]	@ (800424c <I2C_DMAAbort+0x14c>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	0a1a      	lsrs	r2, r3, #8
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	00da      	lsls	r2, r3, #3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004146:	e00a      	b.n	800415e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800415c:	d0ea      	beq.n	8004134 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416a:	2200      	movs	r2, #0
 800416c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	2200      	movs	r2, #0
 800417c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2200      	movs	r2, #0
 8004192:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a0:	2200      	movs	r2, #0
 80041a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	2200      	movs	r2, #0
 80041b2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b60      	cmp	r3, #96	@ 0x60
 80041ce:	d10e      	bne.n	80041ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2200      	movs	r2, #0
 80041e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041e6:	6978      	ldr	r0, [r7, #20]
 80041e8:	f7fe fdfb 	bl	8002de2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041ec:	e027      	b.n	800423e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041f4:	2b28      	cmp	r3, #40	@ 0x28
 80041f6:	d117      	bne.n	8004228 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004216:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2228      	movs	r2, #40	@ 0x28
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004226:	e007      	b.n	8004238 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004238:	6978      	ldr	r0, [r7, #20]
 800423a:	f7fe fdc8 	bl	8002dce <HAL_I2C_ErrorCallback>
}
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000000 	.word	0x20000000
 800424c:	14f8b589 	.word	0x14f8b589

08004250 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	4a13      	ldr	r2, [pc, #76]	@ (80042b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	0a1a      	lsrs	r2, r3, #8
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3b01      	subs	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e008      	b.n	80042a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800429c:	d0e9      	beq.n	8004272 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	20000000 	.word	0x20000000
 80042b0:	14f8b589 	.word	0x14f8b589

080042b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80042c4:	d103      	bne.n	80042ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80042cc:	e007      	b.n	80042de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80042d6:	d102      	bne.n	80042de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2208      	movs	r2, #8
 80042dc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0cc      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004300:	4b68      	ldr	r3, [pc, #416]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d90c      	bls.n	8004328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b65      	ldr	r3, [pc, #404]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b63      	ldr	r3, [pc, #396]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0b8      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004340:	4b59      	ldr	r3, [pc, #356]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a58      	ldr	r2, [pc, #352]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800434a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004358:	4b53      	ldr	r3, [pc, #332]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a52      	ldr	r2, [pc, #328]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b50      	ldr	r3, [pc, #320]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	494d      	ldr	r1, [pc, #308]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d044      	beq.n	800440c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b47      	ldr	r3, [pc, #284]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d119      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043aa:	4b3f      	ldr	r3, [pc, #252]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e06f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e067      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b37      	ldr	r3, [pc, #220]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4934      	ldr	r1, [pc, #208]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043dc:	f7fc ff9c 	bl	8001318 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fc ff98 	bl	8001318 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e04f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800440c:	4b25      	ldr	r3, [pc, #148]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d20c      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b22      	ldr	r3, [pc, #136]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b20      	ldr	r3, [pc, #128]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e032      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004440:	4b19      	ldr	r3, [pc, #100]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4916      	ldr	r1, [pc, #88]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800445e:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	490e      	ldr	r1, [pc, #56]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004472:	f000 f841 	bl	80044f8 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	490a      	ldr	r1, [pc, #40]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	4a09      	ldr	r2, [pc, #36]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800448e:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc fefc 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023c00 	.word	0x40023c00
 80044a8:	40023800 	.word	0x40023800
 80044ac:	08005d48 	.word	0x08005d48
 80044b0:	20000000 	.word	0x20000000
 80044b4:	20000004 	.word	0x20000004

080044b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	@ (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000000 	.word	0x20000000

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a9b      	lsrs	r3, r3, #10
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	08005d58 	.word	0x08005d58

080044f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fc:	b0ae      	sub	sp, #184	@ 0xb8
 80044fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800451e:	4bcb      	ldr	r3, [pc, #812]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b0c      	cmp	r3, #12
 8004528:	f200 8206 	bhi.w	8004938 <HAL_RCC_GetSysClockFreq+0x440>
 800452c:	a201      	add	r2, pc, #4	@ (adr r2, 8004534 <HAL_RCC_GetSysClockFreq+0x3c>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004569 	.word	0x08004569
 8004538:	08004939 	.word	0x08004939
 800453c:	08004939 	.word	0x08004939
 8004540:	08004939 	.word	0x08004939
 8004544:	08004571 	.word	0x08004571
 8004548:	08004939 	.word	0x08004939
 800454c:	08004939 	.word	0x08004939
 8004550:	08004939 	.word	0x08004939
 8004554:	08004579 	.word	0x08004579
 8004558:	08004939 	.word	0x08004939
 800455c:	08004939 	.word	0x08004939
 8004560:	08004939 	.word	0x08004939
 8004564:	08004769 	.word	0x08004769
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4bb9      	ldr	r3, [pc, #740]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x358>)
 800456a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800456e:	e1e7      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004570:	4bb8      	ldr	r3, [pc, #736]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004576:	e1e3      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004578:	4bb4      	ldr	r3, [pc, #720]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004584:	4bb1      	ldr	r3, [pc, #708]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d071      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004590:	4bae      	ldr	r3, [pc, #696]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	099b      	lsrs	r3, r3, #6
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800459c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80045a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045b6:	4622      	mov	r2, r4
 80045b8:	462b      	mov	r3, r5
 80045ba:	f04f 0000 	mov.w	r0, #0
 80045be:	f04f 0100 	mov.w	r1, #0
 80045c2:	0159      	lsls	r1, r3, #5
 80045c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c8:	0150      	lsls	r0, r2, #5
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4621      	mov	r1, r4
 80045d0:	1a51      	subs	r1, r2, r1
 80045d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80045d4:	4629      	mov	r1, r5
 80045d6:	eb63 0301 	sbc.w	r3, r3, r1
 80045da:	647b      	str	r3, [r7, #68]	@ 0x44
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80045e8:	4649      	mov	r1, r9
 80045ea:	018b      	lsls	r3, r1, #6
 80045ec:	4641      	mov	r1, r8
 80045ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045f2:	4641      	mov	r1, r8
 80045f4:	018a      	lsls	r2, r1, #6
 80045f6:	4641      	mov	r1, r8
 80045f8:	1a51      	subs	r1, r2, r1
 80045fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045fc:	4649      	mov	r1, r9
 80045fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004610:	4649      	mov	r1, r9
 8004612:	00cb      	lsls	r3, r1, #3
 8004614:	4641      	mov	r1, r8
 8004616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461a:	4641      	mov	r1, r8
 800461c:	00ca      	lsls	r2, r1, #3
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	4603      	mov	r3, r0
 8004624:	4622      	mov	r2, r4
 8004626:	189b      	adds	r3, r3, r2
 8004628:	633b      	str	r3, [r7, #48]	@ 0x30
 800462a:	462b      	mov	r3, r5
 800462c:	460a      	mov	r2, r1
 800462e:	eb42 0303 	adc.w	r3, r2, r3
 8004632:	637b      	str	r3, [r7, #52]	@ 0x34
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004640:	4629      	mov	r1, r5
 8004642:	024b      	lsls	r3, r1, #9
 8004644:	4621      	mov	r1, r4
 8004646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800464a:	4621      	mov	r1, r4
 800464c:	024a      	lsls	r2, r1, #9
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800465c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004660:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004664:	f7fb fdce 	bl	8000204 <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4613      	mov	r3, r2
 800466e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004672:	e067      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004674:	4b75      	ldr	r3, [pc, #468]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004680:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800468e:	2300      	movs	r3, #0
 8004690:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004692:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004696:	4622      	mov	r2, r4
 8004698:	462b      	mov	r3, r5
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	0159      	lsls	r1, r3, #5
 80046a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a8:	0150      	lsls	r0, r2, #5
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4621      	mov	r1, r4
 80046b0:	1a51      	subs	r1, r2, r1
 80046b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046b4:	4629      	mov	r1, r5
 80046b6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80046c8:	4649      	mov	r1, r9
 80046ca:	018b      	lsls	r3, r1, #6
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046d2:	4641      	mov	r1, r8
 80046d4:	018a      	lsls	r2, r1, #6
 80046d6:	4641      	mov	r1, r8
 80046d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80046dc:	4649      	mov	r1, r9
 80046de:	eb63 0b01 	sbc.w	fp, r3, r1
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f6:	4692      	mov	sl, r2
 80046f8:	469b      	mov	fp, r3
 80046fa:	4623      	mov	r3, r4
 80046fc:	eb1a 0303 	adds.w	r3, sl, r3
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	462b      	mov	r3, r5
 8004704:	eb4b 0303 	adc.w	r3, fp, r3
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004716:	4629      	mov	r1, r5
 8004718:	028b      	lsls	r3, r1, #10
 800471a:	4621      	mov	r1, r4
 800471c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004720:	4621      	mov	r1, r4
 8004722:	028a      	lsls	r2, r1, #10
 8004724:	4610      	mov	r0, r2
 8004726:	4619      	mov	r1, r3
 8004728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800472c:	2200      	movs	r2, #0
 800472e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004730:	677a      	str	r2, [r7, #116]	@ 0x74
 8004732:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004736:	f7fb fd65 	bl	8000204 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4613      	mov	r3, r2
 8004740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004744:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800475a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800475e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004762:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004766:	e0eb      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004768:	4b38      	ldr	r3, [pc, #224]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004770:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004774:	4b35      	ldr	r3, [pc, #212]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d06b      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004780:	4b32      	ldr	r3, [pc, #200]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	2200      	movs	r2, #0
 8004788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800478a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800478c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	663b      	str	r3, [r7, #96]	@ 0x60
 8004794:	2300      	movs	r3, #0
 8004796:	667b      	str	r3, [r7, #100]	@ 0x64
 8004798:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800479c:	4622      	mov	r2, r4
 800479e:	462b      	mov	r3, r5
 80047a0:	f04f 0000 	mov.w	r0, #0
 80047a4:	f04f 0100 	mov.w	r1, #0
 80047a8:	0159      	lsls	r1, r3, #5
 80047aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ae:	0150      	lsls	r0, r2, #5
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4621      	mov	r1, r4
 80047b6:	1a51      	subs	r1, r2, r1
 80047b8:	61b9      	str	r1, [r7, #24]
 80047ba:	4629      	mov	r1, r5
 80047bc:	eb63 0301 	sbc.w	r3, r3, r1
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80047ce:	4659      	mov	r1, fp
 80047d0:	018b      	lsls	r3, r1, #6
 80047d2:	4651      	mov	r1, sl
 80047d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047d8:	4651      	mov	r1, sl
 80047da:	018a      	lsls	r2, r1, #6
 80047dc:	4651      	mov	r1, sl
 80047de:	ebb2 0801 	subs.w	r8, r2, r1
 80047e2:	4659      	mov	r1, fp
 80047e4:	eb63 0901 	sbc.w	r9, r3, r1
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fc:	4690      	mov	r8, r2
 80047fe:	4699      	mov	r9, r3
 8004800:	4623      	mov	r3, r4
 8004802:	eb18 0303 	adds.w	r3, r8, r3
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	462b      	mov	r3, r5
 800480a:	eb49 0303 	adc.w	r3, r9, r3
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800481c:	4629      	mov	r1, r5
 800481e:	024b      	lsls	r3, r1, #9
 8004820:	4621      	mov	r1, r4
 8004822:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004826:	4621      	mov	r1, r4
 8004828:	024a      	lsls	r2, r1, #9
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004832:	2200      	movs	r2, #0
 8004834:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004836:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004838:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800483c:	f7fb fce2 	bl	8000204 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800484a:	e065      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x420>
 800484c:	40023800 	.word	0x40023800
 8004850:	00f42400 	.word	0x00f42400
 8004854:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004858:	4b3d      	ldr	r3, [pc, #244]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x458>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	099b      	lsrs	r3, r3, #6
 800485e:	2200      	movs	r2, #0
 8004860:	4618      	mov	r0, r3
 8004862:	4611      	mov	r1, r2
 8004864:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004868:	653b      	str	r3, [r7, #80]	@ 0x50
 800486a:	2300      	movs	r3, #0
 800486c:	657b      	str	r3, [r7, #84]	@ 0x54
 800486e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004872:	4642      	mov	r2, r8
 8004874:	464b      	mov	r3, r9
 8004876:	f04f 0000 	mov.w	r0, #0
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	0159      	lsls	r1, r3, #5
 8004880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004884:	0150      	lsls	r0, r2, #5
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4641      	mov	r1, r8
 800488c:	1a51      	subs	r1, r2, r1
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	4649      	mov	r1, r9
 8004892:	eb63 0301 	sbc.w	r3, r3, r1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80048a4:	4659      	mov	r1, fp
 80048a6:	018b      	lsls	r3, r1, #6
 80048a8:	4651      	mov	r1, sl
 80048aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ae:	4651      	mov	r1, sl
 80048b0:	018a      	lsls	r2, r1, #6
 80048b2:	4651      	mov	r1, sl
 80048b4:	1a54      	subs	r4, r2, r1
 80048b6:	4659      	mov	r1, fp
 80048b8:	eb63 0501 	sbc.w	r5, r3, r1
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	00eb      	lsls	r3, r5, #3
 80048c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ca:	00e2      	lsls	r2, r4, #3
 80048cc:	4614      	mov	r4, r2
 80048ce:	461d      	mov	r5, r3
 80048d0:	4643      	mov	r3, r8
 80048d2:	18e3      	adds	r3, r4, r3
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	464b      	mov	r3, r9
 80048d8:	eb45 0303 	adc.w	r3, r5, r3
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ea:	4629      	mov	r1, r5
 80048ec:	028b      	lsls	r3, r1, #10
 80048ee:	4621      	mov	r1, r4
 80048f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048f4:	4621      	mov	r1, r4
 80048f6:	028a      	lsls	r2, r1, #10
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004900:	2200      	movs	r2, #0
 8004902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004904:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004906:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800490a:	f7fb fc7b 	bl	8000204 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4613      	mov	r3, r2
 8004914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004918:	4b0d      	ldr	r3, [pc, #52]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x458>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	0f1b      	lsrs	r3, r3, #28
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800492a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800492e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004932:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004936:	e003      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x45c>)
 800493a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800493e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004944:	4618      	mov	r0, r3
 8004946:	37b8      	adds	r7, #184	@ 0xb8
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	00f42400 	.word	0x00f42400

08004958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e28d      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8083 	beq.w	8004a7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004978:	4b94      	ldr	r3, [pc, #592]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b04      	cmp	r3, #4
 8004982:	d019      	beq.n	80049b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004984:	4b91      	ldr	r3, [pc, #580]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800498c:	2b08      	cmp	r3, #8
 800498e:	d106      	bne.n	800499e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004990:	4b8e      	ldr	r3, [pc, #568]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800499c:	d00c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499e:	4b8b      	ldr	r3, [pc, #556]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d112      	bne.n	80049d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049aa:	4b88      	ldr	r3, [pc, #544]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4b84      	ldr	r3, [pc, #528]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x124>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d157      	bne.n	8004a7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e25a      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x90>
 80049da:	4b7c      	ldr	r3, [pc, #496]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7b      	ldr	r2, [pc, #492]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xcc>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0xb4>
 80049f2:	4b76      	ldr	r3, [pc, #472]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a75      	ldr	r2, [pc, #468]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b73      	ldr	r3, [pc, #460]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a72      	ldr	r2, [pc, #456]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xcc>
 8004a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a6e      	ldr	r2, [pc, #440]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b6c      	ldr	r3, [pc, #432]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6b      	ldr	r2, [pc, #428]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fc fc74 	bl	8001318 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fc fc70 	bl	8001318 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e21f      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b61      	ldr	r3, [pc, #388]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xdc>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fc fc60 	bl	8001318 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fc fc5c 	bl	8001318 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e20b      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	4b57      	ldr	r3, [pc, #348]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x104>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d06f      	beq.n	8004b6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a8a:	4b50      	ldr	r3, [pc, #320]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d017      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a96:	4b4d      	ldr	r3, [pc, #308]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d105      	bne.n	8004aae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aae:	4b47      	ldr	r3, [pc, #284]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d11c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aba:	4b44      	ldr	r3, [pc, #272]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d116      	bne.n	8004af4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac6:	4b41      	ldr	r3, [pc, #260]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_RCC_OscConfig+0x186>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d001      	beq.n	8004ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e1d3      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ade:	4b3b      	ldr	r3, [pc, #236]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4937      	ldr	r1, [pc, #220]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af2:	e03a      	b.n	8004b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d020      	beq.n	8004b3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004afc:	4b34      	ldr	r3, [pc, #208]	@ (8004bd0 <HAL_RCC_OscConfig+0x278>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fc fc09 	bl	8001318 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0a:	f7fc fc05 	bl	8001318 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e1b4      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b28:	4b28      	ldr	r3, [pc, #160]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4925      	ldr	r1, [pc, #148]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	600b      	str	r3, [r1, #0]
 8004b3c:	e015      	b.n	8004b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3e:	4b24      	ldr	r3, [pc, #144]	@ (8004bd0 <HAL_RCC_OscConfig+0x278>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fc fbe8 	bl	8001318 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b4c:	f7fc fbe4 	bl	8001318 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e193      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d036      	beq.n	8004be4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b7e:	4b15      	ldr	r3, [pc, #84]	@ (8004bd4 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fc fbc8 	bl	8001318 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b8c:	f7fc fbc4 	bl	8001318 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e173      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x234>
 8004baa:	e01b      	b.n	8004be4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bac:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <HAL_RCC_OscConfig+0x27c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb2:	f7fc fbb1 	bl	8001318 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb8:	e00e      	b.n	8004bd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bba:	f7fc fbad 	bl	8001318 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d907      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e15c      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	42470000 	.word	0x42470000
 8004bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1ea      	bne.n	8004bba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8097 	beq.w	8004d20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf6:	4b83      	ldr	r3, [pc, #524]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10f      	bne.n	8004c22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	4b7f      	ldr	r3, [pc, #508]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c12:	4b7c      	ldr	r3, [pc, #496]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c22:	4b79      	ldr	r3, [pc, #484]	@ (8004e08 <HAL_RCC_OscConfig+0x4b0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d118      	bne.n	8004c60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c2e:	4b76      	ldr	r3, [pc, #472]	@ (8004e08 <HAL_RCC_OscConfig+0x4b0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a75      	ldr	r2, [pc, #468]	@ (8004e08 <HAL_RCC_OscConfig+0x4b0>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3a:	f7fc fb6d 	bl	8001318 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c42:	f7fc fb69 	bl	8001318 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e118      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c54:	4b6c      	ldr	r3, [pc, #432]	@ (8004e08 <HAL_RCC_OscConfig+0x4b0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d106      	bne.n	8004c76 <HAL_RCC_OscConfig+0x31e>
 8004c68:	4b66      	ldr	r3, [pc, #408]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	4a65      	ldr	r2, [pc, #404]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c74:	e01c      	b.n	8004cb0 <HAL_RCC_OscConfig+0x358>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x340>
 8004c7e:	4b61      	ldr	r3, [pc, #388]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	4a60      	ldr	r2, [pc, #384]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c84:	f043 0304 	orr.w	r3, r3, #4
 8004c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8e:	4a5d      	ldr	r2, [pc, #372]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c96:	e00b      	b.n	8004cb0 <HAL_RCC_OscConfig+0x358>
 8004c98:	4b5a      	ldr	r3, [pc, #360]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9c:	4a59      	ldr	r2, [pc, #356]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca4:	4b57      	ldr	r3, [pc, #348]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca8:	4a56      	ldr	r2, [pc, #344]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004caa:	f023 0304 	bic.w	r3, r3, #4
 8004cae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb8:	f7fc fb2e 	bl	8001318 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc0:	f7fc fb2a 	bl	8001318 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e0d7      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0ee      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x368>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fc fb18 	bl	8001318 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cec:	f7fc fb14 	bl	8001318 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e0c1      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d02:	4b40      	ldr	r3, [pc, #256]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1ee      	bne.n	8004cec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d105      	bne.n	8004d20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d14:	4b3b      	ldr	r3, [pc, #236]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	4a3a      	ldr	r2, [pc, #232]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80ad 	beq.w	8004e84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d2a:	4b36      	ldr	r3, [pc, #216]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d060      	beq.n	8004df8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d145      	bne.n	8004dca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3e:	4b33      	ldr	r3, [pc, #204]	@ (8004e0c <HAL_RCC_OscConfig+0x4b4>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fc fae8 	bl	8001318 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fc fae4 	bl	8001318 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e093      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5e:	4b29      	ldr	r3, [pc, #164]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	019b      	lsls	r3, r3, #6
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	3b01      	subs	r3, #1
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	061b      	lsls	r3, r3, #24
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	071b      	lsls	r3, r3, #28
 8004d96:	491b      	ldr	r1, [pc, #108]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e0c <HAL_RCC_OscConfig+0x4b4>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da2:	f7fc fab9 	bl	8001318 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004daa:	f7fc fab5 	bl	8001318 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e064      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbc:	4b11      	ldr	r3, [pc, #68]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x452>
 8004dc8:	e05c      	b.n	8004e84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b10      	ldr	r3, [pc, #64]	@ (8004e0c <HAL_RCC_OscConfig+0x4b4>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fc faa2 	bl	8001318 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fc fa9e 	bl	8001318 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e04d      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x480>
 8004df6:	e045      	b.n	8004e84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e040      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40007000 	.word	0x40007000
 8004e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e10:	4b1f      	ldr	r3, [pc, #124]	@ (8004e90 <HAL_RCC_OscConfig+0x538>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d030      	beq.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d129      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d122      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d119      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d10f      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800

08004e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e041      	b.n	8004f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc f816 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fb28 	bl	8005528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e041      	b.n	8004fc8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7fc f805 	bl	8000f68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4610      	mov	r0, r2
 8004f72:	f000 fad9 	bl	8005528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01b      	beq.n	8005034 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0202 	mvn.w	r2, #2
 8005004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa65 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa57 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fa68 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d020      	beq.n	8005080 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0204 	mvn.w	r2, #4
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa3f 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa31 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fa42 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d020      	beq.n	80050cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0208 	mvn.w	r2, #8
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2204      	movs	r2, #4
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa19 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa0b 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fa1c 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d020      	beq.n	8005118 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0210 	mvn.w	r2, #16
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2208      	movs	r2, #8
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f9f3 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f9e5 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f9f6 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0201 	mvn.w	r2, #1
 8005134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f9c3 	bl	80054c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00c      	beq.n	8005160 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fdb2 	bl	8005cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9c7 	bl	8005512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00c      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0220 	mvn.w	r2, #32
 80051a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fd84 	bl	8005cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e0ae      	b.n	800532c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	f200 809f 	bhi.w	800531c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051de:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005219 	.word	0x08005219
 80051e8:	0800531d 	.word	0x0800531d
 80051ec:	0800531d 	.word	0x0800531d
 80051f0:	0800531d 	.word	0x0800531d
 80051f4:	08005259 	.word	0x08005259
 80051f8:	0800531d 	.word	0x0800531d
 80051fc:	0800531d 	.word	0x0800531d
 8005200:	0800531d 	.word	0x0800531d
 8005204:	0800529b 	.word	0x0800529b
 8005208:	0800531d 	.word	0x0800531d
 800520c:	0800531d 	.word	0x0800531d
 8005210:	0800531d 	.word	0x0800531d
 8005214:	080052db 	.word	0x080052db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fa2e 	bl	8005680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0208 	orr.w	r2, r2, #8
 8005232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	619a      	str	r2, [r3, #24]
      break;
 8005256:	e064      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fa7e 	bl	8005760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6999      	ldr	r1, [r3, #24]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	619a      	str	r2, [r3, #24]
      break;
 8005298:	e043      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fad3 	bl	800584c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0208 	orr.w	r2, r2, #8
 80052b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0204 	bic.w	r2, r2, #4
 80052c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69d9      	ldr	r1, [r3, #28]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	61da      	str	r2, [r3, #28]
      break;
 80052d8:	e023      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fb27 	bl	8005934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69d9      	ldr	r1, [r3, #28]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	021a      	lsls	r2, r3, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	61da      	str	r2, [r3, #28]
      break;
 800531a:	e002      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
      break;
 8005320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800532a:	7dfb      	ldrb	r3, [r7, #23]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_TIM_ConfigClockSource+0x1c>
 800534c:	2302      	movs	r3, #2
 800534e:	e0b4      	b.n	80054ba <HAL_TIM_ConfigClockSource+0x186>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800536e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005388:	d03e      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0xd4>
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538e:	f200 8087 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005396:	f000 8086 	beq.w	80054a6 <HAL_TIM_ConfigClockSource+0x172>
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800539e:	d87f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b70      	cmp	r3, #112	@ 0x70
 80053a2:	d01a      	beq.n	80053da <HAL_TIM_ConfigClockSource+0xa6>
 80053a4:	2b70      	cmp	r3, #112	@ 0x70
 80053a6:	d87b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b60      	cmp	r3, #96	@ 0x60
 80053aa:	d050      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x11a>
 80053ac:	2b60      	cmp	r3, #96	@ 0x60
 80053ae:	d877      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b50      	cmp	r3, #80	@ 0x50
 80053b2:	d03c      	beq.n	800542e <HAL_TIM_ConfigClockSource+0xfa>
 80053b4:	2b50      	cmp	r3, #80	@ 0x50
 80053b6:	d873      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	d058      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x13a>
 80053bc:	2b40      	cmp	r3, #64	@ 0x40
 80053be:	d86f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b30      	cmp	r3, #48	@ 0x30
 80053c2:	d064      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053c4:	2b30      	cmp	r3, #48	@ 0x30
 80053c6:	d86b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d060      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d867      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d05c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d05a      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053d8:	e062      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ea:	f000 fb73 	bl	8005ad4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	609a      	str	r2, [r3, #8]
      break;
 8005406:	e04f      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	f000 fb5c 	bl	8005ad4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800542a:	609a      	str	r2, [r3, #8]
      break;
 800542c:	e03c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	461a      	mov	r2, r3
 800543c:	f000 fad0 	bl	80059e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2150      	movs	r1, #80	@ 0x50
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fb29 	bl	8005a9e <TIM_ITRx_SetConfig>
      break;
 800544c:	e02c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800545a:	461a      	mov	r2, r3
 800545c:	f000 faef 	bl	8005a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2160      	movs	r1, #96	@ 0x60
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fb19 	bl	8005a9e <TIM_ITRx_SetConfig>
      break;
 800546c:	e01c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fab0 	bl	80059e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2140      	movs	r1, #64	@ 0x40
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fb09 	bl	8005a9e <TIM_ITRx_SetConfig>
      break;
 800548c:	e00c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f000 fb00 	bl	8005a9e <TIM_ITRx_SetConfig>
      break;
 800549e:	e003      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a46      	ldr	r2, [pc, #280]	@ (8005654 <TIM_Base_SetConfig+0x12c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005546:	d00f      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a43      	ldr	r2, [pc, #268]	@ (8005658 <TIM_Base_SetConfig+0x130>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00b      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a42      	ldr	r2, [pc, #264]	@ (800565c <TIM_Base_SetConfig+0x134>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d007      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a41      	ldr	r2, [pc, #260]	@ (8005660 <TIM_Base_SetConfig+0x138>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a40      	ldr	r2, [pc, #256]	@ (8005664 <TIM_Base_SetConfig+0x13c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d108      	bne.n	800557a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a35      	ldr	r2, [pc, #212]	@ (8005654 <TIM_Base_SetConfig+0x12c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d02b      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005588:	d027      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a32      	ldr	r2, [pc, #200]	@ (8005658 <TIM_Base_SetConfig+0x130>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d023      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a31      	ldr	r2, [pc, #196]	@ (800565c <TIM_Base_SetConfig+0x134>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01f      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a30      	ldr	r2, [pc, #192]	@ (8005660 <TIM_Base_SetConfig+0x138>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01b      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005664 <TIM_Base_SetConfig+0x13c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d017      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005668 <TIM_Base_SetConfig+0x140>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2d      	ldr	r2, [pc, #180]	@ (800566c <TIM_Base_SetConfig+0x144>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005670 <TIM_Base_SetConfig+0x148>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005674 <TIM_Base_SetConfig+0x14c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005678 <TIM_Base_SetConfig+0x150>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a29      	ldr	r2, [pc, #164]	@ (800567c <TIM_Base_SetConfig+0x154>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d108      	bne.n	80055ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a10      	ldr	r2, [pc, #64]	@ (8005654 <TIM_Base_SetConfig+0x12c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_Base_SetConfig+0xf8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a12      	ldr	r2, [pc, #72]	@ (8005664 <TIM_Base_SetConfig+0x13c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d103      	bne.n	8005628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b01      	cmp	r3, #1
 8005638:	d105      	bne.n	8005646 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f023 0201 	bic.w	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	611a      	str	r2, [r3, #16]
  }
}
 8005646:	bf00      	nop
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40010000 	.word	0x40010000
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40010400 	.word	0x40010400
 8005668:	40014000 	.word	0x40014000
 800566c:	40014400 	.word	0x40014400
 8005670:	40014800 	.word	0x40014800
 8005674:	40001800 	.word	0x40001800
 8005678:	40001c00 	.word	0x40001c00
 800567c:	40002000 	.word	0x40002000

08005680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f023 0201 	bic.w	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 0302 	bic.w	r3, r3, #2
 80056c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a20      	ldr	r2, [pc, #128]	@ (8005758 <TIM_OC1_SetConfig+0xd8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d003      	beq.n	80056e4 <TIM_OC1_SetConfig+0x64>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a1f      	ldr	r2, [pc, #124]	@ (800575c <TIM_OC1_SetConfig+0xdc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d10c      	bne.n	80056fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 0308 	bic.w	r3, r3, #8
 80056ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f023 0304 	bic.w	r3, r3, #4
 80056fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a15      	ldr	r2, [pc, #84]	@ (8005758 <TIM_OC1_SetConfig+0xd8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC1_SetConfig+0x8e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a14      	ldr	r2, [pc, #80]	@ (800575c <TIM_OC1_SetConfig+0xdc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d111      	bne.n	8005732 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800571c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40010000 	.word	0x40010000
 800575c:	40010400 	.word	0x40010400

08005760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f023 0210 	bic.w	r2, r3, #16
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0320 	bic.w	r3, r3, #32
 80057aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a22      	ldr	r2, [pc, #136]	@ (8005844 <TIM_OC2_SetConfig+0xe4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_OC2_SetConfig+0x68>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a21      	ldr	r2, [pc, #132]	@ (8005848 <TIM_OC2_SetConfig+0xe8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d10d      	bne.n	80057e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a17      	ldr	r2, [pc, #92]	@ (8005844 <TIM_OC2_SetConfig+0xe4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC2_SetConfig+0x94>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a16      	ldr	r2, [pc, #88]	@ (8005848 <TIM_OC2_SetConfig+0xe8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d113      	bne.n	800581c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	621a      	str	r2, [r3, #32]
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40010400 	.word	0x40010400

0800584c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a21      	ldr	r2, [pc, #132]	@ (800592c <TIM_OC3_SetConfig+0xe0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_OC3_SetConfig+0x66>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a20      	ldr	r2, [pc, #128]	@ (8005930 <TIM_OC3_SetConfig+0xe4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d10d      	bne.n	80058ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a16      	ldr	r2, [pc, #88]	@ (800592c <TIM_OC3_SetConfig+0xe0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d003      	beq.n	80058de <TIM_OC3_SetConfig+0x92>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a15      	ldr	r2, [pc, #84]	@ (8005930 <TIM_OC3_SetConfig+0xe4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d113      	bne.n	8005906 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	621a      	str	r2, [r3, #32]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400

08005934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800596a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800597e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	031b      	lsls	r3, r3, #12
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a12      	ldr	r2, [pc, #72]	@ (80059d8 <TIM_OC4_SetConfig+0xa4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_OC4_SetConfig+0x68>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a11      	ldr	r2, [pc, #68]	@ (80059dc <TIM_OC4_SetConfig+0xa8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d109      	bne.n	80059b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	019b      	lsls	r3, r3, #6
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40010400 	.word	0x40010400

080059e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f023 0201 	bic.w	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f023 030a 	bic.w	r3, r3, #10
 8005a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b087      	sub	sp, #28
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f023 0210 	bic.w	r2, r3, #16
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	031b      	lsls	r3, r3, #12
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f043 0307 	orr.w	r3, r3, #7
 8005ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	609a      	str	r2, [r3, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	021a      	lsls	r2, r3, #8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	609a      	str	r2, [r3, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e05a      	b.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a21      	ldr	r2, [pc, #132]	@ (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d022      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b78:	d01d      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d018      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1a      	ldr	r2, [pc, #104]	@ (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00e      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a18      	ldr	r2, [pc, #96]	@ (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a17      	ldr	r2, [pc, #92]	@ (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d004      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	@ (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40010400 	.word	0x40010400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40001800 	.word	0x40001800

08005c0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e03d      	b.n	8005ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <memset>:
 8005cd8:	4402      	add	r2, r0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d100      	bne.n	8005ce2 <memset+0xa>
 8005ce0:	4770      	bx	lr
 8005ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce6:	e7f9      	b.n	8005cdc <memset+0x4>

08005ce8 <__libc_init_array>:
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	4d0d      	ldr	r5, [pc, #52]	@ (8005d20 <__libc_init_array+0x38>)
 8005cec:	4c0d      	ldr	r4, [pc, #52]	@ (8005d24 <__libc_init_array+0x3c>)
 8005cee:	1b64      	subs	r4, r4, r5
 8005cf0:	10a4      	asrs	r4, r4, #2
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	42a6      	cmp	r6, r4
 8005cf6:	d109      	bne.n	8005d0c <__libc_init_array+0x24>
 8005cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8005d28 <__libc_init_array+0x40>)
 8005cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8005d2c <__libc_init_array+0x44>)
 8005cfc:	f000 f818 	bl	8005d30 <_init>
 8005d00:	1b64      	subs	r4, r4, r5
 8005d02:	10a4      	asrs	r4, r4, #2
 8005d04:	2600      	movs	r6, #0
 8005d06:	42a6      	cmp	r6, r4
 8005d08:	d105      	bne.n	8005d16 <__libc_init_array+0x2e>
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}
 8005d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d10:	4798      	blx	r3
 8005d12:	3601      	adds	r6, #1
 8005d14:	e7ee      	b.n	8005cf4 <__libc_init_array+0xc>
 8005d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d1a:	4798      	blx	r3
 8005d1c:	3601      	adds	r6, #1
 8005d1e:	e7f2      	b.n	8005d06 <__libc_init_array+0x1e>
 8005d20:	08005d68 	.word	0x08005d68
 8005d24:	08005d68 	.word	0x08005d68
 8005d28:	08005d68 	.word	0x08005d68
 8005d2c:	08005d6c 	.word	0x08005d6c

08005d30 <_init>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	bf00      	nop
 8005d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d36:	bc08      	pop	{r3}
 8005d38:	469e      	mov	lr, r3
 8005d3a:	4770      	bx	lr

08005d3c <_fini>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	bf00      	nop
 8005d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d42:	bc08      	pop	{r3}
 8005d44:	469e      	mov	lr, r3
 8005d46:	4770      	bx	lr
